
PCA-34.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00803800  000016a6  0000175a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001694  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000012  00009694  00001694  00001748  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000025  00803806  00803806  00001760  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00001760  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017bc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000100  00000000  00000000  000017fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003ac9  00000000  00000000  000018fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002020  00000000  00000000  000053c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001050  00000000  00000000  000073e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003ec  00000000  00000000  00008438  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000135b  00000000  00000000  00008824  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000018dd  00000000  00000000  00009b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e8  00000000  00000000  0000b45c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__vector_3>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__vector_25>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	cd bf       	out	0x3d, r28	; 61
      84:	df e3       	ldi	r29, 0x3F	; 63
      86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_clear_bss>:
      88:	28 e3       	ldi	r18, 0x38	; 56
      8a:	a6 e0       	ldi	r26, 0x06	; 6
      8c:	b8 e3       	ldi	r27, 0x38	; 56
      8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
      90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
      92:	ab 32       	cpi	r26, 0x2B	; 43
      94:	b2 07       	cpc	r27, r18
      96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>

00000098 <__do_copy_data>:
      98:	18 e3       	ldi	r17, 0x38	; 56
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b8 e3       	ldi	r27, 0x38	; 56
      9e:	e6 ea       	ldi	r30, 0xA6	; 166
      a0:	f6 e1       	ldi	r31, 0x16	; 22
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a6 30       	cpi	r26, 0x06	; 6
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>
      ae:	0e 94 78 04 	call	0x8f0	; 0x8f0 <main>
      b2:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <load_custom_characters>:
		_delay_ms(10);
	}
}

void load_custom_characters()
{
      ba:	0f 93       	push	r16
      bc:	1f 93       	push	r17
      be:	cf 93       	push	r28
      c0:	df 93       	push	r29
      c2:	00 d0       	rcall	.+0      	; 0xc4 <load_custom_characters+0xa>
      c4:	cd b7       	in	r28, 0x3d	; 61
      c6:	de b7       	in	r29, 0x3e	; 62
	
	unsigned char message[2];
	message[0] = (0x00);							//Control bit with continuous data stream
      c8:	19 82       	std	Y+1, r1	; 0x01
	message[1] = (0x38);							//Function Set (8-bit data, 1 Line 5x8 character mode, Normal Instruction Table Chosen)
      ca:	88 e3       	ldi	r24, 0x38	; 56
      cc:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
      ce:	22 e0       	ldi	r18, 0x02	; 2
      d0:	ae 01       	movw	r20, r28
      d2:	4f 5f       	subi	r20, 0xFF	; 255
      d4:	5f 4f       	sbci	r21, 0xFF	; 255
      d6:	6c e3       	ldi	r22, 0x3C	; 60
      d8:	89 e0       	ldi	r24, 0x09	; 9
      da:	98 e3       	ldi	r25, 0x38	; 56
      dc:	0e 94 96 06 	call	0xd2c	; 0xd2c <TWI_MasterWrite>
	while(twiMaster.status == 1);
      e0:	e9 e0       	ldi	r30, 0x09	; 9
      e2:	f8 e3       	ldi	r31, 0x38	; 56
      e4:	87 89       	ldd	r24, Z+23	; 0x17
      e6:	81 30       	cpi	r24, 0x01	; 1
      e8:	e9 f3       	breq	.-6      	; 0xe4 <load_custom_characters+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ea:	87 e8       	ldi	r24, 0x87	; 135
      ec:	93 e1       	ldi	r25, 0x13	; 19
      ee:	01 97       	sbiw	r24, 0x01	; 1
      f0:	f1 f7       	brne	.-4      	; 0xee <load_custom_characters+0x34>
      f2:	00 c0       	rjmp	.+0      	; 0xf4 <load_custom_characters+0x3a>
      f4:	00 00       	nop
	_delay_ms(10);
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
      f6:	80 91 21 38 	lds	r24, 0x3821	; 0x803821 <twiMaster+0x18>
      fa:	85 30       	cpi	r24, 0x05	; 5
      fc:	c9 f4       	brne	.+50     	; 0x130 <load_custom_characters+0x76>
	{
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
      fe:	09 e0       	ldi	r16, 0x09	; 9
     100:	18 e3       	ldi	r17, 0x38	; 56
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
	while(twiMaster.status == 1);
	_delay_ms(10);
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
	{
		initialize_Screen();
     102:	0e 94 47 01 	call	0x28e	; 0x28e <initialize_Screen>
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
     106:	22 e0       	ldi	r18, 0x02	; 2
     108:	ae 01       	movw	r20, r28
     10a:	4f 5f       	subi	r20, 0xFF	; 255
     10c:	5f 4f       	sbci	r21, 0xFF	; 255
     10e:	6c e3       	ldi	r22, 0x3C	; 60
     110:	c8 01       	movw	r24, r16
     112:	0e 94 96 06 	call	0xd2c	; 0xd2c <TWI_MasterWrite>
		while(twiMaster.status == 1);
     116:	f8 01       	movw	r30, r16
     118:	87 89       	ldd	r24, Z+23	; 0x17
     11a:	81 30       	cpi	r24, 0x01	; 1
     11c:	e1 f3       	breq	.-8      	; 0x116 <load_custom_characters+0x5c>
     11e:	87 e8       	ldi	r24, 0x87	; 135
     120:	93 e1       	ldi	r25, 0x13	; 19
     122:	01 97       	sbiw	r24, 0x01	; 1
     124:	f1 f7       	brne	.-4      	; 0x122 <load_custom_characters+0x68>
     126:	00 c0       	rjmp	.+0      	; 0x128 <load_custom_characters+0x6e>
     128:	00 00       	nop
	message[0] = (0x00);							//Control bit with continuous data stream
	message[1] = (0x38);							//Function Set (8-bit data, 1 Line 5x8 character mode, Normal Instruction Table Chosen)
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
	while(twiMaster.status == 1);
	_delay_ms(10);
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
     12a:	80 8d       	ldd	r24, Z+24	; 0x18
     12c:	85 30       	cpi	r24, 0x05	; 5
     12e:	49 f3       	breq	.-46     	; 0x102 <load_custom_characters+0x48>
		while(twiMaster.status == 1);
		_delay_ms(10);
	}
	
	// 1 bar
	lcd_command(SET_CGRAM_ADDRESS);
     130:	80 e4       	ldi	r24, 0x40	; 64
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000010000);
     138:	80 e1       	ldi	r24, 0x10	; 16
     13a:	91 e0       	ldi	r25, 0x01	; 1
     13c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000010000);
     140:	80 e1       	ldi	r24, 0x10	; 16
     142:	91 e0       	ldi	r25, 0x01	; 1
     144:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000010000);
     148:	80 e1       	ldi	r24, 0x10	; 16
     14a:	91 e0       	ldi	r25, 0x01	; 1
     14c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000010000);
     150:	80 e1       	ldi	r24, 0x10	; 16
     152:	91 e0       	ldi	r25, 0x01	; 1
     154:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000010000);
     158:	80 e1       	ldi	r24, 0x10	; 16
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000010000);
     160:	80 e1       	ldi	r24, 0x10	; 16
     162:	91 e0       	ldi	r25, 0x01	; 1
     164:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000010000);
     168:	80 e1       	ldi	r24, 0x10	; 16
     16a:	91 e0       	ldi	r25, 0x01	; 1
     16c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000010000);
     170:	80 e1       	ldi	r24, 0x10	; 16
     172:	91 e0       	ldi	r25, 0x01	; 1
     174:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	//2 bar
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011000);
     178:	88 e1       	ldi	r24, 0x18	; 24
     17a:	91 e0       	ldi	r25, 0x01	; 1
     17c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011000);
     180:	88 e1       	ldi	r24, 0x18	; 24
     182:	91 e0       	ldi	r25, 0x01	; 1
     184:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011000);
     188:	88 e1       	ldi	r24, 0x18	; 24
     18a:	91 e0       	ldi	r25, 0x01	; 1
     18c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011000);
     190:	88 e1       	ldi	r24, 0x18	; 24
     192:	91 e0       	ldi	r25, 0x01	; 1
     194:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011000);
     198:	88 e1       	ldi	r24, 0x18	; 24
     19a:	91 e0       	ldi	r25, 0x01	; 1
     19c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011000);
     1a0:	88 e1       	ldi	r24, 0x18	; 24
     1a2:	91 e0       	ldi	r25, 0x01	; 1
     1a4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011000);
     1a8:	88 e1       	ldi	r24, 0x18	; 24
     1aa:	91 e0       	ldi	r25, 0x01	; 1
     1ac:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011000);
     1b0:	88 e1       	ldi	r24, 0x18	; 24
     1b2:	91 e0       	ldi	r25, 0x01	; 1
     1b4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	//3 bar
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011100);
     1b8:	8c e1       	ldi	r24, 0x1C	; 28
     1ba:	91 e0       	ldi	r25, 0x01	; 1
     1bc:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011100);
     1c0:	8c e1       	ldi	r24, 0x1C	; 28
     1c2:	91 e0       	ldi	r25, 0x01	; 1
     1c4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011100);
     1c8:	8c e1       	ldi	r24, 0x1C	; 28
     1ca:	91 e0       	ldi	r25, 0x01	; 1
     1cc:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011100);
     1d0:	8c e1       	ldi	r24, 0x1C	; 28
     1d2:	91 e0       	ldi	r25, 0x01	; 1
     1d4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011100);
     1d8:	8c e1       	ldi	r24, 0x1C	; 28
     1da:	91 e0       	ldi	r25, 0x01	; 1
     1dc:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011100);
     1e0:	8c e1       	ldi	r24, 0x1C	; 28
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011100);
     1e8:	8c e1       	ldi	r24, 0x1C	; 28
     1ea:	91 e0       	ldi	r25, 0x01	; 1
     1ec:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011100);
     1f0:	8c e1       	ldi	r24, 0x1C	; 28
     1f2:	91 e0       	ldi	r25, 0x01	; 1
     1f4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	//4 bar
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011110);
     1f8:	8e e1       	ldi	r24, 0x1E	; 30
     1fa:	91 e0       	ldi	r25, 0x01	; 1
     1fc:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011110);
     200:	8e e1       	ldi	r24, 0x1E	; 30
     202:	91 e0       	ldi	r25, 0x01	; 1
     204:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011110);
     208:	8e e1       	ldi	r24, 0x1E	; 30
     20a:	91 e0       	ldi	r25, 0x01	; 1
     20c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011110);
     210:	8e e1       	ldi	r24, 0x1E	; 30
     212:	91 e0       	ldi	r25, 0x01	; 1
     214:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011110);
     218:	8e e1       	ldi	r24, 0x1E	; 30
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011110);
     220:	8e e1       	ldi	r24, 0x1E	; 30
     222:	91 e0       	ldi	r25, 0x01	; 1
     224:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011110);
     228:	8e e1       	ldi	r24, 0x1E	; 30
     22a:	91 e0       	ldi	r25, 0x01	; 1
     22c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011110);
     230:	8e e1       	ldi	r24, 0x1E	; 30
     232:	91 e0       	ldi	r25, 0x01	; 1
     234:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	//5 bar
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     238:	8f e1       	ldi	r24, 0x1F	; 31
     23a:	91 e0       	ldi	r25, 0x01	; 1
     23c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     240:	8f e1       	ldi	r24, 0x1F	; 31
     242:	91 e0       	ldi	r25, 0x01	; 1
     244:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     248:	8f e1       	ldi	r24, 0x1F	; 31
     24a:	91 e0       	ldi	r25, 0x01	; 1
     24c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     250:	8f e1       	ldi	r24, 0x1F	; 31
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     258:	8f e1       	ldi	r24, 0x1F	; 31
     25a:	91 e0       	ldi	r25, 0x01	; 1
     25c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     260:	8f e1       	ldi	r24, 0x1F	; 31
     262:	91 e0       	ldi	r25, 0x01	; 1
     264:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     268:	8f e1       	ldi	r24, 0x1F	; 31
     26a:	91 e0       	ldi	r25, 0x01	; 1
     26c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     270:	8f e1       	ldi	r24, 0x1F	; 31
     272:	91 e0       	ldi	r25, 0x01	; 1
     274:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	lcd_command(SET_DDRAM_ADDRESS);
     278:	80 e8       	ldi	r24, 0x80	; 128
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
     280:	0f 90       	pop	r0
     282:	0f 90       	pop	r0
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	1f 91       	pop	r17
     28a:	0f 91       	pop	r16
     28c:	08 95       	ret

0000028e <initialize_Screen>:
 */ 

#include "lcd_screen.h"

void initialize_Screen()
{
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62
     296:	2a 97       	sbiw	r28, 0x0a	; 10
     298:	cd bf       	out	0x3d, r28	; 61
     29a:	de bf       	out	0x3e, r29	; 62
     29c:	87 ea       	ldi	r24, 0xA7	; 167
     29e:	91 e6       	ldi	r25, 0x61	; 97
     2a0:	01 97       	sbiw	r24, 0x01	; 1
     2a2:	f1 f7       	brne	.-4      	; 0x2a0 <initialize_Screen+0x12>
     2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <initialize_Screen+0x18>
     2a6:	00 00       	nop
	_delay_ms(50);
	unsigned char message[10];
	
	message[0] = (0x00);							//Control bit with continuous data stream
     2a8:	19 82       	std	Y+1, r1	; 0x01
	message[1] = (0x38);							//Function Set (8-bit data, 1 Line 5x8 character mode, Normal Instruction Table Chosen)
     2aa:	88 e3       	ldi	r24, 0x38	; 56
     2ac:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
     2ae:	22 e0       	ldi	r18, 0x02	; 2
     2b0:	ae 01       	movw	r20, r28
     2b2:	4f 5f       	subi	r20, 0xFF	; 255
     2b4:	5f 4f       	sbci	r21, 0xFF	; 255
     2b6:	6c e3       	ldi	r22, 0x3C	; 60
     2b8:	89 e0       	ldi	r24, 0x09	; 9
     2ba:	98 e3       	ldi	r25, 0x38	; 56
     2bc:	0e 94 96 06 	call	0xd2c	; 0xd2c <TWI_MasterWrite>
	while(twiMaster.status == 1);
     2c0:	e9 e0       	ldi	r30, 0x09	; 9
     2c2:	f8 e3       	ldi	r31, 0x38	; 56
     2c4:	87 89       	ldd	r24, Z+23	; 0x17
     2c6:	81 30       	cpi	r24, 0x01	; 1
     2c8:	e9 f3       	breq	.-6      	; 0x2c4 <initialize_Screen+0x36>
     2ca:	87 e8       	ldi	r24, 0x87	; 135
     2cc:	93 e1       	ldi	r25, 0x13	; 19
     2ce:	01 97       	sbiw	r24, 0x01	; 1
     2d0:	f1 f7       	brne	.-4      	; 0x2ce <initialize_Screen+0x40>
     2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <initialize_Screen+0x46>
     2d4:	00 00       	nop
	_delay_ms(10);
	if (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
     2d6:	80 91 21 38 	lds	r24, 0x3821	; 0x803821 <twiMaster+0x18>
     2da:	85 30       	cpi	r24, 0x05	; 5
     2dc:	19 f4       	brne	.+6      	; 0x2e4 <initialize_Screen+0x56>
	{
		initialize_Screen();
     2de:	0e 94 47 01 	call	0x28e	; 0x28e <initialize_Screen>
		return;
     2e2:	50 c0       	rjmp	.+160    	; 0x384 <initialize_Screen+0xf6>
	}
	
	message[0] = (0x00);
     2e4:	19 82       	std	Y+1, r1	; 0x01
	message[1] = (0x39);							//Function Set (8-bit data, 1 Line 5x8 character mode, Extension Instruction Table Chosen)
     2e6:	89 e3       	ldi	r24, 0x39	; 57
     2e8:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
     2ea:	22 e0       	ldi	r18, 0x02	; 2
     2ec:	ae 01       	movw	r20, r28
     2ee:	4f 5f       	subi	r20, 0xFF	; 255
     2f0:	5f 4f       	sbci	r21, 0xFF	; 255
     2f2:	6c e3       	ldi	r22, 0x3C	; 60
     2f4:	89 e0       	ldi	r24, 0x09	; 9
     2f6:	98 e3       	ldi	r25, 0x38	; 56
     2f8:	0e 94 96 06 	call	0xd2c	; 0xd2c <TWI_MasterWrite>
	while(twiMaster.status == 1);
     2fc:	e9 e0       	ldi	r30, 0x09	; 9
     2fe:	f8 e3       	ldi	r31, 0x38	; 56
     300:	87 89       	ldd	r24, Z+23	; 0x17
     302:	81 30       	cpi	r24, 0x01	; 1
     304:	e9 f3       	breq	.-6      	; 0x300 <initialize_Screen+0x72>
     306:	87 e8       	ldi	r24, 0x87	; 135
     308:	93 e1       	ldi	r25, 0x13	; 19
     30a:	01 97       	sbiw	r24, 0x01	; 1
     30c:	f1 f7       	brne	.-4      	; 0x30a <initialize_Screen+0x7c>
     30e:	00 c0       	rjmp	.+0      	; 0x310 <initialize_Screen+0x82>
     310:	00 00       	nop
	_delay_ms(10);
	if (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
     312:	80 91 21 38 	lds	r24, 0x3821	; 0x803821 <twiMaster+0x18>
     316:	85 30       	cpi	r24, 0x05	; 5
     318:	19 f4       	brne	.+6      	; 0x320 <initialize_Screen+0x92>
	{
		initialize_Screen();
     31a:	0e 94 47 01 	call	0x28e	; 0x28e <initialize_Screen>
		return;
     31e:	32 c0       	rjmp	.+100    	; 0x384 <initialize_Screen+0xf6>
	}
	
	message[0] = (0x00);
     320:	19 82       	std	Y+1, r1	; 0x01
	message[1] = (0x14);							//Set frame frequency to 192 Hz and Voltage Bias to 1/5
     322:	84 e1       	ldi	r24, 0x14	; 20
     324:	8a 83       	std	Y+2, r24	; 0x02
	message[2] = (0x78);							//Set contrast bits C3:0 to 8 (C5:0 - 0x28 *C5:4 is part of next data byte)
     326:	88 e7       	ldi	r24, 0x78	; 120
     328:	8b 83       	std	Y+3, r24	; 0x03
	message[3] = (0x5E);							//Turn on Icon Display and Booster Circuit and set C5:4 to 2 for contrast setting
     32a:	8e e5       	ldi	r24, 0x5E	; 94
     32c:	8c 83       	std	Y+4, r24	; 0x04
	message[4] = (0x6D);							//Turn on internal follower circuit and adjust V0 generator amplified ratio (Rab2:0 - 2)
     32e:	8d e6       	ldi	r24, 0x6D	; 109
     330:	8d 83       	std	Y+5, r24	; 0x05
	message[5] = (0x0C);
     332:	8c e0       	ldi	r24, 0x0C	; 12
     334:	8e 83       	std	Y+6, r24	; 0x06
	message[6] = (0x01);
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	8f 83       	std	Y+7, r24	; 0x07
	message[7] = (0x06);
     33a:	86 e0       	ldi	r24, 0x06	; 6
     33c:	88 87       	std	Y+8, r24	; 0x08
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 8);
     33e:	28 e0       	ldi	r18, 0x08	; 8
     340:	ae 01       	movw	r20, r28
     342:	4f 5f       	subi	r20, 0xFF	; 255
     344:	5f 4f       	sbci	r21, 0xFF	; 255
     346:	6c e3       	ldi	r22, 0x3C	; 60
     348:	89 e0       	ldi	r24, 0x09	; 9
     34a:	98 e3       	ldi	r25, 0x38	; 56
     34c:	0e 94 96 06 	call	0xd2c	; 0xd2c <TWI_MasterWrite>
	while(twiMaster.status == 1);
     350:	e9 e0       	ldi	r30, 0x09	; 9
     352:	f8 e3       	ldi	r31, 0x38	; 56
     354:	87 89       	ldd	r24, Z+23	; 0x17
     356:	81 30       	cpi	r24, 0x01	; 1
     358:	e9 f3       	breq	.-6      	; 0x354 <initialize_Screen+0xc6>
     35a:	8f e4       	ldi	r24, 0x4F	; 79
     35c:	93 ec       	ldi	r25, 0xC3	; 195
     35e:	01 97       	sbiw	r24, 0x01	; 1
     360:	f1 f7       	brne	.-4      	; 0x35e <initialize_Screen+0xd0>
     362:	00 c0       	rjmp	.+0      	; 0x364 <initialize_Screen+0xd6>
     364:	00 00       	nop
	_delay_ms(100);
	if (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
     366:	80 91 21 38 	lds	r24, 0x3821	; 0x803821 <twiMaster+0x18>
     36a:	85 30       	cpi	r24, 0x05	; 5
     36c:	19 f4       	brne	.+6      	; 0x374 <initialize_Screen+0xe6>
	{
		initialize_Screen();
     36e:	0e 94 47 01 	call	0x28e	; 0x28e <initialize_Screen>
		return;
     372:	08 c0       	rjmp	.+16     	; 0x384 <initialize_Screen+0xf6>
     374:	87 ea       	ldi	r24, 0xA7	; 167
     376:	91 e6       	ldi	r25, 0x61	; 97
     378:	01 97       	sbiw	r24, 0x01	; 1
     37a:	f1 f7       	brne	.-4      	; 0x378 <initialize_Screen+0xea>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <initialize_Screen+0xf0>
     37e:	00 00       	nop
	}
	
	_delay_ms(50);
	load_custom_characters();
     380:	0e 94 5d 00 	call	0xba	; 0xba <load_custom_characters>
}
     384:	2a 96       	adiw	r28, 0x0a	; 10
     386:	cd bf       	out	0x3d, r28	; 61
     388:	de bf       	out	0x3e, r29	; 62
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	08 95       	ret

00000390 <lcd_write>:
		lcd_command(SET_DDRAM_ADDRESS | (0b0001000000 + x));
	}
}

void lcd_write(char *message)
{
     390:	bf 92       	push	r11
     392:	cf 92       	push	r12
     394:	df 92       	push	r13
     396:	ef 92       	push	r14
     398:	ff 92       	push	r15
     39a:	0f 93       	push	r16
     39c:	1f 93       	push	r17
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, size + 1);
		while(twiMaster.status == 1);
		_delay_ms(10);
	}
}
     3a6:	ed b6       	in	r14, 0x3d	; 61
     3a8:	fe b6       	in	r15, 0x3e	; 62
	}
}

void lcd_write(char *message)
{
	char size = strlen(message);
     3aa:	fc 01       	movw	r30, r24
     3ac:	01 90       	ld	r0, Z+
     3ae:	00 20       	and	r0, r0
     3b0:	e9 f7       	brne	.-6      	; 0x3ac <lcd_write+0x1c>
     3b2:	31 97       	sbiw	r30, 0x01	; 1
     3b4:	9f 01       	movw	r18, r30
     3b6:	28 1b       	sub	r18, r24
     3b8:	39 0b       	sbc	r19, r25
     3ba:	62 2f       	mov	r22, r18
	unsigned char complete_message[size + 1];
     3bc:	a9 01       	movw	r20, r18
     3be:	55 27       	eor	r21, r21
     3c0:	4f 5f       	subi	r20, 0xFF	; 255
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	ed b7       	in	r30, 0x3d	; 61
     3c6:	fe b7       	in	r31, 0x3e	; 62
     3c8:	e4 1b       	sub	r30, r20
     3ca:	f5 0b       	sbc	r31, r21
     3cc:	ed bf       	out	0x3d, r30	; 61
     3ce:	fe bf       	out	0x3e, r31	; 62
     3d0:	4d b7       	in	r20, 0x3d	; 61
     3d2:	5e b7       	in	r21, 0x3e	; 62
     3d4:	4f 5f       	subi	r20, 0xFF	; 255
     3d6:	5f 4f       	sbci	r21, 0xFF	; 255
     3d8:	d4 2e       	mov	r13, r20
     3da:	c5 2e       	mov	r12, r21
	
	complete_message[0] = (0x40);			//Control bit with R/S set high and continuous bytes
     3dc:	70 e4       	ldi	r23, 0x40	; 64
     3de:	71 83       	std	Z+1, r23	; 0x01
	
	for(unsigned char i = 0; i < size; i ++)
     3e0:	22 23       	and	r18, r18
     3e2:	49 f0       	breq	.+18     	; 0x3f6 <lcd_write+0x66>
     3e4:	fc 01       	movw	r30, r24
     3e6:	da 01       	movw	r26, r20
     3e8:	11 96       	adiw	r26, 0x01	; 1
     3ea:	90 e0       	ldi	r25, 0x00	; 0
	{
		complete_message[i + 1] = message[i];
     3ec:	81 91       	ld	r24, Z+
     3ee:	8d 93       	st	X+, r24
	char size = strlen(message);
	unsigned char complete_message[size + 1];
	
	complete_message[0] = (0x40);			//Control bit with R/S set high and continuous bytes
	
	for(unsigned char i = 0; i < size; i ++)
     3f0:	9f 5f       	subi	r25, 0xFF	; 255
     3f2:	69 13       	cpse	r22, r25
     3f4:	fb cf       	rjmp	.-10     	; 0x3ec <lcd_write+0x5c>
	{
		complete_message[i + 1] = message[i];
	}

	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, size + 1);
     3f6:	bb 24       	eor	r11, r11
     3f8:	b3 94       	inc	r11
     3fa:	b2 0e       	add	r11, r18
     3fc:	2b 2d       	mov	r18, r11
     3fe:	6c e3       	ldi	r22, 0x3C	; 60
     400:	89 e0       	ldi	r24, 0x09	; 9
     402:	98 e3       	ldi	r25, 0x38	; 56
     404:	0e 94 96 06 	call	0xd2c	; 0xd2c <TWI_MasterWrite>
	while(twiMaster.status == 1);
     408:	e9 e0       	ldi	r30, 0x09	; 9
     40a:	f8 e3       	ldi	r31, 0x38	; 56
     40c:	87 89       	ldd	r24, Z+23	; 0x17
     40e:	81 30       	cpi	r24, 0x01	; 1
     410:	e9 f3       	breq	.-6      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     412:	87 e8       	ldi	r24, 0x87	; 135
     414:	93 e1       	ldi	r25, 0x13	; 19
     416:	01 97       	sbiw	r24, 0x01	; 1
     418:	f1 f7       	brne	.-4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     41a:	00 c0       	rjmp	.+0      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     41c:	00 00       	nop
	_delay_ms(10);
	
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
     41e:	80 91 21 38 	lds	r24, 0x3821	; 0x803821 <twiMaster+0x18>
     422:	85 30       	cpi	r24, 0x05	; 5
     424:	c1 f4       	brne	.+48     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
	{
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, size + 1);
     426:	09 e0       	ldi	r16, 0x09	; 9
     428:	18 e3       	ldi	r17, 0x38	; 56
	while(twiMaster.status == 1);
	_delay_ms(10);
	
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
	{
		initialize_Screen();
     42a:	0e 94 47 01 	call	0x28e	; 0x28e <initialize_Screen>
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, size + 1);
     42e:	2b 2d       	mov	r18, r11
     430:	4d 2d       	mov	r20, r13
     432:	5c 2d       	mov	r21, r12
     434:	6c e3       	ldi	r22, 0x3C	; 60
     436:	c8 01       	movw	r24, r16
     438:	0e 94 96 06 	call	0xd2c	; 0xd2c <TWI_MasterWrite>
		while(twiMaster.status == 1);
     43c:	f8 01       	movw	r30, r16
     43e:	87 89       	ldd	r24, Z+23	; 0x17
     440:	81 30       	cpi	r24, 0x01	; 1
     442:	e1 f3       	breq	.-8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     444:	87 e8       	ldi	r24, 0x87	; 135
     446:	93 e1       	ldi	r25, 0x13	; 19
     448:	01 97       	sbiw	r24, 0x01	; 1
     44a:	f1 f7       	brne	.-4      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     44e:	00 00       	nop

	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, size + 1);
	while(twiMaster.status == 1);
	_delay_ms(10);
	
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
     450:	80 8d       	ldd	r24, Z+24	; 0x18
     452:	85 30       	cpi	r24, 0x05	; 5
     454:	51 f3       	breq	.-44     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, size + 1);
		while(twiMaster.status == 1);
		_delay_ms(10);
	}
}
     456:	ed be       	out	0x3d, r14	; 61
     458:	fe be       	out	0x3e, r15	; 62
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	ff 90       	pop	r15
     464:	ef 90       	pop	r14
     466:	df 90       	pop	r13
     468:	cf 90       	pop	r12
     46a:	bf 90       	pop	r11
     46c:	08 95       	ret

0000046e <display_custom_character>:


void display_custom_character(uint8_t car_num)
{
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	00 d0       	rcall	.+0      	; 0x478 <display_custom_character+0xa>
     478:	cd b7       	in	r28, 0x3d	; 61
     47a:	de b7       	in	r29, 0x3e	; 62
	unsigned char complete_message[2];
	complete_message[0] = (0x40);			//Control bit with R/S set high and continuous bytes
     47c:	90 e4       	ldi	r25, 0x40	; 64
     47e:	99 83       	std	Y+1, r25	; 0x01
	complete_message[1] = (car_num);
     480:	8a 83       	std	Y+2, r24	; 0x02
	
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
     482:	22 e0       	ldi	r18, 0x02	; 2
     484:	ae 01       	movw	r20, r28
     486:	4f 5f       	subi	r20, 0xFF	; 255
     488:	5f 4f       	sbci	r21, 0xFF	; 255
     48a:	6c e3       	ldi	r22, 0x3C	; 60
     48c:	89 e0       	ldi	r24, 0x09	; 9
     48e:	98 e3       	ldi	r25, 0x38	; 56
     490:	0e 94 96 06 	call	0xd2c	; 0xd2c <TWI_MasterWrite>
	while(twiMaster.status == 1);
     494:	e9 e0       	ldi	r30, 0x09	; 9
     496:	f8 e3       	ldi	r31, 0x38	; 56
     498:	87 89       	ldd	r24, Z+23	; 0x17
     49a:	81 30       	cpi	r24, 0x01	; 1
     49c:	e9 f3       	breq	.-6      	; 0x498 <display_custom_character+0x2a>
     49e:	87 e8       	ldi	r24, 0x87	; 135
     4a0:	93 e1       	ldi	r25, 0x13	; 19
     4a2:	01 97       	sbiw	r24, 0x01	; 1
     4a4:	f1 f7       	brne	.-4      	; 0x4a2 <display_custom_character+0x34>
     4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <display_custom_character+0x3a>
     4a8:	00 00       	nop
	_delay_ms(10);
	
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
     4aa:	80 91 21 38 	lds	r24, 0x3821	; 0x803821 <twiMaster+0x18>
     4ae:	85 30       	cpi	r24, 0x05	; 5
     4b0:	c9 f4       	brne	.+50     	; 0x4e4 <display_custom_character+0x76>
	{
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
     4b2:	09 e0       	ldi	r16, 0x09	; 9
     4b4:	18 e3       	ldi	r17, 0x38	; 56
	while(twiMaster.status == 1);
	_delay_ms(10);
	
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
	{
		initialize_Screen();
     4b6:	0e 94 47 01 	call	0x28e	; 0x28e <initialize_Screen>
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
     4ba:	22 e0       	ldi	r18, 0x02	; 2
     4bc:	ae 01       	movw	r20, r28
     4be:	4f 5f       	subi	r20, 0xFF	; 255
     4c0:	5f 4f       	sbci	r21, 0xFF	; 255
     4c2:	6c e3       	ldi	r22, 0x3C	; 60
     4c4:	c8 01       	movw	r24, r16
     4c6:	0e 94 96 06 	call	0xd2c	; 0xd2c <TWI_MasterWrite>
		while(twiMaster.status == 1);
     4ca:	f8 01       	movw	r30, r16
     4cc:	87 89       	ldd	r24, Z+23	; 0x17
     4ce:	81 30       	cpi	r24, 0x01	; 1
     4d0:	e1 f3       	breq	.-8      	; 0x4ca <display_custom_character+0x5c>
     4d2:	87 e8       	ldi	r24, 0x87	; 135
     4d4:	93 e1       	ldi	r25, 0x13	; 19
     4d6:	01 97       	sbiw	r24, 0x01	; 1
     4d8:	f1 f7       	brne	.-4      	; 0x4d6 <display_custom_character+0x68>
     4da:	00 c0       	rjmp	.+0      	; 0x4dc <display_custom_character+0x6e>
     4dc:	00 00       	nop
	
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
	while(twiMaster.status == 1);
	_delay_ms(10);
	
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
     4de:	80 8d       	ldd	r24, Z+24	; 0x18
     4e0:	85 30       	cpi	r24, 0x05	; 5
     4e2:	49 f3       	breq	.-46     	; 0x4b6 <display_custom_character+0x48>
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
		while(twiMaster.status == 1);
		_delay_ms(10);
	}
}
     4e4:	0f 90       	pop	r0
     4e6:	0f 90       	pop	r0
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	1f 91       	pop	r17
     4ee:	0f 91       	pop	r16
     4f0:	08 95       	ret

000004f2 <lcd_command>:

received
commands. Only the addressed slave makes the acknowledgement after each byte.
*/
void lcd_command(uint16_t command)
{
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	00 d0       	rcall	.+0      	; 0x4fc <lcd_command+0xa>
     4fc:	1f 92       	push	r1
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
	unsigned char complete_message[2];
	uint8_t volatile comm;
	comm = (uint8_t)(command >> 2);
     502:	9c 01       	movw	r18, r24
     504:	36 95       	lsr	r19
     506:	27 95       	ror	r18
     508:	36 95       	lsr	r19
     50a:	27 95       	ror	r18
     50c:	2b 83       	std	Y+3, r18	; 0x03
	complete_message[0] = comm & 0b11000000;                      // Control byte
     50e:	9b 81       	ldd	r25, Y+3	; 0x03
     510:	90 7c       	andi	r25, 0xC0	; 192
     512:	99 83       	std	Y+1, r25	; 0x01
	complete_message[1] = (uint8_t)(command);                     // Data byte
     514:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
     516:	22 e0       	ldi	r18, 0x02	; 2
     518:	ae 01       	movw	r20, r28
     51a:	4f 5f       	subi	r20, 0xFF	; 255
     51c:	5f 4f       	sbci	r21, 0xFF	; 255
     51e:	6c e3       	ldi	r22, 0x3C	; 60
     520:	89 e0       	ldi	r24, 0x09	; 9
     522:	98 e3       	ldi	r25, 0x38	; 56
     524:	0e 94 96 06 	call	0xd2c	; 0xd2c <TWI_MasterWrite>
	while(twiMaster.status == 1);
     528:	e9 e0       	ldi	r30, 0x09	; 9
     52a:	f8 e3       	ldi	r31, 0x38	; 56
     52c:	87 89       	ldd	r24, Z+23	; 0x17
     52e:	81 30       	cpi	r24, 0x01	; 1
     530:	e9 f3       	breq	.-6      	; 0x52c <lcd_command+0x3a>
     532:	87 e8       	ldi	r24, 0x87	; 135
     534:	93 e1       	ldi	r25, 0x13	; 19
     536:	01 97       	sbiw	r24, 0x01	; 1
     538:	f1 f7       	brne	.-4      	; 0x536 <lcd_command+0x44>
     53a:	00 c0       	rjmp	.+0      	; 0x53c <lcd_command+0x4a>
     53c:	00 00       	nop
	_delay_ms(10);
	
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
     53e:	80 91 21 38 	lds	r24, 0x3821	; 0x803821 <twiMaster+0x18>
     542:	85 30       	cpi	r24, 0x05	; 5
     544:	c9 f4       	brne	.+50     	; 0x578 <lcd_command+0x86>
	{
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
     546:	09 e0       	ldi	r16, 0x09	; 9
     548:	18 e3       	ldi	r17, 0x38	; 56
	while(twiMaster.status == 1);
	_delay_ms(10);
	
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
	{
		initialize_Screen();
     54a:	0e 94 47 01 	call	0x28e	; 0x28e <initialize_Screen>
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
     54e:	22 e0       	ldi	r18, 0x02	; 2
     550:	ae 01       	movw	r20, r28
     552:	4f 5f       	subi	r20, 0xFF	; 255
     554:	5f 4f       	sbci	r21, 0xFF	; 255
     556:	6c e3       	ldi	r22, 0x3C	; 60
     558:	c8 01       	movw	r24, r16
     55a:	0e 94 96 06 	call	0xd2c	; 0xd2c <TWI_MasterWrite>
		while(twiMaster.status == 1);
     55e:	f8 01       	movw	r30, r16
     560:	87 89       	ldd	r24, Z+23	; 0x17
     562:	81 30       	cpi	r24, 0x01	; 1
     564:	e1 f3       	breq	.-8      	; 0x55e <lcd_command+0x6c>
     566:	87 e8       	ldi	r24, 0x87	; 135
     568:	93 e1       	ldi	r25, 0x13	; 19
     56a:	01 97       	sbiw	r24, 0x01	; 1
     56c:	f1 f7       	brne	.-4      	; 0x56a <lcd_command+0x78>
     56e:	00 c0       	rjmp	.+0      	; 0x570 <lcd_command+0x7e>
     570:	00 00       	nop
	complete_message[1] = (uint8_t)(command);                     // Data byte
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
	while(twiMaster.status == 1);
	_delay_ms(10);
	
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
     572:	80 8d       	ldd	r24, Z+24	; 0x18
     574:	85 30       	cpi	r24, 0x05	; 5
     576:	49 f3       	breq	.-46     	; 0x54a <lcd_command+0x58>
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
		while(twiMaster.status == 1);
		_delay_ms(10);
	}
}
     578:	23 96       	adiw	r28, 0x03	; 3
     57a:	cd bf       	out	0x3d, r28	; 61
     57c:	de bf       	out	0x3e, r29	; 62
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	1f 91       	pop	r17
     584:	0f 91       	pop	r16
     586:	08 95       	ret

00000588 <setCursor>:
	{ 0x00, 0x10, 0x20 }   // Three line display address
};

void setCursor(uint8_t line_num, uint8_t x)
{
	if (line_num == 0)
     588:	81 11       	cpse	r24, r1
     58a:	05 c0       	rjmp	.+10     	; 0x596 <setCursor+0xe>
	{
		lcd_command(SET_DDRAM_ADDRESS | (0b0000000000 & x));
     58c:	80 e8       	ldi	r24, 0x80	; 128
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
     594:	08 95       	ret
	}
	else if (line_num == 1)
     596:	81 30       	cpi	r24, 0x01	; 1
     598:	39 f4       	brne	.+14     	; 0x5a8 <setCursor+0x20>
	{
		lcd_command(SET_DDRAM_ADDRESS | (0b0001000000 + x));
     59a:	86 2f       	mov	r24, r22
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	80 5c       	subi	r24, 0xC0	; 192
     5a0:	9f 4f       	sbci	r25, 0xFF	; 255
     5a2:	80 68       	ori	r24, 0x80	; 128
     5a4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
     5a8:	08 95       	ret

000005aa <initialize>:
uint8_t both_low = FALSE;
uint8_t holding_click = FALSE;

#define MAX_CURRENT 2500

void initialize(){
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
	CPU_CCP = 0xD8; //temporarily remove protection for protected I/O registers (Cannot change clock prescaler without doing this first)
     5ae:	88 ed       	ldi	r24, 0xD8	; 216
     5b0:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLB = (0 << 0); // disable prescaler (There's a default prescaler of 6)
     5b2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     5b6:	87 ea       	ldi	r24, 0xA7	; 167
     5b8:	91 e6       	ldi	r25, 0x61	; 97
     5ba:	01 97       	sbiw	r24, 0x01	; 1
     5bc:	f1 f7       	brne	.-4      	; 0x5ba <initialize+0x10>
     5be:	00 c0       	rjmp	.+0      	; 0x5c0 <initialize+0x16>
     5c0:	00 00       	nop
	_delay_ms(5);
	CLKCTRL_MCLKCTRLA |= (1 << 7); // System clock is output to CLKOUT pin (20 MHz)
     5c2:	e0 e6       	ldi	r30, 0x60	; 96
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	80 81       	ld	r24, Z
     5c8:	80 68       	ori	r24, 0x80	; 128
     5ca:	80 83       	st	Z, r24
	PA4 - SW_Encoder - Input/Pull-up
	PA5 - B_Encoder - Input/Pull-up - Interrupt both edges
	PA6 - A_Encoder - Input/Pull-up - Interrupt both edges
	PA7 - Display LED (Backlight) - Output/Low
	*/
	PORTA_DIR = 0b10001111;
     5cc:	8f e8       	ldi	r24, 0x8F	; 143
     5ce:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
	PORTA_PIN4CTRL = (1 << PORT_PULLUPEN_bp);
     5d2:	c4 e1       	ldi	r28, 0x14	; 20
     5d4:	d4 e0       	ldi	r29, 0x04	; 4
     5d6:	88 e0       	ldi	r24, 0x08	; 8
     5d8:	88 83       	st	Y, r24
	PORTA_PIN5CTRL = (1 << PORT_PULLUPEN_bp); //|| (1 << BOTH_EDGES_INTERRUPT);
     5da:	a5 e1       	ldi	r26, 0x15	; 21
     5dc:	b4 e0       	ldi	r27, 0x04	; 4
     5de:	8c 93       	st	X, r24
	PORTA_PIN6CTRL = (1 << PORT_PULLUPEN_bp); //|| (1 << BOTH_EDGES_INTERRUPT);
     5e0:	e6 e1       	ldi	r30, 0x16	; 22
     5e2:	f4 e0       	ldi	r31, 0x04	; 4
     5e4:	80 83       	st	Z, r24
	PORTA_PIN4CTRL |= (0x3); //interrupt on falling edge
     5e6:	98 81       	ld	r25, Y
     5e8:	93 60       	ori	r25, 0x03	; 3
     5ea:	98 83       	st	Y, r25
	PORTA_PIN5CTRL |= (0x1); //interrupt on both edges
     5ec:	9c 91       	ld	r25, X
     5ee:	91 60       	ori	r25, 0x01	; 1
     5f0:	9c 93       	st	X, r25
	PORTA_PIN6CTRL |= (0x1); //interrupt on both edges
     5f2:	90 81       	ld	r25, Z
     5f4:	91 60       	ori	r25, 0x01	; 1
     5f6:	90 83       	st	Z, r25
	PB4 - D4_LCD - Output/Low
	PB5 - D5_LCD - Output/Low
	PB6 - D6_LCD - Output/Low
	PB7 - D7_LCD - Output/Low
	*/
	PORTB_DIR = 0b11110101;
     5f8:	95 ef       	ldi	r25, 0xF5	; 245
     5fa:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
	PORTB_OUTSET = (1 << PIN0_bp);
     5fe:	91 e0       	ldi	r25, 0x01	; 1
     600:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
	PORTB_PIN1CTRL = (1 << PORT_PULLUPEN_bp);
     604:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>
	//PORTB_PIN3CTRL = (1 << PORT_PULLUPEN_bp);
	PORTB_PIN3CTRL |= (0x1); //interrupt on both edges
     608:	e3 e3       	ldi	r30, 0x33	; 51
     60a:	f4 e0       	ldi	r31, 0x04	; 4
     60c:	90 81       	ld	r25, Z
     60e:	91 60       	ori	r25, 0x01	; 1
     610:	90 83       	st	Z, r25
	CPUINT.LVL1VEC = 0x08; //Set PORTB interrupt to be LEVEL1
     612:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <__TEXT_REGION_LENGTH__+0x700113>
	PC2 - D2_LCD - Output/Low
	PC3 - D3_LCD - Output/Low
	PC4 - R/W (0:RD, 1:WR) - Output/Low
	PC5 - RS (Reg Sel) (0:CMD, 1:DATA) - Output/Low
	*/
	PORTC_DIR = 0b00111111;
     616:	8f e3       	ldi	r24, 0x3F	; 63
     618:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>
}
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	08 95       	ret

00000622 <display_current_voltage>:

void display_current_voltage(uint16_t current, uint16_t voltage)
{
     622:	6f 92       	push	r6
     624:	7f 92       	push	r7
     626:	8f 92       	push	r8
     628:	9f 92       	push	r9
     62a:	af 92       	push	r10
     62c:	bf 92       	push	r11
     62e:	cf 92       	push	r12
     630:	df 92       	push	r13
     632:	ef 92       	push	r14
     634:	ff 92       	push	r15
     636:	0f 93       	push	r16
     638:	1f 93       	push	r17
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	4c 01       	movw	r8, r24
     640:	7b 01       	movw	r14, r22
	lcd_command(CLEAR_DISPLAY);
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_command>
	
	int length = snprintf(NULL, 0, "%02d.%dA", current / 100, current / 10 % 10);
     64a:	94 01       	movw	r18, r8
     64c:	ad ec       	ldi	r26, 0xCD	; 205
     64e:	bc ec       	ldi	r27, 0xCC	; 204
     650:	0e 94 26 07 	call	0xe4c	; 0xe4c <__umulhisi3>
     654:	ac 01       	movw	r20, r24
     656:	56 95       	lsr	r21
     658:	47 95       	ror	r20
     65a:	56 95       	lsr	r21
     65c:	47 95       	ror	r20
     65e:	56 95       	lsr	r21
     660:	47 95       	ror	r20
     662:	9a 01       	movw	r18, r20
     664:	0e 94 26 07 	call	0xe4c	; 0xe4c <__umulhisi3>
     668:	ec 01       	movw	r28, r24
     66a:	d6 95       	lsr	r29
     66c:	c7 95       	ror	r28
     66e:	d6 95       	lsr	r29
     670:	c7 95       	ror	r28
     672:	d6 95       	lsr	r29
     674:	c7 95       	ror	r28
     676:	ce 01       	movw	r24, r28
     678:	88 0f       	add	r24, r24
     67a:	99 1f       	adc	r25, r25
     67c:	cc 0f       	add	r28, r28
     67e:	dd 1f       	adc	r29, r29
     680:	cc 0f       	add	r28, r28
     682:	dd 1f       	adc	r29, r29
     684:	cc 0f       	add	r28, r28
     686:	dd 1f       	adc	r29, r29
     688:	c8 0f       	add	r28, r24
     68a:	d9 1f       	adc	r29, r25
     68c:	ca 01       	movw	r24, r20
     68e:	8c 1b       	sub	r24, r28
     690:	9d 0b       	sbc	r25, r29
     692:	ec 01       	movw	r28, r24
     694:	94 01       	movw	r18, r8
     696:	36 95       	lsr	r19
     698:	27 95       	ror	r18
     69a:	36 95       	lsr	r19
     69c:	27 95       	ror	r18
     69e:	ab e7       	ldi	r26, 0x7B	; 123
     6a0:	b4 e1       	ldi	r27, 0x14	; 20
     6a2:	0e 94 26 07 	call	0xe4c	; 0xe4c <__umulhisi3>
     6a6:	6c 01       	movw	r12, r24
     6a8:	d6 94       	lsr	r13
     6aa:	c7 94       	ror	r12
     6ac:	df 93       	push	r29
     6ae:	cf 93       	push	r28
     6b0:	df 92       	push	r13
     6b2:	cf 92       	push	r12
     6b4:	04 e9       	ldi	r16, 0x94	; 148
     6b6:	16 e9       	ldi	r17, 0x96	; 150
     6b8:	1f 93       	push	r17
     6ba:	0f 93       	push	r16
     6bc:	1f 92       	push	r1
     6be:	1f 92       	push	r1
     6c0:	1f 92       	push	r1
     6c2:	1f 92       	push	r1
     6c4:	0e 94 56 08 	call	0x10ac	; 0x10ac <snprintf>
	char* str = malloc(length + 1);
     6c8:	01 96       	adiw	r24, 0x01	; 1
     6ca:	5c 01       	movw	r10, r24
     6cc:	0e 94 35 07 	call	0xe6a	; 0xe6a <malloc>
     6d0:	68 2e       	mov	r6, r24
     6d2:	79 2e       	mov	r7, r25
	snprintf(str, length + 1, "%02d.%dA", current / 100, current / 10 % 10);
     6d4:	df 93       	push	r29
     6d6:	cf 93       	push	r28
     6d8:	df 92       	push	r13
     6da:	cf 92       	push	r12
     6dc:	1f 93       	push	r17
     6de:	0f 93       	push	r16
     6e0:	bf 92       	push	r11
     6e2:	af 92       	push	r10
     6e4:	7f 92       	push	r7
     6e6:	6f 92       	push	r6
     6e8:	0e 94 56 08 	call	0x10ac	; 0x10ac <snprintf>
	lcd_write(str);
     6ec:	86 2d       	mov	r24, r6
     6ee:	97 2d       	mov	r25, r7
     6f0:	0e 94 c8 01 	call	0x390	; 0x390 <lcd_write>
	free(str);
     6f4:	86 2d       	mov	r24, r6
     6f6:	97 2d       	mov	r25, r7
     6f8:	0e 94 cd 07 	call	0xf9a	; 0xf9a <free>
	
	current = (current + 50) / 100; // round to nearest hundred and get hundreds
     6fc:	a4 01       	movw	r20, r8
     6fe:	4e 5c       	subi	r20, 0xCE	; 206
     700:	5f 4f       	sbci	r21, 0xFF	; 255
	
	uint8_t full_bars;
	uint8_t last_bar;
	
	full_bars = current / 5;
	last_bar  = current % 5;
     702:	56 95       	lsr	r21
     704:	47 95       	ror	r20
     706:	56 95       	lsr	r21
     708:	47 95       	ror	r20
     70a:	9a 01       	movw	r18, r20
     70c:	ab e7       	ldi	r26, 0x7B	; 123
     70e:	b4 e1       	ldi	r27, 0x14	; 20
     710:	0e 94 26 07 	call	0xe4c	; 0xe4c <__umulhisi3>
     714:	fc 01       	movw	r30, r24
     716:	f6 95       	lsr	r31
     718:	e7 95       	ror	r30
     71a:	9f 01       	movw	r18, r30
     71c:	ad ec       	ldi	r26, 0xCD	; 205
     71e:	bc ec       	ldi	r27, 0xCC	; 204
     720:	0e 94 26 07 	call	0xe4c	; 0xe4c <__umulhisi3>
     724:	96 95       	lsr	r25
     726:	87 95       	ror	r24
     728:	96 95       	lsr	r25
     72a:	87 95       	ror	r24
     72c:	9c 01       	movw	r18, r24
     72e:	22 0f       	add	r18, r18
     730:	33 1f       	adc	r19, r19
     732:	22 0f       	add	r18, r18
     734:	33 1f       	adc	r19, r19
     736:	82 0f       	add	r24, r18
     738:	93 1f       	adc	r25, r19
     73a:	6f 01       	movw	r12, r30
     73c:	c8 1a       	sub	r12, r24
     73e:	d9 0a       	sbc	r13, r25
     740:	bc 2c       	mov	r11, r12
	
	for(int i = 0; i < full_bars; i++)
     742:	9a 01       	movw	r18, r20
     744:	a5 ec       	ldi	r26, 0xC5	; 197
     746:	b0 e2       	ldi	r27, 0x20	; 32
     748:	0e 94 26 07 	call	0xe4c	; 0xe4c <__umulhisi3>
     74c:	92 95       	swap	r25
     74e:	82 95       	swap	r24
     750:	8f 70       	andi	r24, 0x0F	; 15
     752:	89 27       	eor	r24, r25
     754:	9f 70       	andi	r25, 0x0F	; 15
     756:	89 27       	eor	r24, r25
     758:	8c 01       	movw	r16, r24
     75a:	11 27       	eor	r17, r17
     75c:	8d b7       	in	r24, 0x3d	; 61
     75e:	9e b7       	in	r25, 0x3e	; 62
     760:	44 96       	adiw	r24, 0x14	; 20
     762:	8d bf       	out	0x3d, r24	; 61
     764:	9e bf       	out	0x3e, r25	; 62
     766:	10 16       	cp	r1, r16
     768:	11 06       	cpc	r1, r17
     76a:	4c f4       	brge	.+18     	; 0x77e <display_current_voltage+0x15c>
     76c:	c0 e0       	ldi	r28, 0x00	; 0
     76e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		display_custom_character(4);
     770:	84 e0       	ldi	r24, 0x04	; 4
     772:	0e 94 37 02 	call	0x46e	; 0x46e <display_custom_character>
	uint8_t last_bar;
	
	full_bars = current / 5;
	last_bar  = current % 5;
	
	for(int i = 0; i < full_bars; i++)
     776:	21 96       	adiw	r28, 0x01	; 1
     778:	c0 17       	cp	r28, r16
     77a:	d1 07       	cpc	r29, r17
     77c:	c9 f7       	brne	.-14     	; 0x770 <display_current_voltage+0x14e>
	{
		display_custom_character(4);
	}
	
	if (last_bar != 0)
     77e:	bb 20       	and	r11, r11
     780:	21 f0       	breq	.+8      	; 0x78a <display_current_voltage+0x168>
	{
		display_custom_character(last_bar - 1);
     782:	8f ef       	ldi	r24, 0xFF	; 255
     784:	8c 0d       	add	r24, r12
     786:	0e 94 37 02 	call	0x46e	; 0x46e <display_custom_character>
	}
	
	setCursor(1, 0);
     78a:	60 e0       	ldi	r22, 0x00	; 0
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	0e 94 c4 02 	call	0x588	; 0x588 <setCursor>
	
	length = snprintf(NULL, 0, "%02d.%dV", voltage / 100, voltage / 10 % 10);
     792:	97 01       	movw	r18, r14
     794:	ad ec       	ldi	r26, 0xCD	; 205
     796:	bc ec       	ldi	r27, 0xCC	; 204
     798:	0e 94 26 07 	call	0xe4c	; 0xe4c <__umulhisi3>
     79c:	ac 01       	movw	r20, r24
     79e:	56 95       	lsr	r21
     7a0:	47 95       	ror	r20
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	56 95       	lsr	r21
     7a8:	47 95       	ror	r20
     7aa:	9a 01       	movw	r18, r20
     7ac:	0e 94 26 07 	call	0xe4c	; 0xe4c <__umulhisi3>
     7b0:	ec 01       	movw	r28, r24
     7b2:	d6 95       	lsr	r29
     7b4:	c7 95       	ror	r28
     7b6:	d6 95       	lsr	r29
     7b8:	c7 95       	ror	r28
     7ba:	d6 95       	lsr	r29
     7bc:	c7 95       	ror	r28
     7be:	ce 01       	movw	r24, r28
     7c0:	88 0f       	add	r24, r24
     7c2:	99 1f       	adc	r25, r25
     7c4:	cc 0f       	add	r28, r28
     7c6:	dd 1f       	adc	r29, r29
     7c8:	cc 0f       	add	r28, r28
     7ca:	dd 1f       	adc	r29, r29
     7cc:	cc 0f       	add	r28, r28
     7ce:	dd 1f       	adc	r29, r29
     7d0:	c8 0f       	add	r28, r24
     7d2:	d9 1f       	adc	r29, r25
     7d4:	ca 01       	movw	r24, r20
     7d6:	8c 1b       	sub	r24, r28
     7d8:	9d 0b       	sbc	r25, r29
     7da:	ec 01       	movw	r28, r24
     7dc:	97 01       	movw	r18, r14
     7de:	36 95       	lsr	r19
     7e0:	27 95       	ror	r18
     7e2:	36 95       	lsr	r19
     7e4:	27 95       	ror	r18
     7e6:	ab e7       	ldi	r26, 0x7B	; 123
     7e8:	b4 e1       	ldi	r27, 0x14	; 20
     7ea:	0e 94 26 07 	call	0xe4c	; 0xe4c <__umulhisi3>
     7ee:	6c 01       	movw	r12, r24
     7f0:	d6 94       	lsr	r13
     7f2:	c7 94       	ror	r12
     7f4:	df 93       	push	r29
     7f6:	cf 93       	push	r28
     7f8:	df 92       	push	r13
     7fa:	cf 92       	push	r12
     7fc:	0d e9       	ldi	r16, 0x9D	; 157
     7fe:	16 e9       	ldi	r17, 0x96	; 150
     800:	1f 93       	push	r17
     802:	0f 93       	push	r16
     804:	1f 92       	push	r1
     806:	1f 92       	push	r1
     808:	1f 92       	push	r1
     80a:	1f 92       	push	r1
     80c:	0e 94 56 08 	call	0x10ac	; 0x10ac <snprintf>
	str = malloc(length + 1);
     810:	01 96       	adiw	r24, 0x01	; 1
     812:	4c 01       	movw	r8, r24
     814:	0e 94 35 07 	call	0xe6a	; 0xe6a <malloc>
     818:	a8 2e       	mov	r10, r24
     81a:	b9 2e       	mov	r11, r25
	snprintf(str, length + 1, "%02d.%dV", voltage / 100, voltage / 10 % 10);
     81c:	df 93       	push	r29
     81e:	cf 93       	push	r28
     820:	df 92       	push	r13
     822:	cf 92       	push	r12
     824:	1f 93       	push	r17
     826:	0f 93       	push	r16
     828:	9f 92       	push	r9
     82a:	8f 92       	push	r8
     82c:	bf 92       	push	r11
     82e:	af 92       	push	r10
     830:	0e 94 56 08 	call	0x10ac	; 0x10ac <snprintf>
	lcd_write(str);
     834:	8a 2d       	mov	r24, r10
     836:	9b 2d       	mov	r25, r11
     838:	0e 94 c8 01 	call	0x390	; 0x390 <lcd_write>
	free(str);
     83c:	8a 2d       	mov	r24, r10
     83e:	9b 2d       	mov	r25, r11
     840:	0e 94 cd 07 	call	0xf9a	; 0xf9a <free>
	
	voltage = (voltage + 50) / 100; // round to nearest hundred and get hundreds
     844:	92 e3       	ldi	r25, 0x32	; 50
     846:	e9 0e       	add	r14, r25
     848:	f1 1c       	adc	r15, r1
	
	full_bars = voltage / 5;
	last_bar  = voltage % 5;
     84a:	f6 94       	lsr	r15
     84c:	e7 94       	ror	r14
     84e:	f6 94       	lsr	r15
     850:	e7 94       	ror	r14
     852:	97 01       	movw	r18, r14
     854:	ab e7       	ldi	r26, 0x7B	; 123
     856:	b4 e1       	ldi	r27, 0x14	; 20
     858:	0e 94 26 07 	call	0xe4c	; 0xe4c <__umulhisi3>
     85c:	ac 01       	movw	r20, r24
     85e:	56 95       	lsr	r21
     860:	47 95       	ror	r20
     862:	9a 01       	movw	r18, r20
     864:	ad ec       	ldi	r26, 0xCD	; 205
     866:	bc ec       	ldi	r27, 0xCC	; 204
     868:	0e 94 26 07 	call	0xe4c	; 0xe4c <__umulhisi3>
     86c:	96 95       	lsr	r25
     86e:	87 95       	ror	r24
     870:	96 95       	lsr	r25
     872:	87 95       	ror	r24
     874:	9c 01       	movw	r18, r24
     876:	22 0f       	add	r18, r18
     878:	33 1f       	adc	r19, r19
     87a:	22 0f       	add	r18, r18
     87c:	33 1f       	adc	r19, r19
     87e:	82 0f       	add	r24, r18
     880:	93 1f       	adc	r25, r19
     882:	6a 01       	movw	r12, r20
     884:	c8 1a       	sub	r12, r24
     886:	d9 0a       	sbc	r13, r25
     888:	bc 2c       	mov	r11, r12
	
	for(int i = 0; i < full_bars; i++)
     88a:	97 01       	movw	r18, r14
     88c:	a5 ec       	ldi	r26, 0xC5	; 197
     88e:	b0 e2       	ldi	r27, 0x20	; 32
     890:	0e 94 26 07 	call	0xe4c	; 0xe4c <__umulhisi3>
     894:	92 95       	swap	r25
     896:	82 95       	swap	r24
     898:	8f 70       	andi	r24, 0x0F	; 15
     89a:	89 27       	eor	r24, r25
     89c:	9f 70       	andi	r25, 0x0F	; 15
     89e:	89 27       	eor	r24, r25
     8a0:	8c 01       	movw	r16, r24
     8a2:	11 27       	eor	r17, r17
     8a4:	8d b7       	in	r24, 0x3d	; 61
     8a6:	9e b7       	in	r25, 0x3e	; 62
     8a8:	44 96       	adiw	r24, 0x14	; 20
     8aa:	8d bf       	out	0x3d, r24	; 61
     8ac:	9e bf       	out	0x3e, r25	; 62
     8ae:	10 16       	cp	r1, r16
     8b0:	11 06       	cpc	r1, r17
     8b2:	4c f4       	brge	.+18     	; 0x8c6 <display_current_voltage+0x2a4>
     8b4:	c0 e0       	ldi	r28, 0x00	; 0
     8b6:	d0 e0       	ldi	r29, 0x00	; 0
	{
		display_custom_character(4);
     8b8:	84 e0       	ldi	r24, 0x04	; 4
     8ba:	0e 94 37 02 	call	0x46e	; 0x46e <display_custom_character>
	voltage = (voltage + 50) / 100; // round to nearest hundred and get hundreds
	
	full_bars = voltage / 5;
	last_bar  = voltage % 5;
	
	for(int i = 0; i < full_bars; i++)
     8be:	21 96       	adiw	r28, 0x01	; 1
     8c0:	c0 17       	cp	r28, r16
     8c2:	d1 07       	cpc	r29, r17
     8c4:	c9 f7       	brne	.-14     	; 0x8b8 <display_current_voltage+0x296>
	{
		display_custom_character(4);
	}
	
	if (last_bar != 0)
     8c6:	bb 20       	and	r11, r11
     8c8:	21 f0       	breq	.+8      	; 0x8d2 <display_current_voltage+0x2b0>
	{
		display_custom_character(last_bar - 1);
     8ca:	8f ef       	ldi	r24, 0xFF	; 255
     8cc:	8c 0d       	add	r24, r12
     8ce:	0e 94 37 02 	call	0x46e	; 0x46e <display_custom_character>
	}
}
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	1f 91       	pop	r17
     8d8:	0f 91       	pop	r16
     8da:	ff 90       	pop	r15
     8dc:	ef 90       	pop	r14
     8de:	df 90       	pop	r13
     8e0:	cf 90       	pop	r12
     8e2:	bf 90       	pop	r11
     8e4:	af 90       	pop	r10
     8e6:	9f 90       	pop	r9
     8e8:	8f 90       	pop	r8
     8ea:	7f 90       	pop	r7
     8ec:	6f 90       	pop	r6
     8ee:	08 95       	ret

000008f0 <main>:
volatile bool     update;

int main()
{
	//Pin/Settings initialization
    initialize();
     8f0:	0e 94 d5 02 	call	0x5aa	; 0x5aa <initialize>
    sei();
     8f4:	78 94       	sei
	
	//I2C Setup
	TWI_MasterInit(&twiMaster, &TWI0, TWI_BAUDSETTING);
     8f6:	4e e5       	ldi	r20, 0x5E	; 94
     8f8:	60 e1       	ldi	r22, 0x10	; 16
     8fa:	78 e0       	ldi	r23, 0x08	; 8
     8fc:	89 e0       	ldi	r24, 0x09	; 9
     8fe:	98 e3       	ldi	r25, 0x38	; 56
     900:	0e 94 41 06 	call	0xc82	; 0xc82 <TWI_MasterInit>
     904:	2f e7       	ldi	r18, 0x7F	; 127
     906:	84 e8       	ldi	r24, 0x84	; 132
     908:	9e e1       	ldi	r25, 0x1E	; 30
     90a:	21 50       	subi	r18, 0x01	; 1
     90c:	80 40       	sbci	r24, 0x00	; 0
     90e:	90 40       	sbci	r25, 0x00	; 0
     910:	e1 f7       	brne	.-8      	; 0x90a <main+0x1a>
     912:	00 c0       	rjmp	.+0      	; 0x914 <main+0x24>
     914:	00 00       	nop
	//LCD screen initialization
	_delay_ms(500);
	initialize_Screen();
     916:	0e 94 47 01 	call	0x28e	; 0x28e <initialize_Screen>
     91a:	2f e7       	ldi	r18, 0x7F	; 127
     91c:	84 e8       	ldi	r24, 0x84	; 132
     91e:	9e e1       	ldi	r25, 0x1E	; 30
     920:	21 50       	subi	r18, 0x01	; 1
     922:	80 40       	sbci	r24, 0x00	; 0
     924:	90 40       	sbci	r25, 0x00	; 0
     926:	e1 f7       	brne	.-8      	; 0x920 <main+0x30>
     928:	00 c0       	rjmp	.+0      	; 0x92a <main+0x3a>
     92a:	00 00       	nop
	_delay_ms(500);
	
	current = 0;
     92c:	10 92 24 38 	sts	0x3824, r1	; 0x803824 <current>
     930:	10 92 25 38 	sts	0x3825, r1	; 0x803825 <current+0x1>
	voltage = 0;
     934:	10 92 22 38 	sts	0x3822, r1	; 0x803822 <voltage>
     938:	10 92 23 38 	sts	0x3823, r1	; 0x803823 <voltage+0x1>
	update  = TRUE;
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	80 93 26 38 	sts	0x3826, r24	; 0x803826 <update>
	
    while (1)
    {
		if (update)
     942:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <update>
     946:	88 23       	and	r24, r24
     948:	e1 f3       	breq	.-8      	; 0x942 <main+0x52>
		{
			voltage = current * (current / 500);
     94a:	20 91 24 38 	lds	r18, 0x3824	; 0x803824 <current>
     94e:	30 91 25 38 	lds	r19, 0x3825	; 0x803825 <current+0x1>
     952:	40 91 24 38 	lds	r20, 0x3824	; 0x803824 <current>
     956:	50 91 25 38 	lds	r21, 0x3825	; 0x803825 <current+0x1>
     95a:	36 95       	lsr	r19
     95c:	27 95       	ror	r18
     95e:	36 95       	lsr	r19
     960:	27 95       	ror	r18
     962:	a5 ec       	ldi	r26, 0xC5	; 197
     964:	b0 e2       	ldi	r27, 0x20	; 32
     966:	0e 94 26 07 	call	0xe4c	; 0xe4c <__umulhisi3>
     96a:	92 95       	swap	r25
     96c:	82 95       	swap	r24
     96e:	8f 70       	andi	r24, 0x0F	; 15
     970:	89 27       	eor	r24, r25
     972:	9f 70       	andi	r25, 0x0F	; 15
     974:	89 27       	eor	r24, r25
     976:	84 9f       	mul	r24, r20
     978:	90 01       	movw	r18, r0
     97a:	85 9f       	mul	r24, r21
     97c:	30 0d       	add	r19, r0
     97e:	94 9f       	mul	r25, r20
     980:	30 0d       	add	r19, r0
     982:	11 24       	eor	r1, r1
     984:	20 93 22 38 	sts	0x3822, r18	; 0x803822 <voltage>
     988:	30 93 23 38 	sts	0x3823, r19	; 0x803823 <voltage+0x1>
			display_current_voltage(current, voltage);
     98c:	60 91 22 38 	lds	r22, 0x3822	; 0x803822 <voltage>
     990:	70 91 23 38 	lds	r23, 0x3823	; 0x803823 <voltage+0x1>
     994:	80 91 24 38 	lds	r24, 0x3824	; 0x803824 <current>
     998:	90 91 25 38 	lds	r25, 0x3825	; 0x803825 <current+0x1>
     99c:	0e 94 11 03 	call	0x622	; 0x622 <display_current_voltage>
			update = FALSE;
     9a0:	10 92 26 38 	sts	0x3826, r1	; 0x803826 <update>
     9a4:	ce cf       	rjmp	.-100    	; 0x942 <main+0x52>

000009a6 <__vector_25>:
		}
    }
}

ISR(TWI0_TWIM_vect)
{
     9a6:	1f 92       	push	r1
     9a8:	0f 92       	push	r0
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	0f 92       	push	r0
     9ae:	11 24       	eor	r1, r1
     9b0:	2f 93       	push	r18
     9b2:	3f 93       	push	r19
     9b4:	4f 93       	push	r20
     9b6:	5f 93       	push	r21
     9b8:	6f 93       	push	r22
     9ba:	7f 93       	push	r23
     9bc:	8f 93       	push	r24
     9be:	9f 93       	push	r25
     9c0:	af 93       	push	r26
     9c2:	bf 93       	push	r27
     9c4:	ef 93       	push	r30
     9c6:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twiMaster);
     9c8:	89 e0       	ldi	r24, 0x09	; 9
     9ca:	98 e3       	ldi	r25, 0x38	; 56
     9cc:	0e 94 0d 07 	call	0xe1a	; 0xe1a <TWI_MasterInterruptHandler>
}
     9d0:	ff 91       	pop	r31
     9d2:	ef 91       	pop	r30
     9d4:	bf 91       	pop	r27
     9d6:	af 91       	pop	r26
     9d8:	9f 91       	pop	r25
     9da:	8f 91       	pop	r24
     9dc:	7f 91       	pop	r23
     9de:	6f 91       	pop	r22
     9e0:	5f 91       	pop	r21
     9e2:	4f 91       	pop	r20
     9e4:	3f 91       	pop	r19
     9e6:	2f 91       	pop	r18
     9e8:	0f 90       	pop	r0
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	0f 90       	pop	r0
     9ee:	1f 90       	pop	r1
     9f0:	18 95       	reti

000009f2 <debounce>:
/*          6 times more than @precisionUs)                             */
/* @return - whether the function debounced pin correctly (If running   */
/*           time of the function reached @maxUs returns false(0))      */
/************************************************************************/
uint8_t debounce(volatile unsigned char *port, uint8_t pin, uint8_t precisionUs, uint8_t maxUs)
{
     9f2:	cf 93       	push	r28
     9f4:	df 93       	push	r29
     9f6:	ec 01       	movw	r28, r24
	uint8_t counter = 0;
	uint8_t counterUs = 0;
	uint8_t isHigh = FALSE;
	
	while(counter != precisionUs && counterUs != maxUs)
     9f8:	44 23       	and	r20, r20
     9fa:	39 f1       	breq	.+78     	; 0xa4a <debounce+0x58>
     9fc:	22 23       	and	r18, r18
     9fe:	39 f1       	breq	.+78     	; 0xa4e <debounce+0x5c>
     a00:	a1 e0       	ldi	r26, 0x01	; 1
     a02:	b0 e0       	ldi	r27, 0x00	; 0
     a04:	02 c0       	rjmp	.+4      	; 0xa0a <debounce+0x18>
     a06:	aa 0f       	add	r26, r26
     a08:	bb 1f       	adc	r27, r27
     a0a:	6a 95       	dec	r22
     a0c:	e2 f7       	brpl	.-8      	; 0xa06 <debounce+0x14>
	{
		// *(volatile uint8_t *)(port) - is a dereference of a port's address, therefore, we read directly from memory
		if(*(volatile uint8_t *)(port) & (1 << pin))
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	e0 e0       	ldi	r30, 0x00	; 0
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	01 c0       	rjmp	.+2      	; 0xa18 <debounce+0x26>
     a16:	95 2f       	mov	r25, r21
     a18:	68 81       	ld	r22, Y
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	6a 23       	and	r22, r26
     a1e:	7b 23       	and	r23, r27
     a20:	67 2b       	or	r22, r23
     a22:	29 f0       	breq	.+10     	; 0xa2e <debounce+0x3c>
		{
			counter = isHigh ? counter + 1 : 0;
     a24:	ee 23       	and	r30, r30
     a26:	c9 f0       	breq	.+50     	; 0xa5a <debounce+0x68>
     a28:	3f 5f       	subi	r19, 0xFF	; 255
			isHigh = TRUE;
     a2a:	e1 e0       	ldi	r30, 0x01	; 1
     a2c:	03 c0       	rjmp	.+6      	; 0xa34 <debounce+0x42>
		}
		else
		{
			counter = isHigh ? 0 : counter + 1;
     a2e:	e1 11       	cpse	r30, r1
     a30:	16 c0       	rjmp	.+44     	; 0xa5e <debounce+0x6c>
     a32:	3f 5f       	subi	r19, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a34:	86 e0       	ldi	r24, 0x06	; 6
     a36:	8a 95       	dec	r24
     a38:	f1 f7       	brne	.-4      	; 0xa36 <debounce+0x44>
     a3a:	00 c0       	rjmp	.+0      	; 0xa3c <debounce+0x4a>
{
	uint8_t counter = 0;
	uint8_t counterUs = 0;
	uint8_t isHigh = FALSE;
	
	while(counter != precisionUs && counterUs != maxUs)
     a3c:	34 17       	cp	r19, r20
     a3e:	41 f0       	breq	.+16     	; 0xa50 <debounce+0x5e>
     a40:	51 e0       	ldi	r21, 0x01	; 1
     a42:	59 0f       	add	r21, r25
     a44:	29 13       	cpse	r18, r25
     a46:	e7 cf       	rjmp	.-50     	; 0xa16 <debounce+0x24>
     a48:	03 c0       	rjmp	.+6      	; 0xa50 <debounce+0x5e>
/*           time of the function reached @maxUs returns false(0))      */
/************************************************************************/
uint8_t debounce(volatile unsigned char *port, uint8_t pin, uint8_t precisionUs, uint8_t maxUs)
{
	uint8_t counter = 0;
	uint8_t counterUs = 0;
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	01 c0       	rjmp	.+2      	; 0xa50 <debounce+0x5e>
     a4e:	90 e0       	ldi	r25, 0x00	; 0
		}
		_delay_us(1);
		counterUs++;
	}
	
	return counterUs != maxUs;
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	29 13       	cpse	r18, r25
     a54:	0b c0       	rjmp	.+22     	; 0xa6c <debounce+0x7a>
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	09 c0       	rjmp	.+18     	; 0xa6c <debounce+0x7a>
	{
		// *(volatile uint8_t *)(port) - is a dereference of a port's address, therefore, we read directly from memory
		if(*(volatile uint8_t *)(port) & (1 << pin))
		{
			counter = isHigh ? counter + 1 : 0;
			isHigh = TRUE;
     a5a:	e1 e0       	ldi	r30, 0x01	; 1
     a5c:	01 c0       	rjmp	.+2      	; 0xa60 <debounce+0x6e>
		}
		else
		{
			counter = isHigh ? 0 : counter + 1;
			isHigh = FALSE;
     a5e:	e0 e0       	ldi	r30, 0x00	; 0
     a60:	86 e0       	ldi	r24, 0x06	; 6
     a62:	8a 95       	dec	r24
     a64:	f1 f7       	brne	.-4      	; 0xa62 <debounce+0x70>
     a66:	00 c0       	rjmp	.+0      	; 0xa68 <debounce+0x76>
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	ea cf       	rjmp	.-44     	; 0xa40 <debounce+0x4e>
		_delay_us(1);
		counterUs++;
	}
	
	return counterUs != maxUs;
}
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	08 95       	ret

00000a72 <__vector_3>:

ISR(PORTA_PORT_vect)//interrupts from an encoder turn or push
{
     a72:	1f 92       	push	r1
     a74:	0f 92       	push	r0
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	0f 92       	push	r0
     a7a:	11 24       	eor	r1, r1
     a7c:	1f 93       	push	r17
     a7e:	2f 93       	push	r18
     a80:	3f 93       	push	r19
     a82:	4f 93       	push	r20
     a84:	5f 93       	push	r21
     a86:	6f 93       	push	r22
     a88:	7f 93       	push	r23
     a8a:	8f 93       	push	r24
     a8c:	9f 93       	push	r25
     a8e:	af 93       	push	r26
     a90:	bf 93       	push	r27
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	ef 93       	push	r30
     a98:	ff 93       	push	r31
	bool is_debounce_successful = TRUE;
	is_debounce_successful &= debounce(&PORTA_IN, ENCDR_SW, 10, 60);
     a9a:	2c e3       	ldi	r18, 0x3C	; 60
     a9c:	4a e0       	ldi	r20, 0x0A	; 10
     a9e:	64 e0       	ldi	r22, 0x04	; 4
     aa0:	88 e0       	ldi	r24, 0x08	; 8
     aa2:	94 e0       	ldi	r25, 0x04	; 4
     aa4:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <debounce>
     aa8:	18 2f       	mov	r17, r24
	is_debounce_successful &= debounce(&PORTA_IN, ENCDR_A, 10, 60);
     aaa:	2c e3       	ldi	r18, 0x3C	; 60
     aac:	4a e0       	ldi	r20, 0x0A	; 10
     aae:	66 e0       	ldi	r22, 0x06	; 6
     ab0:	88 e0       	ldi	r24, 0x08	; 8
     ab2:	94 e0       	ldi	r25, 0x04	; 4
     ab4:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <debounce>
     ab8:	11 70       	andi	r17, 0x01	; 1
     aba:	c1 2f       	mov	r28, r17
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	d2 2f       	mov	r29, r18
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	c8 23       	and	r28, r24
     ac4:	d9 23       	and	r29, r25
	is_debounce_successful &= debounce(&PORTA_IN, ENCDR_B, 10, 60);
     ac6:	2c e3       	ldi	r18, 0x3C	; 60
     ac8:	4a e0       	ldi	r20, 0x0A	; 10
     aca:	65 e0       	ldi	r22, 0x05	; 5
     acc:	88 e0       	ldi	r24, 0x08	; 8
     ace:	94 e0       	ldi	r25, 0x04	; 4
     ad0:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <debounce>
		
	if (is_debounce_successful)
     ad4:	21 e0       	ldi	r18, 0x01	; 1
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	cd 2b       	or	r28, r29
     ada:	11 f4       	brne	.+4      	; 0xae0 <__vector_3+0x6e>
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	82 23       	and	r24, r18
     ae4:	93 23       	and	r25, r19
     ae6:	89 2b       	or	r24, r25
     ae8:	09 f4       	brne	.+2      	; 0xaec <__vector_3+0x7a>
     aea:	9b c0       	rjmp	.+310    	; 0xc22 <__vector_3+0x1b0>
	{
		if(!(PORTA_IN & (1 << ENCDR_SW)))//if switch pin is low
     aec:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     af0:	84 ff       	sbrs	r24, 4
     af2:	97 c0       	rjmp	.+302    	; 0xc22 <__vector_3+0x1b0>
		{
				
		}
		else if(both_low)
     af4:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <__data_end>
     af8:	88 23       	and	r24, r24
     afa:	d9 f1       	breq	.+118    	; 0xb72 <__vector_3+0x100>
		{
			if((PORTA_IN & (1 << ENCDR_B)))//left turn
     afc:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     b00:	85 ff       	sbrs	r24, 5
     b02:	13 c0       	rjmp	.+38     	; 0xb2a <__vector_3+0xb8>
			{
				if (current >= 10)
     b04:	80 91 24 38 	lds	r24, 0x3824	; 0x803824 <current>
     b08:	90 91 25 38 	lds	r25, 0x3825	; 0x803825 <current+0x1>
     b0c:	0a 97       	sbiw	r24, 0x0a	; 10
     b0e:	20 f1       	brcs	.+72     	; 0xb58 <__vector_3+0xe6>
				{
					current -= 10;
     b10:	80 91 24 38 	lds	r24, 0x3824	; 0x803824 <current>
     b14:	90 91 25 38 	lds	r25, 0x3825	; 0x803825 <current+0x1>
     b18:	0a 97       	sbiw	r24, 0x0a	; 10
     b1a:	80 93 24 38 	sts	0x3824, r24	; 0x803824 <current>
     b1e:	90 93 25 38 	sts	0x3825, r25	; 0x803825 <current+0x1>
					update = TRUE;
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	80 93 26 38 	sts	0x3826, r24	; 0x803826 <update>
     b28:	17 c0       	rjmp	.+46     	; 0xb58 <__vector_3+0xe6>
				}
			}
			else if((PORTA_IN & (1 << ENCDR_A))) //right turn
     b2a:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     b2e:	86 ff       	sbrs	r24, 6
     b30:	13 c0       	rjmp	.+38     	; 0xb58 <__vector_3+0xe6>
			{
				if (current <= MAX_CURRENT - 10)
     b32:	80 91 24 38 	lds	r24, 0x3824	; 0x803824 <current>
     b36:	90 91 25 38 	lds	r25, 0x3825	; 0x803825 <current+0x1>
     b3a:	8b 3b       	cpi	r24, 0xBB	; 187
     b3c:	99 40       	sbci	r25, 0x09	; 9
     b3e:	60 f4       	brcc	.+24     	; 0xb58 <__vector_3+0xe6>
				{
					current += 10;
     b40:	80 91 24 38 	lds	r24, 0x3824	; 0x803824 <current>
     b44:	90 91 25 38 	lds	r25, 0x3825	; 0x803825 <current+0x1>
     b48:	0a 96       	adiw	r24, 0x0a	; 10
     b4a:	80 93 24 38 	sts	0x3824, r24	; 0x803824 <current>
     b4e:	90 93 25 38 	sts	0x3825, r25	; 0x803825 <current+0x1>
					update = TRUE;
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	80 93 26 38 	sts	0x3826, r24	; 0x803826 <update>
				}
			}
			both_low = FALSE;
     b58:	10 92 06 38 	sts	0x3806, r1	; 0x803806 <__data_end>
			b_low = FALSE;
     b5c:	10 92 07 38 	sts	0x3807, r1	; 0x803807 <b_low>
			a_low = FALSE;
     b60:	10 92 08 38 	sts	0x3808, r1	; 0x803808 <a_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b64:	8f e0       	ldi	r24, 0x0F	; 15
     b66:	97 e2       	ldi	r25, 0x27	; 39
     b68:	01 97       	sbiw	r24, 0x01	; 1
     b6a:	f1 f7       	brne	.-4      	; 0xb68 <__vector_3+0xf6>
     b6c:	00 c0       	rjmp	.+0      	; 0xb6e <__vector_3+0xfc>
     b6e:	00 00       	nop
     b70:	58 c0       	rjmp	.+176    	; 0xc22 <__vector_3+0x1b0>
			_delay_ms(2);
		}
		else if(!(PORTA_IN & (1 << ENCDR_B)) && !b_low)
     b72:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     b76:	85 fd       	sbrc	r24, 5
     b78:	1a c0       	rjmp	.+52     	; 0xbae <__vector_3+0x13c>
     b7a:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <b_low>
     b7e:	81 11       	cpse	r24, r1
     b80:	54 c0       	rjmp	.+168    	; 0xc2a <__vector_3+0x1b8>
		{
			b_low = TRUE;
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <b_low>
			if(a_low)
     b88:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <a_low>
     b8c:	88 23       	and	r24, r24
     b8e:	09 f4       	brne	.+2      	; 0xb92 <__vector_3+0x120>
     b90:	48 c0       	rjmp	.+144    	; 0xc22 <__vector_3+0x1b0>
			{
				both_low = TRUE;
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <__data_end>
     b98:	87 e8       	ldi	r24, 0x87	; 135
     b9a:	93 e1       	ldi	r25, 0x13	; 19
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	f1 f7       	brne	.-4      	; 0xb9c <__vector_3+0x12a>
     ba0:	00 c0       	rjmp	.+0      	; 0xba2 <__vector_3+0x130>
     ba2:	00 00       	nop
				_delay_ms(1);
				b_low = FALSE;
     ba4:	10 92 07 38 	sts	0x3807, r1	; 0x803807 <b_low>
				a_low = FALSE;
     ba8:	10 92 08 38 	sts	0x3808, r1	; 0x803808 <a_low>
     bac:	3a c0       	rjmp	.+116    	; 0xc22 <__vector_3+0x1b0>
			}
		}
		else if(!(PORTA_IN & (1 << ENCDR_A)) && !a_low)
     bae:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     bb2:	86 fd       	sbrc	r24, 6
     bb4:	19 c0       	rjmp	.+50     	; 0xbe8 <__vector_3+0x176>
     bb6:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <a_low>
     bba:	81 11       	cpse	r24, r1
     bbc:	3b c0       	rjmp	.+118    	; 0xc34 <__vector_3+0x1c2>
		{
			a_low = TRUE;
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <a_low>
			if(b_low)
     bc4:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <b_low>
     bc8:	88 23       	and	r24, r24
     bca:	59 f1       	breq	.+86     	; 0xc22 <__vector_3+0x1b0>
			{
				both_low = TRUE;
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <__data_end>
     bd2:	87 e8       	ldi	r24, 0x87	; 135
     bd4:	93 e1       	ldi	r25, 0x13	; 19
     bd6:	01 97       	sbiw	r24, 0x01	; 1
     bd8:	f1 f7       	brne	.-4      	; 0xbd6 <__vector_3+0x164>
     bda:	00 c0       	rjmp	.+0      	; 0xbdc <__vector_3+0x16a>
     bdc:	00 00       	nop
				_delay_ms(1);
				b_low = FALSE;
     bde:	10 92 07 38 	sts	0x3807, r1	; 0x803807 <b_low>
				a_low = FALSE;
     be2:	10 92 08 38 	sts	0x3808, r1	; 0x803808 <a_low>
     be6:	1d c0       	rjmp	.+58     	; 0xc22 <__vector_3+0x1b0>
			}
		}
		else if(b_low && PORTA_IN & (1 << ENCDR_A))//if B is low and A is high
     be8:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <b_low>
     bec:	88 23       	and	r24, r24
     bee:	59 f0       	breq	.+22     	; 0xc06 <__vector_3+0x194>
     bf0:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     bf4:	86 ff       	sbrs	r24, 6
     bf6:	07 c0       	rjmp	.+14     	; 0xc06 <__vector_3+0x194>
		{
			a_low = FALSE;
     bf8:	10 92 08 38 	sts	0x3808, r1	; 0x803808 <a_low>
			b_low = FALSE;
     bfc:	10 92 07 38 	sts	0x3807, r1	; 0x803807 <b_low>
			both_low = FALSE;
     c00:	10 92 06 38 	sts	0x3806, r1	; 0x803806 <__data_end>
     c04:	0e c0       	rjmp	.+28     	; 0xc22 <__vector_3+0x1b0>
		}
		else if(a_low && PORTA_IN & (1 << ENCDR_B)) //if A is low and B is high
     c06:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <a_low>
     c0a:	88 23       	and	r24, r24
     c0c:	51 f0       	breq	.+20     	; 0xc22 <__vector_3+0x1b0>
     c0e:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     c12:	85 ff       	sbrs	r24, 5
     c14:	06 c0       	rjmp	.+12     	; 0xc22 <__vector_3+0x1b0>
		{
			a_low = FALSE;
     c16:	10 92 08 38 	sts	0x3808, r1	; 0x803808 <a_low>
			b_low = FALSE;
     c1a:	10 92 07 38 	sts	0x3807, r1	; 0x803807 <b_low>
			both_low = FALSE;
     c1e:	10 92 06 38 	sts	0x3806, r1	; 0x803806 <__data_end>
		}
	}
	
	PORTA_INTFLAGS = 0xFF; //clear port interrupt flags
     c22:	8f ef       	ldi	r24, 0xFF	; 255
     c24:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
}
     c28:	18 c0       	rjmp	.+48     	; 0xc5a <__vector_3+0x1e8>
				_delay_ms(1);
				b_low = FALSE;
				a_low = FALSE;
			}
		}
		else if(!(PORTA_IN & (1 << ENCDR_A)) && !a_low)
     c2a:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     c2e:	86 ff       	sbrs	r24, 6
     c30:	0a c0       	rjmp	.+20     	; 0xc46 <__vector_3+0x1d4>
     c32:	de cf       	rjmp	.-68     	; 0xbf0 <__vector_3+0x17e>
				_delay_ms(1);
				b_low = FALSE;
				a_low = FALSE;
			}
		}
		else if(b_low && PORTA_IN & (1 << ENCDR_A))//if B is low and A is high
     c34:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <b_low>
     c38:	88 23       	and	r24, r24
     c3a:	49 f3       	breq	.-46     	; 0xc0e <__vector_3+0x19c>
     c3c:	09 c0       	rjmp	.+18     	; 0xc50 <__vector_3+0x1de>
				a_low = FALSE;
			}
		}
		else if(!(PORTA_IN & (1 << ENCDR_A)) && !a_low)
		{
			a_low = TRUE;
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <a_low>
     c44:	c3 cf       	rjmp	.-122    	; 0xbcc <__vector_3+0x15a>
				_delay_ms(1);
				b_low = FALSE;
				a_low = FALSE;
			}
		}
		else if(!(PORTA_IN & (1 << ENCDR_A)) && !a_low)
     c46:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <a_low>
     c4a:	81 11       	cpse	r24, r1
     c4c:	f3 cf       	rjmp	.-26     	; 0xc34 <__vector_3+0x1c2>
     c4e:	f7 cf       	rjmp	.-18     	; 0xc3e <__vector_3+0x1cc>
				_delay_ms(1);
				b_low = FALSE;
				a_low = FALSE;
			}
		}
		else if(b_low && PORTA_IN & (1 << ENCDR_A))//if B is low and A is high
     c50:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     c54:	86 ff       	sbrs	r24, 6
     c56:	db cf       	rjmp	.-74     	; 0xc0e <__vector_3+0x19c>
     c58:	cf cf       	rjmp	.-98     	; 0xbf8 <__vector_3+0x186>
			both_low = FALSE;
		}
	}
	
	PORTA_INTFLAGS = 0xFF; //clear port interrupt flags
}
     c5a:	ff 91       	pop	r31
     c5c:	ef 91       	pop	r30
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	bf 91       	pop	r27
     c64:	af 91       	pop	r26
     c66:	9f 91       	pop	r25
     c68:	8f 91       	pop	r24
     c6a:	7f 91       	pop	r23
     c6c:	6f 91       	pop	r22
     c6e:	5f 91       	pop	r21
     c70:	4f 91       	pop	r20
     c72:	3f 91       	pop	r19
     c74:	2f 91       	pop	r18
     c76:	1f 91       	pop	r17
     c78:	0f 90       	pop	r0
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	0f 90       	pop	r0
     c7e:	1f 90       	pop	r1
     c80:	18 95       	reti

00000c82 <TWI_MasterInit>:
                    uint8_t bytesToRead)
{
	//PORTB_OUTTGL = (1 << 4);
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
	return twi_status;
}
     c82:	fc 01       	movw	r30, r24
     c84:	60 83       	st	Z, r22
     c86:	71 83       	std	Z+1, r23	; 0x01
     c88:	81 ec       	ldi	r24, 0xC1	; 193
     c8a:	db 01       	movw	r26, r22
     c8c:	13 96       	adiw	r26, 0x03	; 3
     c8e:	8c 93       	st	X, r24
     c90:	a0 81       	ld	r26, Z
     c92:	b1 81       	ldd	r27, Z+1	; 0x01
     c94:	16 96       	adiw	r26, 0x06	; 6
     c96:	4c 93       	st	X, r20
     c98:	01 90       	ld	r0, Z+
     c9a:	f0 81       	ld	r31, Z
     c9c:	e0 2d       	mov	r30, r0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	85 83       	std	Z+5, r24	; 0x05
     ca2:	08 95       	ret

00000ca4 <TWI_MasterWriteRead>:
     ca4:	0f 93       	push	r16
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	fc 01       	movw	r30, r24
     cac:	29 30       	cpi	r18, 0x09	; 9
     cae:	98 f5       	brcc	.+102    	; 0xd16 <TWI_MasterWriteRead+0x72>
     cb0:	09 30       	cpi	r16, 0x09	; 9
     cb2:	98 f5       	brcc	.+102    	; 0xd1a <TWI_MasterWriteRead+0x76>
     cb4:	87 89       	ldd	r24, Z+23	; 0x17
     cb6:	81 11       	cpse	r24, r1
     cb8:	32 c0       	rjmp	.+100    	; 0xd1e <TWI_MasterWriteRead+0x7a>
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	87 8b       	std	Z+23, r24	; 0x17
     cbe:	10 8e       	std	Z+24, r1	; 0x18
     cc0:	66 0f       	add	r22, r22
     cc2:	62 83       	std	Z+2, r22	; 0x02
     cc4:	22 23       	and	r18, r18
     cc6:	69 f0       	breq	.+26     	; 0xce2 <TWI_MasterWriteRead+0x3e>
     cc8:	a4 2f       	mov	r26, r20
     cca:	b5 2f       	mov	r27, r21
     ccc:	40 e0       	ldi	r20, 0x00	; 0
     cce:	50 e0       	ldi	r21, 0x00	; 0
     cd0:	8d 91       	ld	r24, X+
     cd2:	ef 01       	movw	r28, r30
     cd4:	c4 0f       	add	r28, r20
     cd6:	d5 1f       	adc	r29, r21
     cd8:	8b 83       	std	Y+3, r24	; 0x03
     cda:	4f 5f       	subi	r20, 0xFF	; 255
     cdc:	5f 4f       	sbci	r21, 0xFF	; 255
     cde:	42 17       	cp	r20, r18
     ce0:	b8 f3       	brcs	.-18     	; 0xcd0 <TWI_MasterWriteRead+0x2c>
     ce2:	23 8b       	std	Z+19, r18	; 0x13
     ce4:	04 8b       	std	Z+20, r16	; 0x14
     ce6:	15 8a       	std	Z+21, r1	; 0x15
     ce8:	16 8a       	std	Z+22, r1	; 0x16
     cea:	83 89       	ldd	r24, Z+19	; 0x13
     cec:	88 23       	and	r24, r24
     cee:	41 f0       	breq	.+16     	; 0xd00 <TWI_MasterWriteRead+0x5c>
     cf0:	82 81       	ldd	r24, Z+2	; 0x02
     cf2:	8e 7f       	andi	r24, 0xFE	; 254
     cf4:	01 90       	ld	r0, Z+
     cf6:	f0 81       	ld	r31, Z
     cf8:	e0 2d       	mov	r30, r0
     cfa:	87 83       	std	Z+7, r24	; 0x07
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	12 c0       	rjmp	.+36     	; 0xd24 <TWI_MasterWriteRead+0x80>
     d00:	84 89       	ldd	r24, Z+20	; 0x14
     d02:	88 23       	and	r24, r24
     d04:	71 f0       	breq	.+28     	; 0xd22 <TWI_MasterWriteRead+0x7e>
     d06:	82 81       	ldd	r24, Z+2	; 0x02
     d08:	81 60       	ori	r24, 0x01	; 1
     d0a:	01 90       	ld	r0, Z+
     d0c:	f0 81       	ld	r31, Z
     d0e:	e0 2d       	mov	r30, r0
     d10:	87 83       	std	Z+7, r24	; 0x07
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	07 c0       	rjmp	.+14     	; 0xd24 <TWI_MasterWriteRead+0x80>
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	05 c0       	rjmp	.+10     	; 0xd24 <TWI_MasterWriteRead+0x80>
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	03 c0       	rjmp	.+6      	; 0xd24 <TWI_MasterWriteRead+0x80>
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	01 c0       	rjmp	.+2      	; 0xd24 <TWI_MasterWriteRead+0x80>
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	0f 91       	pop	r16
     d2a:	08 95       	ret

00000d2c <TWI_MasterWrite>:
     d2c:	0f 93       	push	r16
     d2e:	00 e0       	ldi	r16, 0x00	; 0
     d30:	0e 94 52 06 	call	0xca4	; 0xca4 <TWI_MasterWriteRead>
     d34:	0f 91       	pop	r16
     d36:	08 95       	ret

00000d38 <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi) //--done
{
     d38:	fc 01       	movw	r30, r24
	uint8_t currentStatus = twi->interface->MSTATUS;
     d3a:	a0 81       	ld	r26, Z
     d3c:	b1 81       	ldd	r27, Z+1	; 0x01
     d3e:	15 96       	adiw	r26, 0x05	; 5
     d40:	9c 91       	ld	r25, X
     d42:	15 97       	sbiw	r26, 0x05	; 5

	/* If bus error. */
	if (currentStatus & TWI_BUSERR_bm) {
     d44:	92 ff       	sbrs	r25, 2
     d46:	03 c0       	rjmp	.+6      	; 0xd4e <TWI_MasterArbitrationLostBusErrorHandler+0x16>
		twi->result = TWIM_RESULT_BUS_ERROR;
     d48:	84 e0       	ldi	r24, 0x04	; 4
     d4a:	80 8f       	std	Z+24, r24	; 0x18
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <TWI_MasterArbitrationLostBusErrorHandler+0x1a>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
     d4e:	83 e0       	ldi	r24, 0x03	; 3
     d50:	80 8f       	std	Z+24, r24	; 0x18
	}

	/* Clear interrupt flag. */
	twi->interface->MSTATUS = currentStatus | TWI_ARBLOST_bm;
     d52:	98 60       	ori	r25, 0x08	; 8
     d54:	15 96       	adiw	r26, 0x05	; 5
     d56:	9c 93       	st	X, r25

	twi->status = TWIM_STATUS_READY;
     d58:	17 8a       	std	Z+23, r1	; 0x17
     d5a:	08 95       	ret

00000d5c <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi) //--done
{
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	fc 01       	movw	r30, r24
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
     d62:	93 89       	ldd	r25, Z+19	; 0x13
	uint8_t bytesToRead   = twi->bytesToRead;
     d64:	24 89       	ldd	r18, Z+20	; 0x14

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MSTATUS & TWI_RXACK_bm) {
     d66:	a0 81       	ld	r26, Z
     d68:	b1 81       	ldd	r27, Z+1	; 0x01
     d6a:	15 96       	adiw	r26, 0x05	; 5
     d6c:	8c 91       	ld	r24, X
     d6e:	15 97       	sbiw	r26, 0x05	; 5
     d70:	84 ff       	sbrs	r24, 4
     d72:	07 c0       	rjmp	.+14     	; 0xd82 <TWI_MasterWriteHandler+0x26>
		twi->interface->MCTRLB = TWI_MCMD_STOP_gc;
     d74:	83 e0       	ldi	r24, 0x03	; 3
     d76:	14 96       	adiw	r26, 0x04	; 4
     d78:	8c 93       	st	X, r24
		twi->result = TWIM_RESULT_NACK_RECEIVED;
     d7a:	85 e0       	ldi	r24, 0x05	; 5
     d7c:	80 8f       	std	Z+24, r24	; 0x18
		twi->status = TWIM_STATUS_READY;
     d7e:	17 8a       	std	Z+23, r1	; 0x17
     d80:	1c c0       	rjmp	.+56     	; 0xdba <TWI_MasterWriteHandler+0x5e>
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
     d82:	85 89       	ldd	r24, Z+21	; 0x15
     d84:	89 17       	cp	r24, r25
     d86:	58 f4       	brcc	.+22     	; 0xd9e <TWI_MasterWriteHandler+0x42>
		uint8_t data = twi->writeData[twi->bytesWritten];
     d88:	85 89       	ldd	r24, Z+21	; 0x15
     d8a:	ef 01       	movw	r28, r30
     d8c:	c8 0f       	add	r28, r24
     d8e:	d1 1d       	adc	r29, r1
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MDATA = data;
     d92:	18 96       	adiw	r26, 0x08	; 8
     d94:	8c 93       	st	X, r24
		++twi->bytesWritten;
     d96:	85 89       	ldd	r24, Z+21	; 0x15
     d98:	8f 5f       	subi	r24, 0xFF	; 255
     d9a:	85 8b       	std	Z+21, r24	; 0x15
     d9c:	0e c0       	rjmp	.+28     	; 0xdba <TWI_MasterWriteHandler+0x5e>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
     d9e:	86 89       	ldd	r24, Z+22	; 0x16
     da0:	82 17       	cp	r24, r18
     da2:	28 f4       	brcc	.+10     	; 0xdae <TWI_MasterWriteHandler+0x52>
		uint8_t readAddress = twi->address | 0x01;
     da4:	82 81       	ldd	r24, Z+2	; 0x02
     da6:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MADDR = readAddress;
     da8:	17 96       	adiw	r26, 0x07	; 7
     daa:	8c 93       	st	X, r24
     dac:	06 c0       	rjmp	.+12     	; 0xdba <TWI_MasterWriteHandler+0x5e>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MCTRLB = TWI_MCMD_STOP_gc;
     dae:	83 e0       	ldi	r24, 0x03	; 3
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result) //--done
{
	twi->result = result;
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
     db8:	17 8a       	std	Z+23, r1	; 0x17
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MCTRLB = TWI_MCMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	08 95       	ret

00000dc0 <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi) //--done
{
     dc0:	fc 01       	movw	r30, r24
	//PORTB_OUTTGL = (1 << 4);
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
     dc2:	86 89       	ldd	r24, Z+22	; 0x16
     dc4:	88 30       	cpi	r24, 0x08	; 8
     dc6:	70 f4       	brcc	.+28     	; 0xde4 <TWI_MasterReadHandler+0x24>
		uint8_t data = twi->interface->MDATA;
     dc8:	a0 81       	ld	r26, Z
     dca:	b1 81       	ldd	r27, Z+1	; 0x01
     dcc:	18 96       	adiw	r26, 0x08	; 8
     dce:	8c 91       	ld	r24, X
		twi->readData[twi->bytesRead] = data; //--!
     dd0:	96 89       	ldd	r25, Z+22	; 0x16
     dd2:	df 01       	movw	r26, r30
     dd4:	a9 0f       	add	r26, r25
     dd6:	b1 1d       	adc	r27, r1
     dd8:	1b 96       	adiw	r26, 0x0b	; 11
     dda:	8c 93       	st	X, r24
		twi->bytesRead++;
     ddc:	86 89       	ldd	r24, Z+22	; 0x16
     dde:	8f 5f       	subi	r24, 0xFF	; 255
     de0:	86 8b       	std	Z+22, r24	; 0x16
     de2:	08 c0       	rjmp	.+16     	; 0xdf4 <TWI_MasterReadHandler+0x34>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MCTRLB = TWI_MCMD_STOP_gc;
     de4:	a0 81       	ld	r26, Z
     de6:	b1 81       	ldd	r27, Z+1	; 0x01
     de8:	83 e0       	ldi	r24, 0x03	; 3
     dea:	14 96       	adiw	r26, 0x04	; 4
     dec:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result) //--done
{
	twi->result = result;
     dee:	82 e0       	ldi	r24, 0x02	; 2
     df0:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
     df2:	17 8a       	std	Z+23, r1	; 0x17
		twi->interface->MCTRLB = TWI_MCMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
     df4:	94 89       	ldd	r25, Z+20	; 0x14

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
     df6:	86 89       	ldd	r24, Z+22	; 0x16
     df8:	89 17       	cp	r24, r25
     dfa:	30 f4       	brcc	.+12     	; 0xe08 <TWI_MasterReadHandler+0x48>
		twi->interface->MCTRLB = TWI_MCMD_RECVTRANS_gc;
     dfc:	01 90       	ld	r0, Z+
     dfe:	f0 81       	ld	r31, Z
     e00:	e0 2d       	mov	r30, r0
     e02:	82 e0       	ldi	r24, 0x02	; 2
     e04:	84 83       	std	Z+4, r24	; 0x04
     e06:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MCTRLB = TWI_ACKACT_bm |
     e08:	a0 81       	ld	r26, Z
     e0a:	b1 81       	ldd	r27, Z+1	; 0x01
     e0c:	87 e0       	ldi	r24, 0x07	; 7
     e0e:	14 96       	adiw	r26, 0x04	; 4
     e10:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result) //--done
{
	twi->result = result;
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
     e16:	17 8a       	std	Z+23, r1	; 0x17
     e18:	08 95       	ret

00000e1a <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi) //--done
{
	uint8_t currentStatus = twi->interface->MSTATUS;
     e1a:	dc 01       	movw	r26, r24
     e1c:	ed 91       	ld	r30, X+
     e1e:	fc 91       	ld	r31, X
     e20:	25 81       	ldd	r18, Z+5	; 0x05

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_ARBLOST_bm) ||
     e22:	32 2f       	mov	r19, r18
     e24:	3c 70       	andi	r19, 0x0C	; 12
     e26:	19 f0       	breq	.+6      	; 0xe2e <TWI_MasterInterruptHandler+0x14>
	    (currentStatus & TWI_BUSERR_bm)) {
		TWI_MasterArbitrationLostBusErrorHandler(twi);
     e28:	0e 94 9c 06 	call	0xd38	; 0xd38 <TWI_MasterArbitrationLostBusErrorHandler>
     e2c:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_WIF_bm) {
     e2e:	26 ff       	sbrs	r18, 6
     e30:	03 c0       	rjmp	.+6      	; 0xe38 <TWI_MasterInterruptHandler+0x1e>
		TWI_MasterWriteHandler(twi);
     e32:	0e 94 ae 06 	call	0xd5c	; 0xd5c <TWI_MasterWriteHandler>
     e36:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_RIF_bm) {
     e38:	22 23       	and	r18, r18
     e3a:	1c f4       	brge	.+6      	; 0xe42 <TWI_MasterInterruptHandler+0x28>
		TWI_MasterReadHandler(twi);
     e3c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <TWI_MasterReadHandler>
     e40:	08 95       	ret
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result) //--done
{
	twi->result = result;
     e42:	26 e0       	ldi	r18, 0x06	; 6
     e44:	fc 01       	movw	r30, r24
     e46:	20 8f       	std	Z+24, r18	; 0x18
	twi->status = TWIM_STATUS_READY;
     e48:	17 8a       	std	Z+23, r1	; 0x17
     e4a:	08 95       	ret

00000e4c <__umulhisi3>:
     e4c:	a2 9f       	mul	r26, r18
     e4e:	b0 01       	movw	r22, r0
     e50:	b3 9f       	mul	r27, r19
     e52:	c0 01       	movw	r24, r0
     e54:	a3 9f       	mul	r26, r19
     e56:	70 0d       	add	r23, r0
     e58:	81 1d       	adc	r24, r1
     e5a:	11 24       	eor	r1, r1
     e5c:	91 1d       	adc	r25, r1
     e5e:	b2 9f       	mul	r27, r18
     e60:	70 0d       	add	r23, r0
     e62:	81 1d       	adc	r24, r1
     e64:	11 24       	eor	r1, r1
     e66:	91 1d       	adc	r25, r1
     e68:	08 95       	ret

00000e6a <malloc>:
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	82 30       	cpi	r24, 0x02	; 2
     e74:	91 05       	cpc	r25, r1
     e76:	10 f4       	brcc	.+4      	; 0xe7c <malloc+0x12>
     e78:	82 e0       	ldi	r24, 0x02	; 2
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <__flp>
     e80:	f0 91 2a 38 	lds	r31, 0x382A	; 0x80382a <__flp+0x1>
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	a0 e0       	ldi	r26, 0x00	; 0
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	30 97       	sbiw	r30, 0x00	; 0
     e8e:	19 f1       	breq	.+70     	; 0xed6 <malloc+0x6c>
     e90:	40 81       	ld	r20, Z
     e92:	51 81       	ldd	r21, Z+1	; 0x01
     e94:	02 81       	ldd	r16, Z+2	; 0x02
     e96:	13 81       	ldd	r17, Z+3	; 0x03
     e98:	48 17       	cp	r20, r24
     e9a:	59 07       	cpc	r21, r25
     e9c:	c8 f0       	brcs	.+50     	; 0xed0 <malloc+0x66>
     e9e:	84 17       	cp	r24, r20
     ea0:	95 07       	cpc	r25, r21
     ea2:	69 f4       	brne	.+26     	; 0xebe <malloc+0x54>
     ea4:	10 97       	sbiw	r26, 0x00	; 0
     ea6:	31 f0       	breq	.+12     	; 0xeb4 <malloc+0x4a>
     ea8:	12 96       	adiw	r26, 0x02	; 2
     eaa:	0c 93       	st	X, r16
     eac:	12 97       	sbiw	r26, 0x02	; 2
     eae:	13 96       	adiw	r26, 0x03	; 3
     eb0:	1c 93       	st	X, r17
     eb2:	27 c0       	rjmp	.+78     	; 0xf02 <malloc+0x98>
     eb4:	00 93 29 38 	sts	0x3829, r16	; 0x803829 <__flp>
     eb8:	10 93 2a 38 	sts	0x382A, r17	; 0x80382a <__flp+0x1>
     ebc:	22 c0       	rjmp	.+68     	; 0xf02 <malloc+0x98>
     ebe:	21 15       	cp	r18, r1
     ec0:	31 05       	cpc	r19, r1
     ec2:	19 f0       	breq	.+6      	; 0xeca <malloc+0x60>
     ec4:	42 17       	cp	r20, r18
     ec6:	53 07       	cpc	r21, r19
     ec8:	18 f4       	brcc	.+6      	; 0xed0 <malloc+0x66>
     eca:	9a 01       	movw	r18, r20
     ecc:	bd 01       	movw	r22, r26
     ece:	ef 01       	movw	r28, r30
     ed0:	df 01       	movw	r26, r30
     ed2:	f8 01       	movw	r30, r16
     ed4:	db cf       	rjmp	.-74     	; 0xe8c <malloc+0x22>
     ed6:	21 15       	cp	r18, r1
     ed8:	31 05       	cpc	r19, r1
     eda:	f9 f0       	breq	.+62     	; 0xf1a <malloc+0xb0>
     edc:	28 1b       	sub	r18, r24
     ede:	39 0b       	sbc	r19, r25
     ee0:	24 30       	cpi	r18, 0x04	; 4
     ee2:	31 05       	cpc	r19, r1
     ee4:	80 f4       	brcc	.+32     	; 0xf06 <malloc+0x9c>
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	9b 81       	ldd	r25, Y+3	; 0x03
     eea:	61 15       	cp	r22, r1
     eec:	71 05       	cpc	r23, r1
     eee:	21 f0       	breq	.+8      	; 0xef8 <malloc+0x8e>
     ef0:	fb 01       	movw	r30, r22
     ef2:	82 83       	std	Z+2, r24	; 0x02
     ef4:	93 83       	std	Z+3, r25	; 0x03
     ef6:	04 c0       	rjmp	.+8      	; 0xf00 <malloc+0x96>
     ef8:	80 93 29 38 	sts	0x3829, r24	; 0x803829 <__flp>
     efc:	90 93 2a 38 	sts	0x382A, r25	; 0x80382a <__flp+0x1>
     f00:	fe 01       	movw	r30, r28
     f02:	32 96       	adiw	r30, 0x02	; 2
     f04:	44 c0       	rjmp	.+136    	; 0xf8e <malloc+0x124>
     f06:	fe 01       	movw	r30, r28
     f08:	e2 0f       	add	r30, r18
     f0a:	f3 1f       	adc	r31, r19
     f0c:	81 93       	st	Z+, r24
     f0e:	91 93       	st	Z+, r25
     f10:	22 50       	subi	r18, 0x02	; 2
     f12:	31 09       	sbc	r19, r1
     f14:	28 83       	st	Y, r18
     f16:	39 83       	std	Y+1, r19	; 0x01
     f18:	3a c0       	rjmp	.+116    	; 0xf8e <malloc+0x124>
     f1a:	20 91 27 38 	lds	r18, 0x3827	; 0x803827 <__brkval>
     f1e:	30 91 28 38 	lds	r19, 0x3828	; 0x803828 <__brkval+0x1>
     f22:	23 2b       	or	r18, r19
     f24:	41 f4       	brne	.+16     	; 0xf36 <malloc+0xcc>
     f26:	20 91 02 38 	lds	r18, 0x3802	; 0x803802 <__malloc_heap_start>
     f2a:	30 91 03 38 	lds	r19, 0x3803	; 0x803803 <__malloc_heap_start+0x1>
     f2e:	20 93 27 38 	sts	0x3827, r18	; 0x803827 <__brkval>
     f32:	30 93 28 38 	sts	0x3828, r19	; 0x803828 <__brkval+0x1>
     f36:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__data_start>
     f3a:	30 91 01 38 	lds	r19, 0x3801	; 0x803801 <__data_start+0x1>
     f3e:	21 15       	cp	r18, r1
     f40:	31 05       	cpc	r19, r1
     f42:	41 f4       	brne	.+16     	; 0xf54 <malloc+0xea>
     f44:	2d b7       	in	r18, 0x3d	; 61
     f46:	3e b7       	in	r19, 0x3e	; 62
     f48:	40 91 04 38 	lds	r20, 0x3804	; 0x803804 <__malloc_margin>
     f4c:	50 91 05 38 	lds	r21, 0x3805	; 0x803805 <__malloc_margin+0x1>
     f50:	24 1b       	sub	r18, r20
     f52:	35 0b       	sbc	r19, r21
     f54:	e0 91 27 38 	lds	r30, 0x3827	; 0x803827 <__brkval>
     f58:	f0 91 28 38 	lds	r31, 0x3828	; 0x803828 <__brkval+0x1>
     f5c:	e2 17       	cp	r30, r18
     f5e:	f3 07       	cpc	r31, r19
     f60:	a0 f4       	brcc	.+40     	; 0xf8a <malloc+0x120>
     f62:	2e 1b       	sub	r18, r30
     f64:	3f 0b       	sbc	r19, r31
     f66:	28 17       	cp	r18, r24
     f68:	39 07       	cpc	r19, r25
     f6a:	78 f0       	brcs	.+30     	; 0xf8a <malloc+0x120>
     f6c:	ac 01       	movw	r20, r24
     f6e:	4e 5f       	subi	r20, 0xFE	; 254
     f70:	5f 4f       	sbci	r21, 0xFF	; 255
     f72:	24 17       	cp	r18, r20
     f74:	35 07       	cpc	r19, r21
     f76:	48 f0       	brcs	.+18     	; 0xf8a <malloc+0x120>
     f78:	4e 0f       	add	r20, r30
     f7a:	5f 1f       	adc	r21, r31
     f7c:	40 93 27 38 	sts	0x3827, r20	; 0x803827 <__brkval>
     f80:	50 93 28 38 	sts	0x3828, r21	; 0x803828 <__brkval+0x1>
     f84:	81 93       	st	Z+, r24
     f86:	91 93       	st	Z+, r25
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <malloc+0x124>
     f8a:	e0 e0       	ldi	r30, 0x00	; 0
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	cf 01       	movw	r24, r30
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	1f 91       	pop	r17
     f96:	0f 91       	pop	r16
     f98:	08 95       	ret

00000f9a <free>:
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	00 97       	sbiw	r24, 0x00	; 0
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <free+0xa>
     fa2:	81 c0       	rjmp	.+258    	; 0x10a6 <free+0x10c>
     fa4:	fc 01       	movw	r30, r24
     fa6:	32 97       	sbiw	r30, 0x02	; 2
     fa8:	12 82       	std	Z+2, r1	; 0x02
     faa:	13 82       	std	Z+3, r1	; 0x03
     fac:	a0 91 29 38 	lds	r26, 0x3829	; 0x803829 <__flp>
     fb0:	b0 91 2a 38 	lds	r27, 0x382A	; 0x80382a <__flp+0x1>
     fb4:	10 97       	sbiw	r26, 0x00	; 0
     fb6:	81 f4       	brne	.+32     	; 0xfd8 <free+0x3e>
     fb8:	20 81       	ld	r18, Z
     fba:	31 81       	ldd	r19, Z+1	; 0x01
     fbc:	82 0f       	add	r24, r18
     fbe:	93 1f       	adc	r25, r19
     fc0:	20 91 27 38 	lds	r18, 0x3827	; 0x803827 <__brkval>
     fc4:	30 91 28 38 	lds	r19, 0x3828	; 0x803828 <__brkval+0x1>
     fc8:	28 17       	cp	r18, r24
     fca:	39 07       	cpc	r19, r25
     fcc:	51 f5       	brne	.+84     	; 0x1022 <free+0x88>
     fce:	e0 93 27 38 	sts	0x3827, r30	; 0x803827 <__brkval>
     fd2:	f0 93 28 38 	sts	0x3828, r31	; 0x803828 <__brkval+0x1>
     fd6:	67 c0       	rjmp	.+206    	; 0x10a6 <free+0x10c>
     fd8:	ed 01       	movw	r28, r26
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	ce 17       	cp	r28, r30
     fe0:	df 07       	cpc	r29, r31
     fe2:	40 f4       	brcc	.+16     	; 0xff4 <free+0x5a>
     fe4:	4a 81       	ldd	r20, Y+2	; 0x02
     fe6:	5b 81       	ldd	r21, Y+3	; 0x03
     fe8:	9e 01       	movw	r18, r28
     fea:	41 15       	cp	r20, r1
     fec:	51 05       	cpc	r21, r1
     fee:	f1 f0       	breq	.+60     	; 0x102c <free+0x92>
     ff0:	ea 01       	movw	r28, r20
     ff2:	f5 cf       	rjmp	.-22     	; 0xfde <free+0x44>
     ff4:	c2 83       	std	Z+2, r28	; 0x02
     ff6:	d3 83       	std	Z+3, r29	; 0x03
     ff8:	40 81       	ld	r20, Z
     ffa:	51 81       	ldd	r21, Z+1	; 0x01
     ffc:	84 0f       	add	r24, r20
     ffe:	95 1f       	adc	r25, r21
    1000:	c8 17       	cp	r28, r24
    1002:	d9 07       	cpc	r29, r25
    1004:	59 f4       	brne	.+22     	; 0x101c <free+0x82>
    1006:	88 81       	ld	r24, Y
    1008:	99 81       	ldd	r25, Y+1	; 0x01
    100a:	84 0f       	add	r24, r20
    100c:	95 1f       	adc	r25, r21
    100e:	02 96       	adiw	r24, 0x02	; 2
    1010:	80 83       	st	Z, r24
    1012:	91 83       	std	Z+1, r25	; 0x01
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	9b 81       	ldd	r25, Y+3	; 0x03
    1018:	82 83       	std	Z+2, r24	; 0x02
    101a:	93 83       	std	Z+3, r25	; 0x03
    101c:	21 15       	cp	r18, r1
    101e:	31 05       	cpc	r19, r1
    1020:	29 f4       	brne	.+10     	; 0x102c <free+0x92>
    1022:	e0 93 29 38 	sts	0x3829, r30	; 0x803829 <__flp>
    1026:	f0 93 2a 38 	sts	0x382A, r31	; 0x80382a <__flp+0x1>
    102a:	3d c0       	rjmp	.+122    	; 0x10a6 <free+0x10c>
    102c:	e9 01       	movw	r28, r18
    102e:	ea 83       	std	Y+2, r30	; 0x02
    1030:	fb 83       	std	Y+3, r31	; 0x03
    1032:	49 91       	ld	r20, Y+
    1034:	59 91       	ld	r21, Y+
    1036:	c4 0f       	add	r28, r20
    1038:	d5 1f       	adc	r29, r21
    103a:	ec 17       	cp	r30, r28
    103c:	fd 07       	cpc	r31, r29
    103e:	61 f4       	brne	.+24     	; 0x1058 <free+0xbe>
    1040:	80 81       	ld	r24, Z
    1042:	91 81       	ldd	r25, Z+1	; 0x01
    1044:	84 0f       	add	r24, r20
    1046:	95 1f       	adc	r25, r21
    1048:	02 96       	adiw	r24, 0x02	; 2
    104a:	e9 01       	movw	r28, r18
    104c:	88 83       	st	Y, r24
    104e:	99 83       	std	Y+1, r25	; 0x01
    1050:	82 81       	ldd	r24, Z+2	; 0x02
    1052:	93 81       	ldd	r25, Z+3	; 0x03
    1054:	8a 83       	std	Y+2, r24	; 0x02
    1056:	9b 83       	std	Y+3, r25	; 0x03
    1058:	e0 e0       	ldi	r30, 0x00	; 0
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	12 96       	adiw	r26, 0x02	; 2
    105e:	8d 91       	ld	r24, X+
    1060:	9c 91       	ld	r25, X
    1062:	13 97       	sbiw	r26, 0x03	; 3
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	19 f0       	breq	.+6      	; 0x106e <free+0xd4>
    1068:	fd 01       	movw	r30, r26
    106a:	dc 01       	movw	r26, r24
    106c:	f7 cf       	rjmp	.-18     	; 0x105c <free+0xc2>
    106e:	8d 91       	ld	r24, X+
    1070:	9c 91       	ld	r25, X
    1072:	11 97       	sbiw	r26, 0x01	; 1
    1074:	9d 01       	movw	r18, r26
    1076:	2e 5f       	subi	r18, 0xFE	; 254
    1078:	3f 4f       	sbci	r19, 0xFF	; 255
    107a:	82 0f       	add	r24, r18
    107c:	93 1f       	adc	r25, r19
    107e:	20 91 27 38 	lds	r18, 0x3827	; 0x803827 <__brkval>
    1082:	30 91 28 38 	lds	r19, 0x3828	; 0x803828 <__brkval+0x1>
    1086:	28 17       	cp	r18, r24
    1088:	39 07       	cpc	r19, r25
    108a:	69 f4       	brne	.+26     	; 0x10a6 <free+0x10c>
    108c:	30 97       	sbiw	r30, 0x00	; 0
    108e:	29 f4       	brne	.+10     	; 0x109a <free+0x100>
    1090:	10 92 29 38 	sts	0x3829, r1	; 0x803829 <__flp>
    1094:	10 92 2a 38 	sts	0x382A, r1	; 0x80382a <__flp+0x1>
    1098:	02 c0       	rjmp	.+4      	; 0x109e <free+0x104>
    109a:	12 82       	std	Z+2, r1	; 0x02
    109c:	13 82       	std	Z+3, r1	; 0x03
    109e:	a0 93 27 38 	sts	0x3827, r26	; 0x803827 <__brkval>
    10a2:	b0 93 28 38 	sts	0x3828, r27	; 0x803828 <__brkval+0x1>
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	08 95       	ret

000010ac <snprintf>:
    10ac:	ae e0       	ldi	r26, 0x0E	; 14
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	ec e5       	ldi	r30, 0x5C	; 92
    10b2:	f8 e0       	ldi	r31, 0x08	; 8
    10b4:	0c 94 25 0b 	jmp	0x164a	; 0x164a <__prologue_saves__+0x1c>
    10b8:	0d 89       	ldd	r16, Y+21	; 0x15
    10ba:	1e 89       	ldd	r17, Y+22	; 0x16
    10bc:	8f 89       	ldd	r24, Y+23	; 0x17
    10be:	98 8d       	ldd	r25, Y+24	; 0x18
    10c0:	26 e0       	ldi	r18, 0x06	; 6
    10c2:	2c 83       	std	Y+4, r18	; 0x04
    10c4:	09 83       	std	Y+1, r16	; 0x01
    10c6:	1a 83       	std	Y+2, r17	; 0x02
    10c8:	97 ff       	sbrs	r25, 7
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <snprintf+0x24>
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	90 e8       	ldi	r25, 0x80	; 128
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	8d 83       	std	Y+5, r24	; 0x05
    10d4:	9e 83       	std	Y+6, r25	; 0x06
    10d6:	ae 01       	movw	r20, r28
    10d8:	45 5e       	subi	r20, 0xE5	; 229
    10da:	5f 4f       	sbci	r21, 0xFF	; 255
    10dc:	69 8d       	ldd	r22, Y+25	; 0x19
    10de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10e0:	ce 01       	movw	r24, r28
    10e2:	01 96       	adiw	r24, 0x01	; 1
    10e4:	0e 94 86 08 	call	0x110c	; 0x110c <vfprintf>
    10e8:	4d 81       	ldd	r20, Y+5	; 0x05
    10ea:	5e 81       	ldd	r21, Y+6	; 0x06
    10ec:	57 fd       	sbrc	r21, 7
    10ee:	0a c0       	rjmp	.+20     	; 0x1104 <snprintf+0x58>
    10f0:	2f 81       	ldd	r18, Y+7	; 0x07
    10f2:	38 85       	ldd	r19, Y+8	; 0x08
    10f4:	42 17       	cp	r20, r18
    10f6:	53 07       	cpc	r21, r19
    10f8:	0c f4       	brge	.+2      	; 0x10fc <snprintf+0x50>
    10fa:	9a 01       	movw	r18, r20
    10fc:	f8 01       	movw	r30, r16
    10fe:	e2 0f       	add	r30, r18
    1100:	f3 1f       	adc	r31, r19
    1102:	10 82       	st	Z, r1
    1104:	2e 96       	adiw	r28, 0x0e	; 14
    1106:	e4 e0       	ldi	r30, 0x04	; 4
    1108:	0c 94 3e 0b 	jmp	0x167c	; 0x167c <__epilogue_restores__+0x1c>

0000110c <vfprintf>:
    110c:	ab e0       	ldi	r26, 0x0B	; 11
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	ec e8       	ldi	r30, 0x8C	; 140
    1112:	f8 e0       	ldi	r31, 0x08	; 8
    1114:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__prologue_saves__>
    1118:	6c 01       	movw	r12, r24
    111a:	7b 01       	movw	r14, r22
    111c:	8a 01       	movw	r16, r20
    111e:	fc 01       	movw	r30, r24
    1120:	16 82       	std	Z+6, r1	; 0x06
    1122:	17 82       	std	Z+7, r1	; 0x07
    1124:	83 81       	ldd	r24, Z+3	; 0x03
    1126:	81 ff       	sbrs	r24, 1
    1128:	cc c1       	rjmp	.+920    	; 0x14c2 <vfprintf+0x3b6>
    112a:	ce 01       	movw	r24, r28
    112c:	01 96       	adiw	r24, 0x01	; 1
    112e:	3c 01       	movw	r6, r24
    1130:	f6 01       	movw	r30, r12
    1132:	93 81       	ldd	r25, Z+3	; 0x03
    1134:	f7 01       	movw	r30, r14
    1136:	93 fd       	sbrc	r25, 3
    1138:	85 91       	lpm	r24, Z+
    113a:	93 ff       	sbrs	r25, 3
    113c:	81 91       	ld	r24, Z+
    113e:	7f 01       	movw	r14, r30
    1140:	88 23       	and	r24, r24
    1142:	09 f4       	brne	.+2      	; 0x1146 <vfprintf+0x3a>
    1144:	ba c1       	rjmp	.+884    	; 0x14ba <vfprintf+0x3ae>
    1146:	85 32       	cpi	r24, 0x25	; 37
    1148:	39 f4       	brne	.+14     	; 0x1158 <vfprintf+0x4c>
    114a:	93 fd       	sbrc	r25, 3
    114c:	85 91       	lpm	r24, Z+
    114e:	93 ff       	sbrs	r25, 3
    1150:	81 91       	ld	r24, Z+
    1152:	7f 01       	movw	r14, r30
    1154:	85 32       	cpi	r24, 0x25	; 37
    1156:	29 f4       	brne	.+10     	; 0x1162 <vfprintf+0x56>
    1158:	b6 01       	movw	r22, r12
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <fputc>
    1160:	e7 cf       	rjmp	.-50     	; 0x1130 <vfprintf+0x24>
    1162:	91 2c       	mov	r9, r1
    1164:	21 2c       	mov	r2, r1
    1166:	31 2c       	mov	r3, r1
    1168:	ff e1       	ldi	r31, 0x1F	; 31
    116a:	f3 15       	cp	r31, r3
    116c:	d8 f0       	brcs	.+54     	; 0x11a4 <vfprintf+0x98>
    116e:	8b 32       	cpi	r24, 0x2B	; 43
    1170:	79 f0       	breq	.+30     	; 0x1190 <vfprintf+0x84>
    1172:	38 f4       	brcc	.+14     	; 0x1182 <vfprintf+0x76>
    1174:	80 32       	cpi	r24, 0x20	; 32
    1176:	79 f0       	breq	.+30     	; 0x1196 <vfprintf+0x8a>
    1178:	83 32       	cpi	r24, 0x23	; 35
    117a:	a1 f4       	brne	.+40     	; 0x11a4 <vfprintf+0x98>
    117c:	23 2d       	mov	r18, r3
    117e:	20 61       	ori	r18, 0x10	; 16
    1180:	1d c0       	rjmp	.+58     	; 0x11bc <vfprintf+0xb0>
    1182:	8d 32       	cpi	r24, 0x2D	; 45
    1184:	61 f0       	breq	.+24     	; 0x119e <vfprintf+0x92>
    1186:	80 33       	cpi	r24, 0x30	; 48
    1188:	69 f4       	brne	.+26     	; 0x11a4 <vfprintf+0x98>
    118a:	23 2d       	mov	r18, r3
    118c:	21 60       	ori	r18, 0x01	; 1
    118e:	16 c0       	rjmp	.+44     	; 0x11bc <vfprintf+0xb0>
    1190:	83 2d       	mov	r24, r3
    1192:	82 60       	ori	r24, 0x02	; 2
    1194:	38 2e       	mov	r3, r24
    1196:	e3 2d       	mov	r30, r3
    1198:	e4 60       	ori	r30, 0x04	; 4
    119a:	3e 2e       	mov	r3, r30
    119c:	2a c0       	rjmp	.+84     	; 0x11f2 <vfprintf+0xe6>
    119e:	f3 2d       	mov	r31, r3
    11a0:	f8 60       	ori	r31, 0x08	; 8
    11a2:	1d c0       	rjmp	.+58     	; 0x11de <vfprintf+0xd2>
    11a4:	37 fc       	sbrc	r3, 7
    11a6:	2d c0       	rjmp	.+90     	; 0x1202 <vfprintf+0xf6>
    11a8:	20 ed       	ldi	r18, 0xD0	; 208
    11aa:	28 0f       	add	r18, r24
    11ac:	2a 30       	cpi	r18, 0x0A	; 10
    11ae:	40 f0       	brcs	.+16     	; 0x11c0 <vfprintf+0xb4>
    11b0:	8e 32       	cpi	r24, 0x2E	; 46
    11b2:	b9 f4       	brne	.+46     	; 0x11e2 <vfprintf+0xd6>
    11b4:	36 fc       	sbrc	r3, 6
    11b6:	81 c1       	rjmp	.+770    	; 0x14ba <vfprintf+0x3ae>
    11b8:	23 2d       	mov	r18, r3
    11ba:	20 64       	ori	r18, 0x40	; 64
    11bc:	32 2e       	mov	r3, r18
    11be:	19 c0       	rjmp	.+50     	; 0x11f2 <vfprintf+0xe6>
    11c0:	36 fe       	sbrs	r3, 6
    11c2:	06 c0       	rjmp	.+12     	; 0x11d0 <vfprintf+0xc4>
    11c4:	8a e0       	ldi	r24, 0x0A	; 10
    11c6:	98 9e       	mul	r9, r24
    11c8:	20 0d       	add	r18, r0
    11ca:	11 24       	eor	r1, r1
    11cc:	92 2e       	mov	r9, r18
    11ce:	11 c0       	rjmp	.+34     	; 0x11f2 <vfprintf+0xe6>
    11d0:	ea e0       	ldi	r30, 0x0A	; 10
    11d2:	2e 9e       	mul	r2, r30
    11d4:	20 0d       	add	r18, r0
    11d6:	11 24       	eor	r1, r1
    11d8:	22 2e       	mov	r2, r18
    11da:	f3 2d       	mov	r31, r3
    11dc:	f0 62       	ori	r31, 0x20	; 32
    11de:	3f 2e       	mov	r3, r31
    11e0:	08 c0       	rjmp	.+16     	; 0x11f2 <vfprintf+0xe6>
    11e2:	8c 36       	cpi	r24, 0x6C	; 108
    11e4:	21 f4       	brne	.+8      	; 0x11ee <vfprintf+0xe2>
    11e6:	83 2d       	mov	r24, r3
    11e8:	80 68       	ori	r24, 0x80	; 128
    11ea:	38 2e       	mov	r3, r24
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <vfprintf+0xe6>
    11ee:	88 36       	cpi	r24, 0x68	; 104
    11f0:	41 f4       	brne	.+16     	; 0x1202 <vfprintf+0xf6>
    11f2:	f7 01       	movw	r30, r14
    11f4:	93 fd       	sbrc	r25, 3
    11f6:	85 91       	lpm	r24, Z+
    11f8:	93 ff       	sbrs	r25, 3
    11fa:	81 91       	ld	r24, Z+
    11fc:	7f 01       	movw	r14, r30
    11fe:	81 11       	cpse	r24, r1
    1200:	b3 cf       	rjmp	.-154    	; 0x1168 <vfprintf+0x5c>
    1202:	98 2f       	mov	r25, r24
    1204:	9f 7d       	andi	r25, 0xDF	; 223
    1206:	95 54       	subi	r25, 0x45	; 69
    1208:	93 30       	cpi	r25, 0x03	; 3
    120a:	28 f4       	brcc	.+10     	; 0x1216 <vfprintf+0x10a>
    120c:	0c 5f       	subi	r16, 0xFC	; 252
    120e:	1f 4f       	sbci	r17, 0xFF	; 255
    1210:	9f e3       	ldi	r25, 0x3F	; 63
    1212:	99 83       	std	Y+1, r25	; 0x01
    1214:	0d c0       	rjmp	.+26     	; 0x1230 <vfprintf+0x124>
    1216:	83 36       	cpi	r24, 0x63	; 99
    1218:	31 f0       	breq	.+12     	; 0x1226 <vfprintf+0x11a>
    121a:	83 37       	cpi	r24, 0x73	; 115
    121c:	71 f0       	breq	.+28     	; 0x123a <vfprintf+0x12e>
    121e:	83 35       	cpi	r24, 0x53	; 83
    1220:	09 f0       	breq	.+2      	; 0x1224 <vfprintf+0x118>
    1222:	59 c0       	rjmp	.+178    	; 0x12d6 <vfprintf+0x1ca>
    1224:	21 c0       	rjmp	.+66     	; 0x1268 <vfprintf+0x15c>
    1226:	f8 01       	movw	r30, r16
    1228:	80 81       	ld	r24, Z
    122a:	89 83       	std	Y+1, r24	; 0x01
    122c:	0e 5f       	subi	r16, 0xFE	; 254
    122e:	1f 4f       	sbci	r17, 0xFF	; 255
    1230:	88 24       	eor	r8, r8
    1232:	83 94       	inc	r8
    1234:	91 2c       	mov	r9, r1
    1236:	53 01       	movw	r10, r6
    1238:	13 c0       	rjmp	.+38     	; 0x1260 <vfprintf+0x154>
    123a:	28 01       	movw	r4, r16
    123c:	f2 e0       	ldi	r31, 0x02	; 2
    123e:	4f 0e       	add	r4, r31
    1240:	51 1c       	adc	r5, r1
    1242:	f8 01       	movw	r30, r16
    1244:	a0 80       	ld	r10, Z
    1246:	b1 80       	ldd	r11, Z+1	; 0x01
    1248:	36 fe       	sbrs	r3, 6
    124a:	03 c0       	rjmp	.+6      	; 0x1252 <vfprintf+0x146>
    124c:	69 2d       	mov	r22, r9
    124e:	70 e0       	ldi	r23, 0x00	; 0
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <vfprintf+0x14a>
    1252:	6f ef       	ldi	r22, 0xFF	; 255
    1254:	7f ef       	ldi	r23, 0xFF	; 255
    1256:	c5 01       	movw	r24, r10
    1258:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <strnlen>
    125c:	4c 01       	movw	r8, r24
    125e:	82 01       	movw	r16, r4
    1260:	f3 2d       	mov	r31, r3
    1262:	ff 77       	andi	r31, 0x7F	; 127
    1264:	3f 2e       	mov	r3, r31
    1266:	16 c0       	rjmp	.+44     	; 0x1294 <vfprintf+0x188>
    1268:	28 01       	movw	r4, r16
    126a:	22 e0       	ldi	r18, 0x02	; 2
    126c:	42 0e       	add	r4, r18
    126e:	51 1c       	adc	r5, r1
    1270:	f8 01       	movw	r30, r16
    1272:	a0 80       	ld	r10, Z
    1274:	b1 80       	ldd	r11, Z+1	; 0x01
    1276:	36 fe       	sbrs	r3, 6
    1278:	03 c0       	rjmp	.+6      	; 0x1280 <vfprintf+0x174>
    127a:	69 2d       	mov	r22, r9
    127c:	70 e0       	ldi	r23, 0x00	; 0
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <vfprintf+0x178>
    1280:	6f ef       	ldi	r22, 0xFF	; 255
    1282:	7f ef       	ldi	r23, 0xFF	; 255
    1284:	c5 01       	movw	r24, r10
    1286:	0e 94 67 0a 	call	0x14ce	; 0x14ce <strnlen_P>
    128a:	4c 01       	movw	r8, r24
    128c:	f3 2d       	mov	r31, r3
    128e:	f0 68       	ori	r31, 0x80	; 128
    1290:	3f 2e       	mov	r3, r31
    1292:	82 01       	movw	r16, r4
    1294:	33 fc       	sbrc	r3, 3
    1296:	1b c0       	rjmp	.+54     	; 0x12ce <vfprintf+0x1c2>
    1298:	82 2d       	mov	r24, r2
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	88 16       	cp	r8, r24
    129e:	99 06       	cpc	r9, r25
    12a0:	b0 f4       	brcc	.+44     	; 0x12ce <vfprintf+0x1c2>
    12a2:	b6 01       	movw	r22, r12
    12a4:	80 e2       	ldi	r24, 0x20	; 32
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <fputc>
    12ac:	2a 94       	dec	r2
    12ae:	f4 cf       	rjmp	.-24     	; 0x1298 <vfprintf+0x18c>
    12b0:	f5 01       	movw	r30, r10
    12b2:	37 fc       	sbrc	r3, 7
    12b4:	85 91       	lpm	r24, Z+
    12b6:	37 fe       	sbrs	r3, 7
    12b8:	81 91       	ld	r24, Z+
    12ba:	5f 01       	movw	r10, r30
    12bc:	b6 01       	movw	r22, r12
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <fputc>
    12c4:	21 10       	cpse	r2, r1
    12c6:	2a 94       	dec	r2
    12c8:	21 e0       	ldi	r18, 0x01	; 1
    12ca:	82 1a       	sub	r8, r18
    12cc:	91 08       	sbc	r9, r1
    12ce:	81 14       	cp	r8, r1
    12d0:	91 04       	cpc	r9, r1
    12d2:	71 f7       	brne	.-36     	; 0x12b0 <vfprintf+0x1a4>
    12d4:	e8 c0       	rjmp	.+464    	; 0x14a6 <vfprintf+0x39a>
    12d6:	84 36       	cpi	r24, 0x64	; 100
    12d8:	11 f0       	breq	.+4      	; 0x12de <vfprintf+0x1d2>
    12da:	89 36       	cpi	r24, 0x69	; 105
    12dc:	41 f5       	brne	.+80     	; 0x132e <vfprintf+0x222>
    12de:	f8 01       	movw	r30, r16
    12e0:	37 fe       	sbrs	r3, 7
    12e2:	07 c0       	rjmp	.+14     	; 0x12f2 <vfprintf+0x1e6>
    12e4:	60 81       	ld	r22, Z
    12e6:	71 81       	ldd	r23, Z+1	; 0x01
    12e8:	82 81       	ldd	r24, Z+2	; 0x02
    12ea:	93 81       	ldd	r25, Z+3	; 0x03
    12ec:	0c 5f       	subi	r16, 0xFC	; 252
    12ee:	1f 4f       	sbci	r17, 0xFF	; 255
    12f0:	08 c0       	rjmp	.+16     	; 0x1302 <vfprintf+0x1f6>
    12f2:	60 81       	ld	r22, Z
    12f4:	71 81       	ldd	r23, Z+1	; 0x01
    12f6:	07 2e       	mov	r0, r23
    12f8:	00 0c       	add	r0, r0
    12fa:	88 0b       	sbc	r24, r24
    12fc:	99 0b       	sbc	r25, r25
    12fe:	0e 5f       	subi	r16, 0xFE	; 254
    1300:	1f 4f       	sbci	r17, 0xFF	; 255
    1302:	f3 2d       	mov	r31, r3
    1304:	ff 76       	andi	r31, 0x6F	; 111
    1306:	3f 2e       	mov	r3, r31
    1308:	97 ff       	sbrs	r25, 7
    130a:	09 c0       	rjmp	.+18     	; 0x131e <vfprintf+0x212>
    130c:	90 95       	com	r25
    130e:	80 95       	com	r24
    1310:	70 95       	com	r23
    1312:	61 95       	neg	r22
    1314:	7f 4f       	sbci	r23, 0xFF	; 255
    1316:	8f 4f       	sbci	r24, 0xFF	; 255
    1318:	9f 4f       	sbci	r25, 0xFF	; 255
    131a:	f0 68       	ori	r31, 0x80	; 128
    131c:	3f 2e       	mov	r3, r31
    131e:	2a e0       	ldi	r18, 0x0A	; 10
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	a3 01       	movw	r20, r6
    1324:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__ultoa_invert>
    1328:	88 2e       	mov	r8, r24
    132a:	86 18       	sub	r8, r6
    132c:	45 c0       	rjmp	.+138    	; 0x13b8 <vfprintf+0x2ac>
    132e:	85 37       	cpi	r24, 0x75	; 117
    1330:	31 f4       	brne	.+12     	; 0x133e <vfprintf+0x232>
    1332:	23 2d       	mov	r18, r3
    1334:	2f 7e       	andi	r18, 0xEF	; 239
    1336:	b2 2e       	mov	r11, r18
    1338:	2a e0       	ldi	r18, 0x0A	; 10
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	25 c0       	rjmp	.+74     	; 0x1388 <vfprintf+0x27c>
    133e:	93 2d       	mov	r25, r3
    1340:	99 7f       	andi	r25, 0xF9	; 249
    1342:	b9 2e       	mov	r11, r25
    1344:	8f 36       	cpi	r24, 0x6F	; 111
    1346:	c1 f0       	breq	.+48     	; 0x1378 <vfprintf+0x26c>
    1348:	18 f4       	brcc	.+6      	; 0x1350 <vfprintf+0x244>
    134a:	88 35       	cpi	r24, 0x58	; 88
    134c:	79 f0       	breq	.+30     	; 0x136c <vfprintf+0x260>
    134e:	b5 c0       	rjmp	.+362    	; 0x14ba <vfprintf+0x3ae>
    1350:	80 37       	cpi	r24, 0x70	; 112
    1352:	19 f0       	breq	.+6      	; 0x135a <vfprintf+0x24e>
    1354:	88 37       	cpi	r24, 0x78	; 120
    1356:	21 f0       	breq	.+8      	; 0x1360 <vfprintf+0x254>
    1358:	b0 c0       	rjmp	.+352    	; 0x14ba <vfprintf+0x3ae>
    135a:	e9 2f       	mov	r30, r25
    135c:	e0 61       	ori	r30, 0x10	; 16
    135e:	be 2e       	mov	r11, r30
    1360:	b4 fe       	sbrs	r11, 4
    1362:	0d c0       	rjmp	.+26     	; 0x137e <vfprintf+0x272>
    1364:	fb 2d       	mov	r31, r11
    1366:	f4 60       	ori	r31, 0x04	; 4
    1368:	bf 2e       	mov	r11, r31
    136a:	09 c0       	rjmp	.+18     	; 0x137e <vfprintf+0x272>
    136c:	34 fe       	sbrs	r3, 4
    136e:	0a c0       	rjmp	.+20     	; 0x1384 <vfprintf+0x278>
    1370:	29 2f       	mov	r18, r25
    1372:	26 60       	ori	r18, 0x06	; 6
    1374:	b2 2e       	mov	r11, r18
    1376:	06 c0       	rjmp	.+12     	; 0x1384 <vfprintf+0x278>
    1378:	28 e0       	ldi	r18, 0x08	; 8
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	05 c0       	rjmp	.+10     	; 0x1388 <vfprintf+0x27c>
    137e:	20 e1       	ldi	r18, 0x10	; 16
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <vfprintf+0x27c>
    1384:	20 e1       	ldi	r18, 0x10	; 16
    1386:	32 e0       	ldi	r19, 0x02	; 2
    1388:	f8 01       	movw	r30, r16
    138a:	b7 fe       	sbrs	r11, 7
    138c:	07 c0       	rjmp	.+14     	; 0x139c <vfprintf+0x290>
    138e:	60 81       	ld	r22, Z
    1390:	71 81       	ldd	r23, Z+1	; 0x01
    1392:	82 81       	ldd	r24, Z+2	; 0x02
    1394:	93 81       	ldd	r25, Z+3	; 0x03
    1396:	0c 5f       	subi	r16, 0xFC	; 252
    1398:	1f 4f       	sbci	r17, 0xFF	; 255
    139a:	06 c0       	rjmp	.+12     	; 0x13a8 <vfprintf+0x29c>
    139c:	60 81       	ld	r22, Z
    139e:	71 81       	ldd	r23, Z+1	; 0x01
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	0e 5f       	subi	r16, 0xFE	; 254
    13a6:	1f 4f       	sbci	r17, 0xFF	; 255
    13a8:	a3 01       	movw	r20, r6
    13aa:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__ultoa_invert>
    13ae:	88 2e       	mov	r8, r24
    13b0:	86 18       	sub	r8, r6
    13b2:	fb 2d       	mov	r31, r11
    13b4:	ff 77       	andi	r31, 0x7F	; 127
    13b6:	3f 2e       	mov	r3, r31
    13b8:	36 fe       	sbrs	r3, 6
    13ba:	0d c0       	rjmp	.+26     	; 0x13d6 <vfprintf+0x2ca>
    13bc:	23 2d       	mov	r18, r3
    13be:	2e 7f       	andi	r18, 0xFE	; 254
    13c0:	a2 2e       	mov	r10, r18
    13c2:	89 14       	cp	r8, r9
    13c4:	58 f4       	brcc	.+22     	; 0x13dc <vfprintf+0x2d0>
    13c6:	34 fe       	sbrs	r3, 4
    13c8:	0b c0       	rjmp	.+22     	; 0x13e0 <vfprintf+0x2d4>
    13ca:	32 fc       	sbrc	r3, 2
    13cc:	09 c0       	rjmp	.+18     	; 0x13e0 <vfprintf+0x2d4>
    13ce:	83 2d       	mov	r24, r3
    13d0:	8e 7e       	andi	r24, 0xEE	; 238
    13d2:	a8 2e       	mov	r10, r24
    13d4:	05 c0       	rjmp	.+10     	; 0x13e0 <vfprintf+0x2d4>
    13d6:	b8 2c       	mov	r11, r8
    13d8:	a3 2c       	mov	r10, r3
    13da:	03 c0       	rjmp	.+6      	; 0x13e2 <vfprintf+0x2d6>
    13dc:	b8 2c       	mov	r11, r8
    13de:	01 c0       	rjmp	.+2      	; 0x13e2 <vfprintf+0x2d6>
    13e0:	b9 2c       	mov	r11, r9
    13e2:	a4 fe       	sbrs	r10, 4
    13e4:	0f c0       	rjmp	.+30     	; 0x1404 <vfprintf+0x2f8>
    13e6:	fe 01       	movw	r30, r28
    13e8:	e8 0d       	add	r30, r8
    13ea:	f1 1d       	adc	r31, r1
    13ec:	80 81       	ld	r24, Z
    13ee:	80 33       	cpi	r24, 0x30	; 48
    13f0:	21 f4       	brne	.+8      	; 0x13fa <vfprintf+0x2ee>
    13f2:	9a 2d       	mov	r25, r10
    13f4:	99 7e       	andi	r25, 0xE9	; 233
    13f6:	a9 2e       	mov	r10, r25
    13f8:	09 c0       	rjmp	.+18     	; 0x140c <vfprintf+0x300>
    13fa:	a2 fe       	sbrs	r10, 2
    13fc:	06 c0       	rjmp	.+12     	; 0x140a <vfprintf+0x2fe>
    13fe:	b3 94       	inc	r11
    1400:	b3 94       	inc	r11
    1402:	04 c0       	rjmp	.+8      	; 0x140c <vfprintf+0x300>
    1404:	8a 2d       	mov	r24, r10
    1406:	86 78       	andi	r24, 0x86	; 134
    1408:	09 f0       	breq	.+2      	; 0x140c <vfprintf+0x300>
    140a:	b3 94       	inc	r11
    140c:	a3 fc       	sbrc	r10, 3
    140e:	11 c0       	rjmp	.+34     	; 0x1432 <vfprintf+0x326>
    1410:	a0 fe       	sbrs	r10, 0
    1412:	06 c0       	rjmp	.+12     	; 0x1420 <vfprintf+0x314>
    1414:	b2 14       	cp	r11, r2
    1416:	88 f4       	brcc	.+34     	; 0x143a <vfprintf+0x32e>
    1418:	28 0c       	add	r2, r8
    141a:	92 2c       	mov	r9, r2
    141c:	9b 18       	sub	r9, r11
    141e:	0e c0       	rjmp	.+28     	; 0x143c <vfprintf+0x330>
    1420:	b2 14       	cp	r11, r2
    1422:	60 f4       	brcc	.+24     	; 0x143c <vfprintf+0x330>
    1424:	b6 01       	movw	r22, r12
    1426:	80 e2       	ldi	r24, 0x20	; 32
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <fputc>
    142e:	b3 94       	inc	r11
    1430:	f7 cf       	rjmp	.-18     	; 0x1420 <vfprintf+0x314>
    1432:	b2 14       	cp	r11, r2
    1434:	18 f4       	brcc	.+6      	; 0x143c <vfprintf+0x330>
    1436:	2b 18       	sub	r2, r11
    1438:	02 c0       	rjmp	.+4      	; 0x143e <vfprintf+0x332>
    143a:	98 2c       	mov	r9, r8
    143c:	21 2c       	mov	r2, r1
    143e:	a4 fe       	sbrs	r10, 4
    1440:	10 c0       	rjmp	.+32     	; 0x1462 <vfprintf+0x356>
    1442:	b6 01       	movw	r22, r12
    1444:	80 e3       	ldi	r24, 0x30	; 48
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <fputc>
    144c:	a2 fe       	sbrs	r10, 2
    144e:	17 c0       	rjmp	.+46     	; 0x147e <vfprintf+0x372>
    1450:	a1 fc       	sbrc	r10, 1
    1452:	03 c0       	rjmp	.+6      	; 0x145a <vfprintf+0x34e>
    1454:	88 e7       	ldi	r24, 0x78	; 120
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 c0       	rjmp	.+4      	; 0x145e <vfprintf+0x352>
    145a:	88 e5       	ldi	r24, 0x58	; 88
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	b6 01       	movw	r22, r12
    1460:	0c c0       	rjmp	.+24     	; 0x147a <vfprintf+0x36e>
    1462:	8a 2d       	mov	r24, r10
    1464:	86 78       	andi	r24, 0x86	; 134
    1466:	59 f0       	breq	.+22     	; 0x147e <vfprintf+0x372>
    1468:	a1 fe       	sbrs	r10, 1
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <vfprintf+0x364>
    146c:	8b e2       	ldi	r24, 0x2B	; 43
    146e:	01 c0       	rjmp	.+2      	; 0x1472 <vfprintf+0x366>
    1470:	80 e2       	ldi	r24, 0x20	; 32
    1472:	a7 fc       	sbrc	r10, 7
    1474:	8d e2       	ldi	r24, 0x2D	; 45
    1476:	b6 01       	movw	r22, r12
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <fputc>
    147e:	89 14       	cp	r8, r9
    1480:	38 f4       	brcc	.+14     	; 0x1490 <vfprintf+0x384>
    1482:	b6 01       	movw	r22, r12
    1484:	80 e3       	ldi	r24, 0x30	; 48
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <fputc>
    148c:	9a 94       	dec	r9
    148e:	f7 cf       	rjmp	.-18     	; 0x147e <vfprintf+0x372>
    1490:	8a 94       	dec	r8
    1492:	f3 01       	movw	r30, r6
    1494:	e8 0d       	add	r30, r8
    1496:	f1 1d       	adc	r31, r1
    1498:	80 81       	ld	r24, Z
    149a:	b6 01       	movw	r22, r12
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <fputc>
    14a2:	81 10       	cpse	r8, r1
    14a4:	f5 cf       	rjmp	.-22     	; 0x1490 <vfprintf+0x384>
    14a6:	22 20       	and	r2, r2
    14a8:	09 f4       	brne	.+2      	; 0x14ac <vfprintf+0x3a0>
    14aa:	42 ce       	rjmp	.-892    	; 0x1130 <vfprintf+0x24>
    14ac:	b6 01       	movw	r22, r12
    14ae:	80 e2       	ldi	r24, 0x20	; 32
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <fputc>
    14b6:	2a 94       	dec	r2
    14b8:	f6 cf       	rjmp	.-20     	; 0x14a6 <vfprintf+0x39a>
    14ba:	f6 01       	movw	r30, r12
    14bc:	86 81       	ldd	r24, Z+6	; 0x06
    14be:	97 81       	ldd	r25, Z+7	; 0x07
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <vfprintf+0x3ba>
    14c2:	8f ef       	ldi	r24, 0xFF	; 255
    14c4:	9f ef       	ldi	r25, 0xFF	; 255
    14c6:	2b 96       	adiw	r28, 0x0b	; 11
    14c8:	e2 e1       	ldi	r30, 0x12	; 18
    14ca:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__epilogue_restores__>

000014ce <strnlen_P>:
    14ce:	fc 01       	movw	r30, r24
    14d0:	05 90       	lpm	r0, Z+
    14d2:	61 50       	subi	r22, 0x01	; 1
    14d4:	70 40       	sbci	r23, 0x00	; 0
    14d6:	01 10       	cpse	r0, r1
    14d8:	d8 f7       	brcc	.-10     	; 0x14d0 <strnlen_P+0x2>
    14da:	80 95       	com	r24
    14dc:	90 95       	com	r25
    14de:	8e 0f       	add	r24, r30
    14e0:	9f 1f       	adc	r25, r31
    14e2:	08 95       	ret

000014e4 <strnlen>:
    14e4:	fc 01       	movw	r30, r24
    14e6:	61 50       	subi	r22, 0x01	; 1
    14e8:	70 40       	sbci	r23, 0x00	; 0
    14ea:	01 90       	ld	r0, Z+
    14ec:	01 10       	cpse	r0, r1
    14ee:	d8 f7       	brcc	.-10     	; 0x14e6 <strnlen+0x2>
    14f0:	80 95       	com	r24
    14f2:	90 95       	com	r25
    14f4:	8e 0f       	add	r24, r30
    14f6:	9f 1f       	adc	r25, r31
    14f8:	08 95       	ret

000014fa <fputc>:
    14fa:	0f 93       	push	r16
    14fc:	1f 93       	push	r17
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	fb 01       	movw	r30, r22
    1504:	23 81       	ldd	r18, Z+3	; 0x03
    1506:	21 fd       	sbrc	r18, 1
    1508:	03 c0       	rjmp	.+6      	; 0x1510 <fputc+0x16>
    150a:	8f ef       	ldi	r24, 0xFF	; 255
    150c:	9f ef       	ldi	r25, 0xFF	; 255
    150e:	2c c0       	rjmp	.+88     	; 0x1568 <fputc+0x6e>
    1510:	22 ff       	sbrs	r18, 2
    1512:	16 c0       	rjmp	.+44     	; 0x1540 <fputc+0x46>
    1514:	46 81       	ldd	r20, Z+6	; 0x06
    1516:	57 81       	ldd	r21, Z+7	; 0x07
    1518:	24 81       	ldd	r18, Z+4	; 0x04
    151a:	35 81       	ldd	r19, Z+5	; 0x05
    151c:	42 17       	cp	r20, r18
    151e:	53 07       	cpc	r21, r19
    1520:	44 f4       	brge	.+16     	; 0x1532 <fputc+0x38>
    1522:	a0 81       	ld	r26, Z
    1524:	b1 81       	ldd	r27, Z+1	; 0x01
    1526:	9d 01       	movw	r18, r26
    1528:	2f 5f       	subi	r18, 0xFF	; 255
    152a:	3f 4f       	sbci	r19, 0xFF	; 255
    152c:	20 83       	st	Z, r18
    152e:	31 83       	std	Z+1, r19	; 0x01
    1530:	8c 93       	st	X, r24
    1532:	26 81       	ldd	r18, Z+6	; 0x06
    1534:	37 81       	ldd	r19, Z+7	; 0x07
    1536:	2f 5f       	subi	r18, 0xFF	; 255
    1538:	3f 4f       	sbci	r19, 0xFF	; 255
    153a:	26 83       	std	Z+6, r18	; 0x06
    153c:	37 83       	std	Z+7, r19	; 0x07
    153e:	14 c0       	rjmp	.+40     	; 0x1568 <fputc+0x6e>
    1540:	8b 01       	movw	r16, r22
    1542:	ec 01       	movw	r28, r24
    1544:	fb 01       	movw	r30, r22
    1546:	00 84       	ldd	r0, Z+8	; 0x08
    1548:	f1 85       	ldd	r31, Z+9	; 0x09
    154a:	e0 2d       	mov	r30, r0
    154c:	09 95       	icall
    154e:	89 2b       	or	r24, r25
    1550:	e1 f6       	brne	.-72     	; 0x150a <fputc+0x10>
    1552:	d8 01       	movw	r26, r16
    1554:	16 96       	adiw	r26, 0x06	; 6
    1556:	8d 91       	ld	r24, X+
    1558:	9c 91       	ld	r25, X
    155a:	17 97       	sbiw	r26, 0x07	; 7
    155c:	01 96       	adiw	r24, 0x01	; 1
    155e:	16 96       	adiw	r26, 0x06	; 6
    1560:	8d 93       	st	X+, r24
    1562:	9c 93       	st	X, r25
    1564:	17 97       	sbiw	r26, 0x07	; 7
    1566:	ce 01       	movw	r24, r28
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	1f 91       	pop	r17
    156e:	0f 91       	pop	r16
    1570:	08 95       	ret

00001572 <__ultoa_invert>:
    1572:	fa 01       	movw	r30, r20
    1574:	aa 27       	eor	r26, r26
    1576:	28 30       	cpi	r18, 0x08	; 8
    1578:	51 f1       	breq	.+84     	; 0x15ce <__ultoa_invert+0x5c>
    157a:	20 31       	cpi	r18, 0x10	; 16
    157c:	81 f1       	breq	.+96     	; 0x15de <__ultoa_invert+0x6c>
    157e:	e8 94       	clt
    1580:	6f 93       	push	r22
    1582:	6e 7f       	andi	r22, 0xFE	; 254
    1584:	6e 5f       	subi	r22, 0xFE	; 254
    1586:	7f 4f       	sbci	r23, 0xFF	; 255
    1588:	8f 4f       	sbci	r24, 0xFF	; 255
    158a:	9f 4f       	sbci	r25, 0xFF	; 255
    158c:	af 4f       	sbci	r26, 0xFF	; 255
    158e:	b1 e0       	ldi	r27, 0x01	; 1
    1590:	3e d0       	rcall	.+124    	; 0x160e <__ultoa_invert+0x9c>
    1592:	b4 e0       	ldi	r27, 0x04	; 4
    1594:	3c d0       	rcall	.+120    	; 0x160e <__ultoa_invert+0x9c>
    1596:	67 0f       	add	r22, r23
    1598:	78 1f       	adc	r23, r24
    159a:	89 1f       	adc	r24, r25
    159c:	9a 1f       	adc	r25, r26
    159e:	a1 1d       	adc	r26, r1
    15a0:	68 0f       	add	r22, r24
    15a2:	79 1f       	adc	r23, r25
    15a4:	8a 1f       	adc	r24, r26
    15a6:	91 1d       	adc	r25, r1
    15a8:	a1 1d       	adc	r26, r1
    15aa:	6a 0f       	add	r22, r26
    15ac:	71 1d       	adc	r23, r1
    15ae:	81 1d       	adc	r24, r1
    15b0:	91 1d       	adc	r25, r1
    15b2:	a1 1d       	adc	r26, r1
    15b4:	20 d0       	rcall	.+64     	; 0x15f6 <__ultoa_invert+0x84>
    15b6:	09 f4       	brne	.+2      	; 0x15ba <__ultoa_invert+0x48>
    15b8:	68 94       	set
    15ba:	3f 91       	pop	r19
    15bc:	2a e0       	ldi	r18, 0x0A	; 10
    15be:	26 9f       	mul	r18, r22
    15c0:	11 24       	eor	r1, r1
    15c2:	30 19       	sub	r19, r0
    15c4:	30 5d       	subi	r19, 0xD0	; 208
    15c6:	31 93       	st	Z+, r19
    15c8:	de f6       	brtc	.-74     	; 0x1580 <__ultoa_invert+0xe>
    15ca:	cf 01       	movw	r24, r30
    15cc:	08 95       	ret
    15ce:	46 2f       	mov	r20, r22
    15d0:	47 70       	andi	r20, 0x07	; 7
    15d2:	40 5d       	subi	r20, 0xD0	; 208
    15d4:	41 93       	st	Z+, r20
    15d6:	b3 e0       	ldi	r27, 0x03	; 3
    15d8:	0f d0       	rcall	.+30     	; 0x15f8 <__ultoa_invert+0x86>
    15da:	c9 f7       	brne	.-14     	; 0x15ce <__ultoa_invert+0x5c>
    15dc:	f6 cf       	rjmp	.-20     	; 0x15ca <__ultoa_invert+0x58>
    15de:	46 2f       	mov	r20, r22
    15e0:	4f 70       	andi	r20, 0x0F	; 15
    15e2:	40 5d       	subi	r20, 0xD0	; 208
    15e4:	4a 33       	cpi	r20, 0x3A	; 58
    15e6:	18 f0       	brcs	.+6      	; 0x15ee <__ultoa_invert+0x7c>
    15e8:	49 5d       	subi	r20, 0xD9	; 217
    15ea:	31 fd       	sbrc	r19, 1
    15ec:	40 52       	subi	r20, 0x20	; 32
    15ee:	41 93       	st	Z+, r20
    15f0:	02 d0       	rcall	.+4      	; 0x15f6 <__ultoa_invert+0x84>
    15f2:	a9 f7       	brne	.-22     	; 0x15de <__ultoa_invert+0x6c>
    15f4:	ea cf       	rjmp	.-44     	; 0x15ca <__ultoa_invert+0x58>
    15f6:	b4 e0       	ldi	r27, 0x04	; 4
    15f8:	a6 95       	lsr	r26
    15fa:	97 95       	ror	r25
    15fc:	87 95       	ror	r24
    15fe:	77 95       	ror	r23
    1600:	67 95       	ror	r22
    1602:	ba 95       	dec	r27
    1604:	c9 f7       	brne	.-14     	; 0x15f8 <__ultoa_invert+0x86>
    1606:	00 97       	sbiw	r24, 0x00	; 0
    1608:	61 05       	cpc	r22, r1
    160a:	71 05       	cpc	r23, r1
    160c:	08 95       	ret
    160e:	9b 01       	movw	r18, r22
    1610:	ac 01       	movw	r20, r24
    1612:	0a 2e       	mov	r0, r26
    1614:	06 94       	lsr	r0
    1616:	57 95       	ror	r21
    1618:	47 95       	ror	r20
    161a:	37 95       	ror	r19
    161c:	27 95       	ror	r18
    161e:	ba 95       	dec	r27
    1620:	c9 f7       	brne	.-14     	; 0x1614 <__ultoa_invert+0xa2>
    1622:	62 0f       	add	r22, r18
    1624:	73 1f       	adc	r23, r19
    1626:	84 1f       	adc	r24, r20
    1628:	95 1f       	adc	r25, r21
    162a:	a0 1d       	adc	r26, r0
    162c:	08 95       	ret

0000162e <__prologue_saves__>:
    162e:	2f 92       	push	r2
    1630:	3f 92       	push	r3
    1632:	4f 92       	push	r4
    1634:	5f 92       	push	r5
    1636:	6f 92       	push	r6
    1638:	7f 92       	push	r7
    163a:	8f 92       	push	r8
    163c:	9f 92       	push	r9
    163e:	af 92       	push	r10
    1640:	bf 92       	push	r11
    1642:	cf 92       	push	r12
    1644:	df 92       	push	r13
    1646:	ef 92       	push	r14
    1648:	ff 92       	push	r15
    164a:	0f 93       	push	r16
    164c:	1f 93       	push	r17
    164e:	cf 93       	push	r28
    1650:	df 93       	push	r29
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
    1656:	ca 1b       	sub	r28, r26
    1658:	db 0b       	sbc	r29, r27
    165a:	cd bf       	out	0x3d, r28	; 61
    165c:	de bf       	out	0x3e, r29	; 62
    165e:	09 94       	ijmp

00001660 <__epilogue_restores__>:
    1660:	2a 88       	ldd	r2, Y+18	; 0x12
    1662:	39 88       	ldd	r3, Y+17	; 0x11
    1664:	48 88       	ldd	r4, Y+16	; 0x10
    1666:	5f 84       	ldd	r5, Y+15	; 0x0f
    1668:	6e 84       	ldd	r6, Y+14	; 0x0e
    166a:	7d 84       	ldd	r7, Y+13	; 0x0d
    166c:	8c 84       	ldd	r8, Y+12	; 0x0c
    166e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1670:	aa 84       	ldd	r10, Y+10	; 0x0a
    1672:	b9 84       	ldd	r11, Y+9	; 0x09
    1674:	c8 84       	ldd	r12, Y+8	; 0x08
    1676:	df 80       	ldd	r13, Y+7	; 0x07
    1678:	ee 80       	ldd	r14, Y+6	; 0x06
    167a:	fd 80       	ldd	r15, Y+5	; 0x05
    167c:	0c 81       	ldd	r16, Y+4	; 0x04
    167e:	1b 81       	ldd	r17, Y+3	; 0x03
    1680:	aa 81       	ldd	r26, Y+2	; 0x02
    1682:	b9 81       	ldd	r27, Y+1	; 0x01
    1684:	ce 0f       	add	r28, r30
    1686:	d1 1d       	adc	r29, r1
    1688:	cd bf       	out	0x3d, r28	; 61
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	ed 01       	movw	r28, r26
    168e:	08 95       	ret

00001690 <_exit>:
    1690:	f8 94       	cli

00001692 <__stop_program>:
    1692:	ff cf       	rjmp	.-2      	; 0x1692 <__stop_program>
