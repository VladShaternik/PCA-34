
PCA-34.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00803800  00002386  0000243a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000235c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002a  0000a35c  0000235c  00002410  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000003a  00803806  00803806  00002440  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00002440  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000249c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000188  00000000  00000000  000024dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000530c  00000000  00000000  00002664  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002476  00000000  00000000  00007970  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000017d8  00000000  00000000  00009de6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005dc  00000000  00000000  0000b5c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001853  00000000  00000000  0000bb9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002490  00000000  00000000  0000d3ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000150  00000000  00000000  0000f87f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <__vector_6>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <__vector_25>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	cd bf       	out	0x3d, r28	; 61
      84:	df e3       	ldi	r29, 0x3F	; 63
      86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_clear_bss>:
      88:	28 e3       	ldi	r18, 0x38	; 56
      8a:	a6 e0       	ldi	r26, 0x06	; 6
      8c:	b8 e3       	ldi	r27, 0x38	; 56
      8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
      90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
      92:	a0 34       	cpi	r26, 0x40	; 64
      94:	b2 07       	cpc	r27, r18
      96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>

00000098 <__do_copy_data>:
      98:	18 e3       	ldi	r17, 0x38	; 56
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b8 e3       	ldi	r27, 0x38	; 56
      9e:	e6 e8       	ldi	r30, 0x86	; 134
      a0:	f3 e2       	ldi	r31, 0x23	; 35
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a6 30       	cpi	r26, 0x06	; 6
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>
      ae:	0e 94 89 08 	call	0x1112	; 0x1112 <main>
      b2:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <display_current_voltage>:
	set_current_blink   = FALSE;
}


void display_current_voltage(uint16_t current, uint16_t voltage)
{
      ba:	6f 92       	push	r6
      bc:	7f 92       	push	r7
      be:	8f 92       	push	r8
      c0:	9f 92       	push	r9
      c2:	af 92       	push	r10
      c4:	bf 92       	push	r11
      c6:	cf 92       	push	r12
      c8:	df 92       	push	r13
      ca:	ef 92       	push	r14
      cc:	ff 92       	push	r15
      ce:	0f 93       	push	r16
      d0:	1f 93       	push	r17
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	7c 01       	movw	r14, r24
      d8:	86 2e       	mov	r8, r22
      da:	97 2e       	mov	r9, r23
	lcd_command(CLEAR_DISPLAY);
      dc:	81 e0       	ldi	r24, 0x01	; 1
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(FUNCTION_SET | 0b0000111000);
      e4:	88 e3       	ldi	r24, 0x38	; 56
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	
	int length = snprintf(NULL, 0, "%02d.%dA ", current / 100, current / 10 % 10);
      ec:	97 01       	movw	r18, r14
      ee:	ad ec       	ldi	r26, 0xCD	; 205
      f0:	bc ec       	ldi	r27, 0xCC	; 204
      f2:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__umulhisi3>
      f6:	ac 01       	movw	r20, r24
      f8:	56 95       	lsr	r21
      fa:	47 95       	ror	r20
      fc:	56 95       	lsr	r21
      fe:	47 95       	ror	r20
     100:	56 95       	lsr	r21
     102:	47 95       	ror	r20
     104:	9a 01       	movw	r18, r20
     106:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__umulhisi3>
     10a:	5c 01       	movw	r10, r24
     10c:	b6 94       	lsr	r11
     10e:	a7 94       	ror	r10
     110:	b6 94       	lsr	r11
     112:	a7 94       	ror	r10
     114:	b6 94       	lsr	r11
     116:	a7 94       	ror	r10
     118:	c5 01       	movw	r24, r10
     11a:	88 0f       	add	r24, r24
     11c:	99 1f       	adc	r25, r25
     11e:	aa 0c       	add	r10, r10
     120:	bb 1c       	adc	r11, r11
     122:	aa 0c       	add	r10, r10
     124:	bb 1c       	adc	r11, r11
     126:	aa 0c       	add	r10, r10
     128:	bb 1c       	adc	r11, r11
     12a:	a8 0e       	add	r10, r24
     12c:	b9 1e       	adc	r11, r25
     12e:	ca 01       	movw	r24, r20
     130:	8a 19       	sub	r24, r10
     132:	9b 09       	sbc	r25, r11
     134:	5c 01       	movw	r10, r24
     136:	97 01       	movw	r18, r14
     138:	36 95       	lsr	r19
     13a:	27 95       	ror	r18
     13c:	36 95       	lsr	r19
     13e:	27 95       	ror	r18
     140:	ab e7       	ldi	r26, 0x7B	; 123
     142:	b4 e1       	ldi	r27, 0x14	; 20
     144:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__umulhisi3>
     148:	8c 01       	movw	r16, r24
     14a:	16 95       	lsr	r17
     14c:	07 95       	ror	r16
     14e:	bf 92       	push	r11
     150:	af 92       	push	r10
     152:	1f 93       	push	r17
     154:	0f 93       	push	r16
     156:	cc e5       	ldi	r28, 0x5C	; 92
     158:	d3 ea       	ldi	r29, 0xA3	; 163
     15a:	df 93       	push	r29
     15c:	cf 93       	push	r28
     15e:	1f 92       	push	r1
     160:	1f 92       	push	r1
     162:	1f 92       	push	r1
     164:	1f 92       	push	r1
     166:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <snprintf>
	char* str = malloc(length + 1);
     16a:	01 96       	adiw	r24, 0x01	; 1
     16c:	6c 01       	movw	r12, r24
     16e:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <malloc>
     172:	68 2e       	mov	r6, r24
     174:	79 2e       	mov	r7, r25
	snprintf(str, length + 1, "%02d.%dA ", current / 100, current / 10 % 10);
     176:	bf 92       	push	r11
     178:	af 92       	push	r10
     17a:	1f 93       	push	r17
     17c:	0f 93       	push	r16
     17e:	df 93       	push	r29
     180:	cf 93       	push	r28
     182:	df 92       	push	r13
     184:	cf 92       	push	r12
     186:	7f 92       	push	r7
     188:	6f 92       	push	r6
     18a:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <snprintf>
	lcd_write(str);
     18e:	86 2d       	mov	r24, r6
     190:	97 2d       	mov	r25, r7
     192:	0e 94 7b 07 	call	0xef6	; 0xef6 <lcd_write>
	free(str);
     196:	86 2d       	mov	r24, r6
     198:	97 2d       	mov	r25, r7
     19a:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <free>
	
	current = (current + 5) / 10; // round to nearest tenth and get tenth
     19e:	a7 01       	movw	r20, r14
     1a0:	4b 5f       	subi	r20, 0xFB	; 251
     1a2:	5f 4f       	sbci	r21, 0xFF	; 255
     1a4:	9a 01       	movw	r18, r20
     1a6:	ad ec       	ldi	r26, 0xCD	; 205
     1a8:	bc ec       	ldi	r27, 0xCC	; 204
     1aa:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__umulhisi3>
     1ae:	6c 01       	movw	r12, r24
     1b0:	d6 94       	lsr	r13
     1b2:	c7 94       	ror	r12
     1b4:	d6 94       	lsr	r13
     1b6:	c7 94       	ror	r12
     1b8:	d6 94       	lsr	r13
     1ba:	c7 94       	ror	r12
	
	uint8_t full_bars;
	uint8_t last_bar;
	
	full_bars = current / 25;
	last_bar  = (current % 25) / 5;
     1bc:	96 01       	movw	r18, r12
     1be:	af ea       	ldi	r26, 0xAF	; 175
     1c0:	b7 e4       	ldi	r27, 0x47	; 71
     1c2:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__umulhisi3>
     1c6:	28 1b       	sub	r18, r24
     1c8:	39 0b       	sbc	r19, r25
     1ca:	36 95       	lsr	r19
     1cc:	27 95       	ror	r18
     1ce:	82 0f       	add	r24, r18
     1d0:	93 1f       	adc	r25, r19
     1d2:	92 95       	swap	r25
     1d4:	82 95       	swap	r24
     1d6:	8f 70       	andi	r24, 0x0F	; 15
     1d8:	89 27       	eor	r24, r25
     1da:	9f 70       	andi	r25, 0x0F	; 15
     1dc:	89 27       	eor	r24, r25
     1de:	69 e1       	ldi	r22, 0x19	; 25
     1e0:	68 9f       	mul	r22, r24
     1e2:	90 01       	movw	r18, r0
     1e4:	69 9f       	mul	r22, r25
     1e6:	30 0d       	add	r19, r0
     1e8:	11 24       	eor	r1, r1
     1ea:	c6 01       	movw	r24, r12
     1ec:	82 1b       	sub	r24, r18
     1ee:	93 0b       	sbc	r25, r19
     1f0:	9c 01       	movw	r18, r24
     1f2:	ad ec       	ldi	r26, 0xCD	; 205
     1f4:	bc ec       	ldi	r27, 0xCC	; 204
     1f6:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__umulhisi3>
     1fa:	5c 01       	movw	r10, r24
     1fc:	b6 94       	lsr	r11
     1fe:	a7 94       	ror	r10
     200:	b6 94       	lsr	r11
     202:	a7 94       	ror	r10
     204:	7a 2c       	mov	r7, r10
	
	for(int i = 0; i < full_bars; i++)
     206:	9a 01       	movw	r18, r20
     208:	36 95       	lsr	r19
     20a:	27 95       	ror	r18
     20c:	a3 e1       	ldi	r26, 0x13	; 19
     20e:	b3 e8       	ldi	r27, 0x83	; 131
     210:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__umulhisi3>
     214:	00 24       	eor	r0, r0
     216:	88 0f       	add	r24, r24
     218:	99 1f       	adc	r25, r25
     21a:	00 1c       	adc	r0, r0
     21c:	88 0f       	add	r24, r24
     21e:	99 1f       	adc	r25, r25
     220:	00 1c       	adc	r0, r0
     222:	89 2f       	mov	r24, r25
     224:	90 2d       	mov	r25, r0
     226:	8c 01       	movw	r16, r24
     228:	11 27       	eor	r17, r17
     22a:	8d b7       	in	r24, 0x3d	; 61
     22c:	9e b7       	in	r25, 0x3e	; 62
     22e:	44 96       	adiw	r24, 0x14	; 20
     230:	8d bf       	out	0x3d, r24	; 61
     232:	9e bf       	out	0x3e, r25	; 62
     234:	10 16       	cp	r1, r16
     236:	11 06       	cpc	r1, r17
     238:	1c f5       	brge	.+70     	; 0x280 <display_current_voltage+0x1c6>
     23a:	c0 e0       	ldi	r28, 0x00	; 0
     23c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (i == full_bars - 1 && current == (MAX_CURRENT + 5) / 10)
     23e:	78 01       	movw	r14, r16
     240:	91 e0       	ldi	r25, 0x01	; 1
     242:	e9 1a       	sub	r14, r25
     244:	f1 08       	sbc	r15, r1
     246:	ec 16       	cp	r14, r28
     248:	fd 06       	cpc	r15, r29
     24a:	41 f4       	brne	.+16     	; 0x25c <display_current_voltage+0x1a2>
     24c:	8a ef       	ldi	r24, 0xFA	; 250
     24e:	c8 16       	cp	r12, r24
     250:	d1 04       	cpc	r13, r1
     252:	21 f4       	brne	.+8      	; 0x25c <display_current_voltage+0x1a2>
		{
			display_custom_character(6);
     254:	86 e0       	ldi	r24, 0x06	; 6
     256:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <display_custom_character>
     25a:	0e c0       	rjmp	.+28     	; 0x278 <display_current_voltage+0x1be>
		}
		else
		{
			if ((i + 1) % 4 == 0)
     25c:	9e 01       	movw	r18, r28
     25e:	2f 5f       	subi	r18, 0xFF	; 255
     260:	3f 4f       	sbci	r19, 0xFF	; 255
     262:	23 70       	andi	r18, 0x03	; 3
     264:	33 27       	eor	r19, r19
     266:	23 2b       	or	r18, r19
     268:	21 f4       	brne	.+8      	; 0x272 <display_current_voltage+0x1b8>
			{
				display_custom_character(5);
     26a:	85 e0       	ldi	r24, 0x05	; 5
     26c:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <display_custom_character>
     270:	03 c0       	rjmp	.+6      	; 0x278 <display_current_voltage+0x1be>
			}
			else
			{
				display_custom_character(4);
     272:	84 e0       	ldi	r24, 0x04	; 4
     274:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <display_custom_character>
	uint8_t last_bar;
	
	full_bars = current / 25;
	last_bar  = (current % 25) / 5;
	
	for(int i = 0; i < full_bars; i++)
     278:	21 96       	adiw	r28, 0x01	; 1
     27a:	c0 17       	cp	r28, r16
     27c:	d1 07       	cpc	r29, r17
     27e:	19 f7       	brne	.-58     	; 0x246 <display_current_voltage+0x18c>
				display_custom_character(4);
			}
		}
	}
	
	if (last_bar != 0)
     280:	77 20       	and	r7, r7
     282:	21 f0       	breq	.+8      	; 0x28c <display_current_voltage+0x1d2>
	{
		display_custom_character(last_bar - 1);
     284:	8f ef       	ldi	r24, 0xFF	; 255
     286:	8a 0d       	add	r24, r10
     288:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <display_custom_character>
	}
	
	setCursor(1, 0);
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	0e 94 77 08 	call	0x10ee	; 0x10ee <setCursor>
     294:	c8 2d       	mov	r28, r8
     296:	d9 2d       	mov	r29, r9
     298:	c9 35       	cpi	r28, 0x59	; 89
     29a:	9b e1       	ldi	r25, 0x1B	; 27
     29c:	d9 07       	cpc	r29, r25
     29e:	10 f0       	brcs	.+4      	; 0x2a4 <display_current_voltage+0x1ea>
     2a0:	c8 e5       	ldi	r28, 0x58	; 88
     2a2:	db e1       	ldi	r29, 0x1B	; 27
	if (voltage > 7000)
	{
		voltage = 7000;
	}
	
	length = snprintf(NULL, 0, "%02d.%dV ", voltage / 100, voltage / 10 % 10);
     2a4:	9e 01       	movw	r18, r28
     2a6:	ad ec       	ldi	r26, 0xCD	; 205
     2a8:	bc ec       	ldi	r27, 0xCC	; 204
     2aa:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__umulhisi3>
     2ae:	ac 01       	movw	r20, r24
     2b0:	56 95       	lsr	r21
     2b2:	47 95       	ror	r20
     2b4:	56 95       	lsr	r21
     2b6:	47 95       	ror	r20
     2b8:	56 95       	lsr	r21
     2ba:	47 95       	ror	r20
     2bc:	9a 01       	movw	r18, r20
     2be:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__umulhisi3>
     2c2:	8c 01       	movw	r16, r24
     2c4:	16 95       	lsr	r17
     2c6:	07 95       	ror	r16
     2c8:	16 95       	lsr	r17
     2ca:	07 95       	ror	r16
     2cc:	16 95       	lsr	r17
     2ce:	07 95       	ror	r16
     2d0:	c8 01       	movw	r24, r16
     2d2:	88 0f       	add	r24, r24
     2d4:	99 1f       	adc	r25, r25
     2d6:	00 0f       	add	r16, r16
     2d8:	11 1f       	adc	r17, r17
     2da:	00 0f       	add	r16, r16
     2dc:	11 1f       	adc	r17, r17
     2de:	00 0f       	add	r16, r16
     2e0:	11 1f       	adc	r17, r17
     2e2:	08 0f       	add	r16, r24
     2e4:	19 1f       	adc	r17, r25
     2e6:	ca 01       	movw	r24, r20
     2e8:	80 1b       	sub	r24, r16
     2ea:	91 0b       	sbc	r25, r17
     2ec:	8c 01       	movw	r16, r24
     2ee:	9e 01       	movw	r18, r28
     2f0:	36 95       	lsr	r19
     2f2:	27 95       	ror	r18
     2f4:	36 95       	lsr	r19
     2f6:	27 95       	ror	r18
     2f8:	ab e7       	ldi	r26, 0x7B	; 123
     2fa:	b4 e1       	ldi	r27, 0x14	; 20
     2fc:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__umulhisi3>
     300:	6c 01       	movw	r12, r24
     302:	d6 94       	lsr	r13
     304:	c7 94       	ror	r12
     306:	1f 93       	push	r17
     308:	0f 93       	push	r16
     30a:	df 92       	push	r13
     30c:	cf 92       	push	r12
     30e:	0f 2e       	mov	r0, r31
     310:	f6 e6       	ldi	r31, 0x66	; 102
     312:	ef 2e       	mov	r14, r31
     314:	f3 ea       	ldi	r31, 0xA3	; 163
     316:	ff 2e       	mov	r15, r31
     318:	f0 2d       	mov	r31, r0
     31a:	ff 92       	push	r15
     31c:	ef 92       	push	r14
     31e:	1f 92       	push	r1
     320:	1f 92       	push	r1
     322:	1f 92       	push	r1
     324:	1f 92       	push	r1
     326:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <snprintf>
	str = malloc(length + 1);
     32a:	01 96       	adiw	r24, 0x01	; 1
     32c:	4c 01       	movw	r8, r24
     32e:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <malloc>
     332:	a8 2e       	mov	r10, r24
     334:	b9 2e       	mov	r11, r25
	snprintf(str, length + 1, "%02d.%dV ", voltage / 100, voltage / 10 % 10);
     336:	1f 93       	push	r17
     338:	0f 93       	push	r16
     33a:	df 92       	push	r13
     33c:	cf 92       	push	r12
     33e:	ff 92       	push	r15
     340:	ef 92       	push	r14
     342:	9f 92       	push	r9
     344:	8f 92       	push	r8
     346:	9f 93       	push	r25
     348:	8f 93       	push	r24
     34a:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <snprintf>
	lcd_write(str);
     34e:	8a 2d       	mov	r24, r10
     350:	9b 2d       	mov	r25, r11
     352:	0e 94 7b 07 	call	0xef6	; 0xef6 <lcd_write>
	free(str);
     356:	8a 2d       	mov	r24, r10
     358:	9b 2d       	mov	r25, r11
     35a:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <free>
	
	voltage = (voltage + 50) / 100; // round to nearest hundred and get hundreds
     35e:	e2 96       	adiw	r28, 0x32	; 50
     360:	d6 95       	lsr	r29
     362:	c7 95       	ror	r28
     364:	d6 95       	lsr	r29
     366:	c7 95       	ror	r28
     368:	9e 01       	movw	r18, r28
     36a:	ab e7       	ldi	r26, 0x7B	; 123
     36c:	b4 e1       	ldi	r27, 0x14	; 20
     36e:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__umulhisi3>
     372:	7c 01       	movw	r14, r24
     374:	f6 94       	lsr	r15
     376:	e7 94       	ror	r14
	
	full_bars = voltage / 5;
	last_bar  = voltage % 5;
     378:	97 01       	movw	r18, r14
     37a:	ad ec       	ldi	r26, 0xCD	; 205
     37c:	bc ec       	ldi	r27, 0xCC	; 204
     37e:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__umulhisi3>
     382:	96 95       	lsr	r25
     384:	87 95       	ror	r24
     386:	96 95       	lsr	r25
     388:	87 95       	ror	r24
     38a:	9c 01       	movw	r18, r24
     38c:	22 0f       	add	r18, r18
     38e:	33 1f       	adc	r19, r19
     390:	22 0f       	add	r18, r18
     392:	33 1f       	adc	r19, r19
     394:	82 0f       	add	r24, r18
     396:	93 1f       	adc	r25, r19
     398:	de 2c       	mov	r13, r14
     39a:	d8 1a       	sub	r13, r24
	
	for(int i = 0; i < full_bars; i++)
     39c:	9e 01       	movw	r18, r28
     39e:	a5 ec       	ldi	r26, 0xC5	; 197
     3a0:	b0 e2       	ldi	r27, 0x20	; 32
     3a2:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__umulhisi3>
     3a6:	92 95       	swap	r25
     3a8:	82 95       	swap	r24
     3aa:	8f 70       	andi	r24, 0x0F	; 15
     3ac:	89 27       	eor	r24, r25
     3ae:	9f 70       	andi	r25, 0x0F	; 15
     3b0:	89 27       	eor	r24, r25
     3b2:	8c 01       	movw	r16, r24
     3b4:	11 27       	eor	r17, r17
     3b6:	8d b7       	in	r24, 0x3d	; 61
     3b8:	9e b7       	in	r25, 0x3e	; 62
     3ba:	44 96       	adiw	r24, 0x14	; 20
     3bc:	8d bf       	out	0x3d, r24	; 61
     3be:	9e bf       	out	0x3e, r25	; 62
     3c0:	10 16       	cp	r1, r16
     3c2:	11 06       	cpc	r1, r17
     3c4:	1c f5       	brge	.+70     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3c6:	c0 e0       	ldi	r28, 0x00	; 0
     3c8:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (i >= ((MAX_VOLTAGE + 50) / 100) / 5 - 1 && voltage >= (MAX_VOLTAGE + 50) / 100)
     3ca:	c9 30       	cpi	r28, 0x09	; 9
     3cc:	d1 05       	cpc	r29, r1
     3ce:	74 f0       	brlt	.+28     	; 0x3ec <display_current_voltage+0x332>
     3d0:	92 e3       	ldi	r25, 0x32	; 50
     3d2:	e9 16       	cp	r14, r25
     3d4:	f1 04       	cpc	r15, r1
     3d6:	50 f0       	brcs	.+20     	; 0x3ec <display_current_voltage+0x332>
		{
			display_custom_character(6);
     3d8:	86 e0       	ldi	r24, 0x06	; 6
     3da:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <display_custom_character>
			if (last_bar != 0)
     3de:	dd 20       	and	r13, r13
     3e0:	89 f0       	breq	.+34     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
			{
				display_custom_character(6);
     3e2:	86 e0       	ldi	r24, 0x06	; 6
     3e4:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <display_custom_character>
				last_bar = 0;
     3e8:	d1 2c       	mov	r13, r1
     3ea:	0c c0       	rjmp	.+24     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
			}
		}
		else
		{
			if ((i + 1) % 2 == 0)
     3ec:	9e 01       	movw	r18, r28
     3ee:	2f 5f       	subi	r18, 0xFF	; 255
     3f0:	3f 4f       	sbci	r19, 0xFF	; 255
     3f2:	20 fd       	sbrc	r18, 0
     3f4:	04 c0       	rjmp	.+8      	; 0x3fe <display_current_voltage+0x344>
			{
				display_custom_character(5);
     3f6:	85 e0       	ldi	r24, 0x05	; 5
     3f8:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <display_custom_character>
     3fc:	03 c0       	rjmp	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
			}
			else
			{
				display_custom_character(4);
     3fe:	84 e0       	ldi	r24, 0x04	; 4
     400:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <display_custom_character>
	voltage = (voltage + 50) / 100; // round to nearest hundred and get hundreds
	
	full_bars = voltage / 5;
	last_bar  = voltage % 5;
	
	for(int i = 0; i < full_bars; i++)
     404:	21 96       	adiw	r28, 0x01	; 1
     406:	c0 17       	cp	r28, r16
     408:	d1 07       	cpc	r29, r17
     40a:	f9 f6       	brne	.-66     	; 0x3ca <display_current_voltage+0x310>
				display_custom_character(4);
			}
		}
	}
	
	if (last_bar != 0)
     40c:	dd 20       	and	r13, r13
     40e:	21 f0       	breq	.+8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	{
		display_custom_character(last_bar - 1);
     410:	8f ef       	ldi	r24, 0xFF	; 255
     412:	8d 0d       	add	r24, r13
     414:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <display_custom_character>
	}
}
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	1f 91       	pop	r17
     41e:	0f 91       	pop	r16
     420:	ff 90       	pop	r15
     422:	ef 90       	pop	r14
     424:	df 90       	pop	r13
     426:	cf 90       	pop	r12
     428:	bf 90       	pop	r11
     42a:	af 90       	pop	r10
     42c:	9f 90       	pop	r9
     42e:	8f 90       	pop	r8
     430:	7f 90       	pop	r7
     432:	6f 90       	pop	r6
     434:	08 95       	ret

00000436 <display_voltage>:

void display_voltage(uint16_t voltage)
{
     436:	8f 92       	push	r8
     438:	9f 92       	push	r9
     43a:	af 92       	push	r10
     43c:	bf 92       	push	r11
     43e:	cf 92       	push	r12
     440:	df 92       	push	r13
     442:	ef 92       	push	r14
     444:	ff 92       	push	r15
     446:	0f 93       	push	r16
     448:	1f 93       	push	r17
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	08 2f       	mov	r16, r24
     450:	19 2f       	mov	r17, r25
	lcd_command(CLEAR_DISPLAY);
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(FUNCTION_SET | 0b0000111000);
     45a:	88 e3       	ldi	r24, 0x38	; 56
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	
	uint8_t full_bars;
	uint8_t last_bar;
	
	setCursor(1, 0);
     462:	60 e0       	ldi	r22, 0x00	; 0
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	0e 94 77 08 	call	0x10ee	; 0x10ee <setCursor>
     46a:	c0 2f       	mov	r28, r16
     46c:	d1 2f       	mov	r29, r17
     46e:	c9 35       	cpi	r28, 0x59	; 89
     470:	8b e1       	ldi	r24, 0x1B	; 27
     472:	d8 07       	cpc	r29, r24
     474:	10 f0       	brcs	.+4      	; 0x47a <display_voltage+0x44>
     476:	c8 e5       	ldi	r28, 0x58	; 88
     478:	db e1       	ldi	r29, 0x1B	; 27
	if (voltage > 7000)
	{
		voltage = 7000;
	}
	
	int length = snprintf(NULL, 0, "%02d.%dV ", voltage / 100, voltage / 10 % 10);
     47a:	9e 01       	movw	r18, r28
     47c:	ad ec       	ldi	r26, 0xCD	; 205
     47e:	bc ec       	ldi	r27, 0xCC	; 204
     480:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__umulhisi3>
     484:	ac 01       	movw	r20, r24
     486:	56 95       	lsr	r21
     488:	47 95       	ror	r20
     48a:	56 95       	lsr	r21
     48c:	47 95       	ror	r20
     48e:	56 95       	lsr	r21
     490:	47 95       	ror	r20
     492:	9a 01       	movw	r18, r20
     494:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__umulhisi3>
     498:	8c 01       	movw	r16, r24
     49a:	16 95       	lsr	r17
     49c:	07 95       	ror	r16
     49e:	16 95       	lsr	r17
     4a0:	07 95       	ror	r16
     4a2:	16 95       	lsr	r17
     4a4:	07 95       	ror	r16
     4a6:	c8 01       	movw	r24, r16
     4a8:	88 0f       	add	r24, r24
     4aa:	99 1f       	adc	r25, r25
     4ac:	00 0f       	add	r16, r16
     4ae:	11 1f       	adc	r17, r17
     4b0:	00 0f       	add	r16, r16
     4b2:	11 1f       	adc	r17, r17
     4b4:	00 0f       	add	r16, r16
     4b6:	11 1f       	adc	r17, r17
     4b8:	08 0f       	add	r16, r24
     4ba:	19 1f       	adc	r17, r25
     4bc:	ca 01       	movw	r24, r20
     4be:	80 1b       	sub	r24, r16
     4c0:	91 0b       	sbc	r25, r17
     4c2:	8c 01       	movw	r16, r24
     4c4:	9e 01       	movw	r18, r28
     4c6:	36 95       	lsr	r19
     4c8:	27 95       	ror	r18
     4ca:	36 95       	lsr	r19
     4cc:	27 95       	ror	r18
     4ce:	ab e7       	ldi	r26, 0x7B	; 123
     4d0:	b4 e1       	ldi	r27, 0x14	; 20
     4d2:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__umulhisi3>
     4d6:	6c 01       	movw	r12, r24
     4d8:	d6 94       	lsr	r13
     4da:	c7 94       	ror	r12
     4dc:	1f 93       	push	r17
     4de:	0f 93       	push	r16
     4e0:	df 92       	push	r13
     4e2:	cf 92       	push	r12
     4e4:	0f 2e       	mov	r0, r31
     4e6:	f6 e6       	ldi	r31, 0x66	; 102
     4e8:	ef 2e       	mov	r14, r31
     4ea:	f3 ea       	ldi	r31, 0xA3	; 163
     4ec:	ff 2e       	mov	r15, r31
     4ee:	f0 2d       	mov	r31, r0
     4f0:	ff 92       	push	r15
     4f2:	ef 92       	push	r14
     4f4:	1f 92       	push	r1
     4f6:	1f 92       	push	r1
     4f8:	1f 92       	push	r1
     4fa:	1f 92       	push	r1
     4fc:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <snprintf>
	char* str = malloc(length + 1);
     500:	01 96       	adiw	r24, 0x01	; 1
     502:	4c 01       	movw	r8, r24
     504:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <malloc>
     508:	a8 2e       	mov	r10, r24
     50a:	b9 2e       	mov	r11, r25
	snprintf(str, length + 1, "%02d.%dV ", voltage / 100, voltage / 10 % 10);
     50c:	1f 93       	push	r17
     50e:	0f 93       	push	r16
     510:	df 92       	push	r13
     512:	cf 92       	push	r12
     514:	ff 92       	push	r15
     516:	ef 92       	push	r14
     518:	9f 92       	push	r9
     51a:	8f 92       	push	r8
     51c:	9f 93       	push	r25
     51e:	8f 93       	push	r24
     520:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <snprintf>
	lcd_write(str);
     524:	8a 2d       	mov	r24, r10
     526:	9b 2d       	mov	r25, r11
     528:	0e 94 7b 07 	call	0xef6	; 0xef6 <lcd_write>
	free(str);
     52c:	8a 2d       	mov	r24, r10
     52e:	9b 2d       	mov	r25, r11
     530:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <free>
	
	voltage = (voltage + 50) / 100; // round to nearest hundred and get hundreds
     534:	e2 96       	adiw	r28, 0x32	; 50
     536:	d6 95       	lsr	r29
     538:	c7 95       	ror	r28
     53a:	d6 95       	lsr	r29
     53c:	c7 95       	ror	r28
     53e:	9e 01       	movw	r18, r28
     540:	ab e7       	ldi	r26, 0x7B	; 123
     542:	b4 e1       	ldi	r27, 0x14	; 20
     544:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__umulhisi3>
     548:	7c 01       	movw	r14, r24
     54a:	f6 94       	lsr	r15
     54c:	e7 94       	ror	r14
	
	full_bars = voltage / 5;
	last_bar  = voltage % 5;
     54e:	97 01       	movw	r18, r14
     550:	ad ec       	ldi	r26, 0xCD	; 205
     552:	bc ec       	ldi	r27, 0xCC	; 204
     554:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__umulhisi3>
     558:	96 95       	lsr	r25
     55a:	87 95       	ror	r24
     55c:	96 95       	lsr	r25
     55e:	87 95       	ror	r24
     560:	9c 01       	movw	r18, r24
     562:	22 0f       	add	r18, r18
     564:	33 1f       	adc	r19, r19
     566:	22 0f       	add	r18, r18
     568:	33 1f       	adc	r19, r19
     56a:	82 0f       	add	r24, r18
     56c:	93 1f       	adc	r25, r19
     56e:	de 2c       	mov	r13, r14
     570:	d8 1a       	sub	r13, r24
	
	for(int i = 0; i < full_bars; i++)
     572:	9e 01       	movw	r18, r28
     574:	a5 ec       	ldi	r26, 0xC5	; 197
     576:	b0 e2       	ldi	r27, 0x20	; 32
     578:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__umulhisi3>
     57c:	92 95       	swap	r25
     57e:	82 95       	swap	r24
     580:	8f 70       	andi	r24, 0x0F	; 15
     582:	89 27       	eor	r24, r25
     584:	9f 70       	andi	r25, 0x0F	; 15
     586:	89 27       	eor	r24, r25
     588:	8c 01       	movw	r16, r24
     58a:	11 27       	eor	r17, r17
     58c:	8d b7       	in	r24, 0x3d	; 61
     58e:	9e b7       	in	r25, 0x3e	; 62
     590:	44 96       	adiw	r24, 0x14	; 20
     592:	8d bf       	out	0x3d, r24	; 61
     594:	9e bf       	out	0x3e, r25	; 62
     596:	10 16       	cp	r1, r16
     598:	11 06       	cpc	r1, r17
     59a:	1c f5       	brge	.+70     	; 0x5e2 <display_voltage+0x1ac>
     59c:	c0 e0       	ldi	r28, 0x00	; 0
     59e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (i >= ((MAX_VOLTAGE + 50) / 100) / 5 - 1 && voltage >= (MAX_VOLTAGE + 50) / 100)
     5a0:	c9 30       	cpi	r28, 0x09	; 9
     5a2:	d1 05       	cpc	r29, r1
     5a4:	74 f0       	brlt	.+28     	; 0x5c2 <display_voltage+0x18c>
     5a6:	92 e3       	ldi	r25, 0x32	; 50
     5a8:	e9 16       	cp	r14, r25
     5aa:	f1 04       	cpc	r15, r1
     5ac:	50 f0       	brcs	.+20     	; 0x5c2 <display_voltage+0x18c>
		{
			display_custom_character(6);
     5ae:	86 e0       	ldi	r24, 0x06	; 6
     5b0:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <display_custom_character>
			if (last_bar != 0)
     5b4:	dd 20       	and	r13, r13
     5b6:	89 f0       	breq	.+34     	; 0x5da <display_voltage+0x1a4>
			{
				display_custom_character(6);
     5b8:	86 e0       	ldi	r24, 0x06	; 6
     5ba:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <display_custom_character>
				last_bar = 0;
     5be:	d1 2c       	mov	r13, r1
     5c0:	0c c0       	rjmp	.+24     	; 0x5da <display_voltage+0x1a4>
			}
		}
		else
		{
			if ((i + 1) % 2 == 0)
     5c2:	9e 01       	movw	r18, r28
     5c4:	2f 5f       	subi	r18, 0xFF	; 255
     5c6:	3f 4f       	sbci	r19, 0xFF	; 255
     5c8:	20 fd       	sbrc	r18, 0
     5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <display_voltage+0x19e>
			{
				display_custom_character(5);
     5cc:	85 e0       	ldi	r24, 0x05	; 5
     5ce:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <display_custom_character>
     5d2:	03 c0       	rjmp	.+6      	; 0x5da <display_voltage+0x1a4>
			}
			else
			{
				display_custom_character(4);
     5d4:	84 e0       	ldi	r24, 0x04	; 4
     5d6:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <display_custom_character>
	voltage = (voltage + 50) / 100; // round to nearest hundred and get hundreds
	
	full_bars = voltage / 5;
	last_bar  = voltage % 5;
	
	for(int i = 0; i < full_bars; i++)
     5da:	21 96       	adiw	r28, 0x01	; 1
     5dc:	c0 17       	cp	r28, r16
     5de:	d1 07       	cpc	r29, r17
     5e0:	f9 f6       	brne	.-66     	; 0x5a0 <display_voltage+0x16a>
				display_custom_character(4);
			}
		}
	}
	
	if (last_bar != 0)
     5e2:	dd 20       	and	r13, r13
     5e4:	21 f0       	breq	.+8      	; 0x5ee <display_voltage+0x1b8>
	{
		display_custom_character(last_bar - 1);
     5e6:	8f ef       	ldi	r24, 0xFF	; 255
     5e8:	8d 0d       	add	r24, r13
     5ea:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <display_custom_character>
	}
}
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	ff 90       	pop	r15
     5f8:	ef 90       	pop	r14
     5fa:	df 90       	pop	r13
     5fc:	cf 90       	pop	r12
     5fe:	bf 90       	pop	r11
     600:	af 90       	pop	r10
     602:	9f 90       	pop	r9
     604:	8f 90       	pop	r8
     606:	08 95       	ret

00000608 <display_danger>:

void display_danger()
{
	lcd_command(CLEAR_DISPLAY);
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(FUNCTION_SET | 0b0000111100);
     610:	8c e3       	ldi	r24, 0x3C	; 60
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_write("  D A ");
     618:	80 e7       	ldi	r24, 0x70	; 112
     61a:	93 ea       	ldi	r25, 0xA3	; 163
     61c:	0e 94 7b 07 	call	0xef6	; 0xef6 <lcd_write>
	lcd_write("N G E R");
     620:	87 e7       	ldi	r24, 0x77	; 119
     622:	93 ea       	ldi	r25, 0xA3	; 163
     624:	0e 94 7b 07 	call	0xef6	; 0xef6 <lcd_write>
	lcd_write(" ! ! !");
     628:	8f e7       	ldi	r24, 0x7F	; 127
     62a:	93 ea       	ldi	r25, 0xA3	; 163
     62c:	0e 94 7b 07 	call	0xef6	; 0xef6 <lcd_write>
     630:	08 95       	ret

00000632 <debounce>:
/*          6 times more than @precisionUs)                             */
/* @return - whether the function debounced pin correctly (If running   */
/*           time of the function reached @maxUs returns false(0))      */
/************************************************************************/
uint8_t debounce(volatile unsigned char *port, uint8_t pin, uint8_t precisionUs, uint8_t maxUs)
{
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	ec 01       	movw	r28, r24
	uint8_t counter = 0;
	uint8_t counterUs = 0;
	uint8_t isHigh = FALSE;
	
	while(counter != precisionUs && counterUs != maxUs)
     638:	44 23       	and	r20, r20
     63a:	39 f1       	breq	.+78     	; 0x68a <debounce+0x58>
     63c:	22 23       	and	r18, r18
     63e:	39 f1       	breq	.+78     	; 0x68e <debounce+0x5c>
     640:	a1 e0       	ldi	r26, 0x01	; 1
     642:	b0 e0       	ldi	r27, 0x00	; 0
     644:	02 c0       	rjmp	.+4      	; 0x64a <debounce+0x18>
     646:	aa 0f       	add	r26, r26
     648:	bb 1f       	adc	r27, r27
     64a:	6a 95       	dec	r22
     64c:	e2 f7       	brpl	.-8      	; 0x646 <debounce+0x14>
	{
		// *(volatile uint8_t *)(port) - is a dereference of a port's address, therefore, we read directly from memory
		if(*(volatile uint8_t *)(port) & (1 << pin))
     64e:	91 e0       	ldi	r25, 0x01	; 1
     650:	e0 e0       	ldi	r30, 0x00	; 0
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	01 c0       	rjmp	.+2      	; 0x658 <debounce+0x26>
     656:	95 2f       	mov	r25, r21
     658:	68 81       	ld	r22, Y
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	6a 23       	and	r22, r26
     65e:	7b 23       	and	r23, r27
     660:	67 2b       	or	r22, r23
     662:	29 f0       	breq	.+10     	; 0x66e <debounce+0x3c>
		{
			counter = isHigh ? counter + 1 : 0;
     664:	ee 23       	and	r30, r30
     666:	c9 f0       	breq	.+50     	; 0x69a <debounce+0x68>
     668:	3f 5f       	subi	r19, 0xFF	; 255
			isHigh = TRUE;
     66a:	e1 e0       	ldi	r30, 0x01	; 1
     66c:	03 c0       	rjmp	.+6      	; 0x674 <debounce+0x42>
		}
		else
		{
			counter = isHigh ? 0 : counter + 1;
     66e:	e1 11       	cpse	r30, r1
     670:	16 c0       	rjmp	.+44     	; 0x69e <debounce+0x6c>
     672:	3f 5f       	subi	r19, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     674:	86 e0       	ldi	r24, 0x06	; 6
     676:	8a 95       	dec	r24
     678:	f1 f7       	brne	.-4      	; 0x676 <debounce+0x44>
     67a:	00 c0       	rjmp	.+0      	; 0x67c <debounce+0x4a>
{
	uint8_t counter = 0;
	uint8_t counterUs = 0;
	uint8_t isHigh = FALSE;
	
	while(counter != precisionUs && counterUs != maxUs)
     67c:	34 17       	cp	r19, r20
     67e:	41 f0       	breq	.+16     	; 0x690 <debounce+0x5e>
     680:	51 e0       	ldi	r21, 0x01	; 1
     682:	59 0f       	add	r21, r25
     684:	29 13       	cpse	r18, r25
     686:	e7 cf       	rjmp	.-50     	; 0x656 <debounce+0x24>
     688:	03 c0       	rjmp	.+6      	; 0x690 <debounce+0x5e>
/*           time of the function reached @maxUs returns false(0))      */
/************************************************************************/
uint8_t debounce(volatile unsigned char *port, uint8_t pin, uint8_t precisionUs, uint8_t maxUs)
{
	uint8_t counter = 0;
	uint8_t counterUs = 0;
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	01 c0       	rjmp	.+2      	; 0x690 <debounce+0x5e>
     68e:	90 e0       	ldi	r25, 0x00	; 0
		}
		_delay_us(1);
		counterUs++;
	}
	
	return counterUs != maxUs;
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	29 13       	cpse	r18, r25
     694:	0b c0       	rjmp	.+22     	; 0x6ac <debounce+0x7a>
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	09 c0       	rjmp	.+18     	; 0x6ac <debounce+0x7a>
	{
		// *(volatile uint8_t *)(port) - is a dereference of a port's address, therefore, we read directly from memory
		if(*(volatile uint8_t *)(port) & (1 << pin))
		{
			counter = isHigh ? counter + 1 : 0;
			isHigh = TRUE;
     69a:	e1 e0       	ldi	r30, 0x01	; 1
     69c:	01 c0       	rjmp	.+2      	; 0x6a0 <debounce+0x6e>
		}
		else
		{
			counter = isHigh ? 0 : counter + 1;
			isHigh = FALSE;
     69e:	e0 e0       	ldi	r30, 0x00	; 0
     6a0:	86 e0       	ldi	r24, 0x06	; 6
     6a2:	8a 95       	dec	r24
     6a4:	f1 f7       	brne	.-4      	; 0x6a2 <debounce+0x70>
     6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <debounce+0x76>
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	ea cf       	rjmp	.-44     	; 0x680 <debounce+0x4e>
		_delay_us(1);
		counterUs++;
	}
	
	return counterUs != maxUs;
}
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	08 95       	ret

000006b2 <read_gray_code_from_encoder>:

uint8_t read_gray_code_from_encoder()
{
     6b2:	1f 93       	push	r17
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
	uint8_t val=0;
	
	bool is_debounce_successful = TRUE;
	is_debounce_successful &= debounce(&PORTA_IN, ENCDR_A, 10, 60);
     6b8:	2c e3       	ldi	r18, 0x3C	; 60
     6ba:	4a e0       	ldi	r20, 0x0A	; 10
     6bc:	66 e0       	ldi	r22, 0x06	; 6
     6be:	88 e0       	ldi	r24, 0x08	; 8
     6c0:	94 e0       	ldi	r25, 0x04	; 4
     6c2:	0e 94 19 03 	call	0x632	; 0x632 <debounce>
     6c6:	18 2f       	mov	r17, r24
	is_debounce_successful &= debounce(&PORTA_IN, ENCDR_B, 10, 60);
     6c8:	2c e3       	ldi	r18, 0x3C	; 60
     6ca:	4a e0       	ldi	r20, 0x0A	; 10
     6cc:	65 e0       	ldi	r22, 0x05	; 5
     6ce:	88 e0       	ldi	r24, 0x08	; 8
     6d0:	94 e0       	ldi	r25, 0x04	; 4
     6d2:	0e 94 19 03 	call	0x632	; 0x632 <debounce>
	
	if (is_debounce_successful)
     6d6:	11 70       	andi	r17, 0x01	; 1
     6d8:	c1 2f       	mov	r28, r17
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	d9 2f       	mov	r29, r25
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	8c 23       	and	r24, r28
     6e2:	9d 23       	and	r25, r29
     6e4:	89 2b       	or	r24, r25
     6e6:	69 f0       	breq	.+26     	; 0x702 <read_gray_code_from_encoder+0x50>
	{
		if(!(PORTA_IN & (1 << ENCDR_A)))
     6e8:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     6ec:	86 fd       	sbrc	r24, 6
     6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <read_gray_code_from_encoder+0x42>
		{
			val |= (1 << 1);
     6f0:	82 e0       	ldi	r24, 0x02	; 2
     6f2:	01 c0       	rjmp	.+2      	; 0x6f6 <read_gray_code_from_encoder+0x44>
	return counterUs != maxUs;
}

uint8_t read_gray_code_from_encoder()
{
	uint8_t val=0;
     6f4:	80 e0       	ldi	r24, 0x00	; 0
		if(!(PORTA_IN & (1 << ENCDR_A)))
		{
			val |= (1 << 1);
		}

		if(!(PORTA_IN & (1 << ENCDR_B)))
     6f6:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     6fa:	95 fd       	sbrc	r25, 5
     6fc:	03 c0       	rjmp	.+6      	; 0x704 <read_gray_code_from_encoder+0x52>
		{
			val |= (1<<0);
     6fe:	81 60       	ori	r24, 0x01	; 1
     700:	01 c0       	rjmp	.+2      	; 0x704 <read_gray_code_from_encoder+0x52>
	return counterUs != maxUs;
}

uint8_t read_gray_code_from_encoder()
{
	uint8_t val=0;
     702:	80 e0       	ldi	r24, 0x00	; 0
			val |= (1<<0);
		}
	}

	return val;
}
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	1f 91       	pop	r17
     70a:	08 95       	ret

0000070c <initialize>:
#include "board.h"

void initialize()
{
     70c:	cf 93       	push	r28
	CPU_CCP = 0xD8; //temporarily remove protection for protected I/O registers (Cannot change clock prescaler without doing this first)
     70e:	88 ed       	ldi	r24, 0xD8	; 216
     710:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLB = (0 << 0); // disable prescaler (There's a default prescaler of 6)
     712:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     716:	87 ea       	ldi	r24, 0xA7	; 167
     718:	91 e6       	ldi	r25, 0x61	; 97
     71a:	01 97       	sbiw	r24, 0x01	; 1
     71c:	f1 f7       	brne	.-4      	; 0x71a <initialize+0xe>
     71e:	00 c0       	rjmp	.+0      	; 0x720 <initialize+0x14>
     720:	00 00       	nop
	_delay_ms(5);
	CLKCTRL_MCLKCTRLA |= (1 << 7); // System clock is output to CLKOUT pin (20 MHz)
     722:	e0 e6       	ldi	r30, 0x60	; 96
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	80 81       	ld	r24, Z
     728:	80 68       	ori	r24, 0x80	; 128
     72a:	80 83       	st	Z, r24
	PA4 - SW_Encoder - Input/Pull-up
	PA5 - B_Encoder - Input/Pull-up - Interrupt both edges
	PA6 - A_Encoder - Input/Pull-up - Interrupt both edges
	PA7 - Display LED (Backlight) - Output/Low
	*/
	PORTA_DIR = 0b10001111;
     72c:	8f e8       	ldi	r24, 0x8F	; 143
     72e:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
	PORTA_PIN4CTRL = (1 << PORT_PULLUPEN_bp);
     732:	88 e0       	ldi	r24, 0x08	; 8
     734:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <__TEXT_REGION_LENGTH__+0x700414>
	PORTA_PIN5CTRL = (1 << PORT_PULLUPEN_bp);
     738:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <__TEXT_REGION_LENGTH__+0x700415>
	PORTA_PIN6CTRL = (1 << PORT_PULLUPEN_bp);
     73c:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <__TEXT_REGION_LENGTH__+0x700416>
	PB4 - D4_LCD - Output/Low
	PB5 - D5_LCD - Output/Low
	PB6 - D6_LCD - Output/Low
	PB7 - D7_LCD - Output/Low
	*/
	PORTB_DIR = 0b11110101;
     740:	95 ef       	ldi	r25, 0xF5	; 245
     742:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
	PORTB_OUTSET = (1 << PIN0_bp);
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
	PORTB_PIN1CTRL = (1 << PORT_PULLUPEN_bp);
     74c:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>
	//PORTB_PIN3CTRL = (1 << PORT_PULLUPEN_bp);
	PORTB_PIN3CTRL |= (0x1); //interrupt on both edges
     750:	e3 e3       	ldi	r30, 0x33	; 51
     752:	f4 e0       	ldi	r31, 0x04	; 4
     754:	90 81       	ld	r25, Z
     756:	91 60       	ori	r25, 0x01	; 1
     758:	90 83       	st	Z, r25
	CPUINT.LVL1VEC = 0x08; //Set PORTB interrupt to be LEVEL1
     75a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <__TEXT_REGION_LENGTH__+0x700113>
	PC2 - D2_LCD - Output/Low
	PC3 - D3_LCD - Output/Low
	PC4 - R/W (0:RD, 1:WR) - Output/Low
	PC5 - RS (Reg Sel) (0:CMD, 1:DATA) - Output/Low
	*/
	PORTC_DIR = 0b00111111;
     75e:	8f e3       	ldi	r24, 0x3F	; 63
     760:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>
	
	//RTC initialization
	while (RTC.STATUS > 0) {} // Wait for all register to be synchronized
     764:	e0 e4       	ldi	r30, 0x40	; 64
     766:	f1 e0       	ldi	r31, 0x01	; 1
     768:	81 81       	ldd	r24, Z+1	; 0x01
     76a:	81 11       	cpse	r24, r1
     76c:	fd cf       	rjmp	.-6      	; 0x768 <initialize+0x5c>

	RTC.PER = 1;
     76e:	e0 e4       	ldi	r30, 0x40	; 64
     770:	f1 e0       	ldi	r31, 0x01	; 1
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	82 87       	std	Z+10, r24	; 0x0a
     778:	93 87       	std	Z+11, r25	; 0x0b
	RTC.INTCTRL = 0 << RTC_CMP_bp
     77a:	c1 e0       	ldi	r28, 0x01	; 1
     77c:	c2 83       	std	Z+2, r28	; 0x02
	| 1 << RTC_OVF_bp; //Overflow interrupt.
	
	RTC.CTRLA = RTC_PRESCALER_DIV1_gc	//NO Prescaler
     77e:	81 e8       	ldi	r24, 0x81	; 129
     780:	80 83       	st	Z, r24
	| 1 << RTC_RTCEN_bp       	//Enable RTC
	| 1 << RTC_RUNSTDBY_bp;   	//Run in standby

	RTC.CLKSEL = RTC_CLKSEL_INT1K_gc; // 32KHz divided by 32, i.e run at 1.024kHz
     782:	c7 83       	std	Z+7, r28	; 0x07
	
	encoder_val = read_gray_code_from_encoder();
     784:	0e 94 59 03 	call	0x6b2	; 0x6b2 <read_gray_code_from_encoder>
     788:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <encoder_val>
	encoder_val_tmp = 0;
     78c:	10 92 2a 38 	sts	0x382A, r1	; 0x80382a <encoder_val_tmp>
	
	desired_current     = 0;
     790:	10 92 06 38 	sts	0x3806, r1	; 0x803806 <__data_end>
     794:	10 92 07 38 	sts	0x3807, r1	; 0x803807 <__data_end+0x1>
	current             = 0;
     798:	10 92 2b 38 	sts	0x382B, r1	; 0x80382b <current>
     79c:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <current+0x1>
	temp_current        = 0;
     7a0:	10 92 28 38 	sts	0x3828, r1	; 0x803828 <temp_current>
     7a4:	10 92 29 38 	sts	0x3829, r1	; 0x803829 <temp_current+0x1>
	voltage             = 0;
     7a8:	10 92 08 38 	sts	0x3808, r1	; 0x803808 <voltage>
     7ac:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <voltage+0x1>
	temp_voltage        = 0;
     7b0:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <temp_voltage>
     7b4:	10 92 33 38 	sts	0x3833, r1	; 0x803833 <temp_voltage+0x1>
	update              = TRUE;
     7b8:	c0 93 3a 38 	sts	0x383A, r28	; 0x80383a <update>
	set_current_mode    = FALSE;
     7bc:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <set_current_mode>
	rtc_idle_counter    = 0;
     7c0:	10 92 36 38 	sts	0x3836, r1	; 0x803836 <rtc_idle_counter>
     7c4:	10 92 37 38 	sts	0x3837, r1	; 0x803837 <rtc_idle_counter+0x1>
     7c8:	10 92 38 38 	sts	0x3838, r1	; 0x803838 <rtc_idle_counter+0x2>
     7cc:	10 92 39 38 	sts	0x3839, r1	; 0x803839 <rtc_idle_counter+0x3>
	rtc_counter         = 0;
     7d0:	10 92 0b 38 	sts	0x380B, r1	; 0x80380b <rtc_counter>
     7d4:	10 92 0c 38 	sts	0x380C, r1	; 0x80380c <rtc_counter+0x1>
     7d8:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <rtc_counter+0x2>
     7dc:	10 92 0e 38 	sts	0x380E, r1	; 0x80380e <rtc_counter+0x3>
	rtc_counter_1_4     = FALSE;
     7e0:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <rtc_counter_1_4>
	rtc_counter_1_2     = FALSE;
     7e4:	10 92 34 38 	sts	0x3834, r1	; 0x803834 <rtc_counter_1_2>
	rtc_counter_prev    = 0;
     7e8:	10 92 2e 38 	sts	0x382E, r1	; 0x80382e <rtc_counter_prev>
     7ec:	10 92 2f 38 	sts	0x382F, r1	; 0x80382f <rtc_counter_prev+0x1>
     7f0:	10 92 30 38 	sts	0x3830, r1	; 0x803830 <rtc_counter_prev+0x2>
     7f4:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <rtc_counter_prev+0x3>
	set_current_blink   = FALSE;
     7f8:	10 92 0a 38 	sts	0x380A, r1	; 0x80380a <set_current_blink>
}
     7fc:	cf 91       	pop	r28
     7fe:	08 95       	ret

00000800 <handle_encoder>:
	return val;
}

void handle_encoder()
{
	encoder_val_tmp = read_gray_code_from_encoder();
     800:	0e 94 59 03 	call	0x6b2	; 0x6b2 <read_gray_code_from_encoder>
     804:	80 93 2a 38 	sts	0x382A, r24	; 0x80382a <encoder_val_tmp>
	
	current = (current / 10) * 10;
     808:	20 91 2b 38 	lds	r18, 0x382B	; 0x80382b <current>
     80c:	30 91 2c 38 	lds	r19, 0x382C	; 0x80382c <current+0x1>
     810:	ad ec       	ldi	r26, 0xCD	; 205
     812:	bc ec       	ldi	r27, 0xCC	; 204
     814:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__umulhisi3>
     818:	96 95       	lsr	r25
     81a:	87 95       	ror	r24
     81c:	96 95       	lsr	r25
     81e:	87 95       	ror	r24
     820:	96 95       	lsr	r25
     822:	87 95       	ror	r24
     824:	9c 01       	movw	r18, r24
     826:	22 0f       	add	r18, r18
     828:	33 1f       	adc	r19, r19
     82a:	88 0f       	add	r24, r24
     82c:	99 1f       	adc	r25, r25
     82e:	88 0f       	add	r24, r24
     830:	99 1f       	adc	r25, r25
     832:	88 0f       	add	r24, r24
     834:	99 1f       	adc	r25, r25
     836:	82 0f       	add	r24, r18
     838:	93 1f       	adc	r25, r19
     83a:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <current>
     83e:	90 93 2c 38 	sts	0x382C, r25	; 0x80382c <current+0x1>

	if(encoder_val != encoder_val_tmp)
     842:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <encoder_val>
     846:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <encoder_val_tmp>
     84a:	98 17       	cp	r25, r24
     84c:	09 f4       	brne	.+2      	; 0x850 <handle_encoder+0x50>
     84e:	c3 c0       	rjmp	.+390    	; 0x9d6 <handle_encoder+0x1d6>
	{
		if((encoder_val == 0 && encoder_val_tmp == 2))
     850:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <encoder_val>
     854:	81 11       	cpse	r24, r1
     856:	54 c0       	rjmp	.+168    	; 0x900 <handle_encoder+0x100>
     858:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <encoder_val_tmp>
     85c:	82 30       	cpi	r24, 0x02	; 2
     85e:	09 f0       	breq	.+2      	; 0x862 <handle_encoder+0x62>
     860:	4f c0       	rjmp	.+158    	; 0x900 <handle_encoder+0x100>
		{
			if (current <= MAX_CURRENT - 10)
     862:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <current>
     866:	90 91 2c 38 	lds	r25, 0x382C	; 0x80382c <current+0x1>
     86a:	8b 3b       	cpi	r24, 0xBB	; 187
     86c:	99 40       	sbci	r25, 0x09	; 9
     86e:	08 f0       	brcs	.+2      	; 0x872 <handle_encoder+0x72>
     870:	9e c0       	rjmp	.+316    	; 0x9ae <handle_encoder+0x1ae>
			{
				if (rtc_counter - rtc_counter_prev < 2)
     872:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <rtc_counter>
     876:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <rtc_counter+0x1>
     87a:	a0 91 0d 38 	lds	r26, 0x380D	; 0x80380d <rtc_counter+0x2>
     87e:	b0 91 0e 38 	lds	r27, 0x380E	; 0x80380e <rtc_counter+0x3>
     882:	40 91 2e 38 	lds	r20, 0x382E	; 0x80382e <rtc_counter_prev>
     886:	50 91 2f 38 	lds	r21, 0x382F	; 0x80382f <rtc_counter_prev+0x1>
     88a:	60 91 30 38 	lds	r22, 0x3830	; 0x803830 <rtc_counter_prev+0x2>
     88e:	70 91 31 38 	lds	r23, 0x3831	; 0x803831 <rtc_counter_prev+0x3>
     892:	84 1b       	sub	r24, r20
     894:	95 0b       	sbc	r25, r21
     896:	a6 0b       	sbc	r26, r22
     898:	b7 0b       	sbc	r27, r23
     89a:	02 97       	sbiw	r24, 0x02	; 2
     89c:	a1 05       	cpc	r26, r1
     89e:	b1 05       	cpc	r27, r1
     8a0:	10 f5       	brcc	.+68     	; 0x8e6 <handle_encoder+0xe6>
				{
					if (current <= MAX_CURRENT - 100)
     8a2:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <current>
     8a6:	90 91 2c 38 	lds	r25, 0x382C	; 0x80382c <current+0x1>
     8aa:	81 36       	cpi	r24, 0x61	; 97
     8ac:	99 40       	sbci	r25, 0x09	; 9
     8ae:	70 f4       	brcc	.+28     	; 0x8cc <handle_encoder+0xcc>
					{
						current += 100;
     8b0:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <current>
     8b4:	90 91 2c 38 	lds	r25, 0x382C	; 0x80382c <current+0x1>
     8b8:	8c 59       	subi	r24, 0x9C	; 156
     8ba:	9f 4f       	sbci	r25, 0xFF	; 255
     8bc:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <current>
     8c0:	90 93 2c 38 	sts	0x382C, r25	; 0x80382c <current+0x1>
						update = TRUE;
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <update>
     8ca:	71 c0       	rjmp	.+226    	; 0x9ae <handle_encoder+0x1ae>
					}
					else
					{
						current += 10;
     8cc:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <current>
     8d0:	90 91 2c 38 	lds	r25, 0x382C	; 0x80382c <current+0x1>
     8d4:	0a 96       	adiw	r24, 0x0a	; 10
     8d6:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <current>
     8da:	90 93 2c 38 	sts	0x382C, r25	; 0x80382c <current+0x1>
						update = TRUE;
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <update>
     8e4:	64 c0       	rjmp	.+200    	; 0x9ae <handle_encoder+0x1ae>
					}
				}
				else
				{
					current += 10;
     8e6:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <current>
     8ea:	90 91 2c 38 	lds	r25, 0x382C	; 0x80382c <current+0x1>
     8ee:	0a 96       	adiw	r24, 0x0a	; 10
     8f0:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <current>
     8f4:	90 93 2c 38 	sts	0x382C, r25	; 0x80382c <current+0x1>
					update = TRUE;
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <update>
     8fe:	57 c0       	rjmp	.+174    	; 0x9ae <handle_encoder+0x1ae>
				}
			}
		}
		else if((encoder_val == 1 && encoder_val_tmp == 3))
     900:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <encoder_val>
     904:	81 30       	cpi	r24, 0x01	; 1
     906:	09 f0       	breq	.+2      	; 0x90a <handle_encoder+0x10a>
     908:	52 c0       	rjmp	.+164    	; 0x9ae <handle_encoder+0x1ae>
     90a:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <encoder_val_tmp>
     90e:	83 30       	cpi	r24, 0x03	; 3
     910:	09 f0       	breq	.+2      	; 0x914 <handle_encoder+0x114>
     912:	4d c0       	rjmp	.+154    	; 0x9ae <handle_encoder+0x1ae>
		{
			if (current >= 10)
     914:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <current>
     918:	90 91 2c 38 	lds	r25, 0x382C	; 0x80382c <current+0x1>
     91c:	0a 97       	sbiw	r24, 0x0a	; 10
     91e:	08 f4       	brcc	.+2      	; 0x922 <handle_encoder+0x122>
     920:	46 c0       	rjmp	.+140    	; 0x9ae <handle_encoder+0x1ae>
			{
				if (rtc_counter - rtc_counter_prev < 2)
     922:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <rtc_counter>
     926:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <rtc_counter+0x1>
     92a:	a0 91 0d 38 	lds	r26, 0x380D	; 0x80380d <rtc_counter+0x2>
     92e:	b0 91 0e 38 	lds	r27, 0x380E	; 0x80380e <rtc_counter+0x3>
     932:	40 91 2e 38 	lds	r20, 0x382E	; 0x80382e <rtc_counter_prev>
     936:	50 91 2f 38 	lds	r21, 0x382F	; 0x80382f <rtc_counter_prev+0x1>
     93a:	60 91 30 38 	lds	r22, 0x3830	; 0x803830 <rtc_counter_prev+0x2>
     93e:	70 91 31 38 	lds	r23, 0x3831	; 0x803831 <rtc_counter_prev+0x3>
     942:	84 1b       	sub	r24, r20
     944:	95 0b       	sbc	r25, r21
     946:	a6 0b       	sbc	r26, r22
     948:	b7 0b       	sbc	r27, r23
     94a:	02 97       	sbiw	r24, 0x02	; 2
     94c:	a1 05       	cpc	r26, r1
     94e:	b1 05       	cpc	r27, r1
     950:	10 f5       	brcc	.+68     	; 0x996 <handle_encoder+0x196>
				{
					if (current >= 100)
     952:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <current>
     956:	90 91 2c 38 	lds	r25, 0x382C	; 0x80382c <current+0x1>
     95a:	84 36       	cpi	r24, 0x64	; 100
     95c:	91 05       	cpc	r25, r1
     95e:	70 f0       	brcs	.+28     	; 0x97c <handle_encoder+0x17c>
					{
						current -= 100;
     960:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <current>
     964:	90 91 2c 38 	lds	r25, 0x382C	; 0x80382c <current+0x1>
     968:	84 56       	subi	r24, 0x64	; 100
     96a:	91 09       	sbc	r25, r1
     96c:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <current>
     970:	90 93 2c 38 	sts	0x382C, r25	; 0x80382c <current+0x1>
						update = TRUE;
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <update>
     97a:	19 c0       	rjmp	.+50     	; 0x9ae <handle_encoder+0x1ae>
					}
					else
					{
						current -= 10;
     97c:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <current>
     980:	90 91 2c 38 	lds	r25, 0x382C	; 0x80382c <current+0x1>
     984:	0a 97       	sbiw	r24, 0x0a	; 10
     986:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <current>
     98a:	90 93 2c 38 	sts	0x382C, r25	; 0x80382c <current+0x1>
						update = TRUE;
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <update>
     994:	0c c0       	rjmp	.+24     	; 0x9ae <handle_encoder+0x1ae>
					}
				}
				else
				{
					current -= 10;
     996:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <current>
     99a:	90 91 2c 38 	lds	r25, 0x382C	; 0x80382c <current+0x1>
     99e:	0a 97       	sbiw	r24, 0x0a	; 10
     9a0:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <current>
     9a4:	90 93 2c 38 	sts	0x382C, r25	; 0x80382c <current+0x1>
					update = TRUE;
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <update>
				}
			}
		}

		encoder_val = encoder_val_tmp;
     9ae:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <encoder_val_tmp>
     9b2:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <encoder_val>
		rtc_counter_prev = rtc_counter;
     9b6:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <rtc_counter>
     9ba:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <rtc_counter+0x1>
     9be:	a0 91 0d 38 	lds	r26, 0x380D	; 0x80380d <rtc_counter+0x2>
     9c2:	b0 91 0e 38 	lds	r27, 0x380E	; 0x80380e <rtc_counter+0x3>
     9c6:	80 93 2e 38 	sts	0x382E, r24	; 0x80382e <rtc_counter_prev>
     9ca:	90 93 2f 38 	sts	0x382F, r25	; 0x80382f <rtc_counter_prev+0x1>
     9ce:	a0 93 30 38 	sts	0x3830, r26	; 0x803830 <rtc_counter_prev+0x2>
     9d2:	b0 93 31 38 	sts	0x3831, r27	; 0x803831 <rtc_counter_prev+0x3>
     9d6:	08 95       	ret

000009d8 <INA_Read_Short>:
	//INA_Write(twi, 0x00, 0x48, 0x07, ina226_addr);
	//If no communication for too long then do long delay to triger a watch dog counter
	INA_Write(twi, 0x00, 0x45, 0xFF, ina226_addr);
	
	_delay_ms(20);
}
     9d8:	ef 92       	push	r14
     9da:	ff 92       	push	r15
     9dc:	0f 93       	push	r16
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	cd b7       	in	r28, 0x3d	; 61
     9e4:	de b7       	in	r29, 0x3e	; 62
     9e6:	28 97       	sbiw	r28, 0x08	; 8
     9e8:	cd bf       	out	0x3d, r28	; 61
     9ea:	de bf       	out	0x3e, r29	; 62
     9ec:	7c 01       	movw	r14, r24
     9ee:	84 2f       	mov	r24, r20
     9f0:	69 83       	std	Y+1, r22	; 0x01
     9f2:	02 e0       	ldi	r16, 0x02	; 2
     9f4:	21 e0       	ldi	r18, 0x01	; 1
     9f6:	ae 01       	movw	r20, r28
     9f8:	4f 5f       	subi	r20, 0xFF	; 255
     9fa:	5f 4f       	sbci	r21, 0xFF	; 255
     9fc:	68 2f       	mov	r22, r24
     9fe:	c7 01       	movw	r24, r14
     a00:	0e 94 84 0a 	call	0x1508	; 0x1508 <TWI_MasterWriteRead>
     a04:	8f e0       	ldi	r24, 0x0F	; 15
     a06:	97 e2       	ldi	r25, 0x27	; 39
     a08:	01 97       	sbiw	r24, 0x01	; 1
     a0a:	f1 f7       	brne	.-4      	; 0xa08 <INA_Read_Short+0x30>
     a0c:	00 c0       	rjmp	.+0      	; 0xa0e <INA_Read_Short+0x36>
     a0e:	00 00       	nop
     a10:	c7 01       	movw	r24, r14
     a12:	0b 96       	adiw	r24, 0x0b	; 11
     a14:	28 96       	adiw	r28, 0x08	; 8
     a16:	cd bf       	out	0x3d, r28	; 61
     a18:	de bf       	out	0x3e, r29	; 62
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	0f 91       	pop	r16
     a20:	ff 90       	pop	r15
     a22:	ef 90       	pop	r14
     a24:	08 95       	ret

00000a26 <INA_Read_Long>:
     a26:	ef 92       	push	r14
     a28:	ff 92       	push	r15
     a2a:	0f 93       	push	r16
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
     a34:	28 97       	sbiw	r28, 0x08	; 8
     a36:	cd bf       	out	0x3d, r28	; 61
     a38:	de bf       	out	0x3e, r29	; 62
     a3a:	7c 01       	movw	r14, r24
     a3c:	84 2f       	mov	r24, r20
     a3e:	69 83       	std	Y+1, r22	; 0x01
     a40:	02 e0       	ldi	r16, 0x02	; 2
     a42:	21 e0       	ldi	r18, 0x01	; 1
     a44:	ae 01       	movw	r20, r28
     a46:	4f 5f       	subi	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	68 2f       	mov	r22, r24
     a4c:	c7 01       	movw	r24, r14
     a4e:	0e 94 84 0a 	call	0x1508	; 0x1508 <TWI_MasterWriteRead>
     a52:	8f e0       	ldi	r24, 0x0F	; 15
     a54:	97 e2       	ldi	r25, 0x27	; 39
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	f1 f7       	brne	.-4      	; 0xa56 <INA_Read_Long+0x30>
     a5a:	00 c0       	rjmp	.+0      	; 0xa5c <INA_Read_Long+0x36>
     a5c:	00 00       	nop
     a5e:	c7 01       	movw	r24, r14
     a60:	0b 96       	adiw	r24, 0x0b	; 11
     a62:	28 96       	adiw	r28, 0x08	; 8
     a64:	cd bf       	out	0x3d, r28	; 61
     a66:	de bf       	out	0x3e, r29	; 62
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	0f 91       	pop	r16
     a6e:	ff 90       	pop	r15
     a70:	ef 90       	pop	r14
     a72:	08 95       	ret

00000a74 <get_voltage>:

uint16_t get_voltage(TWI_Master_t *twi, bool averaged, uint8_t ina226_addr)
{
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
	register8_t* read_val;
	if(averaged)
     a78:	66 23       	and	r22, r22
     a7a:	29 f0       	breq	.+10     	; 0xa86 <get_voltage+0x12>
	{
		read_val = INA_Read_Long(twi, 0x02, ina226_addr);
     a7c:	62 e0       	ldi	r22, 0x02	; 2
     a7e:	0e 94 13 05 	call	0xa26	; 0xa26 <INA_Read_Long>
     a82:	ec 01       	movw	r28, r24
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <get_voltage+0x1a>
	}
	else
	{
		read_val = INA_Read_Short(twi, 0x02, ina226_addr);
     a86:	62 e0       	ldi	r22, 0x02	; 2
     a88:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <INA_Read_Short>
     a8c:	ec 01       	movw	r28, r24
     a8e:	8f e0       	ldi	r24, 0x0F	; 15
     a90:	97 e2       	ldi	r25, 0x27	; 39
     a92:	01 97       	sbiw	r24, 0x01	; 1
     a94:	f1 f7       	brne	.-4      	; 0xa92 <get_voltage+0x1e>
     a96:	00 c0       	rjmp	.+0      	; 0xa98 <get_voltage+0x24>
     a98:	00 00       	nop
	}
	_delay_ms(20);
	int voltage_bits = ((read_val[0] << 8) + (read_val[1]));
     a9a:	68 81       	ld	r22, Y
     a9c:	89 81       	ldd	r24, Y+1	; 0x01
	float voltage = voltage_bits * 0.00125 * 2.00; //; // 1.25 mV/bit
	int voltage_int = voltage * 100;
     a9e:	70 e0       	ldi	r23, 0x00	; 0
     aa0:	76 2f       	mov	r23, r22
     aa2:	66 27       	eor	r22, r22
     aa4:	68 0f       	add	r22, r24
     aa6:	71 1d       	adc	r23, r1
     aa8:	07 2e       	mov	r0, r23
     aaa:	00 0c       	add	r0, r0
     aac:	88 0b       	sbc	r24, r24
     aae:	99 0b       	sbc	r25, r25
     ab0:	0e 94 6f 0c 	call	0x18de	; 0x18de <__floatsisf>
     ab4:	2a e0       	ldi	r18, 0x0A	; 10
     ab6:	37 ed       	ldi	r19, 0xD7	; 215
     ab8:	43 ea       	ldi	r20, 0xA3	; 163
     aba:	5a e3       	ldi	r21, 0x3A	; 58
     abc:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <__mulsf3>
     ac0:	9b 01       	movw	r18, r22
     ac2:	ac 01       	movw	r20, r24
     ac4:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__addsf3>
     ac8:	20 e0       	ldi	r18, 0x00	; 0
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	48 ec       	ldi	r20, 0xC8	; 200
     ace:	52 e4       	ldi	r21, 0x42	; 66
     ad0:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <__mulsf3>
     ad4:	0e 94 37 0c 	call	0x186e	; 0x186e <__fixsfsi>
     ad8:	cb 01       	movw	r24, r22
	
	if(voltage_int > 8000 || voltage_int < 0)//if negative or thinks greater than 80V
     ada:	61 34       	cpi	r22, 0x41	; 65
     adc:	7f 41       	sbci	r23, 0x1F	; 31
     ade:	10 f0       	brcs	.+4      	; 0xae4 <get_voltage+0x70>
	{ 
		voltage_int = 0;
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	if (read_val == 0xFFFFFFFF)
     ae4:	21 96       	adiw	r28, 0x01	; 1
     ae6:	11 f4       	brne	.+4      	; 0xaec <get_voltage+0x78>
	{
		voltage_int = -1;
     ae8:	8f ef       	ldi	r24, 0xFF	; 255
     aea:	9f ef       	ldi	r25, 0xFF	; 255
	}
		
	return voltage_int;
}
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	08 95       	ret

00000af2 <get_current>:

uint16_t get_current(TWI_Master_t *twi, bool averaged, uint8_t ina226_addr)
{
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	00 d0       	rcall	.+0      	; 0xafc <get_current+0xa>
     afc:	cd b7       	in	r28, 0x3d	; 61
     afe:	de b7       	in	r29, 0x3e	; 62
	register8_t* read_val;
	if(averaged)
     b00:	66 23       	and	r22, r22
     b02:	29 f0       	breq	.+10     	; 0xb0e <get_current+0x1c>
	{
		read_val = INA_Read_Long(twi, 0x01, ina226_addr);
     b04:	61 e0       	ldi	r22, 0x01	; 1
     b06:	0e 94 13 05 	call	0xa26	; 0xa26 <INA_Read_Long>
     b0a:	8c 01       	movw	r16, r24
     b0c:	04 c0       	rjmp	.+8      	; 0xb16 <get_current+0x24>
	}
	else
	{
		read_val = INA_Read_Short(twi, 0x01, ina226_addr);
     b0e:	61 e0       	ldi	r22, 0x01	; 1
     b10:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <INA_Read_Short>
     b14:	8c 01       	movw	r16, r24
     b16:	8f e0       	ldi	r24, 0x0F	; 15
     b18:	97 e2       	ldi	r25, 0x27	; 39
     b1a:	01 97       	sbiw	r24, 0x01	; 1
     b1c:	f1 f7       	brne	.-4      	; 0xb1a <get_current+0x28>
     b1e:	00 c0       	rjmp	.+0      	; 0xb20 <get_current+0x2e>
     b20:	00 00       	nop
	}
	_delay_ms(20);
	int shunt_voltage_bits = ((read_val[0] << 8) + (read_val[1]));
     b22:	f8 01       	movw	r30, r16
     b24:	60 81       	ld	r22, Z
     b26:	81 81       	ldd	r24, Z+1	; 0x01
	float current = shunt_voltage_bits * 0.0000025 / 0.002; // * 2.5 uV / 2 milli Ohm
	int volatile current_int = current * 100;
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	76 2f       	mov	r23, r22
     b2c:	66 27       	eor	r22, r22
     b2e:	68 0f       	add	r22, r24
     b30:	71 1d       	adc	r23, r1
     b32:	07 2e       	mov	r0, r23
     b34:	00 0c       	add	r0, r0
     b36:	88 0b       	sbc	r24, r24
     b38:	99 0b       	sbc	r25, r25
     b3a:	0e 94 6f 0c 	call	0x18de	; 0x18de <__floatsisf>
     b3e:	2c ea       	ldi	r18, 0xAC	; 172
     b40:	35 ec       	ldi	r19, 0xC5	; 197
     b42:	47 e2       	ldi	r20, 0x27	; 39
     b44:	56 e3       	ldi	r21, 0x36	; 54
     b46:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <__mulsf3>
     b4a:	2f e6       	ldi	r18, 0x6F	; 111
     b4c:	32 e1       	ldi	r19, 0x12	; 18
     b4e:	43 e0       	ldi	r20, 0x03	; 3
     b50:	5b e3       	ldi	r21, 0x3B	; 59
     b52:	0e 94 c5 0b 	call	0x178a	; 0x178a <__divsf3>
     b56:	20 e0       	ldi	r18, 0x00	; 0
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	48 ec       	ldi	r20, 0xC8	; 200
     b5c:	52 e4       	ldi	r21, 0x42	; 66
     b5e:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <__mulsf3>
     b62:	0e 94 37 0c 	call	0x186e	; 0x186e <__fixsfsi>
     b66:	69 83       	std	Y+1, r22	; 0x01
     b68:	7a 83       	std	Y+2, r23	; 0x02
	
	if(current_int > 8000 || current_int < 0)//if negative or thinks greater than 80A
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	9a 81       	ldd	r25, Y+2	; 0x02
     b6e:	81 34       	cpi	r24, 0x41	; 65
     b70:	9f 41       	sbci	r25, 0x1F	; 31
     b72:	24 f4       	brge	.+8      	; 0xb7c <get_current+0x8a>
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	9a 81       	ldd	r25, Y+2	; 0x02
     b78:	99 23       	and	r25, r25
     b7a:	14 f4       	brge	.+4      	; 0xb80 <get_current+0x8e>
	{ 
		current_int = 0;
     b7c:	19 82       	std	Y+1, r1	; 0x01
     b7e:	1a 82       	std	Y+2, r1	; 0x02
	}

	if (read_val == 0xFFFFFFFF)
     b80:	0f 3f       	cpi	r16, 0xFF	; 255
     b82:	1f 4f       	sbci	r17, 0xFF	; 255
     b84:	21 f4       	brne	.+8      	; 0xb8e <get_current+0x9c>
	{
		current_int = -1;
     b86:	8f ef       	ldi	r24, 0xFF	; 255
     b88:	9f ef       	ldi	r25, 0xFF	; 255
     b8a:	89 83       	std	Y+1, r24	; 0x01
     b8c:	9a 83       	std	Y+2, r25	; 0x02
	}
	
	return current_int;
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	9a 81       	ldd	r25, Y+2	; 0x02
}
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	1f 91       	pop	r17
     b9c:	0f 91       	pop	r16
     b9e:	08 95       	ret

00000ba0 <load_custom_characters>:
		_delay_ms(10);
	}
}

void load_custom_characters()
{
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	00 d0       	rcall	.+0      	; 0xbaa <load_custom_characters+0xa>
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
	
	unsigned char message[2];
	message[0] = (0x00);							//Control bit with continuous data stream
     bae:	19 82       	std	Y+1, r1	; 0x01
	message[1] = (0x38);							//Function Set (8-bit data, 1 Line 5x8 character mode, Normal Instruction Table Chosen)
     bb0:	88 e3       	ldi	r24, 0x38	; 56
     bb2:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
     bb4:	22 e0       	ldi	r18, 0x02	; 2
     bb6:	ae 01       	movw	r20, r28
     bb8:	4f 5f       	subi	r20, 0xFF	; 255
     bba:	5f 4f       	sbci	r21, 0xFF	; 255
     bbc:	6c e3       	ldi	r22, 0x3C	; 60
     bbe:	8f e0       	ldi	r24, 0x0F	; 15
     bc0:	98 e3       	ldi	r25, 0x38	; 56
     bc2:	0e 94 c8 0a 	call	0x1590	; 0x1590 <TWI_MasterWrite>
	while(twiMaster.status == 1);
     bc6:	ef e0       	ldi	r30, 0x0F	; 15
     bc8:	f8 e3       	ldi	r31, 0x38	; 56
     bca:	87 89       	ldd	r24, Z+23	; 0x17
     bcc:	81 30       	cpi	r24, 0x01	; 1
     bce:	e9 f3       	breq	.-6      	; 0xbca <load_custom_characters+0x2a>
     bd0:	87 e8       	ldi	r24, 0x87	; 135
     bd2:	93 e1       	ldi	r25, 0x13	; 19
     bd4:	01 97       	sbiw	r24, 0x01	; 1
     bd6:	f1 f7       	brne	.-4      	; 0xbd4 <load_custom_characters+0x34>
     bd8:	00 c0       	rjmp	.+0      	; 0xbda <load_custom_characters+0x3a>
     bda:	00 00       	nop
	_delay_ms(10);
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
     bdc:	80 91 27 38 	lds	r24, 0x3827	; 0x803827 <twiMaster+0x18>
     be0:	85 30       	cpi	r24, 0x05	; 5
     be2:	c9 f4       	brne	.+50     	; 0xc16 <load_custom_characters+0x76>
	{
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
     be4:	0f e0       	ldi	r16, 0x0F	; 15
     be6:	18 e3       	ldi	r17, 0x38	; 56
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
	while(twiMaster.status == 1);
	_delay_ms(10);
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
	{
		initialize_Screen();
     be8:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <initialize_Screen>
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
     bec:	22 e0       	ldi	r18, 0x02	; 2
     bee:	ae 01       	movw	r20, r28
     bf0:	4f 5f       	subi	r20, 0xFF	; 255
     bf2:	5f 4f       	sbci	r21, 0xFF	; 255
     bf4:	6c e3       	ldi	r22, 0x3C	; 60
     bf6:	c8 01       	movw	r24, r16
     bf8:	0e 94 c8 0a 	call	0x1590	; 0x1590 <TWI_MasterWrite>
		while(twiMaster.status == 1);
     bfc:	f8 01       	movw	r30, r16
     bfe:	87 89       	ldd	r24, Z+23	; 0x17
     c00:	81 30       	cpi	r24, 0x01	; 1
     c02:	e1 f3       	breq	.-8      	; 0xbfc <load_custom_characters+0x5c>
     c04:	87 e8       	ldi	r24, 0x87	; 135
     c06:	93 e1       	ldi	r25, 0x13	; 19
     c08:	01 97       	sbiw	r24, 0x01	; 1
     c0a:	f1 f7       	brne	.-4      	; 0xc08 <load_custom_characters+0x68>
     c0c:	00 c0       	rjmp	.+0      	; 0xc0e <load_custom_characters+0x6e>
     c0e:	00 00       	nop
	message[0] = (0x00);							//Control bit with continuous data stream
	message[1] = (0x38);							//Function Set (8-bit data, 1 Line 5x8 character mode, Normal Instruction Table Chosen)
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
	while(twiMaster.status == 1);
	_delay_ms(10);
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
     c10:	80 8d       	ldd	r24, Z+24	; 0x18
     c12:	85 30       	cpi	r24, 0x05	; 5
     c14:	49 f3       	breq	.-46     	; 0xbe8 <load_custom_characters+0x48>
		while(twiMaster.status == 1);
		_delay_ms(10);
	}
	
	// 1 bar
	lcd_command(SET_CGRAM_ADDRESS);
     c16:	80 e4       	ldi	r24, 0x40	; 64
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	91 e0       	ldi	r25, 0x01	; 1
     c2a:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000010000);
     c2e:	80 e1       	ldi	r24, 0x10	; 16
     c30:	91 e0       	ldi	r25, 0x01	; 1
     c32:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000010000);
     c36:	80 e1       	ldi	r24, 0x10	; 16
     c38:	91 e0       	ldi	r25, 0x01	; 1
     c3a:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000010000);
     c3e:	80 e1       	ldi	r24, 0x10	; 16
     c40:	91 e0       	ldi	r25, 0x01	; 1
     c42:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000010000);
     c46:	80 e1       	ldi	r24, 0x10	; 16
     c48:	91 e0       	ldi	r25, 0x01	; 1
     c4a:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	91 e0       	ldi	r25, 0x01	; 1
     c5a:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	//2 bar
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	91 e0       	ldi	r25, 0x01	; 1
     c62:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	91 e0       	ldi	r25, 0x01	; 1
     c6a:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011000);
     c6e:	88 e1       	ldi	r24, 0x18	; 24
     c70:	91 e0       	ldi	r25, 0x01	; 1
     c72:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011000);
     c76:	88 e1       	ldi	r24, 0x18	; 24
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011000);
     c7e:	88 e1       	ldi	r24, 0x18	; 24
     c80:	91 e0       	ldi	r25, 0x01	; 1
     c82:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011000);
     c86:	88 e1       	ldi	r24, 0x18	; 24
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	91 e0       	ldi	r25, 0x01	; 1
     c92:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	91 e0       	ldi	r25, 0x01	; 1
     c9a:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	//3 bar
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	91 e0       	ldi	r25, 0x01	; 1
     ca2:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	91 e0       	ldi	r25, 0x01	; 1
     caa:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011100);
     cae:	8c e1       	ldi	r24, 0x1C	; 28
     cb0:	91 e0       	ldi	r25, 0x01	; 1
     cb2:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011100);
     cb6:	8c e1       	ldi	r24, 0x1C	; 28
     cb8:	91 e0       	ldi	r25, 0x01	; 1
     cba:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011100);
     cbe:	8c e1       	ldi	r24, 0x1C	; 28
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011100);
     cc6:	8c e1       	ldi	r24, 0x1C	; 28
     cc8:	91 e0       	ldi	r25, 0x01	; 1
     cca:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	91 e0       	ldi	r25, 0x01	; 1
     cd2:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	91 e0       	ldi	r25, 0x01	; 1
     cda:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	//4 bar
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	91 e0       	ldi	r25, 0x01	; 1
     cea:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011110);
     cee:	8e e1       	ldi	r24, 0x1E	; 30
     cf0:	91 e0       	ldi	r25, 0x01	; 1
     cf2:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011110);
     cf6:	8e e1       	ldi	r24, 0x1E	; 30
     cf8:	91 e0       	ldi	r25, 0x01	; 1
     cfa:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011110);
     cfe:	8e e1       	ldi	r24, 0x1E	; 30
     d00:	91 e0       	ldi	r25, 0x01	; 1
     d02:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011110);
     d06:	8e e1       	ldi	r24, 0x1E	; 30
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	91 e0       	ldi	r25, 0x01	; 1
     d1a:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	//5 bar
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	91 e0       	ldi	r25, 0x01	; 1
     d22:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	91 e0       	ldi	r25, 0x01	; 1
     d2a:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     d2e:	8f e1       	ldi	r24, 0x1F	; 31
     d30:	91 e0       	ldi	r25, 0x01	; 1
     d32:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     d36:	8f e1       	ldi	r24, 0x1F	; 31
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     d3e:	8f e1       	ldi	r24, 0x1F	; 31
     d40:	91 e0       	ldi	r25, 0x01	; 1
     d42:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     d46:	8f e1       	ldi	r24, 0x1F	; 31
     d48:	91 e0       	ldi	r25, 0x01	; 1
     d4a:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	91 e0       	ldi	r25, 0x01	; 1
     d52:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	//10th bar
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	91 e0       	ldi	r25, 0x01	; 1
     d62:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000001);
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	91 e0       	ldi	r25, 0x01	; 1
     d6a:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     d6e:	8f e1       	ldi	r24, 0x1F	; 31
     d70:	91 e0       	ldi	r25, 0x01	; 1
     d72:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     d76:	8f e1       	ldi	r24, 0x1F	; 31
     d78:	91 e0       	ldi	r25, 0x01	; 1
     d7a:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     d7e:	8f e1       	ldi	r24, 0x1F	; 31
     d80:	91 e0       	ldi	r25, 0x01	; 1
     d82:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     d86:	8f e1       	ldi	r24, 0x1F	; 31
     d88:	91 e0       	ldi	r25, 0x01	; 1
     d8a:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000001);
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	91 e0       	ldi	r25, 0x01	; 1
     d92:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	//lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
	//lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
	//lcd_command(WRITE_DATA_TO_RAM | 0b0000000001);
	//lcd_command(WRITE_DATA_TO_RAM | 0b0000000001);
	//max current bar
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     d9e:	8f e1       	ldi	r24, 0x1F	; 31
     da0:	91 e0       	ldi	r25, 0x01	; 1
     da2:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     da6:	8f e1       	ldi	r24, 0x1F	; 31
     da8:	91 e0       	ldi	r25, 0x01	; 1
     daa:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     dae:	8f e1       	ldi	r24, 0x1F	; 31
     db0:	91 e0       	ldi	r25, 0x01	; 1
     db2:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     db6:	8f e1       	ldi	r24, 0x1F	; 31
     db8:	91 e0       	ldi	r25, 0x01	; 1
     dba:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     dbe:	8f e1       	ldi	r24, 0x1F	; 31
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     dc6:	8f e1       	ldi	r24, 0x1F	; 31
     dc8:	91 e0       	ldi	r25, 0x01	; 1
     dca:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     dce:	8f e1       	ldi	r24, 0x1F	; 31
     dd0:	91 e0       	ldi	r25, 0x01	; 1
     dd2:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     dd6:	8f e1       	ldi	r24, 0x1F	; 31
     dd8:	91 e0       	ldi	r25, 0x01	; 1
     dda:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
	lcd_command(SET_DDRAM_ADDRESS);
     dde:	80 e8       	ldi	r24, 0x80	; 128
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	1f 91       	pop	r17
     df0:	0f 91       	pop	r16
     df2:	08 95       	ret

00000df4 <initialize_Screen>:
 */ 

#include "lcd_screen.h"

void initialize_Screen()
{
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	2a 97       	sbiw	r28, 0x0a	; 10
     dfe:	cd bf       	out	0x3d, r28	; 61
     e00:	de bf       	out	0x3e, r29	; 62
     e02:	87 ea       	ldi	r24, 0xA7	; 167
     e04:	91 e6       	ldi	r25, 0x61	; 97
     e06:	01 97       	sbiw	r24, 0x01	; 1
     e08:	f1 f7       	brne	.-4      	; 0xe06 <initialize_Screen+0x12>
     e0a:	00 c0       	rjmp	.+0      	; 0xe0c <initialize_Screen+0x18>
     e0c:	00 00       	nop
	_delay_ms(50);
	unsigned char message[10];
	
	message[0] = (0x00);							//Control bit with continuous data stream
     e0e:	19 82       	std	Y+1, r1	; 0x01
	message[1] = (0x38);							//Function Set (8-bit data, 1 Line 5x8 character mode, Normal Instruction Table Chosen)
     e10:	88 e3       	ldi	r24, 0x38	; 56
     e12:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
     e14:	22 e0       	ldi	r18, 0x02	; 2
     e16:	ae 01       	movw	r20, r28
     e18:	4f 5f       	subi	r20, 0xFF	; 255
     e1a:	5f 4f       	sbci	r21, 0xFF	; 255
     e1c:	6c e3       	ldi	r22, 0x3C	; 60
     e1e:	8f e0       	ldi	r24, 0x0F	; 15
     e20:	98 e3       	ldi	r25, 0x38	; 56
     e22:	0e 94 c8 0a 	call	0x1590	; 0x1590 <TWI_MasterWrite>
	while(twiMaster.status == 1);
     e26:	ef e0       	ldi	r30, 0x0F	; 15
     e28:	f8 e3       	ldi	r31, 0x38	; 56
     e2a:	87 89       	ldd	r24, Z+23	; 0x17
     e2c:	81 30       	cpi	r24, 0x01	; 1
     e2e:	e9 f3       	breq	.-6      	; 0xe2a <initialize_Screen+0x36>
     e30:	87 e8       	ldi	r24, 0x87	; 135
     e32:	93 e1       	ldi	r25, 0x13	; 19
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	f1 f7       	brne	.-4      	; 0xe34 <initialize_Screen+0x40>
     e38:	00 c0       	rjmp	.+0      	; 0xe3a <initialize_Screen+0x46>
     e3a:	00 00       	nop
	_delay_ms(10);
	if (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
     e3c:	80 91 27 38 	lds	r24, 0x3827	; 0x803827 <twiMaster+0x18>
     e40:	85 30       	cpi	r24, 0x05	; 5
     e42:	19 f4       	brne	.+6      	; 0xe4a <initialize_Screen+0x56>
	{
		initialize_Screen();
     e44:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <initialize_Screen>
		return;
     e48:	50 c0       	rjmp	.+160    	; 0xeea <initialize_Screen+0xf6>
	}
	
	message[0] = (0x00);
     e4a:	19 82       	std	Y+1, r1	; 0x01
	message[1] = (0x39);							//Function Set (8-bit data, 1 Line 5x8 character mode, Extension Instruction Table Chosen)
     e4c:	89 e3       	ldi	r24, 0x39	; 57
     e4e:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
     e50:	22 e0       	ldi	r18, 0x02	; 2
     e52:	ae 01       	movw	r20, r28
     e54:	4f 5f       	subi	r20, 0xFF	; 255
     e56:	5f 4f       	sbci	r21, 0xFF	; 255
     e58:	6c e3       	ldi	r22, 0x3C	; 60
     e5a:	8f e0       	ldi	r24, 0x0F	; 15
     e5c:	98 e3       	ldi	r25, 0x38	; 56
     e5e:	0e 94 c8 0a 	call	0x1590	; 0x1590 <TWI_MasterWrite>
	while(twiMaster.status == 1);
     e62:	ef e0       	ldi	r30, 0x0F	; 15
     e64:	f8 e3       	ldi	r31, 0x38	; 56
     e66:	87 89       	ldd	r24, Z+23	; 0x17
     e68:	81 30       	cpi	r24, 0x01	; 1
     e6a:	e9 f3       	breq	.-6      	; 0xe66 <initialize_Screen+0x72>
     e6c:	87 e8       	ldi	r24, 0x87	; 135
     e6e:	93 e1       	ldi	r25, 0x13	; 19
     e70:	01 97       	sbiw	r24, 0x01	; 1
     e72:	f1 f7       	brne	.-4      	; 0xe70 <initialize_Screen+0x7c>
     e74:	00 c0       	rjmp	.+0      	; 0xe76 <initialize_Screen+0x82>
     e76:	00 00       	nop
	_delay_ms(10);
	if (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
     e78:	80 91 27 38 	lds	r24, 0x3827	; 0x803827 <twiMaster+0x18>
     e7c:	85 30       	cpi	r24, 0x05	; 5
     e7e:	19 f4       	brne	.+6      	; 0xe86 <initialize_Screen+0x92>
	{
		initialize_Screen();
     e80:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <initialize_Screen>
		return;
     e84:	32 c0       	rjmp	.+100    	; 0xeea <initialize_Screen+0xf6>
	}
	
	message[0] = (0x00);
     e86:	19 82       	std	Y+1, r1	; 0x01
	message[1] = (0x14);							//Set frame frequency to 192 Hz and Voltage Bias to 1/5
     e88:	84 e1       	ldi	r24, 0x14	; 20
     e8a:	8a 83       	std	Y+2, r24	; 0x02
	message[2] = (0x78);							//Set contrast bits C3:0 to 8 (C5:0 - 0x28 *C5:4 is part of next data byte)
     e8c:	88 e7       	ldi	r24, 0x78	; 120
     e8e:	8b 83       	std	Y+3, r24	; 0x03
	message[3] = (0x5E);							//Turn on Icon Display and Booster Circuit and set C5:4 to 2 for contrast setting
     e90:	8e e5       	ldi	r24, 0x5E	; 94
     e92:	8c 83       	std	Y+4, r24	; 0x04
	message[4] = (0x6D);							//Turn on internal follower circuit and adjust V0 generator amplified ratio (Rab2:0 - 2)
     e94:	8d e6       	ldi	r24, 0x6D	; 109
     e96:	8d 83       	std	Y+5, r24	; 0x05
	message[5] = (0x0C);
     e98:	8c e0       	ldi	r24, 0x0C	; 12
     e9a:	8e 83       	std	Y+6, r24	; 0x06
	message[6] = (0x01);
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	8f 83       	std	Y+7, r24	; 0x07
	message[7] = (0x06);
     ea0:	86 e0       	ldi	r24, 0x06	; 6
     ea2:	88 87       	std	Y+8, r24	; 0x08
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 8);
     ea4:	28 e0       	ldi	r18, 0x08	; 8
     ea6:	ae 01       	movw	r20, r28
     ea8:	4f 5f       	subi	r20, 0xFF	; 255
     eaa:	5f 4f       	sbci	r21, 0xFF	; 255
     eac:	6c e3       	ldi	r22, 0x3C	; 60
     eae:	8f e0       	ldi	r24, 0x0F	; 15
     eb0:	98 e3       	ldi	r25, 0x38	; 56
     eb2:	0e 94 c8 0a 	call	0x1590	; 0x1590 <TWI_MasterWrite>
	while(twiMaster.status == 1);
     eb6:	ef e0       	ldi	r30, 0x0F	; 15
     eb8:	f8 e3       	ldi	r31, 0x38	; 56
     eba:	87 89       	ldd	r24, Z+23	; 0x17
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	e9 f3       	breq	.-6      	; 0xeba <initialize_Screen+0xc6>
     ec0:	8f e4       	ldi	r24, 0x4F	; 79
     ec2:	93 ec       	ldi	r25, 0xC3	; 195
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	f1 f7       	brne	.-4      	; 0xec4 <initialize_Screen+0xd0>
     ec8:	00 c0       	rjmp	.+0      	; 0xeca <initialize_Screen+0xd6>
     eca:	00 00       	nop
	_delay_ms(100);
	if (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
     ecc:	80 91 27 38 	lds	r24, 0x3827	; 0x803827 <twiMaster+0x18>
     ed0:	85 30       	cpi	r24, 0x05	; 5
     ed2:	19 f4       	brne	.+6      	; 0xeda <initialize_Screen+0xe6>
	{
		initialize_Screen();
     ed4:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <initialize_Screen>
		return;
     ed8:	08 c0       	rjmp	.+16     	; 0xeea <initialize_Screen+0xf6>
     eda:	87 ea       	ldi	r24, 0xA7	; 167
     edc:	91 e6       	ldi	r25, 0x61	; 97
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	f1 f7       	brne	.-4      	; 0xede <initialize_Screen+0xea>
     ee2:	00 c0       	rjmp	.+0      	; 0xee4 <initialize_Screen+0xf0>
     ee4:	00 00       	nop
	}
	
	_delay_ms(50);
	load_custom_characters();
     ee6:	0e 94 d0 05 	call	0xba0	; 0xba0 <load_custom_characters>
}
     eea:	2a 96       	adiw	r28, 0x0a	; 10
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	08 95       	ret

00000ef6 <lcd_write>:
		lcd_command(SET_DDRAM_ADDRESS | (0b0001000000 + x));
	}
}

void lcd_write(char *message)
{
     ef6:	bf 92       	push	r11
     ef8:	cf 92       	push	r12
     efa:	df 92       	push	r13
     efc:	ef 92       	push	r14
     efe:	ff 92       	push	r15
     f00:	0f 93       	push	r16
     f02:	1f 93       	push	r17
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, size + 1);
		while(twiMaster.status == 1);
		_delay_ms(10);
	}
}
     f0c:	ed b6       	in	r14, 0x3d	; 61
     f0e:	fe b6       	in	r15, 0x3e	; 62
	}
}

void lcd_write(char *message)
{
	char size = strlen(message);
     f10:	fc 01       	movw	r30, r24
     f12:	01 90       	ld	r0, Z+
     f14:	00 20       	and	r0, r0
     f16:	e9 f7       	brne	.-6      	; 0xf12 <lcd_write+0x1c>
     f18:	31 97       	sbiw	r30, 0x01	; 1
     f1a:	9f 01       	movw	r18, r30
     f1c:	28 1b       	sub	r18, r24
     f1e:	39 0b       	sbc	r19, r25
     f20:	62 2f       	mov	r22, r18
	unsigned char complete_message[size + 1];
     f22:	a9 01       	movw	r20, r18
     f24:	55 27       	eor	r21, r21
     f26:	4f 5f       	subi	r20, 0xFF	; 255
     f28:	5f 4f       	sbci	r21, 0xFF	; 255
     f2a:	ed b7       	in	r30, 0x3d	; 61
     f2c:	fe b7       	in	r31, 0x3e	; 62
     f2e:	e4 1b       	sub	r30, r20
     f30:	f5 0b       	sbc	r31, r21
     f32:	ed bf       	out	0x3d, r30	; 61
     f34:	fe bf       	out	0x3e, r31	; 62
     f36:	4d b7       	in	r20, 0x3d	; 61
     f38:	5e b7       	in	r21, 0x3e	; 62
     f3a:	4f 5f       	subi	r20, 0xFF	; 255
     f3c:	5f 4f       	sbci	r21, 0xFF	; 255
     f3e:	d4 2e       	mov	r13, r20
     f40:	c5 2e       	mov	r12, r21
	
	complete_message[0] = (0x40);			//Control bit with R/S set high and continuous bytes
     f42:	70 e4       	ldi	r23, 0x40	; 64
     f44:	71 83       	std	Z+1, r23	; 0x01
	
	for(unsigned char i = 0; i < size; i ++)
     f46:	22 23       	and	r18, r18
     f48:	49 f0       	breq	.+18     	; 0xf5c <lcd_write+0x66>
     f4a:	fc 01       	movw	r30, r24
     f4c:	da 01       	movw	r26, r20
     f4e:	11 96       	adiw	r26, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
	{
		complete_message[i + 1] = message[i];
     f52:	81 91       	ld	r24, Z+
     f54:	8d 93       	st	X+, r24
	char size = strlen(message);
	unsigned char complete_message[size + 1];
	
	complete_message[0] = (0x40);			//Control bit with R/S set high and continuous bytes
	
	for(unsigned char i = 0; i < size; i ++)
     f56:	9f 5f       	subi	r25, 0xFF	; 255
     f58:	69 13       	cpse	r22, r25
     f5a:	fb cf       	rjmp	.-10     	; 0xf52 <lcd_write+0x5c>
	{
		complete_message[i + 1] = message[i];
	}

	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, size + 1);
     f5c:	bb 24       	eor	r11, r11
     f5e:	b3 94       	inc	r11
     f60:	b2 0e       	add	r11, r18
     f62:	2b 2d       	mov	r18, r11
     f64:	6c e3       	ldi	r22, 0x3C	; 60
     f66:	8f e0       	ldi	r24, 0x0F	; 15
     f68:	98 e3       	ldi	r25, 0x38	; 56
     f6a:	0e 94 c8 0a 	call	0x1590	; 0x1590 <TWI_MasterWrite>
	while(twiMaster.status == 1);
     f6e:	ef e0       	ldi	r30, 0x0F	; 15
     f70:	f8 e3       	ldi	r31, 0x38	; 56
     f72:	87 89       	ldd	r24, Z+23	; 0x17
     f74:	81 30       	cpi	r24, 0x01	; 1
     f76:	e9 f3       	breq	.-6      	; 0xf72 <lcd_write+0x7c>
     f78:	87 e8       	ldi	r24, 0x87	; 135
     f7a:	93 e1       	ldi	r25, 0x13	; 19
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	f1 f7       	brne	.-4      	; 0xf7c <lcd_write+0x86>
     f80:	00 c0       	rjmp	.+0      	; 0xf82 <lcd_write+0x8c>
     f82:	00 00       	nop
	_delay_ms(10);
	
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
     f84:	80 91 27 38 	lds	r24, 0x3827	; 0x803827 <twiMaster+0x18>
     f88:	85 30       	cpi	r24, 0x05	; 5
     f8a:	c1 f4       	brne	.+48     	; 0xfbc <lcd_write+0xc6>
	{
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, size + 1);
     f8c:	0f e0       	ldi	r16, 0x0F	; 15
     f8e:	18 e3       	ldi	r17, 0x38	; 56
	while(twiMaster.status == 1);
	_delay_ms(10);
	
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
	{
		initialize_Screen();
     f90:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <initialize_Screen>
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, size + 1);
     f94:	2b 2d       	mov	r18, r11
     f96:	4d 2d       	mov	r20, r13
     f98:	5c 2d       	mov	r21, r12
     f9a:	6c e3       	ldi	r22, 0x3C	; 60
     f9c:	c8 01       	movw	r24, r16
     f9e:	0e 94 c8 0a 	call	0x1590	; 0x1590 <TWI_MasterWrite>
		while(twiMaster.status == 1);
     fa2:	f8 01       	movw	r30, r16
     fa4:	87 89       	ldd	r24, Z+23	; 0x17
     fa6:	81 30       	cpi	r24, 0x01	; 1
     fa8:	e1 f3       	breq	.-8      	; 0xfa2 <lcd_write+0xac>
     faa:	87 e8       	ldi	r24, 0x87	; 135
     fac:	93 e1       	ldi	r25, 0x13	; 19
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	f1 f7       	brne	.-4      	; 0xfae <lcd_write+0xb8>
     fb2:	00 c0       	rjmp	.+0      	; 0xfb4 <lcd_write+0xbe>
     fb4:	00 00       	nop

	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, size + 1);
	while(twiMaster.status == 1);
	_delay_ms(10);
	
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
     fb6:	80 8d       	ldd	r24, Z+24	; 0x18
     fb8:	85 30       	cpi	r24, 0x05	; 5
     fba:	51 f3       	breq	.-44     	; 0xf90 <lcd_write+0x9a>
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, size + 1);
		while(twiMaster.status == 1);
		_delay_ms(10);
	}
}
     fbc:	ed be       	out	0x3d, r14	; 61
     fbe:	fe be       	out	0x3e, r15	; 62
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	1f 91       	pop	r17
     fc6:	0f 91       	pop	r16
     fc8:	ff 90       	pop	r15
     fca:	ef 90       	pop	r14
     fcc:	df 90       	pop	r13
     fce:	cf 90       	pop	r12
     fd0:	bf 90       	pop	r11
     fd2:	08 95       	ret

00000fd4 <display_custom_character>:


void display_custom_character(uint8_t car_num)
{
     fd4:	0f 93       	push	r16
     fd6:	1f 93       	push	r17
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	00 d0       	rcall	.+0      	; 0xfde <display_custom_character+0xa>
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
	unsigned char complete_message[2];
	complete_message[0] = (0x40);			//Control bit with R/S set high and continuous bytes
     fe2:	90 e4       	ldi	r25, 0x40	; 64
     fe4:	99 83       	std	Y+1, r25	; 0x01
	complete_message[1] = (car_num);
     fe6:	8a 83       	std	Y+2, r24	; 0x02
	
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
     fe8:	22 e0       	ldi	r18, 0x02	; 2
     fea:	ae 01       	movw	r20, r28
     fec:	4f 5f       	subi	r20, 0xFF	; 255
     fee:	5f 4f       	sbci	r21, 0xFF	; 255
     ff0:	6c e3       	ldi	r22, 0x3C	; 60
     ff2:	8f e0       	ldi	r24, 0x0F	; 15
     ff4:	98 e3       	ldi	r25, 0x38	; 56
     ff6:	0e 94 c8 0a 	call	0x1590	; 0x1590 <TWI_MasterWrite>
	while(twiMaster.status == 1);
     ffa:	ef e0       	ldi	r30, 0x0F	; 15
     ffc:	f8 e3       	ldi	r31, 0x38	; 56
     ffe:	87 89       	ldd	r24, Z+23	; 0x17
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	e9 f3       	breq	.-6      	; 0xffe <display_custom_character+0x2a>
    1004:	87 e8       	ldi	r24, 0x87	; 135
    1006:	93 e1       	ldi	r25, 0x13	; 19
    1008:	01 97       	sbiw	r24, 0x01	; 1
    100a:	f1 f7       	brne	.-4      	; 0x1008 <display_custom_character+0x34>
    100c:	00 c0       	rjmp	.+0      	; 0x100e <display_custom_character+0x3a>
    100e:	00 00       	nop
	_delay_ms(10);
	
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
    1010:	80 91 27 38 	lds	r24, 0x3827	; 0x803827 <twiMaster+0x18>
    1014:	85 30       	cpi	r24, 0x05	; 5
    1016:	c9 f4       	brne	.+50     	; 0x104a <display_custom_character+0x76>
	{
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
    1018:	0f e0       	ldi	r16, 0x0F	; 15
    101a:	18 e3       	ldi	r17, 0x38	; 56
	while(twiMaster.status == 1);
	_delay_ms(10);
	
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
	{
		initialize_Screen();
    101c:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <initialize_Screen>
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
    1020:	22 e0       	ldi	r18, 0x02	; 2
    1022:	ae 01       	movw	r20, r28
    1024:	4f 5f       	subi	r20, 0xFF	; 255
    1026:	5f 4f       	sbci	r21, 0xFF	; 255
    1028:	6c e3       	ldi	r22, 0x3C	; 60
    102a:	c8 01       	movw	r24, r16
    102c:	0e 94 c8 0a 	call	0x1590	; 0x1590 <TWI_MasterWrite>
		while(twiMaster.status == 1);
    1030:	f8 01       	movw	r30, r16
    1032:	87 89       	ldd	r24, Z+23	; 0x17
    1034:	81 30       	cpi	r24, 0x01	; 1
    1036:	e1 f3       	breq	.-8      	; 0x1030 <display_custom_character+0x5c>
    1038:	87 e8       	ldi	r24, 0x87	; 135
    103a:	93 e1       	ldi	r25, 0x13	; 19
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	f1 f7       	brne	.-4      	; 0x103c <display_custom_character+0x68>
    1040:	00 c0       	rjmp	.+0      	; 0x1042 <display_custom_character+0x6e>
    1042:	00 00       	nop
	
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
	while(twiMaster.status == 1);
	_delay_ms(10);
	
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
    1044:	80 8d       	ldd	r24, Z+24	; 0x18
    1046:	85 30       	cpi	r24, 0x05	; 5
    1048:	49 f3       	breq	.-46     	; 0x101c <display_custom_character+0x48>
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
		while(twiMaster.status == 1);
		_delay_ms(10);
	}
}
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	1f 91       	pop	r17
    1054:	0f 91       	pop	r16
    1056:	08 95       	ret

00001058 <lcd_command>:

received
commands. Only the addressed slave makes the acknowledgement after each byte.
*/
void lcd_command(uint16_t command)
{
    1058:	0f 93       	push	r16
    105a:	1f 93       	push	r17
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	00 d0       	rcall	.+0      	; 0x1062 <lcd_command+0xa>
    1062:	1f 92       	push	r1
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
	unsigned char complete_message[2];
	uint8_t volatile comm;
	comm = (uint8_t)(command >> 2);
    1068:	9c 01       	movw	r18, r24
    106a:	36 95       	lsr	r19
    106c:	27 95       	ror	r18
    106e:	36 95       	lsr	r19
    1070:	27 95       	ror	r18
    1072:	2b 83       	std	Y+3, r18	; 0x03
	complete_message[0] = comm & 0b11000000;                      // Control byte
    1074:	9b 81       	ldd	r25, Y+3	; 0x03
    1076:	90 7c       	andi	r25, 0xC0	; 192
    1078:	99 83       	std	Y+1, r25	; 0x01
	complete_message[1] = (uint8_t)(command);                     // Data byte
    107a:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
    107c:	22 e0       	ldi	r18, 0x02	; 2
    107e:	ae 01       	movw	r20, r28
    1080:	4f 5f       	subi	r20, 0xFF	; 255
    1082:	5f 4f       	sbci	r21, 0xFF	; 255
    1084:	6c e3       	ldi	r22, 0x3C	; 60
    1086:	8f e0       	ldi	r24, 0x0F	; 15
    1088:	98 e3       	ldi	r25, 0x38	; 56
    108a:	0e 94 c8 0a 	call	0x1590	; 0x1590 <TWI_MasterWrite>
	while(twiMaster.status == 1);
    108e:	ef e0       	ldi	r30, 0x0F	; 15
    1090:	f8 e3       	ldi	r31, 0x38	; 56
    1092:	87 89       	ldd	r24, Z+23	; 0x17
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	e9 f3       	breq	.-6      	; 0x1092 <lcd_command+0x3a>
    1098:	87 e8       	ldi	r24, 0x87	; 135
    109a:	93 e1       	ldi	r25, 0x13	; 19
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	f1 f7       	brne	.-4      	; 0x109c <lcd_command+0x44>
    10a0:	00 c0       	rjmp	.+0      	; 0x10a2 <lcd_command+0x4a>
    10a2:	00 00       	nop
	_delay_ms(10);
	
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
    10a4:	80 91 27 38 	lds	r24, 0x3827	; 0x803827 <twiMaster+0x18>
    10a8:	85 30       	cpi	r24, 0x05	; 5
    10aa:	c9 f4       	brne	.+50     	; 0x10de <lcd_command+0x86>
	{
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
    10ac:	0f e0       	ldi	r16, 0x0F	; 15
    10ae:	18 e3       	ldi	r17, 0x38	; 56
	while(twiMaster.status == 1);
	_delay_ms(10);
	
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
	{
		initialize_Screen();
    10b0:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <initialize_Screen>
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
    10b4:	22 e0       	ldi	r18, 0x02	; 2
    10b6:	ae 01       	movw	r20, r28
    10b8:	4f 5f       	subi	r20, 0xFF	; 255
    10ba:	5f 4f       	sbci	r21, 0xFF	; 255
    10bc:	6c e3       	ldi	r22, 0x3C	; 60
    10be:	c8 01       	movw	r24, r16
    10c0:	0e 94 c8 0a 	call	0x1590	; 0x1590 <TWI_MasterWrite>
		while(twiMaster.status == 1);
    10c4:	f8 01       	movw	r30, r16
    10c6:	87 89       	ldd	r24, Z+23	; 0x17
    10c8:	81 30       	cpi	r24, 0x01	; 1
    10ca:	e1 f3       	breq	.-8      	; 0x10c4 <lcd_command+0x6c>
    10cc:	87 e8       	ldi	r24, 0x87	; 135
    10ce:	93 e1       	ldi	r25, 0x13	; 19
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	f1 f7       	brne	.-4      	; 0x10d0 <lcd_command+0x78>
    10d4:	00 c0       	rjmp	.+0      	; 0x10d6 <lcd_command+0x7e>
    10d6:	00 00       	nop
	complete_message[1] = (uint8_t)(command);                     // Data byte
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
	while(twiMaster.status == 1);
	_delay_ms(10);
	
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
    10d8:	80 8d       	ldd	r24, Z+24	; 0x18
    10da:	85 30       	cpi	r24, 0x05	; 5
    10dc:	49 f3       	breq	.-46     	; 0x10b0 <lcd_command+0x58>
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
		while(twiMaster.status == 1);
		_delay_ms(10);
	}
}
    10de:	23 96       	adiw	r28, 0x03	; 3
    10e0:	cd bf       	out	0x3d, r28	; 61
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	1f 91       	pop	r17
    10ea:	0f 91       	pop	r16
    10ec:	08 95       	ret

000010ee <setCursor>:
	{ 0x00, 0x10, 0x20 }   // Three line display address
};

void setCursor(uint8_t line_num, uint8_t x)
{
	if (line_num == 0)
    10ee:	81 11       	cpse	r24, r1
    10f0:	06 c0       	rjmp	.+12     	; 0x10fe <setCursor+0x10>
	{
		lcd_command(SET_DDRAM_ADDRESS | (0b0000000000 + x));
    10f2:	86 2f       	mov	r24, r22
    10f4:	80 68       	ori	r24, 0x80	; 128
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
    10fc:	08 95       	ret
	}
	else if (line_num == 1)
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	39 f4       	brne	.+14     	; 0x1110 <setCursor+0x22>
	{
		lcd_command(SET_DDRAM_ADDRESS | (0b0001000000 + x));
    1102:	86 2f       	mov	r24, r22
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	80 5c       	subi	r24, 0xC0	; 192
    1108:	9f 4f       	sbci	r25, 0xFF	; 255
    110a:	80 68       	ori	r24, 0x80	; 128
    110c:	0e 94 2c 08 	call	0x1058	; 0x1058 <lcd_command>
    1110:	08 95       	ret

00001112 <main>:
#include "board.h"

int main()
{
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
    1116:	1f 92       	push	r1
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
	//Pin/Settings initialization
    initialize();
    111c:	0e 94 86 03 	call	0x70c	; 0x70c <initialize>
    sei();
    1120:	78 94       	sei
	
	//I2C Setup
	TWI_MasterInit(&twiMaster, &TWI0, TWI_BAUDSETTING);
    1122:	4e e5       	ldi	r20, 0x5E	; 94
    1124:	60 e1       	ldi	r22, 0x10	; 16
    1126:	78 e0       	ldi	r23, 0x08	; 8
    1128:	8f e0       	ldi	r24, 0x0F	; 15
    112a:	98 e3       	ldi	r25, 0x38	; 56
    112c:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <TWI_MasterInit>
    1130:	2f e7       	ldi	r18, 0x7F	; 127
    1132:	84 e8       	ldi	r24, 0x84	; 132
    1134:	9e e1       	ldi	r25, 0x1E	; 30
    1136:	21 50       	subi	r18, 0x01	; 1
    1138:	80 40       	sbci	r24, 0x00	; 0
    113a:	90 40       	sbci	r25, 0x00	; 0
    113c:	e1 f7       	brne	.-8      	; 0x1136 <main+0x24>
    113e:	00 c0       	rjmp	.+0      	; 0x1140 <main+0x2e>
    1140:	00 00       	nop
	//LCD screen initialization
	_delay_ms(500);
	initialize_Screen();
    1142:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <initialize_Screen>
    1146:	2f e7       	ldi	r18, 0x7F	; 127
    1148:	84 e8       	ldi	r24, 0x84	; 132
    114a:	9e e1       	ldi	r25, 0x1E	; 30
    114c:	21 50       	subi	r18, 0x01	; 1
    114e:	80 40       	sbci	r24, 0x00	; 0
    1150:	90 40       	sbci	r25, 0x00	; 0
    1152:	e1 f7       	brne	.-8      	; 0x114c <main+0x3a>
    1154:	00 c0       	rjmp	.+0      	; 0x1156 <main+0x44>
    1156:	00 00       	nop
	_delay_ms(500);	
	
	volatile bool set_current_blink_temp = TRUE;
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	89 83       	std	Y+1, r24	; 0x01
				
				temp_current = get_current(&twiMaster, FALSE, INA_ADDRESS);
				if (abs(temp_current - current) > 5)
				{
					current = temp_current;
					update = TRUE;
    115c:	11 e0       	ldi	r17, 0x01	; 1
    115e:	01 2f       	mov	r16, r17
	_delay_ms(500);	
	
	volatile bool set_current_blink_temp = TRUE;
    while (1)
    {
		if (set_current_mode)
    1160:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <set_current_mode>
    1164:	88 23       	and	r24, r24
    1166:	09 f4       	brne	.+2      	; 0x116a <main+0x58>
    1168:	88 c0       	rjmp	.+272    	; 0x127a <main+0x168>
		{
			if (rtc_counter_1_4)
    116a:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <rtc_counter_1_4>
    116e:	88 23       	and	r24, r24
    1170:	39 f0       	breq	.+14     	; 0x1180 <main+0x6e>
			{
				set_current_blink = !set_current_blink;
    1172:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <set_current_blink>
    1176:	81 27       	eor	r24, r17
    1178:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <set_current_blink>
				rtc_counter_1_4 = FALSE;
    117c:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <rtc_counter_1_4>
			}
			
			if (rtc_counter_1_2)
    1180:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <rtc_counter_1_2>
    1184:	88 23       	and	r24, r24
    1186:	39 f1       	breq	.+78     	; 0x11d6 <main+0xc4>
			{
				temp_voltage = get_voltage(&twiMaster, FALSE, INA_ADDRESS);
    1188:	41 e4       	ldi	r20, 0x41	; 65
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	8f e0       	ldi	r24, 0x0F	; 15
    118e:	98 e3       	ldi	r25, 0x38	; 56
    1190:	0e 94 3a 05 	call	0xa74	; 0xa74 <get_voltage>
    1194:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <temp_voltage>
    1198:	90 93 33 38 	sts	0x3833, r25	; 0x803833 <temp_voltage+0x1>
				if (abs(temp_voltage - voltage) > 5)
    119c:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <temp_voltage>
    11a0:	90 91 33 38 	lds	r25, 0x3833	; 0x803833 <temp_voltage+0x1>
    11a4:	20 91 08 38 	lds	r18, 0x3808	; 0x803808 <voltage>
    11a8:	30 91 09 38 	lds	r19, 0x3809	; 0x803809 <voltage+0x1>
    11ac:	82 1b       	sub	r24, r18
    11ae:	93 0b       	sbc	r25, r19
    11b0:	9c 01       	movw	r18, r24
    11b2:	22 f4       	brpl	.+8      	; 0x11bc <main+0xaa>
    11b4:	22 27       	eor	r18, r18
    11b6:	33 27       	eor	r19, r19
    11b8:	28 1b       	sub	r18, r24
    11ba:	39 0b       	sbc	r19, r25
    11bc:	26 30       	cpi	r18, 0x06	; 6
    11be:	31 05       	cpc	r19, r1
    11c0:	44 f0       	brlt	.+16     	; 0x11d2 <main+0xc0>
				{
					voltage = temp_voltage;
    11c2:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <temp_voltage>
    11c6:	90 91 33 38 	lds	r25, 0x3833	; 0x803833 <temp_voltage+0x1>
    11ca:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <voltage>
    11ce:	90 93 09 38 	sts	0x3809, r25	; 0x803809 <voltage+0x1>
				}
				rtc_counter_1_2 = FALSE;
    11d2:	10 92 34 38 	sts	0x3834, r1	; 0x803834 <rtc_counter_1_2>
			}
			
			if (abs(temp_voltage - voltage) > 5 || abs(temp_current - current) > 5 || set_current_blink_temp != set_current_blink)
    11d6:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <temp_voltage>
    11da:	90 91 33 38 	lds	r25, 0x3833	; 0x803833 <temp_voltage+0x1>
    11de:	20 91 08 38 	lds	r18, 0x3808	; 0x803808 <voltage>
    11e2:	30 91 09 38 	lds	r19, 0x3809	; 0x803809 <voltage+0x1>
    11e6:	82 1b       	sub	r24, r18
    11e8:	93 0b       	sbc	r25, r19
    11ea:	9c 01       	movw	r18, r24
    11ec:	22 f4       	brpl	.+8      	; 0x11f6 <main+0xe4>
    11ee:	22 27       	eor	r18, r18
    11f0:	33 27       	eor	r19, r19
    11f2:	28 1b       	sub	r18, r24
    11f4:	39 0b       	sbc	r19, r25
    11f6:	26 30       	cpi	r18, 0x06	; 6
    11f8:	31 05       	cpc	r19, r1
    11fa:	cc f4       	brge	.+50     	; 0x122e <main+0x11c>
    11fc:	80 91 28 38 	lds	r24, 0x3828	; 0x803828 <temp_current>
    1200:	90 91 29 38 	lds	r25, 0x3829	; 0x803829 <temp_current+0x1>
    1204:	20 91 2b 38 	lds	r18, 0x382B	; 0x80382b <current>
    1208:	30 91 2c 38 	lds	r19, 0x382C	; 0x80382c <current+0x1>
    120c:	82 1b       	sub	r24, r18
    120e:	93 0b       	sbc	r25, r19
    1210:	9c 01       	movw	r18, r24
    1212:	22 f4       	brpl	.+8      	; 0x121c <main+0x10a>
    1214:	22 27       	eor	r18, r18
    1216:	33 27       	eor	r19, r19
    1218:	28 1b       	sub	r18, r24
    121a:	39 0b       	sbc	r19, r25
    121c:	26 30       	cpi	r18, 0x06	; 6
    121e:	31 05       	cpc	r19, r1
    1220:	34 f4       	brge	.+12     	; 0x122e <main+0x11c>
    1222:	99 81       	ldd	r25, Y+1	; 0x01
    1224:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <set_current_blink>
    1228:	98 17       	cp	r25, r24
    122a:	09 f4       	brne	.+2      	; 0x122e <main+0x11c>
    122c:	8b c0       	rjmp	.+278    	; 0x1344 <main+0x232>
			{
				if (set_current_blink)
    122e:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <set_current_blink>
    1232:	88 23       	and	r24, r24
    1234:	59 f0       	breq	.+22     	; 0x124c <main+0x13a>
				{
					display_current_voltage(current, voltage);
    1236:	60 91 08 38 	lds	r22, 0x3808	; 0x803808 <voltage>
    123a:	70 91 09 38 	lds	r23, 0x3809	; 0x803809 <voltage+0x1>
    123e:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <current>
    1242:	90 91 2c 38 	lds	r25, 0x382C	; 0x80382c <current+0x1>
    1246:	0e 94 5d 00 	call	0xba	; 0xba <display_current_voltage>
    124a:	06 c0       	rjmp	.+12     	; 0x1258 <main+0x146>
				}
				else
				{
					display_voltage(voltage);
    124c:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <voltage>
    1250:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <voltage+0x1>
    1254:	0e 94 1b 02 	call	0x436	; 0x436 <display_voltage>
				}
				
				if (set_current_blink_temp != set_current_blink)
    1258:	99 81       	ldd	r25, Y+1	; 0x01
    125a:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <set_current_blink>
    125e:	98 17       	cp	r25, r24
    1260:	19 f0       	breq	.+6      	; 0x1268 <main+0x156>
				{
					set_current_blink_temp = set_current_blink;
    1262:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <set_current_blink>
    1266:	89 83       	std	Y+1, r24	; 0x01
				}
				
				temp_current = current;
    1268:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <current>
    126c:	90 91 2c 38 	lds	r25, 0x382C	; 0x80382c <current+0x1>
    1270:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <temp_current>
    1274:	90 93 29 38 	sts	0x3829, r25	; 0x803829 <temp_current+0x1>
    1278:	65 c0       	rjmp	.+202    	; 0x1344 <main+0x232>
			}
		}
		else
		{
			if (rtc_counter_1_4)
    127a:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <rtc_counter_1_4>
    127e:	88 23       	and	r24, r24
    1280:	09 f4       	brne	.+2      	; 0x1284 <main+0x172>
    1282:	50 c0       	rjmp	.+160    	; 0x1324 <main+0x212>
			{
				temp_voltage = get_voltage(&twiMaster, FALSE, INA_ADDRESS);
    1284:	41 e4       	ldi	r20, 0x41	; 65
    1286:	60 e0       	ldi	r22, 0x00	; 0
    1288:	8f e0       	ldi	r24, 0x0F	; 15
    128a:	98 e3       	ldi	r25, 0x38	; 56
    128c:	0e 94 3a 05 	call	0xa74	; 0xa74 <get_voltage>
    1290:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <temp_voltage>
    1294:	90 93 33 38 	sts	0x3833, r25	; 0x803833 <temp_voltage+0x1>
				if (abs(temp_voltage - voltage) > 5)
    1298:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <temp_voltage>
    129c:	90 91 33 38 	lds	r25, 0x3833	; 0x803833 <temp_voltage+0x1>
    12a0:	20 91 08 38 	lds	r18, 0x3808	; 0x803808 <voltage>
    12a4:	30 91 09 38 	lds	r19, 0x3809	; 0x803809 <voltage+0x1>
    12a8:	82 1b       	sub	r24, r18
    12aa:	93 0b       	sbc	r25, r19
    12ac:	9c 01       	movw	r18, r24
    12ae:	22 f4       	brpl	.+8      	; 0x12b8 <main+0x1a6>
    12b0:	22 27       	eor	r18, r18
    12b2:	33 27       	eor	r19, r19
    12b4:	28 1b       	sub	r18, r24
    12b6:	39 0b       	sbc	r19, r25
    12b8:	26 30       	cpi	r18, 0x06	; 6
    12ba:	31 05       	cpc	r19, r1
    12bc:	54 f0       	brlt	.+20     	; 0x12d2 <main+0x1c0>
				{
					voltage = temp_voltage;
    12be:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <temp_voltage>
    12c2:	90 91 33 38 	lds	r25, 0x3833	; 0x803833 <temp_voltage+0x1>
    12c6:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <voltage>
    12ca:	90 93 09 38 	sts	0x3809, r25	; 0x803809 <voltage+0x1>
					update = TRUE;
    12ce:	00 93 3a 38 	sts	0x383A, r16	; 0x80383a <update>
				}
				
				temp_current = get_current(&twiMaster, FALSE, INA_ADDRESS);
    12d2:	41 e4       	ldi	r20, 0x41	; 65
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	8f e0       	ldi	r24, 0x0F	; 15
    12d8:	98 e3       	ldi	r25, 0x38	; 56
    12da:	0e 94 79 05 	call	0xaf2	; 0xaf2 <get_current>
    12de:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <temp_current>
    12e2:	90 93 29 38 	sts	0x3829, r25	; 0x803829 <temp_current+0x1>
				if (abs(temp_current - current) > 5)
    12e6:	80 91 28 38 	lds	r24, 0x3828	; 0x803828 <temp_current>
    12ea:	90 91 29 38 	lds	r25, 0x3829	; 0x803829 <temp_current+0x1>
    12ee:	20 91 2b 38 	lds	r18, 0x382B	; 0x80382b <current>
    12f2:	30 91 2c 38 	lds	r19, 0x382C	; 0x80382c <current+0x1>
    12f6:	82 1b       	sub	r24, r18
    12f8:	93 0b       	sbc	r25, r19
    12fa:	9c 01       	movw	r18, r24
    12fc:	22 f4       	brpl	.+8      	; 0x1306 <main+0x1f4>
    12fe:	22 27       	eor	r18, r18
    1300:	33 27       	eor	r19, r19
    1302:	28 1b       	sub	r18, r24
    1304:	39 0b       	sbc	r19, r25
    1306:	26 30       	cpi	r18, 0x06	; 6
    1308:	31 05       	cpc	r19, r1
    130a:	54 f0       	brlt	.+20     	; 0x1320 <main+0x20e>
				{
					current = temp_current;
    130c:	80 91 28 38 	lds	r24, 0x3828	; 0x803828 <temp_current>
    1310:	90 91 29 38 	lds	r25, 0x3829	; 0x803829 <temp_current+0x1>
    1314:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <current>
    1318:	90 93 2c 38 	sts	0x382C, r25	; 0x80382c <current+0x1>
					update = TRUE;
    131c:	00 93 3a 38 	sts	0x383A, r16	; 0x80383a <update>
				}
				
				rtc_counter_1_4 = FALSE;
    1320:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <rtc_counter_1_4>
			}
			
			if (update)
    1324:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <update>
    1328:	88 23       	and	r24, r24
    132a:	61 f0       	breq	.+24     	; 0x1344 <main+0x232>
			{
				display_current_voltage(current, voltage);
    132c:	60 91 08 38 	lds	r22, 0x3808	; 0x803808 <voltage>
    1330:	70 91 09 38 	lds	r23, 0x3809	; 0x803809 <voltage+0x1>
    1334:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <current>
    1338:	90 91 2c 38 	lds	r25, 0x382C	; 0x80382c <current+0x1>
    133c:	0e 94 5d 00 	call	0xba	; 0xba <display_current_voltage>
				update = FALSE;
    1340:	10 92 3a 38 	sts	0x383A, r1	; 0x80383a <update>
			}
		}
		
		if (voltage > 5000) // TODO - use counters
    1344:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <voltage>
    1348:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <voltage+0x1>
    134c:	89 38       	cpi	r24, 0x89	; 137
    134e:	93 41       	sbci	r25, 0x13	; 19
    1350:	08 f4       	brcc	.+2      	; 0x1354 <main+0x242>
    1352:	06 cf       	rjmp	.-500    	; 0x1160 <main+0x4e>
    1354:	8f e7       	ldi	r24, 0x7F	; 127
    1356:	94 e8       	ldi	r25, 0x84	; 132
    1358:	2e e1       	ldi	r18, 0x1E	; 30
    135a:	81 50       	subi	r24, 0x01	; 1
    135c:	90 40       	sbci	r25, 0x00	; 0
    135e:	20 40       	sbci	r18, 0x00	; 0
    1360:	e1 f7       	brne	.-8      	; 0x135a <main+0x248>
    1362:	00 c0       	rjmp	.+0      	; 0x1364 <main+0x252>
    1364:	00 00       	nop
		{
			_delay_ms(500);
			display_danger();
    1366:	0e 94 04 03 	call	0x608	; 0x608 <display_danger>
    136a:	8f e7       	ldi	r24, 0x7F	; 127
    136c:	94 e8       	ldi	r25, 0x84	; 132
    136e:	2e e1       	ldi	r18, 0x1E	; 30
    1370:	81 50       	subi	r24, 0x01	; 1
    1372:	90 40       	sbci	r25, 0x00	; 0
    1374:	20 40       	sbci	r18, 0x00	; 0
    1376:	e1 f7       	brne	.-8      	; 0x1370 <main+0x25e>
    1378:	00 c0       	rjmp	.+0      	; 0x137a <main+0x268>
    137a:	00 00       	nop
			_delay_ms(500);
			update = TRUE;
    137c:	00 93 3a 38 	sts	0x383A, r16	; 0x80383a <update>
    1380:	ef ce       	rjmp	.-546    	; 0x1160 <main+0x4e>

00001382 <__vector_25>:
		}
    }
}

ISR(TWI0_TWIM_vect)
{
    1382:	1f 92       	push	r1
    1384:	0f 92       	push	r0
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	0f 92       	push	r0
    138a:	11 24       	eor	r1, r1
    138c:	2f 93       	push	r18
    138e:	3f 93       	push	r19
    1390:	4f 93       	push	r20
    1392:	5f 93       	push	r21
    1394:	6f 93       	push	r22
    1396:	7f 93       	push	r23
    1398:	8f 93       	push	r24
    139a:	9f 93       	push	r25
    139c:	af 93       	push	r26
    139e:	bf 93       	push	r27
    13a0:	ef 93       	push	r30
    13a2:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twiMaster);
    13a4:	8f e0       	ldi	r24, 0x0F	; 15
    13a6:	98 e3       	ldi	r25, 0x38	; 56
    13a8:	0e 94 3f 0b 	call	0x167e	; 0x167e <TWI_MasterInterruptHandler>
}
    13ac:	ff 91       	pop	r31
    13ae:	ef 91       	pop	r30
    13b0:	bf 91       	pop	r27
    13b2:	af 91       	pop	r26
    13b4:	9f 91       	pop	r25
    13b6:	8f 91       	pop	r24
    13b8:	7f 91       	pop	r23
    13ba:	6f 91       	pop	r22
    13bc:	5f 91       	pop	r21
    13be:	4f 91       	pop	r20
    13c0:	3f 91       	pop	r19
    13c2:	2f 91       	pop	r18
    13c4:	0f 90       	pop	r0
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	0f 90       	pop	r0
    13ca:	1f 90       	pop	r1
    13cc:	18 95       	reti

000013ce <__vector_6>:

ISR(RTC_CNT_vect)
{
    13ce:	1f 92       	push	r1
    13d0:	0f 92       	push	r0
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	0f 92       	push	r0
    13d6:	11 24       	eor	r1, r1
    13d8:	2f 93       	push	r18
    13da:	3f 93       	push	r19
    13dc:	4f 93       	push	r20
    13de:	5f 93       	push	r21
    13e0:	6f 93       	push	r22
    13e2:	7f 93       	push	r23
    13e4:	8f 93       	push	r24
    13e6:	9f 93       	push	r25
    13e8:	af 93       	push	r26
    13ea:	bf 93       	push	r27
    13ec:	ef 93       	push	r30
    13ee:	ff 93       	push	r31
	bool is_debounce_successful = TRUE;
	is_debounce_successful &= debounce(&PORTA_IN, ENCDR_SW, 10, 60);
    13f0:	2c e3       	ldi	r18, 0x3C	; 60
    13f2:	4a e0       	ldi	r20, 0x0A	; 10
    13f4:	64 e0       	ldi	r22, 0x04	; 4
    13f6:	88 e0       	ldi	r24, 0x08	; 8
    13f8:	94 e0       	ldi	r25, 0x04	; 4
    13fa:	0e 94 19 03 	call	0x632	; 0x632 <debounce>
	
	if (is_debounce_successful)
    13fe:	80 ff       	sbrs	r24, 0
    1400:	1c c0       	rjmp	.+56     	; 0x143a <__vector_6+0x6c>
	{
		if(!(PORTA_IN & (1 << ENCDR_SW)))//if switch pin is low
    1402:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    1406:	84 fd       	sbrc	r24, 4
    1408:	18 c0       	rjmp	.+48     	; 0x143a <__vector_6+0x6c>
		{
			if (set_current_mode)
    140a:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <set_current_mode>
			{
				// TODO - set DAC to the desired current
			}
			set_current_mode = !set_current_mode;
    140e:	90 91 35 38 	lds	r25, 0x3835	; 0x803835 <set_current_mode>
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	89 27       	eor	r24, r25
    1416:	80 93 35 38 	sts	0x3835, r24	; 0x803835 <set_current_mode>
			rtc_idle_counter = rtc_counter;
    141a:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <rtc_counter>
    141e:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <rtc_counter+0x1>
    1422:	a0 91 0d 38 	lds	r26, 0x380D	; 0x80380d <rtc_counter+0x2>
    1426:	b0 91 0e 38 	lds	r27, 0x380E	; 0x80380e <rtc_counter+0x3>
    142a:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <rtc_idle_counter>
    142e:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <rtc_idle_counter+0x1>
    1432:	a0 93 38 38 	sts	0x3838, r26	; 0x803838 <rtc_idle_counter+0x2>
    1436:	b0 93 39 38 	sts	0x3839, r27	; 0x803839 <rtc_idle_counter+0x3>
		}
	}
	
	if (set_current_mode)
    143a:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <set_current_mode>
    143e:	81 11       	cpse	r24, r1
	{
		handle_encoder();
    1440:	0e 94 00 04 	call	0x800	; 0x800 <handle_encoder>
	}
	if (rtc_counter % 250 == 0)
    1444:	60 91 0b 38 	lds	r22, 0x380B	; 0x80380b <rtc_counter>
    1448:	70 91 0c 38 	lds	r23, 0x380C	; 0x80380c <rtc_counter+0x1>
    144c:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <rtc_counter+0x2>
    1450:	90 91 0e 38 	lds	r25, 0x380E	; 0x80380e <rtc_counter+0x3>
    1454:	2a ef       	ldi	r18, 0xFA	; 250
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	40 e0       	ldi	r20, 0x00	; 0
    145a:	50 e0       	ldi	r21, 0x00	; 0
    145c:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__udivmodsi4>
    1460:	67 2b       	or	r22, r23
    1462:	68 2b       	or	r22, r24
    1464:	69 2b       	or	r22, r25
    1466:	19 f4       	brne	.+6      	; 0x146e <__vector_6+0xa0>
	{
		rtc_counter_1_4 = TRUE;
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <rtc_counter_1_4>
	}
	if (rtc_counter % 500 == 0)
    146e:	60 91 0b 38 	lds	r22, 0x380B	; 0x80380b <rtc_counter>
    1472:	70 91 0c 38 	lds	r23, 0x380C	; 0x80380c <rtc_counter+0x1>
    1476:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <rtc_counter+0x2>
    147a:	90 91 0e 38 	lds	r25, 0x380E	; 0x80380e <rtc_counter+0x3>
    147e:	24 ef       	ldi	r18, 0xF4	; 244
    1480:	31 e0       	ldi	r19, 0x01	; 1
    1482:	40 e0       	ldi	r20, 0x00	; 0
    1484:	50 e0       	ldi	r21, 0x00	; 0
    1486:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__udivmodsi4>
    148a:	67 2b       	or	r22, r23
    148c:	68 2b       	or	r22, r24
    148e:	69 2b       	or	r22, r25
    1490:	19 f4       	brne	.+6      	; 0x1498 <__vector_6+0xca>
	{
		rtc_counter_1_2 = TRUE;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <rtc_counter_1_2>
	}
	rtc_counter++;
    1498:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <rtc_counter>
    149c:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <rtc_counter+0x1>
    14a0:	a0 91 0d 38 	lds	r26, 0x380D	; 0x80380d <rtc_counter+0x2>
    14a4:	b0 91 0e 38 	lds	r27, 0x380E	; 0x80380e <rtc_counter+0x3>
    14a8:	01 96       	adiw	r24, 0x01	; 1
    14aa:	a1 1d       	adc	r26, r1
    14ac:	b1 1d       	adc	r27, r1
    14ae:	80 93 0b 38 	sts	0x380B, r24	; 0x80380b <rtc_counter>
    14b2:	90 93 0c 38 	sts	0x380C, r25	; 0x80380c <rtc_counter+0x1>
    14b6:	a0 93 0d 38 	sts	0x380D, r26	; 0x80380d <rtc_counter+0x2>
    14ba:	b0 93 0e 38 	sts	0x380E, r27	; 0x80380e <rtc_counter+0x3>
	RTC.INTFLAGS = RTC_OVF_bm;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    14c4:	ff 91       	pop	r31
    14c6:	ef 91       	pop	r30
    14c8:	bf 91       	pop	r27
    14ca:	af 91       	pop	r26
    14cc:	9f 91       	pop	r25
    14ce:	8f 91       	pop	r24
    14d0:	7f 91       	pop	r23
    14d2:	6f 91       	pop	r22
    14d4:	5f 91       	pop	r21
    14d6:	4f 91       	pop	r20
    14d8:	3f 91       	pop	r19
    14da:	2f 91       	pop	r18
    14dc:	0f 90       	pop	r0
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	0f 90       	pop	r0
    14e2:	1f 90       	pop	r1
    14e4:	18 95       	reti

000014e6 <TWI_MasterInit>:
                    uint8_t bytesToRead)
{
	//PORTB_OUTTGL = (1 << 4);
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
	return twi_status;
}
    14e6:	fc 01       	movw	r30, r24
    14e8:	60 83       	st	Z, r22
    14ea:	71 83       	std	Z+1, r23	; 0x01
    14ec:	81 ec       	ldi	r24, 0xC1	; 193
    14ee:	db 01       	movw	r26, r22
    14f0:	13 96       	adiw	r26, 0x03	; 3
    14f2:	8c 93       	st	X, r24
    14f4:	a0 81       	ld	r26, Z
    14f6:	b1 81       	ldd	r27, Z+1	; 0x01
    14f8:	16 96       	adiw	r26, 0x06	; 6
    14fa:	4c 93       	st	X, r20
    14fc:	01 90       	ld	r0, Z+
    14fe:	f0 81       	ld	r31, Z
    1500:	e0 2d       	mov	r30, r0
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	85 83       	std	Z+5, r24	; 0x05
    1506:	08 95       	ret

00001508 <TWI_MasterWriteRead>:
    1508:	0f 93       	push	r16
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	fc 01       	movw	r30, r24
    1510:	29 30       	cpi	r18, 0x09	; 9
    1512:	98 f5       	brcc	.+102    	; 0x157a <TWI_MasterWriteRead+0x72>
    1514:	09 30       	cpi	r16, 0x09	; 9
    1516:	98 f5       	brcc	.+102    	; 0x157e <TWI_MasterWriteRead+0x76>
    1518:	87 89       	ldd	r24, Z+23	; 0x17
    151a:	81 11       	cpse	r24, r1
    151c:	32 c0       	rjmp	.+100    	; 0x1582 <TWI_MasterWriteRead+0x7a>
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	87 8b       	std	Z+23, r24	; 0x17
    1522:	10 8e       	std	Z+24, r1	; 0x18
    1524:	66 0f       	add	r22, r22
    1526:	62 83       	std	Z+2, r22	; 0x02
    1528:	22 23       	and	r18, r18
    152a:	69 f0       	breq	.+26     	; 0x1546 <TWI_MasterWriteRead+0x3e>
    152c:	a4 2f       	mov	r26, r20
    152e:	b5 2f       	mov	r27, r21
    1530:	40 e0       	ldi	r20, 0x00	; 0
    1532:	50 e0       	ldi	r21, 0x00	; 0
    1534:	8d 91       	ld	r24, X+
    1536:	ef 01       	movw	r28, r30
    1538:	c4 0f       	add	r28, r20
    153a:	d5 1f       	adc	r29, r21
    153c:	8b 83       	std	Y+3, r24	; 0x03
    153e:	4f 5f       	subi	r20, 0xFF	; 255
    1540:	5f 4f       	sbci	r21, 0xFF	; 255
    1542:	42 17       	cp	r20, r18
    1544:	b8 f3       	brcs	.-18     	; 0x1534 <TWI_MasterWriteRead+0x2c>
    1546:	23 8b       	std	Z+19, r18	; 0x13
    1548:	04 8b       	std	Z+20, r16	; 0x14
    154a:	15 8a       	std	Z+21, r1	; 0x15
    154c:	16 8a       	std	Z+22, r1	; 0x16
    154e:	83 89       	ldd	r24, Z+19	; 0x13
    1550:	88 23       	and	r24, r24
    1552:	41 f0       	breq	.+16     	; 0x1564 <TWI_MasterWriteRead+0x5c>
    1554:	82 81       	ldd	r24, Z+2	; 0x02
    1556:	8e 7f       	andi	r24, 0xFE	; 254
    1558:	01 90       	ld	r0, Z+
    155a:	f0 81       	ld	r31, Z
    155c:	e0 2d       	mov	r30, r0
    155e:	87 83       	std	Z+7, r24	; 0x07
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	12 c0       	rjmp	.+36     	; 0x1588 <TWI_MasterWriteRead+0x80>
    1564:	84 89       	ldd	r24, Z+20	; 0x14
    1566:	88 23       	and	r24, r24
    1568:	71 f0       	breq	.+28     	; 0x1586 <TWI_MasterWriteRead+0x7e>
    156a:	82 81       	ldd	r24, Z+2	; 0x02
    156c:	81 60       	ori	r24, 0x01	; 1
    156e:	01 90       	ld	r0, Z+
    1570:	f0 81       	ld	r31, Z
    1572:	e0 2d       	mov	r30, r0
    1574:	87 83       	std	Z+7, r24	; 0x07
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	07 c0       	rjmp	.+14     	; 0x1588 <TWI_MasterWriteRead+0x80>
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	05 c0       	rjmp	.+10     	; 0x1588 <TWI_MasterWriteRead+0x80>
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	03 c0       	rjmp	.+6      	; 0x1588 <TWI_MasterWriteRead+0x80>
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	01 c0       	rjmp	.+2      	; 0x1588 <TWI_MasterWriteRead+0x80>
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	df 91       	pop	r29
    158a:	cf 91       	pop	r28
    158c:	0f 91       	pop	r16
    158e:	08 95       	ret

00001590 <TWI_MasterWrite>:
    1590:	0f 93       	push	r16
    1592:	00 e0       	ldi	r16, 0x00	; 0
    1594:	0e 94 84 0a 	call	0x1508	; 0x1508 <TWI_MasterWriteRead>
    1598:	0f 91       	pop	r16
    159a:	08 95       	ret

0000159c <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi) //--done
{
    159c:	fc 01       	movw	r30, r24
	uint8_t currentStatus = twi->interface->MSTATUS;
    159e:	a0 81       	ld	r26, Z
    15a0:	b1 81       	ldd	r27, Z+1	; 0x01
    15a2:	15 96       	adiw	r26, 0x05	; 5
    15a4:	9c 91       	ld	r25, X
    15a6:	15 97       	sbiw	r26, 0x05	; 5

	/* If bus error. */
	if (currentStatus & TWI_BUSERR_bm) {
    15a8:	92 ff       	sbrs	r25, 2
    15aa:	03 c0       	rjmp	.+6      	; 0x15b2 <TWI_MasterArbitrationLostBusErrorHandler+0x16>
		twi->result = TWIM_RESULT_BUS_ERROR;
    15ac:	84 e0       	ldi	r24, 0x04	; 4
    15ae:	80 8f       	std	Z+24, r24	; 0x18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <TWI_MasterArbitrationLostBusErrorHandler+0x1a>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
    15b2:	83 e0       	ldi	r24, 0x03	; 3
    15b4:	80 8f       	std	Z+24, r24	; 0x18
	}

	/* Clear interrupt flag. */
	twi->interface->MSTATUS = currentStatus | TWI_ARBLOST_bm;
    15b6:	98 60       	ori	r25, 0x08	; 8
    15b8:	15 96       	adiw	r26, 0x05	; 5
    15ba:	9c 93       	st	X, r25

	twi->status = TWIM_STATUS_READY;
    15bc:	17 8a       	std	Z+23, r1	; 0x17
    15be:	08 95       	ret

000015c0 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi) //--done
{
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	fc 01       	movw	r30, r24
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
    15c6:	93 89       	ldd	r25, Z+19	; 0x13
	uint8_t bytesToRead   = twi->bytesToRead;
    15c8:	24 89       	ldd	r18, Z+20	; 0x14

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MSTATUS & TWI_RXACK_bm) {
    15ca:	a0 81       	ld	r26, Z
    15cc:	b1 81       	ldd	r27, Z+1	; 0x01
    15ce:	15 96       	adiw	r26, 0x05	; 5
    15d0:	8c 91       	ld	r24, X
    15d2:	15 97       	sbiw	r26, 0x05	; 5
    15d4:	84 ff       	sbrs	r24, 4
    15d6:	07 c0       	rjmp	.+14     	; 0x15e6 <TWI_MasterWriteHandler+0x26>
		twi->interface->MCTRLB = TWI_MCMD_STOP_gc;
    15d8:	83 e0       	ldi	r24, 0x03	; 3
    15da:	14 96       	adiw	r26, 0x04	; 4
    15dc:	8c 93       	st	X, r24
		twi->result = TWIM_RESULT_NACK_RECEIVED;
    15de:	85 e0       	ldi	r24, 0x05	; 5
    15e0:	80 8f       	std	Z+24, r24	; 0x18
		twi->status = TWIM_STATUS_READY;
    15e2:	17 8a       	std	Z+23, r1	; 0x17
    15e4:	1c c0       	rjmp	.+56     	; 0x161e <TWI_MasterWriteHandler+0x5e>
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    15e6:	85 89       	ldd	r24, Z+21	; 0x15
    15e8:	89 17       	cp	r24, r25
    15ea:	58 f4       	brcc	.+22     	; 0x1602 <TWI_MasterWriteHandler+0x42>
		uint8_t data = twi->writeData[twi->bytesWritten];
    15ec:	85 89       	ldd	r24, Z+21	; 0x15
    15ee:	ef 01       	movw	r28, r30
    15f0:	c8 0f       	add	r28, r24
    15f2:	d1 1d       	adc	r29, r1
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MDATA = data;
    15f6:	18 96       	adiw	r26, 0x08	; 8
    15f8:	8c 93       	st	X, r24
		++twi->bytesWritten;
    15fa:	85 89       	ldd	r24, Z+21	; 0x15
    15fc:	8f 5f       	subi	r24, 0xFF	; 255
    15fe:	85 8b       	std	Z+21, r24	; 0x15
    1600:	0e c0       	rjmp	.+28     	; 0x161e <TWI_MasterWriteHandler+0x5e>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
    1602:	86 89       	ldd	r24, Z+22	; 0x16
    1604:	82 17       	cp	r24, r18
    1606:	28 f4       	brcc	.+10     	; 0x1612 <TWI_MasterWriteHandler+0x52>
		uint8_t readAddress = twi->address | 0x01;
    1608:	82 81       	ldd	r24, Z+2	; 0x02
    160a:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MADDR = readAddress;
    160c:	17 96       	adiw	r26, 0x07	; 7
    160e:	8c 93       	st	X, r24
    1610:	06 c0       	rjmp	.+12     	; 0x161e <TWI_MasterWriteHandler+0x5e>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MCTRLB = TWI_MCMD_STOP_gc;
    1612:	83 e0       	ldi	r24, 0x03	; 3
    1614:	14 96       	adiw	r26, 0x04	; 4
    1616:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result) //--done
{
	twi->result = result;
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    161c:	17 8a       	std	Z+23, r1	; 0x17
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MCTRLB = TWI_MCMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
    161e:	df 91       	pop	r29
    1620:	cf 91       	pop	r28
    1622:	08 95       	ret

00001624 <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi) //--done
{
    1624:	fc 01       	movw	r30, r24
	//PORTB_OUTTGL = (1 << 4);
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
    1626:	86 89       	ldd	r24, Z+22	; 0x16
    1628:	88 30       	cpi	r24, 0x08	; 8
    162a:	70 f4       	brcc	.+28     	; 0x1648 <TWI_MasterReadHandler+0x24>
		uint8_t data = twi->interface->MDATA;
    162c:	a0 81       	ld	r26, Z
    162e:	b1 81       	ldd	r27, Z+1	; 0x01
    1630:	18 96       	adiw	r26, 0x08	; 8
    1632:	8c 91       	ld	r24, X
		twi->readData[twi->bytesRead] = data; //--!
    1634:	96 89       	ldd	r25, Z+22	; 0x16
    1636:	df 01       	movw	r26, r30
    1638:	a9 0f       	add	r26, r25
    163a:	b1 1d       	adc	r27, r1
    163c:	1b 96       	adiw	r26, 0x0b	; 11
    163e:	8c 93       	st	X, r24
		twi->bytesRead++;
    1640:	86 89       	ldd	r24, Z+22	; 0x16
    1642:	8f 5f       	subi	r24, 0xFF	; 255
    1644:	86 8b       	std	Z+22, r24	; 0x16
    1646:	08 c0       	rjmp	.+16     	; 0x1658 <TWI_MasterReadHandler+0x34>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MCTRLB = TWI_MCMD_STOP_gc;
    1648:	a0 81       	ld	r26, Z
    164a:	b1 81       	ldd	r27, Z+1	; 0x01
    164c:	83 e0       	ldi	r24, 0x03	; 3
    164e:	14 96       	adiw	r26, 0x04	; 4
    1650:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result) //--done
{
	twi->result = result;
    1652:	82 e0       	ldi	r24, 0x02	; 2
    1654:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    1656:	17 8a       	std	Z+23, r1	; 0x17
		twi->interface->MCTRLB = TWI_MCMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
    1658:	94 89       	ldd	r25, Z+20	; 0x14

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
    165a:	86 89       	ldd	r24, Z+22	; 0x16
    165c:	89 17       	cp	r24, r25
    165e:	30 f4       	brcc	.+12     	; 0x166c <TWI_MasterReadHandler+0x48>
		twi->interface->MCTRLB = TWI_MCMD_RECVTRANS_gc;
    1660:	01 90       	ld	r0, Z+
    1662:	f0 81       	ld	r31, Z
    1664:	e0 2d       	mov	r30, r0
    1666:	82 e0       	ldi	r24, 0x02	; 2
    1668:	84 83       	std	Z+4, r24	; 0x04
    166a:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MCTRLB = TWI_ACKACT_bm |
    166c:	a0 81       	ld	r26, Z
    166e:	b1 81       	ldd	r27, Z+1	; 0x01
    1670:	87 e0       	ldi	r24, 0x07	; 7
    1672:	14 96       	adiw	r26, 0x04	; 4
    1674:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result) //--done
{
	twi->result = result;
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    167a:	17 8a       	std	Z+23, r1	; 0x17
    167c:	08 95       	ret

0000167e <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi) //--done
{
	uint8_t currentStatus = twi->interface->MSTATUS;
    167e:	dc 01       	movw	r26, r24
    1680:	ed 91       	ld	r30, X+
    1682:	fc 91       	ld	r31, X
    1684:	25 81       	ldd	r18, Z+5	; 0x05

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_ARBLOST_bm) ||
    1686:	32 2f       	mov	r19, r18
    1688:	3c 70       	andi	r19, 0x0C	; 12
    168a:	19 f0       	breq	.+6      	; 0x1692 <TWI_MasterInterruptHandler+0x14>
	    (currentStatus & TWI_BUSERR_bm)) {
		TWI_MasterArbitrationLostBusErrorHandler(twi);
    168c:	0e 94 ce 0a 	call	0x159c	; 0x159c <TWI_MasterArbitrationLostBusErrorHandler>
    1690:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_WIF_bm) {
    1692:	26 ff       	sbrs	r18, 6
    1694:	03 c0       	rjmp	.+6      	; 0x169c <TWI_MasterInterruptHandler+0x1e>
		TWI_MasterWriteHandler(twi);
    1696:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <TWI_MasterWriteHandler>
    169a:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_RIF_bm) {
    169c:	22 23       	and	r18, r18
    169e:	1c f4       	brge	.+6      	; 0x16a6 <TWI_MasterInterruptHandler+0x28>
		TWI_MasterReadHandler(twi);
    16a0:	0e 94 12 0b 	call	0x1624	; 0x1624 <TWI_MasterReadHandler>
    16a4:	08 95       	ret
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result) //--done
{
	twi->result = result;
    16a6:	26 e0       	ldi	r18, 0x06	; 6
    16a8:	fc 01       	movw	r30, r24
    16aa:	20 8f       	std	Z+24, r18	; 0x18
	twi->status = TWIM_STATUS_READY;
    16ac:	17 8a       	std	Z+23, r1	; 0x17
    16ae:	08 95       	ret

000016b0 <__subsf3>:
    16b0:	50 58       	subi	r21, 0x80	; 128

000016b2 <__addsf3>:
    16b2:	bb 27       	eor	r27, r27
    16b4:	aa 27       	eor	r26, r26
    16b6:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__addsf3x>
    16ba:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <__fp_round>
    16be:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__fp_pscA>
    16c2:	38 f0       	brcs	.+14     	; 0x16d2 <__addsf3+0x20>
    16c4:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__fp_pscB>
    16c8:	20 f0       	brcs	.+8      	; 0x16d2 <__addsf3+0x20>
    16ca:	39 f4       	brne	.+14     	; 0x16da <__addsf3+0x28>
    16cc:	9f 3f       	cpi	r25, 0xFF	; 255
    16ce:	19 f4       	brne	.+6      	; 0x16d6 <__addsf3+0x24>
    16d0:	26 f4       	brtc	.+8      	; 0x16da <__addsf3+0x28>
    16d2:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <__fp_nan>
    16d6:	0e f4       	brtc	.+2      	; 0x16da <__addsf3+0x28>
    16d8:	e0 95       	com	r30
    16da:	e7 fb       	bst	r30, 7
    16dc:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <__fp_inf>

000016e0 <__addsf3x>:
    16e0:	e9 2f       	mov	r30, r25
    16e2:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__fp_split3>
    16e6:	58 f3       	brcs	.-42     	; 0x16be <__addsf3+0xc>
    16e8:	ba 17       	cp	r27, r26
    16ea:	62 07       	cpc	r22, r18
    16ec:	73 07       	cpc	r23, r19
    16ee:	84 07       	cpc	r24, r20
    16f0:	95 07       	cpc	r25, r21
    16f2:	20 f0       	brcs	.+8      	; 0x16fc <__addsf3x+0x1c>
    16f4:	79 f4       	brne	.+30     	; 0x1714 <__addsf3x+0x34>
    16f6:	a6 f5       	brtc	.+104    	; 0x1760 <__addsf3x+0x80>
    16f8:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <__fp_zero>
    16fc:	0e f4       	brtc	.+2      	; 0x1700 <__addsf3x+0x20>
    16fe:	e0 95       	com	r30
    1700:	0b 2e       	mov	r0, r27
    1702:	ba 2f       	mov	r27, r26
    1704:	a0 2d       	mov	r26, r0
    1706:	0b 01       	movw	r0, r22
    1708:	b9 01       	movw	r22, r18
    170a:	90 01       	movw	r18, r0
    170c:	0c 01       	movw	r0, r24
    170e:	ca 01       	movw	r24, r20
    1710:	a0 01       	movw	r20, r0
    1712:	11 24       	eor	r1, r1
    1714:	ff 27       	eor	r31, r31
    1716:	59 1b       	sub	r21, r25
    1718:	99 f0       	breq	.+38     	; 0x1740 <__addsf3x+0x60>
    171a:	59 3f       	cpi	r21, 0xF9	; 249
    171c:	50 f4       	brcc	.+20     	; 0x1732 <__addsf3x+0x52>
    171e:	50 3e       	cpi	r21, 0xE0	; 224
    1720:	68 f1       	brcs	.+90     	; 0x177c <__addsf3x+0x9c>
    1722:	1a 16       	cp	r1, r26
    1724:	f0 40       	sbci	r31, 0x00	; 0
    1726:	a2 2f       	mov	r26, r18
    1728:	23 2f       	mov	r18, r19
    172a:	34 2f       	mov	r19, r20
    172c:	44 27       	eor	r20, r20
    172e:	58 5f       	subi	r21, 0xF8	; 248
    1730:	f3 cf       	rjmp	.-26     	; 0x1718 <__addsf3x+0x38>
    1732:	46 95       	lsr	r20
    1734:	37 95       	ror	r19
    1736:	27 95       	ror	r18
    1738:	a7 95       	ror	r26
    173a:	f0 40       	sbci	r31, 0x00	; 0
    173c:	53 95       	inc	r21
    173e:	c9 f7       	brne	.-14     	; 0x1732 <__addsf3x+0x52>
    1740:	7e f4       	brtc	.+30     	; 0x1760 <__addsf3x+0x80>
    1742:	1f 16       	cp	r1, r31
    1744:	ba 0b       	sbc	r27, r26
    1746:	62 0b       	sbc	r22, r18
    1748:	73 0b       	sbc	r23, r19
    174a:	84 0b       	sbc	r24, r20
    174c:	ba f0       	brmi	.+46     	; 0x177c <__addsf3x+0x9c>
    174e:	91 50       	subi	r25, 0x01	; 1
    1750:	a1 f0       	breq	.+40     	; 0x177a <__addsf3x+0x9a>
    1752:	ff 0f       	add	r31, r31
    1754:	bb 1f       	adc	r27, r27
    1756:	66 1f       	adc	r22, r22
    1758:	77 1f       	adc	r23, r23
    175a:	88 1f       	adc	r24, r24
    175c:	c2 f7       	brpl	.-16     	; 0x174e <__addsf3x+0x6e>
    175e:	0e c0       	rjmp	.+28     	; 0x177c <__addsf3x+0x9c>
    1760:	ba 0f       	add	r27, r26
    1762:	62 1f       	adc	r22, r18
    1764:	73 1f       	adc	r23, r19
    1766:	84 1f       	adc	r24, r20
    1768:	48 f4       	brcc	.+18     	; 0x177c <__addsf3x+0x9c>
    176a:	87 95       	ror	r24
    176c:	77 95       	ror	r23
    176e:	67 95       	ror	r22
    1770:	b7 95       	ror	r27
    1772:	f7 95       	ror	r31
    1774:	9e 3f       	cpi	r25, 0xFE	; 254
    1776:	08 f0       	brcs	.+2      	; 0x177a <__addsf3x+0x9a>
    1778:	b0 cf       	rjmp	.-160    	; 0x16da <__addsf3+0x28>
    177a:	93 95       	inc	r25
    177c:	88 0f       	add	r24, r24
    177e:	08 f0       	brcs	.+2      	; 0x1782 <__addsf3x+0xa2>
    1780:	99 27       	eor	r25, r25
    1782:	ee 0f       	add	r30, r30
    1784:	97 95       	ror	r25
    1786:	87 95       	ror	r24
    1788:	08 95       	ret

0000178a <__divsf3>:
    178a:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__divsf3x>
    178e:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <__fp_round>
    1792:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__fp_pscB>
    1796:	58 f0       	brcs	.+22     	; 0x17ae <__divsf3+0x24>
    1798:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__fp_pscA>
    179c:	40 f0       	brcs	.+16     	; 0x17ae <__divsf3+0x24>
    179e:	29 f4       	brne	.+10     	; 0x17aa <__divsf3+0x20>
    17a0:	5f 3f       	cpi	r21, 0xFF	; 255
    17a2:	29 f0       	breq	.+10     	; 0x17ae <__divsf3+0x24>
    17a4:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <__fp_inf>
    17a8:	51 11       	cpse	r21, r1
    17aa:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__fp_szero>
    17ae:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <__fp_nan>

000017b2 <__divsf3x>:
    17b2:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__fp_split3>
    17b6:	68 f3       	brcs	.-38     	; 0x1792 <__divsf3+0x8>

000017b8 <__divsf3_pse>:
    17b8:	99 23       	and	r25, r25
    17ba:	b1 f3       	breq	.-20     	; 0x17a8 <__divsf3+0x1e>
    17bc:	55 23       	and	r21, r21
    17be:	91 f3       	breq	.-28     	; 0x17a4 <__divsf3+0x1a>
    17c0:	95 1b       	sub	r25, r21
    17c2:	55 0b       	sbc	r21, r21
    17c4:	bb 27       	eor	r27, r27
    17c6:	aa 27       	eor	r26, r26
    17c8:	62 17       	cp	r22, r18
    17ca:	73 07       	cpc	r23, r19
    17cc:	84 07       	cpc	r24, r20
    17ce:	38 f0       	brcs	.+14     	; 0x17de <__divsf3_pse+0x26>
    17d0:	9f 5f       	subi	r25, 0xFF	; 255
    17d2:	5f 4f       	sbci	r21, 0xFF	; 255
    17d4:	22 0f       	add	r18, r18
    17d6:	33 1f       	adc	r19, r19
    17d8:	44 1f       	adc	r20, r20
    17da:	aa 1f       	adc	r26, r26
    17dc:	a9 f3       	breq	.-22     	; 0x17c8 <__divsf3_pse+0x10>
    17de:	35 d0       	rcall	.+106    	; 0x184a <__divsf3_pse+0x92>
    17e0:	0e 2e       	mov	r0, r30
    17e2:	3a f0       	brmi	.+14     	; 0x17f2 <__divsf3_pse+0x3a>
    17e4:	e0 e8       	ldi	r30, 0x80	; 128
    17e6:	32 d0       	rcall	.+100    	; 0x184c <__divsf3_pse+0x94>
    17e8:	91 50       	subi	r25, 0x01	; 1
    17ea:	50 40       	sbci	r21, 0x00	; 0
    17ec:	e6 95       	lsr	r30
    17ee:	00 1c       	adc	r0, r0
    17f0:	ca f7       	brpl	.-14     	; 0x17e4 <__divsf3_pse+0x2c>
    17f2:	2b d0       	rcall	.+86     	; 0x184a <__divsf3_pse+0x92>
    17f4:	fe 2f       	mov	r31, r30
    17f6:	29 d0       	rcall	.+82     	; 0x184a <__divsf3_pse+0x92>
    17f8:	66 0f       	add	r22, r22
    17fa:	77 1f       	adc	r23, r23
    17fc:	88 1f       	adc	r24, r24
    17fe:	bb 1f       	adc	r27, r27
    1800:	26 17       	cp	r18, r22
    1802:	37 07       	cpc	r19, r23
    1804:	48 07       	cpc	r20, r24
    1806:	ab 07       	cpc	r26, r27
    1808:	b0 e8       	ldi	r27, 0x80	; 128
    180a:	09 f0       	breq	.+2      	; 0x180e <__divsf3_pse+0x56>
    180c:	bb 0b       	sbc	r27, r27
    180e:	80 2d       	mov	r24, r0
    1810:	bf 01       	movw	r22, r30
    1812:	ff 27       	eor	r31, r31
    1814:	93 58       	subi	r25, 0x83	; 131
    1816:	5f 4f       	sbci	r21, 0xFF	; 255
    1818:	3a f0       	brmi	.+14     	; 0x1828 <__divsf3_pse+0x70>
    181a:	9e 3f       	cpi	r25, 0xFE	; 254
    181c:	51 05       	cpc	r21, r1
    181e:	78 f0       	brcs	.+30     	; 0x183e <__divsf3_pse+0x86>
    1820:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <__fp_inf>
    1824:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__fp_szero>
    1828:	5f 3f       	cpi	r21, 0xFF	; 255
    182a:	e4 f3       	brlt	.-8      	; 0x1824 <__divsf3_pse+0x6c>
    182c:	98 3e       	cpi	r25, 0xE8	; 232
    182e:	d4 f3       	brlt	.-12     	; 0x1824 <__divsf3_pse+0x6c>
    1830:	86 95       	lsr	r24
    1832:	77 95       	ror	r23
    1834:	67 95       	ror	r22
    1836:	b7 95       	ror	r27
    1838:	f7 95       	ror	r31
    183a:	9f 5f       	subi	r25, 0xFF	; 255
    183c:	c9 f7       	brne	.-14     	; 0x1830 <__divsf3_pse+0x78>
    183e:	88 0f       	add	r24, r24
    1840:	91 1d       	adc	r25, r1
    1842:	96 95       	lsr	r25
    1844:	87 95       	ror	r24
    1846:	97 f9       	bld	r25, 7
    1848:	08 95       	ret
    184a:	e1 e0       	ldi	r30, 0x01	; 1
    184c:	66 0f       	add	r22, r22
    184e:	77 1f       	adc	r23, r23
    1850:	88 1f       	adc	r24, r24
    1852:	bb 1f       	adc	r27, r27
    1854:	62 17       	cp	r22, r18
    1856:	73 07       	cpc	r23, r19
    1858:	84 07       	cpc	r24, r20
    185a:	ba 07       	cpc	r27, r26
    185c:	20 f0       	brcs	.+8      	; 0x1866 <__divsf3_pse+0xae>
    185e:	62 1b       	sub	r22, r18
    1860:	73 0b       	sbc	r23, r19
    1862:	84 0b       	sbc	r24, r20
    1864:	ba 0b       	sbc	r27, r26
    1866:	ee 1f       	adc	r30, r30
    1868:	88 f7       	brcc	.-30     	; 0x184c <__divsf3_pse+0x94>
    186a:	e0 95       	com	r30
    186c:	08 95       	ret

0000186e <__fixsfsi>:
    186e:	0e 94 3e 0c 	call	0x187c	; 0x187c <__fixunssfsi>
    1872:	68 94       	set
    1874:	b1 11       	cpse	r27, r1
    1876:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__fp_szero>
    187a:	08 95       	ret

0000187c <__fixunssfsi>:
    187c:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__fp_splitA>
    1880:	88 f0       	brcs	.+34     	; 0x18a4 <__fixunssfsi+0x28>
    1882:	9f 57       	subi	r25, 0x7F	; 127
    1884:	98 f0       	brcs	.+38     	; 0x18ac <__fixunssfsi+0x30>
    1886:	b9 2f       	mov	r27, r25
    1888:	99 27       	eor	r25, r25
    188a:	b7 51       	subi	r27, 0x17	; 23
    188c:	b0 f0       	brcs	.+44     	; 0x18ba <__fixunssfsi+0x3e>
    188e:	e1 f0       	breq	.+56     	; 0x18c8 <__fixunssfsi+0x4c>
    1890:	66 0f       	add	r22, r22
    1892:	77 1f       	adc	r23, r23
    1894:	88 1f       	adc	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	1a f0       	brmi	.+6      	; 0x18a0 <__fixunssfsi+0x24>
    189a:	ba 95       	dec	r27
    189c:	c9 f7       	brne	.-14     	; 0x1890 <__fixunssfsi+0x14>
    189e:	14 c0       	rjmp	.+40     	; 0x18c8 <__fixunssfsi+0x4c>
    18a0:	b1 30       	cpi	r27, 0x01	; 1
    18a2:	91 f0       	breq	.+36     	; 0x18c8 <__fixunssfsi+0x4c>
    18a4:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <__fp_zero>
    18a8:	b1 e0       	ldi	r27, 0x01	; 1
    18aa:	08 95       	ret
    18ac:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <__fp_zero>
    18b0:	67 2f       	mov	r22, r23
    18b2:	78 2f       	mov	r23, r24
    18b4:	88 27       	eor	r24, r24
    18b6:	b8 5f       	subi	r27, 0xF8	; 248
    18b8:	39 f0       	breq	.+14     	; 0x18c8 <__fixunssfsi+0x4c>
    18ba:	b9 3f       	cpi	r27, 0xF9	; 249
    18bc:	cc f3       	brlt	.-14     	; 0x18b0 <__fixunssfsi+0x34>
    18be:	86 95       	lsr	r24
    18c0:	77 95       	ror	r23
    18c2:	67 95       	ror	r22
    18c4:	b3 95       	inc	r27
    18c6:	d9 f7       	brne	.-10     	; 0x18be <__fixunssfsi+0x42>
    18c8:	3e f4       	brtc	.+14     	; 0x18d8 <__fixunssfsi+0x5c>
    18ca:	90 95       	com	r25
    18cc:	80 95       	com	r24
    18ce:	70 95       	com	r23
    18d0:	61 95       	neg	r22
    18d2:	7f 4f       	sbci	r23, 0xFF	; 255
    18d4:	8f 4f       	sbci	r24, 0xFF	; 255
    18d6:	9f 4f       	sbci	r25, 0xFF	; 255
    18d8:	08 95       	ret

000018da <__floatunsisf>:
    18da:	e8 94       	clt
    18dc:	09 c0       	rjmp	.+18     	; 0x18f0 <__floatsisf+0x12>

000018de <__floatsisf>:
    18de:	97 fb       	bst	r25, 7
    18e0:	3e f4       	brtc	.+14     	; 0x18f0 <__floatsisf+0x12>
    18e2:	90 95       	com	r25
    18e4:	80 95       	com	r24
    18e6:	70 95       	com	r23
    18e8:	61 95       	neg	r22
    18ea:	7f 4f       	sbci	r23, 0xFF	; 255
    18ec:	8f 4f       	sbci	r24, 0xFF	; 255
    18ee:	9f 4f       	sbci	r25, 0xFF	; 255
    18f0:	99 23       	and	r25, r25
    18f2:	a9 f0       	breq	.+42     	; 0x191e <__floatsisf+0x40>
    18f4:	f9 2f       	mov	r31, r25
    18f6:	96 e9       	ldi	r25, 0x96	; 150
    18f8:	bb 27       	eor	r27, r27
    18fa:	93 95       	inc	r25
    18fc:	f6 95       	lsr	r31
    18fe:	87 95       	ror	r24
    1900:	77 95       	ror	r23
    1902:	67 95       	ror	r22
    1904:	b7 95       	ror	r27
    1906:	f1 11       	cpse	r31, r1
    1908:	f8 cf       	rjmp	.-16     	; 0x18fa <__floatsisf+0x1c>
    190a:	fa f4       	brpl	.+62     	; 0x194a <__floatsisf+0x6c>
    190c:	bb 0f       	add	r27, r27
    190e:	11 f4       	brne	.+4      	; 0x1914 <__floatsisf+0x36>
    1910:	60 ff       	sbrs	r22, 0
    1912:	1b c0       	rjmp	.+54     	; 0x194a <__floatsisf+0x6c>
    1914:	6f 5f       	subi	r22, 0xFF	; 255
    1916:	7f 4f       	sbci	r23, 0xFF	; 255
    1918:	8f 4f       	sbci	r24, 0xFF	; 255
    191a:	9f 4f       	sbci	r25, 0xFF	; 255
    191c:	16 c0       	rjmp	.+44     	; 0x194a <__floatsisf+0x6c>
    191e:	88 23       	and	r24, r24
    1920:	11 f0       	breq	.+4      	; 0x1926 <__floatsisf+0x48>
    1922:	96 e9       	ldi	r25, 0x96	; 150
    1924:	11 c0       	rjmp	.+34     	; 0x1948 <__floatsisf+0x6a>
    1926:	77 23       	and	r23, r23
    1928:	21 f0       	breq	.+8      	; 0x1932 <__floatsisf+0x54>
    192a:	9e e8       	ldi	r25, 0x8E	; 142
    192c:	87 2f       	mov	r24, r23
    192e:	76 2f       	mov	r23, r22
    1930:	05 c0       	rjmp	.+10     	; 0x193c <__floatsisf+0x5e>
    1932:	66 23       	and	r22, r22
    1934:	71 f0       	breq	.+28     	; 0x1952 <__floatsisf+0x74>
    1936:	96 e8       	ldi	r25, 0x86	; 134
    1938:	86 2f       	mov	r24, r22
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	60 e0       	ldi	r22, 0x00	; 0
    193e:	2a f0       	brmi	.+10     	; 0x194a <__floatsisf+0x6c>
    1940:	9a 95       	dec	r25
    1942:	66 0f       	add	r22, r22
    1944:	77 1f       	adc	r23, r23
    1946:	88 1f       	adc	r24, r24
    1948:	da f7       	brpl	.-10     	; 0x1940 <__floatsisf+0x62>
    194a:	88 0f       	add	r24, r24
    194c:	96 95       	lsr	r25
    194e:	87 95       	ror	r24
    1950:	97 f9       	bld	r25, 7
    1952:	08 95       	ret

00001954 <__fp_inf>:
    1954:	97 f9       	bld	r25, 7
    1956:	9f 67       	ori	r25, 0x7F	; 127
    1958:	80 e8       	ldi	r24, 0x80	; 128
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	60 e0       	ldi	r22, 0x00	; 0
    195e:	08 95       	ret

00001960 <__fp_nan>:
    1960:	9f ef       	ldi	r25, 0xFF	; 255
    1962:	80 ec       	ldi	r24, 0xC0	; 192
    1964:	08 95       	ret

00001966 <__fp_pscA>:
    1966:	00 24       	eor	r0, r0
    1968:	0a 94       	dec	r0
    196a:	16 16       	cp	r1, r22
    196c:	17 06       	cpc	r1, r23
    196e:	18 06       	cpc	r1, r24
    1970:	09 06       	cpc	r0, r25
    1972:	08 95       	ret

00001974 <__fp_pscB>:
    1974:	00 24       	eor	r0, r0
    1976:	0a 94       	dec	r0
    1978:	12 16       	cp	r1, r18
    197a:	13 06       	cpc	r1, r19
    197c:	14 06       	cpc	r1, r20
    197e:	05 06       	cpc	r0, r21
    1980:	08 95       	ret

00001982 <__fp_round>:
    1982:	09 2e       	mov	r0, r25
    1984:	03 94       	inc	r0
    1986:	00 0c       	add	r0, r0
    1988:	11 f4       	brne	.+4      	; 0x198e <__fp_round+0xc>
    198a:	88 23       	and	r24, r24
    198c:	52 f0       	brmi	.+20     	; 0x19a2 <__fp_round+0x20>
    198e:	bb 0f       	add	r27, r27
    1990:	40 f4       	brcc	.+16     	; 0x19a2 <__fp_round+0x20>
    1992:	bf 2b       	or	r27, r31
    1994:	11 f4       	brne	.+4      	; 0x199a <__fp_round+0x18>
    1996:	60 ff       	sbrs	r22, 0
    1998:	04 c0       	rjmp	.+8      	; 0x19a2 <__fp_round+0x20>
    199a:	6f 5f       	subi	r22, 0xFF	; 255
    199c:	7f 4f       	sbci	r23, 0xFF	; 255
    199e:	8f 4f       	sbci	r24, 0xFF	; 255
    19a0:	9f 4f       	sbci	r25, 0xFF	; 255
    19a2:	08 95       	ret

000019a4 <__fp_split3>:
    19a4:	57 fd       	sbrc	r21, 7
    19a6:	90 58       	subi	r25, 0x80	; 128
    19a8:	44 0f       	add	r20, r20
    19aa:	55 1f       	adc	r21, r21
    19ac:	59 f0       	breq	.+22     	; 0x19c4 <__fp_splitA+0x10>
    19ae:	5f 3f       	cpi	r21, 0xFF	; 255
    19b0:	71 f0       	breq	.+28     	; 0x19ce <__fp_splitA+0x1a>
    19b2:	47 95       	ror	r20

000019b4 <__fp_splitA>:
    19b4:	88 0f       	add	r24, r24
    19b6:	97 fb       	bst	r25, 7
    19b8:	99 1f       	adc	r25, r25
    19ba:	61 f0       	breq	.+24     	; 0x19d4 <__fp_splitA+0x20>
    19bc:	9f 3f       	cpi	r25, 0xFF	; 255
    19be:	79 f0       	breq	.+30     	; 0x19de <__fp_splitA+0x2a>
    19c0:	87 95       	ror	r24
    19c2:	08 95       	ret
    19c4:	12 16       	cp	r1, r18
    19c6:	13 06       	cpc	r1, r19
    19c8:	14 06       	cpc	r1, r20
    19ca:	55 1f       	adc	r21, r21
    19cc:	f2 cf       	rjmp	.-28     	; 0x19b2 <__fp_split3+0xe>
    19ce:	46 95       	lsr	r20
    19d0:	f1 df       	rcall	.-30     	; 0x19b4 <__fp_splitA>
    19d2:	08 c0       	rjmp	.+16     	; 0x19e4 <__fp_splitA+0x30>
    19d4:	16 16       	cp	r1, r22
    19d6:	17 06       	cpc	r1, r23
    19d8:	18 06       	cpc	r1, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	f1 cf       	rjmp	.-30     	; 0x19c0 <__fp_splitA+0xc>
    19de:	86 95       	lsr	r24
    19e0:	71 05       	cpc	r23, r1
    19e2:	61 05       	cpc	r22, r1
    19e4:	08 94       	sec
    19e6:	08 95       	ret

000019e8 <__fp_zero>:
    19e8:	e8 94       	clt

000019ea <__fp_szero>:
    19ea:	bb 27       	eor	r27, r27
    19ec:	66 27       	eor	r22, r22
    19ee:	77 27       	eor	r23, r23
    19f0:	cb 01       	movw	r24, r22
    19f2:	97 f9       	bld	r25, 7
    19f4:	08 95       	ret

000019f6 <__mulsf3>:
    19f6:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__mulsf3x>
    19fa:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <__fp_round>
    19fe:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__fp_pscA>
    1a02:	38 f0       	brcs	.+14     	; 0x1a12 <__mulsf3+0x1c>
    1a04:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__fp_pscB>
    1a08:	20 f0       	brcs	.+8      	; 0x1a12 <__mulsf3+0x1c>
    1a0a:	95 23       	and	r25, r21
    1a0c:	11 f0       	breq	.+4      	; 0x1a12 <__mulsf3+0x1c>
    1a0e:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <__fp_inf>
    1a12:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <__fp_nan>
    1a16:	11 24       	eor	r1, r1
    1a18:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__fp_szero>

00001a1c <__mulsf3x>:
    1a1c:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__fp_split3>
    1a20:	70 f3       	brcs	.-36     	; 0x19fe <__mulsf3+0x8>

00001a22 <__mulsf3_pse>:
    1a22:	95 9f       	mul	r25, r21
    1a24:	c1 f3       	breq	.-16     	; 0x1a16 <__mulsf3+0x20>
    1a26:	95 0f       	add	r25, r21
    1a28:	50 e0       	ldi	r21, 0x00	; 0
    1a2a:	55 1f       	adc	r21, r21
    1a2c:	62 9f       	mul	r22, r18
    1a2e:	f0 01       	movw	r30, r0
    1a30:	72 9f       	mul	r23, r18
    1a32:	bb 27       	eor	r27, r27
    1a34:	f0 0d       	add	r31, r0
    1a36:	b1 1d       	adc	r27, r1
    1a38:	63 9f       	mul	r22, r19
    1a3a:	aa 27       	eor	r26, r26
    1a3c:	f0 0d       	add	r31, r0
    1a3e:	b1 1d       	adc	r27, r1
    1a40:	aa 1f       	adc	r26, r26
    1a42:	64 9f       	mul	r22, r20
    1a44:	66 27       	eor	r22, r22
    1a46:	b0 0d       	add	r27, r0
    1a48:	a1 1d       	adc	r26, r1
    1a4a:	66 1f       	adc	r22, r22
    1a4c:	82 9f       	mul	r24, r18
    1a4e:	22 27       	eor	r18, r18
    1a50:	b0 0d       	add	r27, r0
    1a52:	a1 1d       	adc	r26, r1
    1a54:	62 1f       	adc	r22, r18
    1a56:	73 9f       	mul	r23, r19
    1a58:	b0 0d       	add	r27, r0
    1a5a:	a1 1d       	adc	r26, r1
    1a5c:	62 1f       	adc	r22, r18
    1a5e:	83 9f       	mul	r24, r19
    1a60:	a0 0d       	add	r26, r0
    1a62:	61 1d       	adc	r22, r1
    1a64:	22 1f       	adc	r18, r18
    1a66:	74 9f       	mul	r23, r20
    1a68:	33 27       	eor	r19, r19
    1a6a:	a0 0d       	add	r26, r0
    1a6c:	61 1d       	adc	r22, r1
    1a6e:	23 1f       	adc	r18, r19
    1a70:	84 9f       	mul	r24, r20
    1a72:	60 0d       	add	r22, r0
    1a74:	21 1d       	adc	r18, r1
    1a76:	82 2f       	mov	r24, r18
    1a78:	76 2f       	mov	r23, r22
    1a7a:	6a 2f       	mov	r22, r26
    1a7c:	11 24       	eor	r1, r1
    1a7e:	9f 57       	subi	r25, 0x7F	; 127
    1a80:	50 40       	sbci	r21, 0x00	; 0
    1a82:	9a f0       	brmi	.+38     	; 0x1aaa <__mulsf3_pse+0x88>
    1a84:	f1 f0       	breq	.+60     	; 0x1ac2 <__mulsf3_pse+0xa0>
    1a86:	88 23       	and	r24, r24
    1a88:	4a f0       	brmi	.+18     	; 0x1a9c <__mulsf3_pse+0x7a>
    1a8a:	ee 0f       	add	r30, r30
    1a8c:	ff 1f       	adc	r31, r31
    1a8e:	bb 1f       	adc	r27, r27
    1a90:	66 1f       	adc	r22, r22
    1a92:	77 1f       	adc	r23, r23
    1a94:	88 1f       	adc	r24, r24
    1a96:	91 50       	subi	r25, 0x01	; 1
    1a98:	50 40       	sbci	r21, 0x00	; 0
    1a9a:	a9 f7       	brne	.-22     	; 0x1a86 <__mulsf3_pse+0x64>
    1a9c:	9e 3f       	cpi	r25, 0xFE	; 254
    1a9e:	51 05       	cpc	r21, r1
    1aa0:	80 f0       	brcs	.+32     	; 0x1ac2 <__mulsf3_pse+0xa0>
    1aa2:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <__fp_inf>
    1aa6:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__fp_szero>
    1aaa:	5f 3f       	cpi	r21, 0xFF	; 255
    1aac:	e4 f3       	brlt	.-8      	; 0x1aa6 <__mulsf3_pse+0x84>
    1aae:	98 3e       	cpi	r25, 0xE8	; 232
    1ab0:	d4 f3       	brlt	.-12     	; 0x1aa6 <__mulsf3_pse+0x84>
    1ab2:	86 95       	lsr	r24
    1ab4:	77 95       	ror	r23
    1ab6:	67 95       	ror	r22
    1ab8:	b7 95       	ror	r27
    1aba:	f7 95       	ror	r31
    1abc:	e7 95       	ror	r30
    1abe:	9f 5f       	subi	r25, 0xFF	; 255
    1ac0:	c1 f7       	brne	.-16     	; 0x1ab2 <__mulsf3_pse+0x90>
    1ac2:	fe 2b       	or	r31, r30
    1ac4:	88 0f       	add	r24, r24
    1ac6:	91 1d       	adc	r25, r1
    1ac8:	96 95       	lsr	r25
    1aca:	87 95       	ror	r24
    1acc:	97 f9       	bld	r25, 7
    1ace:	08 95       	ret

00001ad0 <__udivmodsi4>:
    1ad0:	a1 e2       	ldi	r26, 0x21	; 33
    1ad2:	1a 2e       	mov	r1, r26
    1ad4:	aa 1b       	sub	r26, r26
    1ad6:	bb 1b       	sub	r27, r27
    1ad8:	fd 01       	movw	r30, r26
    1ada:	0d c0       	rjmp	.+26     	; 0x1af6 <__udivmodsi4_ep>

00001adc <__udivmodsi4_loop>:
    1adc:	aa 1f       	adc	r26, r26
    1ade:	bb 1f       	adc	r27, r27
    1ae0:	ee 1f       	adc	r30, r30
    1ae2:	ff 1f       	adc	r31, r31
    1ae4:	a2 17       	cp	r26, r18
    1ae6:	b3 07       	cpc	r27, r19
    1ae8:	e4 07       	cpc	r30, r20
    1aea:	f5 07       	cpc	r31, r21
    1aec:	20 f0       	brcs	.+8      	; 0x1af6 <__udivmodsi4_ep>
    1aee:	a2 1b       	sub	r26, r18
    1af0:	b3 0b       	sbc	r27, r19
    1af2:	e4 0b       	sbc	r30, r20
    1af4:	f5 0b       	sbc	r31, r21

00001af6 <__udivmodsi4_ep>:
    1af6:	66 1f       	adc	r22, r22
    1af8:	77 1f       	adc	r23, r23
    1afa:	88 1f       	adc	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	1a 94       	dec	r1
    1b00:	69 f7       	brne	.-38     	; 0x1adc <__udivmodsi4_loop>
    1b02:	60 95       	com	r22
    1b04:	70 95       	com	r23
    1b06:	80 95       	com	r24
    1b08:	90 95       	com	r25
    1b0a:	9b 01       	movw	r18, r22
    1b0c:	ac 01       	movw	r20, r24
    1b0e:	bd 01       	movw	r22, r26
    1b10:	cf 01       	movw	r24, r30
    1b12:	08 95       	ret

00001b14 <__umulhisi3>:
    1b14:	a2 9f       	mul	r26, r18
    1b16:	b0 01       	movw	r22, r0
    1b18:	b3 9f       	mul	r27, r19
    1b1a:	c0 01       	movw	r24, r0
    1b1c:	a3 9f       	mul	r26, r19
    1b1e:	70 0d       	add	r23, r0
    1b20:	81 1d       	adc	r24, r1
    1b22:	11 24       	eor	r1, r1
    1b24:	91 1d       	adc	r25, r1
    1b26:	b2 9f       	mul	r27, r18
    1b28:	70 0d       	add	r23, r0
    1b2a:	81 1d       	adc	r24, r1
    1b2c:	11 24       	eor	r1, r1
    1b2e:	91 1d       	adc	r25, r1
    1b30:	08 95       	ret

00001b32 <malloc>:
    1b32:	0f 93       	push	r16
    1b34:	1f 93       	push	r17
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	82 30       	cpi	r24, 0x02	; 2
    1b3c:	91 05       	cpc	r25, r1
    1b3e:	10 f4       	brcc	.+4      	; 0x1b44 <malloc+0x12>
    1b40:	82 e0       	ldi	r24, 0x02	; 2
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <__flp>
    1b48:	f0 91 3f 38 	lds	r31, 0x383F	; 0x80383f <__flp+0x1>
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	a0 e0       	ldi	r26, 0x00	; 0
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	30 97       	sbiw	r30, 0x00	; 0
    1b56:	19 f1       	breq	.+70     	; 0x1b9e <malloc+0x6c>
    1b58:	40 81       	ld	r20, Z
    1b5a:	51 81       	ldd	r21, Z+1	; 0x01
    1b5c:	02 81       	ldd	r16, Z+2	; 0x02
    1b5e:	13 81       	ldd	r17, Z+3	; 0x03
    1b60:	48 17       	cp	r20, r24
    1b62:	59 07       	cpc	r21, r25
    1b64:	c8 f0       	brcs	.+50     	; 0x1b98 <malloc+0x66>
    1b66:	84 17       	cp	r24, r20
    1b68:	95 07       	cpc	r25, r21
    1b6a:	69 f4       	brne	.+26     	; 0x1b86 <malloc+0x54>
    1b6c:	10 97       	sbiw	r26, 0x00	; 0
    1b6e:	31 f0       	breq	.+12     	; 0x1b7c <malloc+0x4a>
    1b70:	12 96       	adiw	r26, 0x02	; 2
    1b72:	0c 93       	st	X, r16
    1b74:	12 97       	sbiw	r26, 0x02	; 2
    1b76:	13 96       	adiw	r26, 0x03	; 3
    1b78:	1c 93       	st	X, r17
    1b7a:	27 c0       	rjmp	.+78     	; 0x1bca <malloc+0x98>
    1b7c:	00 93 3e 38 	sts	0x383E, r16	; 0x80383e <__flp>
    1b80:	10 93 3f 38 	sts	0x383F, r17	; 0x80383f <__flp+0x1>
    1b84:	22 c0       	rjmp	.+68     	; 0x1bca <malloc+0x98>
    1b86:	21 15       	cp	r18, r1
    1b88:	31 05       	cpc	r19, r1
    1b8a:	19 f0       	breq	.+6      	; 0x1b92 <malloc+0x60>
    1b8c:	42 17       	cp	r20, r18
    1b8e:	53 07       	cpc	r21, r19
    1b90:	18 f4       	brcc	.+6      	; 0x1b98 <malloc+0x66>
    1b92:	9a 01       	movw	r18, r20
    1b94:	bd 01       	movw	r22, r26
    1b96:	ef 01       	movw	r28, r30
    1b98:	df 01       	movw	r26, r30
    1b9a:	f8 01       	movw	r30, r16
    1b9c:	db cf       	rjmp	.-74     	; 0x1b54 <malloc+0x22>
    1b9e:	21 15       	cp	r18, r1
    1ba0:	31 05       	cpc	r19, r1
    1ba2:	f9 f0       	breq	.+62     	; 0x1be2 <malloc+0xb0>
    1ba4:	28 1b       	sub	r18, r24
    1ba6:	39 0b       	sbc	r19, r25
    1ba8:	24 30       	cpi	r18, 0x04	; 4
    1baa:	31 05       	cpc	r19, r1
    1bac:	80 f4       	brcc	.+32     	; 0x1bce <malloc+0x9c>
    1bae:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb0:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb2:	61 15       	cp	r22, r1
    1bb4:	71 05       	cpc	r23, r1
    1bb6:	21 f0       	breq	.+8      	; 0x1bc0 <malloc+0x8e>
    1bb8:	fb 01       	movw	r30, r22
    1bba:	82 83       	std	Z+2, r24	; 0x02
    1bbc:	93 83       	std	Z+3, r25	; 0x03
    1bbe:	04 c0       	rjmp	.+8      	; 0x1bc8 <malloc+0x96>
    1bc0:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <__flp>
    1bc4:	90 93 3f 38 	sts	0x383F, r25	; 0x80383f <__flp+0x1>
    1bc8:	fe 01       	movw	r30, r28
    1bca:	32 96       	adiw	r30, 0x02	; 2
    1bcc:	44 c0       	rjmp	.+136    	; 0x1c56 <malloc+0x124>
    1bce:	fe 01       	movw	r30, r28
    1bd0:	e2 0f       	add	r30, r18
    1bd2:	f3 1f       	adc	r31, r19
    1bd4:	81 93       	st	Z+, r24
    1bd6:	91 93       	st	Z+, r25
    1bd8:	22 50       	subi	r18, 0x02	; 2
    1bda:	31 09       	sbc	r19, r1
    1bdc:	28 83       	st	Y, r18
    1bde:	39 83       	std	Y+1, r19	; 0x01
    1be0:	3a c0       	rjmp	.+116    	; 0x1c56 <malloc+0x124>
    1be2:	20 91 3c 38 	lds	r18, 0x383C	; 0x80383c <__brkval>
    1be6:	30 91 3d 38 	lds	r19, 0x383D	; 0x80383d <__brkval+0x1>
    1bea:	23 2b       	or	r18, r19
    1bec:	41 f4       	brne	.+16     	; 0x1bfe <malloc+0xcc>
    1bee:	20 91 02 38 	lds	r18, 0x3802	; 0x803802 <__malloc_heap_start>
    1bf2:	30 91 03 38 	lds	r19, 0x3803	; 0x803803 <__malloc_heap_start+0x1>
    1bf6:	20 93 3c 38 	sts	0x383C, r18	; 0x80383c <__brkval>
    1bfa:	30 93 3d 38 	sts	0x383D, r19	; 0x80383d <__brkval+0x1>
    1bfe:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__data_start>
    1c02:	30 91 01 38 	lds	r19, 0x3801	; 0x803801 <__data_start+0x1>
    1c06:	21 15       	cp	r18, r1
    1c08:	31 05       	cpc	r19, r1
    1c0a:	41 f4       	brne	.+16     	; 0x1c1c <malloc+0xea>
    1c0c:	2d b7       	in	r18, 0x3d	; 61
    1c0e:	3e b7       	in	r19, 0x3e	; 62
    1c10:	40 91 04 38 	lds	r20, 0x3804	; 0x803804 <__malloc_margin>
    1c14:	50 91 05 38 	lds	r21, 0x3805	; 0x803805 <__malloc_margin+0x1>
    1c18:	24 1b       	sub	r18, r20
    1c1a:	35 0b       	sbc	r19, r21
    1c1c:	e0 91 3c 38 	lds	r30, 0x383C	; 0x80383c <__brkval>
    1c20:	f0 91 3d 38 	lds	r31, 0x383D	; 0x80383d <__brkval+0x1>
    1c24:	e2 17       	cp	r30, r18
    1c26:	f3 07       	cpc	r31, r19
    1c28:	a0 f4       	brcc	.+40     	; 0x1c52 <malloc+0x120>
    1c2a:	2e 1b       	sub	r18, r30
    1c2c:	3f 0b       	sbc	r19, r31
    1c2e:	28 17       	cp	r18, r24
    1c30:	39 07       	cpc	r19, r25
    1c32:	78 f0       	brcs	.+30     	; 0x1c52 <malloc+0x120>
    1c34:	ac 01       	movw	r20, r24
    1c36:	4e 5f       	subi	r20, 0xFE	; 254
    1c38:	5f 4f       	sbci	r21, 0xFF	; 255
    1c3a:	24 17       	cp	r18, r20
    1c3c:	35 07       	cpc	r19, r21
    1c3e:	48 f0       	brcs	.+18     	; 0x1c52 <malloc+0x120>
    1c40:	4e 0f       	add	r20, r30
    1c42:	5f 1f       	adc	r21, r31
    1c44:	40 93 3c 38 	sts	0x383C, r20	; 0x80383c <__brkval>
    1c48:	50 93 3d 38 	sts	0x383D, r21	; 0x80383d <__brkval+0x1>
    1c4c:	81 93       	st	Z+, r24
    1c4e:	91 93       	st	Z+, r25
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <malloc+0x124>
    1c52:	e0 e0       	ldi	r30, 0x00	; 0
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	cf 01       	movw	r24, r30
    1c58:	df 91       	pop	r29
    1c5a:	cf 91       	pop	r28
    1c5c:	1f 91       	pop	r17
    1c5e:	0f 91       	pop	r16
    1c60:	08 95       	ret

00001c62 <free>:
    1c62:	cf 93       	push	r28
    1c64:	df 93       	push	r29
    1c66:	00 97       	sbiw	r24, 0x00	; 0
    1c68:	09 f4       	brne	.+2      	; 0x1c6c <free+0xa>
    1c6a:	81 c0       	rjmp	.+258    	; 0x1d6e <free+0x10c>
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	32 97       	sbiw	r30, 0x02	; 2
    1c70:	12 82       	std	Z+2, r1	; 0x02
    1c72:	13 82       	std	Z+3, r1	; 0x03
    1c74:	a0 91 3e 38 	lds	r26, 0x383E	; 0x80383e <__flp>
    1c78:	b0 91 3f 38 	lds	r27, 0x383F	; 0x80383f <__flp+0x1>
    1c7c:	10 97       	sbiw	r26, 0x00	; 0
    1c7e:	81 f4       	brne	.+32     	; 0x1ca0 <free+0x3e>
    1c80:	20 81       	ld	r18, Z
    1c82:	31 81       	ldd	r19, Z+1	; 0x01
    1c84:	82 0f       	add	r24, r18
    1c86:	93 1f       	adc	r25, r19
    1c88:	20 91 3c 38 	lds	r18, 0x383C	; 0x80383c <__brkval>
    1c8c:	30 91 3d 38 	lds	r19, 0x383D	; 0x80383d <__brkval+0x1>
    1c90:	28 17       	cp	r18, r24
    1c92:	39 07       	cpc	r19, r25
    1c94:	51 f5       	brne	.+84     	; 0x1cea <free+0x88>
    1c96:	e0 93 3c 38 	sts	0x383C, r30	; 0x80383c <__brkval>
    1c9a:	f0 93 3d 38 	sts	0x383D, r31	; 0x80383d <__brkval+0x1>
    1c9e:	67 c0       	rjmp	.+206    	; 0x1d6e <free+0x10c>
    1ca0:	ed 01       	movw	r28, r26
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	ce 17       	cp	r28, r30
    1ca8:	df 07       	cpc	r29, r31
    1caa:	40 f4       	brcc	.+16     	; 0x1cbc <free+0x5a>
    1cac:	4a 81       	ldd	r20, Y+2	; 0x02
    1cae:	5b 81       	ldd	r21, Y+3	; 0x03
    1cb0:	9e 01       	movw	r18, r28
    1cb2:	41 15       	cp	r20, r1
    1cb4:	51 05       	cpc	r21, r1
    1cb6:	f1 f0       	breq	.+60     	; 0x1cf4 <free+0x92>
    1cb8:	ea 01       	movw	r28, r20
    1cba:	f5 cf       	rjmp	.-22     	; 0x1ca6 <free+0x44>
    1cbc:	c2 83       	std	Z+2, r28	; 0x02
    1cbe:	d3 83       	std	Z+3, r29	; 0x03
    1cc0:	40 81       	ld	r20, Z
    1cc2:	51 81       	ldd	r21, Z+1	; 0x01
    1cc4:	84 0f       	add	r24, r20
    1cc6:	95 1f       	adc	r25, r21
    1cc8:	c8 17       	cp	r28, r24
    1cca:	d9 07       	cpc	r29, r25
    1ccc:	59 f4       	brne	.+22     	; 0x1ce4 <free+0x82>
    1cce:	88 81       	ld	r24, Y
    1cd0:	99 81       	ldd	r25, Y+1	; 0x01
    1cd2:	84 0f       	add	r24, r20
    1cd4:	95 1f       	adc	r25, r21
    1cd6:	02 96       	adiw	r24, 0x02	; 2
    1cd8:	80 83       	st	Z, r24
    1cda:	91 83       	std	Z+1, r25	; 0x01
    1cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cde:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce0:	82 83       	std	Z+2, r24	; 0x02
    1ce2:	93 83       	std	Z+3, r25	; 0x03
    1ce4:	21 15       	cp	r18, r1
    1ce6:	31 05       	cpc	r19, r1
    1ce8:	29 f4       	brne	.+10     	; 0x1cf4 <free+0x92>
    1cea:	e0 93 3e 38 	sts	0x383E, r30	; 0x80383e <__flp>
    1cee:	f0 93 3f 38 	sts	0x383F, r31	; 0x80383f <__flp+0x1>
    1cf2:	3d c0       	rjmp	.+122    	; 0x1d6e <free+0x10c>
    1cf4:	e9 01       	movw	r28, r18
    1cf6:	ea 83       	std	Y+2, r30	; 0x02
    1cf8:	fb 83       	std	Y+3, r31	; 0x03
    1cfa:	49 91       	ld	r20, Y+
    1cfc:	59 91       	ld	r21, Y+
    1cfe:	c4 0f       	add	r28, r20
    1d00:	d5 1f       	adc	r29, r21
    1d02:	ec 17       	cp	r30, r28
    1d04:	fd 07       	cpc	r31, r29
    1d06:	61 f4       	brne	.+24     	; 0x1d20 <free+0xbe>
    1d08:	80 81       	ld	r24, Z
    1d0a:	91 81       	ldd	r25, Z+1	; 0x01
    1d0c:	84 0f       	add	r24, r20
    1d0e:	95 1f       	adc	r25, r21
    1d10:	02 96       	adiw	r24, 0x02	; 2
    1d12:	e9 01       	movw	r28, r18
    1d14:	88 83       	st	Y, r24
    1d16:	99 83       	std	Y+1, r25	; 0x01
    1d18:	82 81       	ldd	r24, Z+2	; 0x02
    1d1a:	93 81       	ldd	r25, Z+3	; 0x03
    1d1c:	8a 83       	std	Y+2, r24	; 0x02
    1d1e:	9b 83       	std	Y+3, r25	; 0x03
    1d20:	e0 e0       	ldi	r30, 0x00	; 0
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	12 96       	adiw	r26, 0x02	; 2
    1d26:	8d 91       	ld	r24, X+
    1d28:	9c 91       	ld	r25, X
    1d2a:	13 97       	sbiw	r26, 0x03	; 3
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	19 f0       	breq	.+6      	; 0x1d36 <free+0xd4>
    1d30:	fd 01       	movw	r30, r26
    1d32:	dc 01       	movw	r26, r24
    1d34:	f7 cf       	rjmp	.-18     	; 0x1d24 <free+0xc2>
    1d36:	8d 91       	ld	r24, X+
    1d38:	9c 91       	ld	r25, X
    1d3a:	11 97       	sbiw	r26, 0x01	; 1
    1d3c:	9d 01       	movw	r18, r26
    1d3e:	2e 5f       	subi	r18, 0xFE	; 254
    1d40:	3f 4f       	sbci	r19, 0xFF	; 255
    1d42:	82 0f       	add	r24, r18
    1d44:	93 1f       	adc	r25, r19
    1d46:	20 91 3c 38 	lds	r18, 0x383C	; 0x80383c <__brkval>
    1d4a:	30 91 3d 38 	lds	r19, 0x383D	; 0x80383d <__brkval+0x1>
    1d4e:	28 17       	cp	r18, r24
    1d50:	39 07       	cpc	r19, r25
    1d52:	69 f4       	brne	.+26     	; 0x1d6e <free+0x10c>
    1d54:	30 97       	sbiw	r30, 0x00	; 0
    1d56:	29 f4       	brne	.+10     	; 0x1d62 <free+0x100>
    1d58:	10 92 3e 38 	sts	0x383E, r1	; 0x80383e <__flp>
    1d5c:	10 92 3f 38 	sts	0x383F, r1	; 0x80383f <__flp+0x1>
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <free+0x104>
    1d62:	12 82       	std	Z+2, r1	; 0x02
    1d64:	13 82       	std	Z+3, r1	; 0x03
    1d66:	a0 93 3c 38 	sts	0x383C, r26	; 0x80383c <__brkval>
    1d6a:	b0 93 3d 38 	sts	0x383D, r27	; 0x80383d <__brkval+0x1>
    1d6e:	df 91       	pop	r29
    1d70:	cf 91       	pop	r28
    1d72:	08 95       	ret

00001d74 <snprintf>:
    1d74:	ae e0       	ldi	r26, 0x0E	; 14
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	e0 ec       	ldi	r30, 0xC0	; 192
    1d7a:	fe e0       	ldi	r31, 0x0E	; 14
    1d7c:	0c 94 89 11 	jmp	0x2312	; 0x2312 <__prologue_saves__+0x1c>
    1d80:	0d 89       	ldd	r16, Y+21	; 0x15
    1d82:	1e 89       	ldd	r17, Y+22	; 0x16
    1d84:	8f 89       	ldd	r24, Y+23	; 0x17
    1d86:	98 8d       	ldd	r25, Y+24	; 0x18
    1d88:	26 e0       	ldi	r18, 0x06	; 6
    1d8a:	2c 83       	std	Y+4, r18	; 0x04
    1d8c:	09 83       	std	Y+1, r16	; 0x01
    1d8e:	1a 83       	std	Y+2, r17	; 0x02
    1d90:	97 ff       	sbrs	r25, 7
    1d92:	02 c0       	rjmp	.+4      	; 0x1d98 <snprintf+0x24>
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	90 e8       	ldi	r25, 0x80	; 128
    1d98:	01 97       	sbiw	r24, 0x01	; 1
    1d9a:	8d 83       	std	Y+5, r24	; 0x05
    1d9c:	9e 83       	std	Y+6, r25	; 0x06
    1d9e:	ae 01       	movw	r20, r28
    1da0:	45 5e       	subi	r20, 0xE5	; 229
    1da2:	5f 4f       	sbci	r21, 0xFF	; 255
    1da4:	69 8d       	ldd	r22, Y+25	; 0x19
    1da6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1da8:	ce 01       	movw	r24, r28
    1daa:	01 96       	adiw	r24, 0x01	; 1
    1dac:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <vfprintf>
    1db0:	4d 81       	ldd	r20, Y+5	; 0x05
    1db2:	5e 81       	ldd	r21, Y+6	; 0x06
    1db4:	57 fd       	sbrc	r21, 7
    1db6:	0a c0       	rjmp	.+20     	; 0x1dcc <snprintf+0x58>
    1db8:	2f 81       	ldd	r18, Y+7	; 0x07
    1dba:	38 85       	ldd	r19, Y+8	; 0x08
    1dbc:	42 17       	cp	r20, r18
    1dbe:	53 07       	cpc	r21, r19
    1dc0:	0c f4       	brge	.+2      	; 0x1dc4 <snprintf+0x50>
    1dc2:	9a 01       	movw	r18, r20
    1dc4:	f8 01       	movw	r30, r16
    1dc6:	e2 0f       	add	r30, r18
    1dc8:	f3 1f       	adc	r31, r19
    1dca:	10 82       	st	Z, r1
    1dcc:	2e 96       	adiw	r28, 0x0e	; 14
    1dce:	e4 e0       	ldi	r30, 0x04	; 4
    1dd0:	0c 94 a2 11 	jmp	0x2344	; 0x2344 <__epilogue_restores__+0x1c>

00001dd4 <vfprintf>:
    1dd4:	ab e0       	ldi	r26, 0x0B	; 11
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e0 ef       	ldi	r30, 0xF0	; 240
    1dda:	fe e0       	ldi	r31, 0x0E	; 14
    1ddc:	0c 94 7b 11 	jmp	0x22f6	; 0x22f6 <__prologue_saves__>
    1de0:	6c 01       	movw	r12, r24
    1de2:	7b 01       	movw	r14, r22
    1de4:	8a 01       	movw	r16, r20
    1de6:	fc 01       	movw	r30, r24
    1de8:	16 82       	std	Z+6, r1	; 0x06
    1dea:	17 82       	std	Z+7, r1	; 0x07
    1dec:	83 81       	ldd	r24, Z+3	; 0x03
    1dee:	81 ff       	sbrs	r24, 1
    1df0:	cc c1       	rjmp	.+920    	; 0x218a <vfprintf+0x3b6>
    1df2:	ce 01       	movw	r24, r28
    1df4:	01 96       	adiw	r24, 0x01	; 1
    1df6:	3c 01       	movw	r6, r24
    1df8:	f6 01       	movw	r30, r12
    1dfa:	93 81       	ldd	r25, Z+3	; 0x03
    1dfc:	f7 01       	movw	r30, r14
    1dfe:	93 fd       	sbrc	r25, 3
    1e00:	85 91       	lpm	r24, Z+
    1e02:	93 ff       	sbrs	r25, 3
    1e04:	81 91       	ld	r24, Z+
    1e06:	7f 01       	movw	r14, r30
    1e08:	88 23       	and	r24, r24
    1e0a:	09 f4       	brne	.+2      	; 0x1e0e <vfprintf+0x3a>
    1e0c:	ba c1       	rjmp	.+884    	; 0x2182 <vfprintf+0x3ae>
    1e0e:	85 32       	cpi	r24, 0x25	; 37
    1e10:	39 f4       	brne	.+14     	; 0x1e20 <vfprintf+0x4c>
    1e12:	93 fd       	sbrc	r25, 3
    1e14:	85 91       	lpm	r24, Z+
    1e16:	93 ff       	sbrs	r25, 3
    1e18:	81 91       	ld	r24, Z+
    1e1a:	7f 01       	movw	r14, r30
    1e1c:	85 32       	cpi	r24, 0x25	; 37
    1e1e:	29 f4       	brne	.+10     	; 0x1e2a <vfprintf+0x56>
    1e20:	b6 01       	movw	r22, r12
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <fputc>
    1e28:	e7 cf       	rjmp	.-50     	; 0x1df8 <vfprintf+0x24>
    1e2a:	91 2c       	mov	r9, r1
    1e2c:	21 2c       	mov	r2, r1
    1e2e:	31 2c       	mov	r3, r1
    1e30:	ff e1       	ldi	r31, 0x1F	; 31
    1e32:	f3 15       	cp	r31, r3
    1e34:	d8 f0       	brcs	.+54     	; 0x1e6c <vfprintf+0x98>
    1e36:	8b 32       	cpi	r24, 0x2B	; 43
    1e38:	79 f0       	breq	.+30     	; 0x1e58 <vfprintf+0x84>
    1e3a:	38 f4       	brcc	.+14     	; 0x1e4a <vfprintf+0x76>
    1e3c:	80 32       	cpi	r24, 0x20	; 32
    1e3e:	79 f0       	breq	.+30     	; 0x1e5e <vfprintf+0x8a>
    1e40:	83 32       	cpi	r24, 0x23	; 35
    1e42:	a1 f4       	brne	.+40     	; 0x1e6c <vfprintf+0x98>
    1e44:	23 2d       	mov	r18, r3
    1e46:	20 61       	ori	r18, 0x10	; 16
    1e48:	1d c0       	rjmp	.+58     	; 0x1e84 <vfprintf+0xb0>
    1e4a:	8d 32       	cpi	r24, 0x2D	; 45
    1e4c:	61 f0       	breq	.+24     	; 0x1e66 <vfprintf+0x92>
    1e4e:	80 33       	cpi	r24, 0x30	; 48
    1e50:	69 f4       	brne	.+26     	; 0x1e6c <vfprintf+0x98>
    1e52:	23 2d       	mov	r18, r3
    1e54:	21 60       	ori	r18, 0x01	; 1
    1e56:	16 c0       	rjmp	.+44     	; 0x1e84 <vfprintf+0xb0>
    1e58:	83 2d       	mov	r24, r3
    1e5a:	82 60       	ori	r24, 0x02	; 2
    1e5c:	38 2e       	mov	r3, r24
    1e5e:	e3 2d       	mov	r30, r3
    1e60:	e4 60       	ori	r30, 0x04	; 4
    1e62:	3e 2e       	mov	r3, r30
    1e64:	2a c0       	rjmp	.+84     	; 0x1eba <vfprintf+0xe6>
    1e66:	f3 2d       	mov	r31, r3
    1e68:	f8 60       	ori	r31, 0x08	; 8
    1e6a:	1d c0       	rjmp	.+58     	; 0x1ea6 <vfprintf+0xd2>
    1e6c:	37 fc       	sbrc	r3, 7
    1e6e:	2d c0       	rjmp	.+90     	; 0x1eca <vfprintf+0xf6>
    1e70:	20 ed       	ldi	r18, 0xD0	; 208
    1e72:	28 0f       	add	r18, r24
    1e74:	2a 30       	cpi	r18, 0x0A	; 10
    1e76:	40 f0       	brcs	.+16     	; 0x1e88 <vfprintf+0xb4>
    1e78:	8e 32       	cpi	r24, 0x2E	; 46
    1e7a:	b9 f4       	brne	.+46     	; 0x1eaa <vfprintf+0xd6>
    1e7c:	36 fc       	sbrc	r3, 6
    1e7e:	81 c1       	rjmp	.+770    	; 0x2182 <vfprintf+0x3ae>
    1e80:	23 2d       	mov	r18, r3
    1e82:	20 64       	ori	r18, 0x40	; 64
    1e84:	32 2e       	mov	r3, r18
    1e86:	19 c0       	rjmp	.+50     	; 0x1eba <vfprintf+0xe6>
    1e88:	36 fe       	sbrs	r3, 6
    1e8a:	06 c0       	rjmp	.+12     	; 0x1e98 <vfprintf+0xc4>
    1e8c:	8a e0       	ldi	r24, 0x0A	; 10
    1e8e:	98 9e       	mul	r9, r24
    1e90:	20 0d       	add	r18, r0
    1e92:	11 24       	eor	r1, r1
    1e94:	92 2e       	mov	r9, r18
    1e96:	11 c0       	rjmp	.+34     	; 0x1eba <vfprintf+0xe6>
    1e98:	ea e0       	ldi	r30, 0x0A	; 10
    1e9a:	2e 9e       	mul	r2, r30
    1e9c:	20 0d       	add	r18, r0
    1e9e:	11 24       	eor	r1, r1
    1ea0:	22 2e       	mov	r2, r18
    1ea2:	f3 2d       	mov	r31, r3
    1ea4:	f0 62       	ori	r31, 0x20	; 32
    1ea6:	3f 2e       	mov	r3, r31
    1ea8:	08 c0       	rjmp	.+16     	; 0x1eba <vfprintf+0xe6>
    1eaa:	8c 36       	cpi	r24, 0x6C	; 108
    1eac:	21 f4       	brne	.+8      	; 0x1eb6 <vfprintf+0xe2>
    1eae:	83 2d       	mov	r24, r3
    1eb0:	80 68       	ori	r24, 0x80	; 128
    1eb2:	38 2e       	mov	r3, r24
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <vfprintf+0xe6>
    1eb6:	88 36       	cpi	r24, 0x68	; 104
    1eb8:	41 f4       	brne	.+16     	; 0x1eca <vfprintf+0xf6>
    1eba:	f7 01       	movw	r30, r14
    1ebc:	93 fd       	sbrc	r25, 3
    1ebe:	85 91       	lpm	r24, Z+
    1ec0:	93 ff       	sbrs	r25, 3
    1ec2:	81 91       	ld	r24, Z+
    1ec4:	7f 01       	movw	r14, r30
    1ec6:	81 11       	cpse	r24, r1
    1ec8:	b3 cf       	rjmp	.-154    	; 0x1e30 <vfprintf+0x5c>
    1eca:	98 2f       	mov	r25, r24
    1ecc:	9f 7d       	andi	r25, 0xDF	; 223
    1ece:	95 54       	subi	r25, 0x45	; 69
    1ed0:	93 30       	cpi	r25, 0x03	; 3
    1ed2:	28 f4       	brcc	.+10     	; 0x1ede <vfprintf+0x10a>
    1ed4:	0c 5f       	subi	r16, 0xFC	; 252
    1ed6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed8:	9f e3       	ldi	r25, 0x3F	; 63
    1eda:	99 83       	std	Y+1, r25	; 0x01
    1edc:	0d c0       	rjmp	.+26     	; 0x1ef8 <vfprintf+0x124>
    1ede:	83 36       	cpi	r24, 0x63	; 99
    1ee0:	31 f0       	breq	.+12     	; 0x1eee <vfprintf+0x11a>
    1ee2:	83 37       	cpi	r24, 0x73	; 115
    1ee4:	71 f0       	breq	.+28     	; 0x1f02 <vfprintf+0x12e>
    1ee6:	83 35       	cpi	r24, 0x53	; 83
    1ee8:	09 f0       	breq	.+2      	; 0x1eec <vfprintf+0x118>
    1eea:	59 c0       	rjmp	.+178    	; 0x1f9e <vfprintf+0x1ca>
    1eec:	21 c0       	rjmp	.+66     	; 0x1f30 <vfprintf+0x15c>
    1eee:	f8 01       	movw	r30, r16
    1ef0:	80 81       	ld	r24, Z
    1ef2:	89 83       	std	Y+1, r24	; 0x01
    1ef4:	0e 5f       	subi	r16, 0xFE	; 254
    1ef6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef8:	88 24       	eor	r8, r8
    1efa:	83 94       	inc	r8
    1efc:	91 2c       	mov	r9, r1
    1efe:	53 01       	movw	r10, r6
    1f00:	13 c0       	rjmp	.+38     	; 0x1f28 <vfprintf+0x154>
    1f02:	28 01       	movw	r4, r16
    1f04:	f2 e0       	ldi	r31, 0x02	; 2
    1f06:	4f 0e       	add	r4, r31
    1f08:	51 1c       	adc	r5, r1
    1f0a:	f8 01       	movw	r30, r16
    1f0c:	a0 80       	ld	r10, Z
    1f0e:	b1 80       	ldd	r11, Z+1	; 0x01
    1f10:	36 fe       	sbrs	r3, 6
    1f12:	03 c0       	rjmp	.+6      	; 0x1f1a <vfprintf+0x146>
    1f14:	69 2d       	mov	r22, r9
    1f16:	70 e0       	ldi	r23, 0x00	; 0
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <vfprintf+0x14a>
    1f1a:	6f ef       	ldi	r22, 0xFF	; 255
    1f1c:	7f ef       	ldi	r23, 0xFF	; 255
    1f1e:	c5 01       	movw	r24, r10
    1f20:	0e 94 d6 10 	call	0x21ac	; 0x21ac <strnlen>
    1f24:	4c 01       	movw	r8, r24
    1f26:	82 01       	movw	r16, r4
    1f28:	f3 2d       	mov	r31, r3
    1f2a:	ff 77       	andi	r31, 0x7F	; 127
    1f2c:	3f 2e       	mov	r3, r31
    1f2e:	16 c0       	rjmp	.+44     	; 0x1f5c <vfprintf+0x188>
    1f30:	28 01       	movw	r4, r16
    1f32:	22 e0       	ldi	r18, 0x02	; 2
    1f34:	42 0e       	add	r4, r18
    1f36:	51 1c       	adc	r5, r1
    1f38:	f8 01       	movw	r30, r16
    1f3a:	a0 80       	ld	r10, Z
    1f3c:	b1 80       	ldd	r11, Z+1	; 0x01
    1f3e:	36 fe       	sbrs	r3, 6
    1f40:	03 c0       	rjmp	.+6      	; 0x1f48 <vfprintf+0x174>
    1f42:	69 2d       	mov	r22, r9
    1f44:	70 e0       	ldi	r23, 0x00	; 0
    1f46:	02 c0       	rjmp	.+4      	; 0x1f4c <vfprintf+0x178>
    1f48:	6f ef       	ldi	r22, 0xFF	; 255
    1f4a:	7f ef       	ldi	r23, 0xFF	; 255
    1f4c:	c5 01       	movw	r24, r10
    1f4e:	0e 94 cb 10 	call	0x2196	; 0x2196 <strnlen_P>
    1f52:	4c 01       	movw	r8, r24
    1f54:	f3 2d       	mov	r31, r3
    1f56:	f0 68       	ori	r31, 0x80	; 128
    1f58:	3f 2e       	mov	r3, r31
    1f5a:	82 01       	movw	r16, r4
    1f5c:	33 fc       	sbrc	r3, 3
    1f5e:	1b c0       	rjmp	.+54     	; 0x1f96 <vfprintf+0x1c2>
    1f60:	82 2d       	mov	r24, r2
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	88 16       	cp	r8, r24
    1f66:	99 06       	cpc	r9, r25
    1f68:	b0 f4       	brcc	.+44     	; 0x1f96 <vfprintf+0x1c2>
    1f6a:	b6 01       	movw	r22, r12
    1f6c:	80 e2       	ldi	r24, 0x20	; 32
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <fputc>
    1f74:	2a 94       	dec	r2
    1f76:	f4 cf       	rjmp	.-24     	; 0x1f60 <vfprintf+0x18c>
    1f78:	f5 01       	movw	r30, r10
    1f7a:	37 fc       	sbrc	r3, 7
    1f7c:	85 91       	lpm	r24, Z+
    1f7e:	37 fe       	sbrs	r3, 7
    1f80:	81 91       	ld	r24, Z+
    1f82:	5f 01       	movw	r10, r30
    1f84:	b6 01       	movw	r22, r12
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <fputc>
    1f8c:	21 10       	cpse	r2, r1
    1f8e:	2a 94       	dec	r2
    1f90:	21 e0       	ldi	r18, 0x01	; 1
    1f92:	82 1a       	sub	r8, r18
    1f94:	91 08       	sbc	r9, r1
    1f96:	81 14       	cp	r8, r1
    1f98:	91 04       	cpc	r9, r1
    1f9a:	71 f7       	brne	.-36     	; 0x1f78 <vfprintf+0x1a4>
    1f9c:	e8 c0       	rjmp	.+464    	; 0x216e <vfprintf+0x39a>
    1f9e:	84 36       	cpi	r24, 0x64	; 100
    1fa0:	11 f0       	breq	.+4      	; 0x1fa6 <vfprintf+0x1d2>
    1fa2:	89 36       	cpi	r24, 0x69	; 105
    1fa4:	41 f5       	brne	.+80     	; 0x1ff6 <vfprintf+0x222>
    1fa6:	f8 01       	movw	r30, r16
    1fa8:	37 fe       	sbrs	r3, 7
    1faa:	07 c0       	rjmp	.+14     	; 0x1fba <vfprintf+0x1e6>
    1fac:	60 81       	ld	r22, Z
    1fae:	71 81       	ldd	r23, Z+1	; 0x01
    1fb0:	82 81       	ldd	r24, Z+2	; 0x02
    1fb2:	93 81       	ldd	r25, Z+3	; 0x03
    1fb4:	0c 5f       	subi	r16, 0xFC	; 252
    1fb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb8:	08 c0       	rjmp	.+16     	; 0x1fca <vfprintf+0x1f6>
    1fba:	60 81       	ld	r22, Z
    1fbc:	71 81       	ldd	r23, Z+1	; 0x01
    1fbe:	07 2e       	mov	r0, r23
    1fc0:	00 0c       	add	r0, r0
    1fc2:	88 0b       	sbc	r24, r24
    1fc4:	99 0b       	sbc	r25, r25
    1fc6:	0e 5f       	subi	r16, 0xFE	; 254
    1fc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fca:	f3 2d       	mov	r31, r3
    1fcc:	ff 76       	andi	r31, 0x6F	; 111
    1fce:	3f 2e       	mov	r3, r31
    1fd0:	97 ff       	sbrs	r25, 7
    1fd2:	09 c0       	rjmp	.+18     	; 0x1fe6 <vfprintf+0x212>
    1fd4:	90 95       	com	r25
    1fd6:	80 95       	com	r24
    1fd8:	70 95       	com	r23
    1fda:	61 95       	neg	r22
    1fdc:	7f 4f       	sbci	r23, 0xFF	; 255
    1fde:	8f 4f       	sbci	r24, 0xFF	; 255
    1fe0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe2:	f0 68       	ori	r31, 0x80	; 128
    1fe4:	3f 2e       	mov	r3, r31
    1fe6:	2a e0       	ldi	r18, 0x0A	; 10
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	a3 01       	movw	r20, r6
    1fec:	0e 94 1d 11 	call	0x223a	; 0x223a <__ultoa_invert>
    1ff0:	88 2e       	mov	r8, r24
    1ff2:	86 18       	sub	r8, r6
    1ff4:	45 c0       	rjmp	.+138    	; 0x2080 <vfprintf+0x2ac>
    1ff6:	85 37       	cpi	r24, 0x75	; 117
    1ff8:	31 f4       	brne	.+12     	; 0x2006 <vfprintf+0x232>
    1ffa:	23 2d       	mov	r18, r3
    1ffc:	2f 7e       	andi	r18, 0xEF	; 239
    1ffe:	b2 2e       	mov	r11, r18
    2000:	2a e0       	ldi	r18, 0x0A	; 10
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	25 c0       	rjmp	.+74     	; 0x2050 <vfprintf+0x27c>
    2006:	93 2d       	mov	r25, r3
    2008:	99 7f       	andi	r25, 0xF9	; 249
    200a:	b9 2e       	mov	r11, r25
    200c:	8f 36       	cpi	r24, 0x6F	; 111
    200e:	c1 f0       	breq	.+48     	; 0x2040 <vfprintf+0x26c>
    2010:	18 f4       	brcc	.+6      	; 0x2018 <vfprintf+0x244>
    2012:	88 35       	cpi	r24, 0x58	; 88
    2014:	79 f0       	breq	.+30     	; 0x2034 <vfprintf+0x260>
    2016:	b5 c0       	rjmp	.+362    	; 0x2182 <vfprintf+0x3ae>
    2018:	80 37       	cpi	r24, 0x70	; 112
    201a:	19 f0       	breq	.+6      	; 0x2022 <vfprintf+0x24e>
    201c:	88 37       	cpi	r24, 0x78	; 120
    201e:	21 f0       	breq	.+8      	; 0x2028 <vfprintf+0x254>
    2020:	b0 c0       	rjmp	.+352    	; 0x2182 <vfprintf+0x3ae>
    2022:	e9 2f       	mov	r30, r25
    2024:	e0 61       	ori	r30, 0x10	; 16
    2026:	be 2e       	mov	r11, r30
    2028:	b4 fe       	sbrs	r11, 4
    202a:	0d c0       	rjmp	.+26     	; 0x2046 <vfprintf+0x272>
    202c:	fb 2d       	mov	r31, r11
    202e:	f4 60       	ori	r31, 0x04	; 4
    2030:	bf 2e       	mov	r11, r31
    2032:	09 c0       	rjmp	.+18     	; 0x2046 <vfprintf+0x272>
    2034:	34 fe       	sbrs	r3, 4
    2036:	0a c0       	rjmp	.+20     	; 0x204c <vfprintf+0x278>
    2038:	29 2f       	mov	r18, r25
    203a:	26 60       	ori	r18, 0x06	; 6
    203c:	b2 2e       	mov	r11, r18
    203e:	06 c0       	rjmp	.+12     	; 0x204c <vfprintf+0x278>
    2040:	28 e0       	ldi	r18, 0x08	; 8
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	05 c0       	rjmp	.+10     	; 0x2050 <vfprintf+0x27c>
    2046:	20 e1       	ldi	r18, 0x10	; 16
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <vfprintf+0x27c>
    204c:	20 e1       	ldi	r18, 0x10	; 16
    204e:	32 e0       	ldi	r19, 0x02	; 2
    2050:	f8 01       	movw	r30, r16
    2052:	b7 fe       	sbrs	r11, 7
    2054:	07 c0       	rjmp	.+14     	; 0x2064 <vfprintf+0x290>
    2056:	60 81       	ld	r22, Z
    2058:	71 81       	ldd	r23, Z+1	; 0x01
    205a:	82 81       	ldd	r24, Z+2	; 0x02
    205c:	93 81       	ldd	r25, Z+3	; 0x03
    205e:	0c 5f       	subi	r16, 0xFC	; 252
    2060:	1f 4f       	sbci	r17, 0xFF	; 255
    2062:	06 c0       	rjmp	.+12     	; 0x2070 <vfprintf+0x29c>
    2064:	60 81       	ld	r22, Z
    2066:	71 81       	ldd	r23, Z+1	; 0x01
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	0e 5f       	subi	r16, 0xFE	; 254
    206e:	1f 4f       	sbci	r17, 0xFF	; 255
    2070:	a3 01       	movw	r20, r6
    2072:	0e 94 1d 11 	call	0x223a	; 0x223a <__ultoa_invert>
    2076:	88 2e       	mov	r8, r24
    2078:	86 18       	sub	r8, r6
    207a:	fb 2d       	mov	r31, r11
    207c:	ff 77       	andi	r31, 0x7F	; 127
    207e:	3f 2e       	mov	r3, r31
    2080:	36 fe       	sbrs	r3, 6
    2082:	0d c0       	rjmp	.+26     	; 0x209e <vfprintf+0x2ca>
    2084:	23 2d       	mov	r18, r3
    2086:	2e 7f       	andi	r18, 0xFE	; 254
    2088:	a2 2e       	mov	r10, r18
    208a:	89 14       	cp	r8, r9
    208c:	58 f4       	brcc	.+22     	; 0x20a4 <vfprintf+0x2d0>
    208e:	34 fe       	sbrs	r3, 4
    2090:	0b c0       	rjmp	.+22     	; 0x20a8 <vfprintf+0x2d4>
    2092:	32 fc       	sbrc	r3, 2
    2094:	09 c0       	rjmp	.+18     	; 0x20a8 <vfprintf+0x2d4>
    2096:	83 2d       	mov	r24, r3
    2098:	8e 7e       	andi	r24, 0xEE	; 238
    209a:	a8 2e       	mov	r10, r24
    209c:	05 c0       	rjmp	.+10     	; 0x20a8 <vfprintf+0x2d4>
    209e:	b8 2c       	mov	r11, r8
    20a0:	a3 2c       	mov	r10, r3
    20a2:	03 c0       	rjmp	.+6      	; 0x20aa <vfprintf+0x2d6>
    20a4:	b8 2c       	mov	r11, r8
    20a6:	01 c0       	rjmp	.+2      	; 0x20aa <vfprintf+0x2d6>
    20a8:	b9 2c       	mov	r11, r9
    20aa:	a4 fe       	sbrs	r10, 4
    20ac:	0f c0       	rjmp	.+30     	; 0x20cc <vfprintf+0x2f8>
    20ae:	fe 01       	movw	r30, r28
    20b0:	e8 0d       	add	r30, r8
    20b2:	f1 1d       	adc	r31, r1
    20b4:	80 81       	ld	r24, Z
    20b6:	80 33       	cpi	r24, 0x30	; 48
    20b8:	21 f4       	brne	.+8      	; 0x20c2 <vfprintf+0x2ee>
    20ba:	9a 2d       	mov	r25, r10
    20bc:	99 7e       	andi	r25, 0xE9	; 233
    20be:	a9 2e       	mov	r10, r25
    20c0:	09 c0       	rjmp	.+18     	; 0x20d4 <vfprintf+0x300>
    20c2:	a2 fe       	sbrs	r10, 2
    20c4:	06 c0       	rjmp	.+12     	; 0x20d2 <vfprintf+0x2fe>
    20c6:	b3 94       	inc	r11
    20c8:	b3 94       	inc	r11
    20ca:	04 c0       	rjmp	.+8      	; 0x20d4 <vfprintf+0x300>
    20cc:	8a 2d       	mov	r24, r10
    20ce:	86 78       	andi	r24, 0x86	; 134
    20d0:	09 f0       	breq	.+2      	; 0x20d4 <vfprintf+0x300>
    20d2:	b3 94       	inc	r11
    20d4:	a3 fc       	sbrc	r10, 3
    20d6:	11 c0       	rjmp	.+34     	; 0x20fa <vfprintf+0x326>
    20d8:	a0 fe       	sbrs	r10, 0
    20da:	06 c0       	rjmp	.+12     	; 0x20e8 <vfprintf+0x314>
    20dc:	b2 14       	cp	r11, r2
    20de:	88 f4       	brcc	.+34     	; 0x2102 <vfprintf+0x32e>
    20e0:	28 0c       	add	r2, r8
    20e2:	92 2c       	mov	r9, r2
    20e4:	9b 18       	sub	r9, r11
    20e6:	0e c0       	rjmp	.+28     	; 0x2104 <vfprintf+0x330>
    20e8:	b2 14       	cp	r11, r2
    20ea:	60 f4       	brcc	.+24     	; 0x2104 <vfprintf+0x330>
    20ec:	b6 01       	movw	r22, r12
    20ee:	80 e2       	ldi	r24, 0x20	; 32
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <fputc>
    20f6:	b3 94       	inc	r11
    20f8:	f7 cf       	rjmp	.-18     	; 0x20e8 <vfprintf+0x314>
    20fa:	b2 14       	cp	r11, r2
    20fc:	18 f4       	brcc	.+6      	; 0x2104 <vfprintf+0x330>
    20fe:	2b 18       	sub	r2, r11
    2100:	02 c0       	rjmp	.+4      	; 0x2106 <vfprintf+0x332>
    2102:	98 2c       	mov	r9, r8
    2104:	21 2c       	mov	r2, r1
    2106:	a4 fe       	sbrs	r10, 4
    2108:	10 c0       	rjmp	.+32     	; 0x212a <vfprintf+0x356>
    210a:	b6 01       	movw	r22, r12
    210c:	80 e3       	ldi	r24, 0x30	; 48
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <fputc>
    2114:	a2 fe       	sbrs	r10, 2
    2116:	17 c0       	rjmp	.+46     	; 0x2146 <vfprintf+0x372>
    2118:	a1 fc       	sbrc	r10, 1
    211a:	03 c0       	rjmp	.+6      	; 0x2122 <vfprintf+0x34e>
    211c:	88 e7       	ldi	r24, 0x78	; 120
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	02 c0       	rjmp	.+4      	; 0x2126 <vfprintf+0x352>
    2122:	88 e5       	ldi	r24, 0x58	; 88
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	b6 01       	movw	r22, r12
    2128:	0c c0       	rjmp	.+24     	; 0x2142 <vfprintf+0x36e>
    212a:	8a 2d       	mov	r24, r10
    212c:	86 78       	andi	r24, 0x86	; 134
    212e:	59 f0       	breq	.+22     	; 0x2146 <vfprintf+0x372>
    2130:	a1 fe       	sbrs	r10, 1
    2132:	02 c0       	rjmp	.+4      	; 0x2138 <vfprintf+0x364>
    2134:	8b e2       	ldi	r24, 0x2B	; 43
    2136:	01 c0       	rjmp	.+2      	; 0x213a <vfprintf+0x366>
    2138:	80 e2       	ldi	r24, 0x20	; 32
    213a:	a7 fc       	sbrc	r10, 7
    213c:	8d e2       	ldi	r24, 0x2D	; 45
    213e:	b6 01       	movw	r22, r12
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <fputc>
    2146:	89 14       	cp	r8, r9
    2148:	38 f4       	brcc	.+14     	; 0x2158 <vfprintf+0x384>
    214a:	b6 01       	movw	r22, r12
    214c:	80 e3       	ldi	r24, 0x30	; 48
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <fputc>
    2154:	9a 94       	dec	r9
    2156:	f7 cf       	rjmp	.-18     	; 0x2146 <vfprintf+0x372>
    2158:	8a 94       	dec	r8
    215a:	f3 01       	movw	r30, r6
    215c:	e8 0d       	add	r30, r8
    215e:	f1 1d       	adc	r31, r1
    2160:	80 81       	ld	r24, Z
    2162:	b6 01       	movw	r22, r12
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <fputc>
    216a:	81 10       	cpse	r8, r1
    216c:	f5 cf       	rjmp	.-22     	; 0x2158 <vfprintf+0x384>
    216e:	22 20       	and	r2, r2
    2170:	09 f4       	brne	.+2      	; 0x2174 <vfprintf+0x3a0>
    2172:	42 ce       	rjmp	.-892    	; 0x1df8 <vfprintf+0x24>
    2174:	b6 01       	movw	r22, r12
    2176:	80 e2       	ldi	r24, 0x20	; 32
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <fputc>
    217e:	2a 94       	dec	r2
    2180:	f6 cf       	rjmp	.-20     	; 0x216e <vfprintf+0x39a>
    2182:	f6 01       	movw	r30, r12
    2184:	86 81       	ldd	r24, Z+6	; 0x06
    2186:	97 81       	ldd	r25, Z+7	; 0x07
    2188:	02 c0       	rjmp	.+4      	; 0x218e <vfprintf+0x3ba>
    218a:	8f ef       	ldi	r24, 0xFF	; 255
    218c:	9f ef       	ldi	r25, 0xFF	; 255
    218e:	2b 96       	adiw	r28, 0x0b	; 11
    2190:	e2 e1       	ldi	r30, 0x12	; 18
    2192:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__epilogue_restores__>

00002196 <strnlen_P>:
    2196:	fc 01       	movw	r30, r24
    2198:	05 90       	lpm	r0, Z+
    219a:	61 50       	subi	r22, 0x01	; 1
    219c:	70 40       	sbci	r23, 0x00	; 0
    219e:	01 10       	cpse	r0, r1
    21a0:	d8 f7       	brcc	.-10     	; 0x2198 <strnlen_P+0x2>
    21a2:	80 95       	com	r24
    21a4:	90 95       	com	r25
    21a6:	8e 0f       	add	r24, r30
    21a8:	9f 1f       	adc	r25, r31
    21aa:	08 95       	ret

000021ac <strnlen>:
    21ac:	fc 01       	movw	r30, r24
    21ae:	61 50       	subi	r22, 0x01	; 1
    21b0:	70 40       	sbci	r23, 0x00	; 0
    21b2:	01 90       	ld	r0, Z+
    21b4:	01 10       	cpse	r0, r1
    21b6:	d8 f7       	brcc	.-10     	; 0x21ae <strnlen+0x2>
    21b8:	80 95       	com	r24
    21ba:	90 95       	com	r25
    21bc:	8e 0f       	add	r24, r30
    21be:	9f 1f       	adc	r25, r31
    21c0:	08 95       	ret

000021c2 <fputc>:
    21c2:	0f 93       	push	r16
    21c4:	1f 93       	push	r17
    21c6:	cf 93       	push	r28
    21c8:	df 93       	push	r29
    21ca:	fb 01       	movw	r30, r22
    21cc:	23 81       	ldd	r18, Z+3	; 0x03
    21ce:	21 fd       	sbrc	r18, 1
    21d0:	03 c0       	rjmp	.+6      	; 0x21d8 <fputc+0x16>
    21d2:	8f ef       	ldi	r24, 0xFF	; 255
    21d4:	9f ef       	ldi	r25, 0xFF	; 255
    21d6:	2c c0       	rjmp	.+88     	; 0x2230 <fputc+0x6e>
    21d8:	22 ff       	sbrs	r18, 2
    21da:	16 c0       	rjmp	.+44     	; 0x2208 <fputc+0x46>
    21dc:	46 81       	ldd	r20, Z+6	; 0x06
    21de:	57 81       	ldd	r21, Z+7	; 0x07
    21e0:	24 81       	ldd	r18, Z+4	; 0x04
    21e2:	35 81       	ldd	r19, Z+5	; 0x05
    21e4:	42 17       	cp	r20, r18
    21e6:	53 07       	cpc	r21, r19
    21e8:	44 f4       	brge	.+16     	; 0x21fa <fputc+0x38>
    21ea:	a0 81       	ld	r26, Z
    21ec:	b1 81       	ldd	r27, Z+1	; 0x01
    21ee:	9d 01       	movw	r18, r26
    21f0:	2f 5f       	subi	r18, 0xFF	; 255
    21f2:	3f 4f       	sbci	r19, 0xFF	; 255
    21f4:	20 83       	st	Z, r18
    21f6:	31 83       	std	Z+1, r19	; 0x01
    21f8:	8c 93       	st	X, r24
    21fa:	26 81       	ldd	r18, Z+6	; 0x06
    21fc:	37 81       	ldd	r19, Z+7	; 0x07
    21fe:	2f 5f       	subi	r18, 0xFF	; 255
    2200:	3f 4f       	sbci	r19, 0xFF	; 255
    2202:	26 83       	std	Z+6, r18	; 0x06
    2204:	37 83       	std	Z+7, r19	; 0x07
    2206:	14 c0       	rjmp	.+40     	; 0x2230 <fputc+0x6e>
    2208:	8b 01       	movw	r16, r22
    220a:	ec 01       	movw	r28, r24
    220c:	fb 01       	movw	r30, r22
    220e:	00 84       	ldd	r0, Z+8	; 0x08
    2210:	f1 85       	ldd	r31, Z+9	; 0x09
    2212:	e0 2d       	mov	r30, r0
    2214:	09 95       	icall
    2216:	89 2b       	or	r24, r25
    2218:	e1 f6       	brne	.-72     	; 0x21d2 <fputc+0x10>
    221a:	d8 01       	movw	r26, r16
    221c:	16 96       	adiw	r26, 0x06	; 6
    221e:	8d 91       	ld	r24, X+
    2220:	9c 91       	ld	r25, X
    2222:	17 97       	sbiw	r26, 0x07	; 7
    2224:	01 96       	adiw	r24, 0x01	; 1
    2226:	16 96       	adiw	r26, 0x06	; 6
    2228:	8d 93       	st	X+, r24
    222a:	9c 93       	st	X, r25
    222c:	17 97       	sbiw	r26, 0x07	; 7
    222e:	ce 01       	movw	r24, r28
    2230:	df 91       	pop	r29
    2232:	cf 91       	pop	r28
    2234:	1f 91       	pop	r17
    2236:	0f 91       	pop	r16
    2238:	08 95       	ret

0000223a <__ultoa_invert>:
    223a:	fa 01       	movw	r30, r20
    223c:	aa 27       	eor	r26, r26
    223e:	28 30       	cpi	r18, 0x08	; 8
    2240:	51 f1       	breq	.+84     	; 0x2296 <__ultoa_invert+0x5c>
    2242:	20 31       	cpi	r18, 0x10	; 16
    2244:	81 f1       	breq	.+96     	; 0x22a6 <__ultoa_invert+0x6c>
    2246:	e8 94       	clt
    2248:	6f 93       	push	r22
    224a:	6e 7f       	andi	r22, 0xFE	; 254
    224c:	6e 5f       	subi	r22, 0xFE	; 254
    224e:	7f 4f       	sbci	r23, 0xFF	; 255
    2250:	8f 4f       	sbci	r24, 0xFF	; 255
    2252:	9f 4f       	sbci	r25, 0xFF	; 255
    2254:	af 4f       	sbci	r26, 0xFF	; 255
    2256:	b1 e0       	ldi	r27, 0x01	; 1
    2258:	3e d0       	rcall	.+124    	; 0x22d6 <__ultoa_invert+0x9c>
    225a:	b4 e0       	ldi	r27, 0x04	; 4
    225c:	3c d0       	rcall	.+120    	; 0x22d6 <__ultoa_invert+0x9c>
    225e:	67 0f       	add	r22, r23
    2260:	78 1f       	adc	r23, r24
    2262:	89 1f       	adc	r24, r25
    2264:	9a 1f       	adc	r25, r26
    2266:	a1 1d       	adc	r26, r1
    2268:	68 0f       	add	r22, r24
    226a:	79 1f       	adc	r23, r25
    226c:	8a 1f       	adc	r24, r26
    226e:	91 1d       	adc	r25, r1
    2270:	a1 1d       	adc	r26, r1
    2272:	6a 0f       	add	r22, r26
    2274:	71 1d       	adc	r23, r1
    2276:	81 1d       	adc	r24, r1
    2278:	91 1d       	adc	r25, r1
    227a:	a1 1d       	adc	r26, r1
    227c:	20 d0       	rcall	.+64     	; 0x22be <__ultoa_invert+0x84>
    227e:	09 f4       	brne	.+2      	; 0x2282 <__ultoa_invert+0x48>
    2280:	68 94       	set
    2282:	3f 91       	pop	r19
    2284:	2a e0       	ldi	r18, 0x0A	; 10
    2286:	26 9f       	mul	r18, r22
    2288:	11 24       	eor	r1, r1
    228a:	30 19       	sub	r19, r0
    228c:	30 5d       	subi	r19, 0xD0	; 208
    228e:	31 93       	st	Z+, r19
    2290:	de f6       	brtc	.-74     	; 0x2248 <__ultoa_invert+0xe>
    2292:	cf 01       	movw	r24, r30
    2294:	08 95       	ret
    2296:	46 2f       	mov	r20, r22
    2298:	47 70       	andi	r20, 0x07	; 7
    229a:	40 5d       	subi	r20, 0xD0	; 208
    229c:	41 93       	st	Z+, r20
    229e:	b3 e0       	ldi	r27, 0x03	; 3
    22a0:	0f d0       	rcall	.+30     	; 0x22c0 <__ultoa_invert+0x86>
    22a2:	c9 f7       	brne	.-14     	; 0x2296 <__ultoa_invert+0x5c>
    22a4:	f6 cf       	rjmp	.-20     	; 0x2292 <__ultoa_invert+0x58>
    22a6:	46 2f       	mov	r20, r22
    22a8:	4f 70       	andi	r20, 0x0F	; 15
    22aa:	40 5d       	subi	r20, 0xD0	; 208
    22ac:	4a 33       	cpi	r20, 0x3A	; 58
    22ae:	18 f0       	brcs	.+6      	; 0x22b6 <__ultoa_invert+0x7c>
    22b0:	49 5d       	subi	r20, 0xD9	; 217
    22b2:	31 fd       	sbrc	r19, 1
    22b4:	40 52       	subi	r20, 0x20	; 32
    22b6:	41 93       	st	Z+, r20
    22b8:	02 d0       	rcall	.+4      	; 0x22be <__ultoa_invert+0x84>
    22ba:	a9 f7       	brne	.-22     	; 0x22a6 <__ultoa_invert+0x6c>
    22bc:	ea cf       	rjmp	.-44     	; 0x2292 <__ultoa_invert+0x58>
    22be:	b4 e0       	ldi	r27, 0x04	; 4
    22c0:	a6 95       	lsr	r26
    22c2:	97 95       	ror	r25
    22c4:	87 95       	ror	r24
    22c6:	77 95       	ror	r23
    22c8:	67 95       	ror	r22
    22ca:	ba 95       	dec	r27
    22cc:	c9 f7       	brne	.-14     	; 0x22c0 <__ultoa_invert+0x86>
    22ce:	00 97       	sbiw	r24, 0x00	; 0
    22d0:	61 05       	cpc	r22, r1
    22d2:	71 05       	cpc	r23, r1
    22d4:	08 95       	ret
    22d6:	9b 01       	movw	r18, r22
    22d8:	ac 01       	movw	r20, r24
    22da:	0a 2e       	mov	r0, r26
    22dc:	06 94       	lsr	r0
    22de:	57 95       	ror	r21
    22e0:	47 95       	ror	r20
    22e2:	37 95       	ror	r19
    22e4:	27 95       	ror	r18
    22e6:	ba 95       	dec	r27
    22e8:	c9 f7       	brne	.-14     	; 0x22dc <__ultoa_invert+0xa2>
    22ea:	62 0f       	add	r22, r18
    22ec:	73 1f       	adc	r23, r19
    22ee:	84 1f       	adc	r24, r20
    22f0:	95 1f       	adc	r25, r21
    22f2:	a0 1d       	adc	r26, r0
    22f4:	08 95       	ret

000022f6 <__prologue_saves__>:
    22f6:	2f 92       	push	r2
    22f8:	3f 92       	push	r3
    22fa:	4f 92       	push	r4
    22fc:	5f 92       	push	r5
    22fe:	6f 92       	push	r6
    2300:	7f 92       	push	r7
    2302:	8f 92       	push	r8
    2304:	9f 92       	push	r9
    2306:	af 92       	push	r10
    2308:	bf 92       	push	r11
    230a:	cf 92       	push	r12
    230c:	df 92       	push	r13
    230e:	ef 92       	push	r14
    2310:	ff 92       	push	r15
    2312:	0f 93       	push	r16
    2314:	1f 93       	push	r17
    2316:	cf 93       	push	r28
    2318:	df 93       	push	r29
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
    231e:	ca 1b       	sub	r28, r26
    2320:	db 0b       	sbc	r29, r27
    2322:	cd bf       	out	0x3d, r28	; 61
    2324:	de bf       	out	0x3e, r29	; 62
    2326:	09 94       	ijmp

00002328 <__epilogue_restores__>:
    2328:	2a 88       	ldd	r2, Y+18	; 0x12
    232a:	39 88       	ldd	r3, Y+17	; 0x11
    232c:	48 88       	ldd	r4, Y+16	; 0x10
    232e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2330:	6e 84       	ldd	r6, Y+14	; 0x0e
    2332:	7d 84       	ldd	r7, Y+13	; 0x0d
    2334:	8c 84       	ldd	r8, Y+12	; 0x0c
    2336:	9b 84       	ldd	r9, Y+11	; 0x0b
    2338:	aa 84       	ldd	r10, Y+10	; 0x0a
    233a:	b9 84       	ldd	r11, Y+9	; 0x09
    233c:	c8 84       	ldd	r12, Y+8	; 0x08
    233e:	df 80       	ldd	r13, Y+7	; 0x07
    2340:	ee 80       	ldd	r14, Y+6	; 0x06
    2342:	fd 80       	ldd	r15, Y+5	; 0x05
    2344:	0c 81       	ldd	r16, Y+4	; 0x04
    2346:	1b 81       	ldd	r17, Y+3	; 0x03
    2348:	aa 81       	ldd	r26, Y+2	; 0x02
    234a:	b9 81       	ldd	r27, Y+1	; 0x01
    234c:	ce 0f       	add	r28, r30
    234e:	d1 1d       	adc	r29, r1
    2350:	cd bf       	out	0x3d, r28	; 61
    2352:	de bf       	out	0x3e, r29	; 62
    2354:	ed 01       	movw	r28, r26
    2356:	08 95       	ret

00002358 <_exit>:
    2358:	f8 94       	cli

0000235a <__stop_program>:
    235a:	ff cf       	rjmp	.-2      	; 0x235a <__stop_program>
