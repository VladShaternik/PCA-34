
PCA-34.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00803800  00001db4  00001e68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d8a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002a  00009d8a  00001d8a  00001e3e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000002c  00803806  00803806  00001e6e  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00001e6e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ecc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000180  00000000  00000000  00001f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004fa7  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002423  00000000  00000000  00007033  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001626  00000000  00000000  00009456  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000540  00000000  00000000  0000aa7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000017bb  00000000  00000000  0000afbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002148  00000000  00000000  0000c777  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000148  00000000  00000000  0000e8bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 c2 07 	jmp	0xf84	; 0xf84 <__vector_6>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 9c 07 	jmp	0xf38	; 0xf38 <__vector_25>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	cd bf       	out	0x3d, r28	; 61
      84:	df e3       	ldi	r29, 0x3F	; 63
      86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_clear_bss>:
      88:	28 e3       	ldi	r18, 0x38	; 56
      8a:	a6 e0       	ldi	r26, 0x06	; 6
      8c:	b8 e3       	ldi	r27, 0x38	; 56
      8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
      90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
      92:	a2 33       	cpi	r26, 0x32	; 50
      94:	b2 07       	cpc	r27, r18
      96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>

00000098 <__do_copy_data>:
      98:	18 e3       	ldi	r17, 0x38	; 56
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b8 e3       	ldi	r27, 0x38	; 56
      9e:	e4 eb       	ldi	r30, 0xB4	; 180
      a0:	fd e1       	ldi	r31, 0x1D	; 29
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a6 30       	cpi	r26, 0x06	; 6
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>
      ae:	0e 94 10 07 	call	0xe20	; 0xe20 <main>
      b2:	0c 94 c3 0e 	jmp	0x1d86	; 0x1d86 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <display_current_voltage>:
	rtc_counter_prev = 0;
}


void display_current_voltage(uint16_t current, uint16_t voltage)
{
      ba:	6f 92       	push	r6
      bc:	7f 92       	push	r7
      be:	8f 92       	push	r8
      c0:	9f 92       	push	r9
      c2:	af 92       	push	r10
      c4:	bf 92       	push	r11
      c6:	cf 92       	push	r12
      c8:	df 92       	push	r13
      ca:	ef 92       	push	r14
      cc:	ff 92       	push	r15
      ce:	0f 93       	push	r16
      d0:	1f 93       	push	r17
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	7c 01       	movw	r14, r24
      d8:	86 2e       	mov	r8, r22
      da:	97 2e       	mov	r9, r23
	lcd_command(CLEAR_DISPLAY);
      dc:	81 e0       	ldi	r24, 0x01	; 1
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(FUNCTION_SET | 0b0000111000);
      e4:	88 e3       	ldi	r24, 0x38	; 56
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	
	int length = snprintf(NULL, 0, "%02d.%dA ", current / 100, current / 10 % 10);
      ec:	97 01       	movw	r18, r14
      ee:	ad ec       	ldi	r26, 0xCD	; 205
      f0:	bc ec       	ldi	r27, 0xCC	; 204
      f2:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__umulhisi3>
      f6:	ac 01       	movw	r20, r24
      f8:	56 95       	lsr	r21
      fa:	47 95       	ror	r20
      fc:	56 95       	lsr	r21
      fe:	47 95       	ror	r20
     100:	56 95       	lsr	r21
     102:	47 95       	ror	r20
     104:	9a 01       	movw	r18, r20
     106:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__umulhisi3>
     10a:	5c 01       	movw	r10, r24
     10c:	b6 94       	lsr	r11
     10e:	a7 94       	ror	r10
     110:	b6 94       	lsr	r11
     112:	a7 94       	ror	r10
     114:	b6 94       	lsr	r11
     116:	a7 94       	ror	r10
     118:	c5 01       	movw	r24, r10
     11a:	88 0f       	add	r24, r24
     11c:	99 1f       	adc	r25, r25
     11e:	aa 0c       	add	r10, r10
     120:	bb 1c       	adc	r11, r11
     122:	aa 0c       	add	r10, r10
     124:	bb 1c       	adc	r11, r11
     126:	aa 0c       	add	r10, r10
     128:	bb 1c       	adc	r11, r11
     12a:	a8 0e       	add	r10, r24
     12c:	b9 1e       	adc	r11, r25
     12e:	ca 01       	movw	r24, r20
     130:	8a 19       	sub	r24, r10
     132:	9b 09       	sbc	r25, r11
     134:	5c 01       	movw	r10, r24
     136:	97 01       	movw	r18, r14
     138:	36 95       	lsr	r19
     13a:	27 95       	ror	r18
     13c:	36 95       	lsr	r19
     13e:	27 95       	ror	r18
     140:	ab e7       	ldi	r26, 0x7B	; 123
     142:	b4 e1       	ldi	r27, 0x14	; 20
     144:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__umulhisi3>
     148:	8c 01       	movw	r16, r24
     14a:	16 95       	lsr	r17
     14c:	07 95       	ror	r16
     14e:	bf 92       	push	r11
     150:	af 92       	push	r10
     152:	1f 93       	push	r17
     154:	0f 93       	push	r16
     156:	ca e8       	ldi	r28, 0x8A	; 138
     158:	dd e9       	ldi	r29, 0x9D	; 157
     15a:	df 93       	push	r29
     15c:	cf 93       	push	r28
     15e:	1f 92       	push	r1
     160:	1f 92       	push	r1
     162:	1f 92       	push	r1
     164:	1f 92       	push	r1
     166:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <snprintf>
	char* str = malloc(length + 1);
     16a:	01 96       	adiw	r24, 0x01	; 1
     16c:	6c 01       	movw	r12, r24
     16e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <malloc>
     172:	68 2e       	mov	r6, r24
     174:	79 2e       	mov	r7, r25
	snprintf(str, length + 1, "%02d.%dA ", current / 100, current / 10 % 10);
     176:	bf 92       	push	r11
     178:	af 92       	push	r10
     17a:	1f 93       	push	r17
     17c:	0f 93       	push	r16
     17e:	df 93       	push	r29
     180:	cf 93       	push	r28
     182:	df 92       	push	r13
     184:	cf 92       	push	r12
     186:	7f 92       	push	r7
     188:	6f 92       	push	r6
     18a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <snprintf>
	lcd_write(str);
     18e:	86 2d       	mov	r24, r6
     190:	97 2d       	mov	r25, r7
     192:	0e 94 02 06 	call	0xc04	; 0xc04 <lcd_write>
	free(str);
     196:	86 2d       	mov	r24, r6
     198:	97 2d       	mov	r25, r7
     19a:	0e 94 48 0b 	call	0x1690	; 0x1690 <free>
	
	current = (current + 5) / 10; // round to nearest tenth and get tenth
     19e:	a7 01       	movw	r20, r14
     1a0:	4b 5f       	subi	r20, 0xFB	; 251
     1a2:	5f 4f       	sbci	r21, 0xFF	; 255
     1a4:	9a 01       	movw	r18, r20
     1a6:	ad ec       	ldi	r26, 0xCD	; 205
     1a8:	bc ec       	ldi	r27, 0xCC	; 204
     1aa:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__umulhisi3>
     1ae:	6c 01       	movw	r12, r24
     1b0:	d6 94       	lsr	r13
     1b2:	c7 94       	ror	r12
     1b4:	d6 94       	lsr	r13
     1b6:	c7 94       	ror	r12
     1b8:	d6 94       	lsr	r13
     1ba:	c7 94       	ror	r12
	
	uint8_t full_bars;
	uint8_t last_bar;
	
	full_bars = current / 25;
	last_bar  = (current % 25) / 5;
     1bc:	96 01       	movw	r18, r12
     1be:	af ea       	ldi	r26, 0xAF	; 175
     1c0:	b7 e4       	ldi	r27, 0x47	; 71
     1c2:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__umulhisi3>
     1c6:	28 1b       	sub	r18, r24
     1c8:	39 0b       	sbc	r19, r25
     1ca:	36 95       	lsr	r19
     1cc:	27 95       	ror	r18
     1ce:	82 0f       	add	r24, r18
     1d0:	93 1f       	adc	r25, r19
     1d2:	92 95       	swap	r25
     1d4:	82 95       	swap	r24
     1d6:	8f 70       	andi	r24, 0x0F	; 15
     1d8:	89 27       	eor	r24, r25
     1da:	9f 70       	andi	r25, 0x0F	; 15
     1dc:	89 27       	eor	r24, r25
     1de:	69 e1       	ldi	r22, 0x19	; 25
     1e0:	68 9f       	mul	r22, r24
     1e2:	90 01       	movw	r18, r0
     1e4:	69 9f       	mul	r22, r25
     1e6:	30 0d       	add	r19, r0
     1e8:	11 24       	eor	r1, r1
     1ea:	c6 01       	movw	r24, r12
     1ec:	82 1b       	sub	r24, r18
     1ee:	93 0b       	sbc	r25, r19
     1f0:	9c 01       	movw	r18, r24
     1f2:	ad ec       	ldi	r26, 0xCD	; 205
     1f4:	bc ec       	ldi	r27, 0xCC	; 204
     1f6:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__umulhisi3>
     1fa:	5c 01       	movw	r10, r24
     1fc:	b6 94       	lsr	r11
     1fe:	a7 94       	ror	r10
     200:	b6 94       	lsr	r11
     202:	a7 94       	ror	r10
     204:	7a 2c       	mov	r7, r10
	
	for(int i = 0; i < full_bars; i++)
     206:	9a 01       	movw	r18, r20
     208:	36 95       	lsr	r19
     20a:	27 95       	ror	r18
     20c:	a3 e1       	ldi	r26, 0x13	; 19
     20e:	b3 e8       	ldi	r27, 0x83	; 131
     210:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__umulhisi3>
     214:	00 24       	eor	r0, r0
     216:	88 0f       	add	r24, r24
     218:	99 1f       	adc	r25, r25
     21a:	00 1c       	adc	r0, r0
     21c:	88 0f       	add	r24, r24
     21e:	99 1f       	adc	r25, r25
     220:	00 1c       	adc	r0, r0
     222:	89 2f       	mov	r24, r25
     224:	90 2d       	mov	r25, r0
     226:	8c 01       	movw	r16, r24
     228:	11 27       	eor	r17, r17
     22a:	8d b7       	in	r24, 0x3d	; 61
     22c:	9e b7       	in	r25, 0x3e	; 62
     22e:	44 96       	adiw	r24, 0x14	; 20
     230:	8d bf       	out	0x3d, r24	; 61
     232:	9e bf       	out	0x3e, r25	; 62
     234:	10 16       	cp	r1, r16
     236:	11 06       	cpc	r1, r17
     238:	1c f5       	brge	.+70     	; 0x280 <display_current_voltage+0x1c6>
     23a:	c0 e0       	ldi	r28, 0x00	; 0
     23c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (i == full_bars - 1 && current == (MAX_CURRENT + 5) / 10)
     23e:	78 01       	movw	r14, r16
     240:	91 e0       	ldi	r25, 0x01	; 1
     242:	e9 1a       	sub	r14, r25
     244:	f1 08       	sbc	r15, r1
     246:	ec 16       	cp	r14, r28
     248:	fd 06       	cpc	r15, r29
     24a:	41 f4       	brne	.+16     	; 0x25c <display_current_voltage+0x1a2>
     24c:	8a ef       	ldi	r24, 0xFA	; 250
     24e:	c8 16       	cp	r12, r24
     250:	d1 04       	cpc	r13, r1
     252:	21 f4       	brne	.+8      	; 0x25c <display_current_voltage+0x1a2>
		{
			display_custom_character(6);
     254:	86 e0       	ldi	r24, 0x06	; 6
     256:	0e 94 71 06 	call	0xce2	; 0xce2 <display_custom_character>
     25a:	0e c0       	rjmp	.+28     	; 0x278 <display_current_voltage+0x1be>
		}
		else
		{
			if ((i + 1) % 4 == 0)
     25c:	9e 01       	movw	r18, r28
     25e:	2f 5f       	subi	r18, 0xFF	; 255
     260:	3f 4f       	sbci	r19, 0xFF	; 255
     262:	23 70       	andi	r18, 0x03	; 3
     264:	33 27       	eor	r19, r19
     266:	23 2b       	or	r18, r19
     268:	21 f4       	brne	.+8      	; 0x272 <display_current_voltage+0x1b8>
			{
				display_custom_character(5);
     26a:	85 e0       	ldi	r24, 0x05	; 5
     26c:	0e 94 71 06 	call	0xce2	; 0xce2 <display_custom_character>
     270:	03 c0       	rjmp	.+6      	; 0x278 <display_current_voltage+0x1be>
			}
			else
			{
				display_custom_character(4);
     272:	84 e0       	ldi	r24, 0x04	; 4
     274:	0e 94 71 06 	call	0xce2	; 0xce2 <display_custom_character>
	uint8_t last_bar;
	
	full_bars = current / 25;
	last_bar  = (current % 25) / 5;
	
	for(int i = 0; i < full_bars; i++)
     278:	21 96       	adiw	r28, 0x01	; 1
     27a:	c0 17       	cp	r28, r16
     27c:	d1 07       	cpc	r29, r17
     27e:	19 f7       	brne	.-58     	; 0x246 <display_current_voltage+0x18c>
				display_custom_character(4);
			}
		}
	}
	
	if (last_bar != 0)
     280:	77 20       	and	r7, r7
     282:	21 f0       	breq	.+8      	; 0x28c <display_current_voltage+0x1d2>
	{
		display_custom_character(last_bar - 1);
     284:	8f ef       	ldi	r24, 0xFF	; 255
     286:	8a 0d       	add	r24, r10
     288:	0e 94 71 06 	call	0xce2	; 0xce2 <display_custom_character>
	}
	
	setCursor(1, 0);
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	0e 94 fe 06 	call	0xdfc	; 0xdfc <setCursor>
     294:	c8 2d       	mov	r28, r8
     296:	d9 2d       	mov	r29, r9
     298:	c9 35       	cpi	r28, 0x59	; 89
     29a:	9b e1       	ldi	r25, 0x1B	; 27
     29c:	d9 07       	cpc	r29, r25
     29e:	10 f0       	brcs	.+4      	; 0x2a4 <display_current_voltage+0x1ea>
     2a0:	c8 e5       	ldi	r28, 0x58	; 88
     2a2:	db e1       	ldi	r29, 0x1B	; 27
	if (voltage > 7000)
	{
		voltage = 7000;
	}
	
	length = snprintf(NULL, 0, "%02d.%dV ", voltage / 100, voltage / 10 % 10);
     2a4:	9e 01       	movw	r18, r28
     2a6:	ad ec       	ldi	r26, 0xCD	; 205
     2a8:	bc ec       	ldi	r27, 0xCC	; 204
     2aa:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__umulhisi3>
     2ae:	ac 01       	movw	r20, r24
     2b0:	56 95       	lsr	r21
     2b2:	47 95       	ror	r20
     2b4:	56 95       	lsr	r21
     2b6:	47 95       	ror	r20
     2b8:	56 95       	lsr	r21
     2ba:	47 95       	ror	r20
     2bc:	9a 01       	movw	r18, r20
     2be:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__umulhisi3>
     2c2:	8c 01       	movw	r16, r24
     2c4:	16 95       	lsr	r17
     2c6:	07 95       	ror	r16
     2c8:	16 95       	lsr	r17
     2ca:	07 95       	ror	r16
     2cc:	16 95       	lsr	r17
     2ce:	07 95       	ror	r16
     2d0:	c8 01       	movw	r24, r16
     2d2:	88 0f       	add	r24, r24
     2d4:	99 1f       	adc	r25, r25
     2d6:	00 0f       	add	r16, r16
     2d8:	11 1f       	adc	r17, r17
     2da:	00 0f       	add	r16, r16
     2dc:	11 1f       	adc	r17, r17
     2de:	00 0f       	add	r16, r16
     2e0:	11 1f       	adc	r17, r17
     2e2:	08 0f       	add	r16, r24
     2e4:	19 1f       	adc	r17, r25
     2e6:	ca 01       	movw	r24, r20
     2e8:	80 1b       	sub	r24, r16
     2ea:	91 0b       	sbc	r25, r17
     2ec:	8c 01       	movw	r16, r24
     2ee:	9e 01       	movw	r18, r28
     2f0:	36 95       	lsr	r19
     2f2:	27 95       	ror	r18
     2f4:	36 95       	lsr	r19
     2f6:	27 95       	ror	r18
     2f8:	ab e7       	ldi	r26, 0x7B	; 123
     2fa:	b4 e1       	ldi	r27, 0x14	; 20
     2fc:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__umulhisi3>
     300:	6c 01       	movw	r12, r24
     302:	d6 94       	lsr	r13
     304:	c7 94       	ror	r12
     306:	1f 93       	push	r17
     308:	0f 93       	push	r16
     30a:	df 92       	push	r13
     30c:	cf 92       	push	r12
     30e:	0f 2e       	mov	r0, r31
     310:	f4 e9       	ldi	r31, 0x94	; 148
     312:	ef 2e       	mov	r14, r31
     314:	fd e9       	ldi	r31, 0x9D	; 157
     316:	ff 2e       	mov	r15, r31
     318:	f0 2d       	mov	r31, r0
     31a:	ff 92       	push	r15
     31c:	ef 92       	push	r14
     31e:	1f 92       	push	r1
     320:	1f 92       	push	r1
     322:	1f 92       	push	r1
     324:	1f 92       	push	r1
     326:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <snprintf>
	str = malloc(length + 1);
     32a:	01 96       	adiw	r24, 0x01	; 1
     32c:	4c 01       	movw	r8, r24
     32e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <malloc>
     332:	a8 2e       	mov	r10, r24
     334:	b9 2e       	mov	r11, r25
	snprintf(str, length + 1, "%02d.%dV ", voltage / 100, voltage / 10 % 10);
     336:	1f 93       	push	r17
     338:	0f 93       	push	r16
     33a:	df 92       	push	r13
     33c:	cf 92       	push	r12
     33e:	ff 92       	push	r15
     340:	ef 92       	push	r14
     342:	9f 92       	push	r9
     344:	8f 92       	push	r8
     346:	9f 93       	push	r25
     348:	8f 93       	push	r24
     34a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <snprintf>
	lcd_write(str);
     34e:	8a 2d       	mov	r24, r10
     350:	9b 2d       	mov	r25, r11
     352:	0e 94 02 06 	call	0xc04	; 0xc04 <lcd_write>
	free(str);
     356:	8a 2d       	mov	r24, r10
     358:	9b 2d       	mov	r25, r11
     35a:	0e 94 48 0b 	call	0x1690	; 0x1690 <free>
	
	voltage = (voltage + 50) / 100; // round to nearest hundred and get hundreds
     35e:	e2 96       	adiw	r28, 0x32	; 50
     360:	d6 95       	lsr	r29
     362:	c7 95       	ror	r28
     364:	d6 95       	lsr	r29
     366:	c7 95       	ror	r28
     368:	9e 01       	movw	r18, r28
     36a:	ab e7       	ldi	r26, 0x7B	; 123
     36c:	b4 e1       	ldi	r27, 0x14	; 20
     36e:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__umulhisi3>
     372:	7c 01       	movw	r14, r24
     374:	f6 94       	lsr	r15
     376:	e7 94       	ror	r14
	
	full_bars = voltage / 5;
	last_bar  = voltage % 5;
     378:	97 01       	movw	r18, r14
     37a:	ad ec       	ldi	r26, 0xCD	; 205
     37c:	bc ec       	ldi	r27, 0xCC	; 204
     37e:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__umulhisi3>
     382:	96 95       	lsr	r25
     384:	87 95       	ror	r24
     386:	96 95       	lsr	r25
     388:	87 95       	ror	r24
     38a:	9c 01       	movw	r18, r24
     38c:	22 0f       	add	r18, r18
     38e:	33 1f       	adc	r19, r19
     390:	22 0f       	add	r18, r18
     392:	33 1f       	adc	r19, r19
     394:	82 0f       	add	r24, r18
     396:	93 1f       	adc	r25, r19
     398:	de 2c       	mov	r13, r14
     39a:	d8 1a       	sub	r13, r24
	
	for(int i = 0; i < full_bars; i++)
     39c:	9e 01       	movw	r18, r28
     39e:	a5 ec       	ldi	r26, 0xC5	; 197
     3a0:	b0 e2       	ldi	r27, 0x20	; 32
     3a2:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__umulhisi3>
     3a6:	92 95       	swap	r25
     3a8:	82 95       	swap	r24
     3aa:	8f 70       	andi	r24, 0x0F	; 15
     3ac:	89 27       	eor	r24, r25
     3ae:	9f 70       	andi	r25, 0x0F	; 15
     3b0:	89 27       	eor	r24, r25
     3b2:	8c 01       	movw	r16, r24
     3b4:	11 27       	eor	r17, r17
     3b6:	8d b7       	in	r24, 0x3d	; 61
     3b8:	9e b7       	in	r25, 0x3e	; 62
     3ba:	44 96       	adiw	r24, 0x14	; 20
     3bc:	8d bf       	out	0x3d, r24	; 61
     3be:	9e bf       	out	0x3e, r25	; 62
     3c0:	10 16       	cp	r1, r16
     3c2:	11 06       	cpc	r1, r17
     3c4:	1c f5       	brge	.+70     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3c6:	c0 e0       	ldi	r28, 0x00	; 0
     3c8:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (i >= ((MAX_VOLTAGE + 50) / 100) / 5 - 1 && voltage >= (MAX_VOLTAGE + 50) / 100)
     3ca:	c9 30       	cpi	r28, 0x09	; 9
     3cc:	d1 05       	cpc	r29, r1
     3ce:	74 f0       	brlt	.+28     	; 0x3ec <display_current_voltage+0x332>
     3d0:	92 e3       	ldi	r25, 0x32	; 50
     3d2:	e9 16       	cp	r14, r25
     3d4:	f1 04       	cpc	r15, r1
     3d6:	50 f0       	brcs	.+20     	; 0x3ec <display_current_voltage+0x332>
		{
			display_custom_character(6);
     3d8:	86 e0       	ldi	r24, 0x06	; 6
     3da:	0e 94 71 06 	call	0xce2	; 0xce2 <display_custom_character>
			if (last_bar != 0)
     3de:	dd 20       	and	r13, r13
     3e0:	89 f0       	breq	.+34     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
			{
				display_custom_character(6);
     3e2:	86 e0       	ldi	r24, 0x06	; 6
     3e4:	0e 94 71 06 	call	0xce2	; 0xce2 <display_custom_character>
				last_bar = 0;
     3e8:	d1 2c       	mov	r13, r1
     3ea:	0c c0       	rjmp	.+24     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
			}
		}
		else
		{
			if ((i + 1) % 2 == 0)
     3ec:	9e 01       	movw	r18, r28
     3ee:	2f 5f       	subi	r18, 0xFF	; 255
     3f0:	3f 4f       	sbci	r19, 0xFF	; 255
     3f2:	20 fd       	sbrc	r18, 0
     3f4:	04 c0       	rjmp	.+8      	; 0x3fe <display_current_voltage+0x344>
			{
				display_custom_character(5);
     3f6:	85 e0       	ldi	r24, 0x05	; 5
     3f8:	0e 94 71 06 	call	0xce2	; 0xce2 <display_custom_character>
     3fc:	03 c0       	rjmp	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
			}
			else
			{
				display_custom_character(4);
     3fe:	84 e0       	ldi	r24, 0x04	; 4
     400:	0e 94 71 06 	call	0xce2	; 0xce2 <display_custom_character>
	voltage = (voltage + 50) / 100; // round to nearest hundred and get hundreds
	
	full_bars = voltage / 5;
	last_bar  = voltage % 5;
	
	for(int i = 0; i < full_bars; i++)
     404:	21 96       	adiw	r28, 0x01	; 1
     406:	c0 17       	cp	r28, r16
     408:	d1 07       	cpc	r29, r17
     40a:	f9 f6       	brne	.-66     	; 0x3ca <display_current_voltage+0x310>
				display_custom_character(4);
			}
		}
	}
	
	if (last_bar != 0)
     40c:	dd 20       	and	r13, r13
     40e:	21 f0       	breq	.+8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	{
		display_custom_character(last_bar - 1);
     410:	8f ef       	ldi	r24, 0xFF	; 255
     412:	8d 0d       	add	r24, r13
     414:	0e 94 71 06 	call	0xce2	; 0xce2 <display_custom_character>
	}
}
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	1f 91       	pop	r17
     41e:	0f 91       	pop	r16
     420:	ff 90       	pop	r15
     422:	ef 90       	pop	r14
     424:	df 90       	pop	r13
     426:	cf 90       	pop	r12
     428:	bf 90       	pop	r11
     42a:	af 90       	pop	r10
     42c:	9f 90       	pop	r9
     42e:	8f 90       	pop	r8
     430:	7f 90       	pop	r7
     432:	6f 90       	pop	r6
     434:	08 95       	ret

00000436 <display_danger>:

void display_danger()
{
	lcd_command(CLEAR_DISPLAY);
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(FUNCTION_SET | 0b0000111100);
     43e:	8c e3       	ldi	r24, 0x3C	; 60
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_write("  D A ");
     446:	8e e9       	ldi	r24, 0x9E	; 158
     448:	9d e9       	ldi	r25, 0x9D	; 157
     44a:	0e 94 02 06 	call	0xc04	; 0xc04 <lcd_write>
	lcd_write("N G E R");
     44e:	85 ea       	ldi	r24, 0xA5	; 165
     450:	9d e9       	ldi	r25, 0x9D	; 157
     452:	0e 94 02 06 	call	0xc04	; 0xc04 <lcd_write>
	lcd_write(" ! ! !");
     456:	8d ea       	ldi	r24, 0xAD	; 173
     458:	9d e9       	ldi	r25, 0x9D	; 157
     45a:	0e 94 02 06 	call	0xc04	; 0xc04 <lcd_write>
     45e:	08 95       	ret

00000460 <debounce>:
/*          6 times more than @precisionUs)                             */
/* @return - whether the function debounced pin correctly (If running   */
/*           time of the function reached @maxUs returns false(0))      */
/************************************************************************/
uint8_t debounce(volatile unsigned char *port, uint8_t pin, uint8_t precisionUs, uint8_t maxUs)
{
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	ec 01       	movw	r28, r24
	uint8_t counter = 0;
	uint8_t counterUs = 0;
	uint8_t isHigh = FALSE;
	
	while(counter != precisionUs && counterUs != maxUs)
     466:	44 23       	and	r20, r20
     468:	39 f1       	breq	.+78     	; 0x4b8 <debounce+0x58>
     46a:	22 23       	and	r18, r18
     46c:	39 f1       	breq	.+78     	; 0x4bc <debounce+0x5c>
     46e:	a1 e0       	ldi	r26, 0x01	; 1
     470:	b0 e0       	ldi	r27, 0x00	; 0
     472:	02 c0       	rjmp	.+4      	; 0x478 <debounce+0x18>
     474:	aa 0f       	add	r26, r26
     476:	bb 1f       	adc	r27, r27
     478:	6a 95       	dec	r22
     47a:	e2 f7       	brpl	.-8      	; 0x474 <debounce+0x14>
	{
		// *(volatile uint8_t *)(port) - is a dereference of a port's address, therefore, we read directly from memory
		if(*(volatile uint8_t *)(port) & (1 << pin))
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	e0 e0       	ldi	r30, 0x00	; 0
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	01 c0       	rjmp	.+2      	; 0x486 <debounce+0x26>
     484:	95 2f       	mov	r25, r21
     486:	68 81       	ld	r22, Y
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	6a 23       	and	r22, r26
     48c:	7b 23       	and	r23, r27
     48e:	67 2b       	or	r22, r23
     490:	29 f0       	breq	.+10     	; 0x49c <debounce+0x3c>
		{
			counter = isHigh ? counter + 1 : 0;
     492:	ee 23       	and	r30, r30
     494:	c9 f0       	breq	.+50     	; 0x4c8 <debounce+0x68>
     496:	3f 5f       	subi	r19, 0xFF	; 255
			isHigh = TRUE;
     498:	e1 e0       	ldi	r30, 0x01	; 1
     49a:	03 c0       	rjmp	.+6      	; 0x4a2 <debounce+0x42>
		}
		else
		{
			counter = isHigh ? 0 : counter + 1;
     49c:	e1 11       	cpse	r30, r1
     49e:	16 c0       	rjmp	.+44     	; 0x4cc <debounce+0x6c>
     4a0:	3f 5f       	subi	r19, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4a2:	86 e0       	ldi	r24, 0x06	; 6
     4a4:	8a 95       	dec	r24
     4a6:	f1 f7       	brne	.-4      	; 0x4a4 <debounce+0x44>
     4a8:	00 c0       	rjmp	.+0      	; 0x4aa <debounce+0x4a>
{
	uint8_t counter = 0;
	uint8_t counterUs = 0;
	uint8_t isHigh = FALSE;
	
	while(counter != precisionUs && counterUs != maxUs)
     4aa:	34 17       	cp	r19, r20
     4ac:	41 f0       	breq	.+16     	; 0x4be <debounce+0x5e>
     4ae:	51 e0       	ldi	r21, 0x01	; 1
     4b0:	59 0f       	add	r21, r25
     4b2:	29 13       	cpse	r18, r25
     4b4:	e7 cf       	rjmp	.-50     	; 0x484 <debounce+0x24>
     4b6:	03 c0       	rjmp	.+6      	; 0x4be <debounce+0x5e>
/*           time of the function reached @maxUs returns false(0))      */
/************************************************************************/
uint8_t debounce(volatile unsigned char *port, uint8_t pin, uint8_t precisionUs, uint8_t maxUs)
{
	uint8_t counter = 0;
	uint8_t counterUs = 0;
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	01 c0       	rjmp	.+2      	; 0x4be <debounce+0x5e>
     4bc:	90 e0       	ldi	r25, 0x00	; 0
		}
		_delay_us(1);
		counterUs++;
	}
	
	return counterUs != maxUs;
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	29 13       	cpse	r18, r25
     4c2:	0b c0       	rjmp	.+22     	; 0x4da <debounce+0x7a>
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	09 c0       	rjmp	.+18     	; 0x4da <debounce+0x7a>
	{
		// *(volatile uint8_t *)(port) - is a dereference of a port's address, therefore, we read directly from memory
		if(*(volatile uint8_t *)(port) & (1 << pin))
		{
			counter = isHigh ? counter + 1 : 0;
			isHigh = TRUE;
     4c8:	e1 e0       	ldi	r30, 0x01	; 1
     4ca:	01 c0       	rjmp	.+2      	; 0x4ce <debounce+0x6e>
		}
		else
		{
			counter = isHigh ? 0 : counter + 1;
			isHigh = FALSE;
     4cc:	e0 e0       	ldi	r30, 0x00	; 0
     4ce:	86 e0       	ldi	r24, 0x06	; 6
     4d0:	8a 95       	dec	r24
     4d2:	f1 f7       	brne	.-4      	; 0x4d0 <debounce+0x70>
     4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <debounce+0x76>
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	ea cf       	rjmp	.-44     	; 0x4ae <debounce+0x4e>
		_delay_us(1);
		counterUs++;
	}
	
	return counterUs != maxUs;
}
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	08 95       	ret

000004e0 <read_gray_code_from_encoder>:

uint8_t read_gray_code_from_encoder()
{
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
	uint8_t val=0;
	
	bool is_debounce_successful = TRUE;
	is_debounce_successful &= debounce(&PORTA_IN, ENCDR_A, 10, 60);
     4e6:	2c e3       	ldi	r18, 0x3C	; 60
     4e8:	4a e0       	ldi	r20, 0x0A	; 10
     4ea:	66 e0       	ldi	r22, 0x06	; 6
     4ec:	88 e0       	ldi	r24, 0x08	; 8
     4ee:	94 e0       	ldi	r25, 0x04	; 4
     4f0:	0e 94 30 02 	call	0x460	; 0x460 <debounce>
     4f4:	18 2f       	mov	r17, r24
	is_debounce_successful &= debounce(&PORTA_IN, ENCDR_B, 10, 60);
     4f6:	2c e3       	ldi	r18, 0x3C	; 60
     4f8:	4a e0       	ldi	r20, 0x0A	; 10
     4fa:	65 e0       	ldi	r22, 0x05	; 5
     4fc:	88 e0       	ldi	r24, 0x08	; 8
     4fe:	94 e0       	ldi	r25, 0x04	; 4
     500:	0e 94 30 02 	call	0x460	; 0x460 <debounce>
	
	if (is_debounce_successful)
     504:	11 70       	andi	r17, 0x01	; 1
     506:	c1 2f       	mov	r28, r17
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	d9 2f       	mov	r29, r25
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	8c 23       	and	r24, r28
     510:	9d 23       	and	r25, r29
     512:	89 2b       	or	r24, r25
     514:	69 f0       	breq	.+26     	; 0x530 <read_gray_code_from_encoder+0x50>
	{
		if(!(PORTA_IN & (1 << ENCDR_A)))
     516:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     51a:	86 fd       	sbrc	r24, 6
     51c:	02 c0       	rjmp	.+4      	; 0x522 <read_gray_code_from_encoder+0x42>
		{
			val |= (1 << 1);
     51e:	82 e0       	ldi	r24, 0x02	; 2
     520:	01 c0       	rjmp	.+2      	; 0x524 <read_gray_code_from_encoder+0x44>
	return counterUs != maxUs;
}

uint8_t read_gray_code_from_encoder()
{
	uint8_t val=0;
     522:	80 e0       	ldi	r24, 0x00	; 0
		if(!(PORTA_IN & (1 << ENCDR_A)))
		{
			val |= (1 << 1);
		}

		if(!(PORTA_IN & (1 << ENCDR_B)))
     524:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     528:	95 fd       	sbrc	r25, 5
     52a:	03 c0       	rjmp	.+6      	; 0x532 <read_gray_code_from_encoder+0x52>
		{
			val |= (1<<0);
     52c:	81 60       	ori	r24, 0x01	; 1
     52e:	01 c0       	rjmp	.+2      	; 0x532 <read_gray_code_from_encoder+0x52>
	return counterUs != maxUs;
}

uint8_t read_gray_code_from_encoder()
{
	uint8_t val=0;
     530:	80 e0       	ldi	r24, 0x00	; 0
			val |= (1<<0);
		}
	}

	return val;
}
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	1f 91       	pop	r17
     538:	08 95       	ret

0000053a <initialize>:
#include "board.h"

void initialize()
{
     53a:	cf 93       	push	r28
	CPU_CCP = 0xD8; //temporarily remove protection for protected I/O registers (Cannot change clock prescaler without doing this first)
     53c:	88 ed       	ldi	r24, 0xD8	; 216
     53e:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLB = (0 << 0); // disable prescaler (There's a default prescaler of 6)
     540:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     544:	87 ea       	ldi	r24, 0xA7	; 167
     546:	91 e6       	ldi	r25, 0x61	; 97
     548:	01 97       	sbiw	r24, 0x01	; 1
     54a:	f1 f7       	brne	.-4      	; 0x548 <initialize+0xe>
     54c:	00 c0       	rjmp	.+0      	; 0x54e <initialize+0x14>
     54e:	00 00       	nop
	_delay_ms(5);
	CLKCTRL_MCLKCTRLA |= (1 << 7); // System clock is output to CLKOUT pin (20 MHz)
     550:	e0 e6       	ldi	r30, 0x60	; 96
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	80 81       	ld	r24, Z
     556:	80 68       	ori	r24, 0x80	; 128
     558:	80 83       	st	Z, r24
	PA4 - SW_Encoder - Input/Pull-up
	PA5 - B_Encoder - Input/Pull-up - Interrupt both edges
	PA6 - A_Encoder - Input/Pull-up - Interrupt both edges
	PA7 - Display LED (Backlight) - Output/Low
	*/
	PORTA_DIR = 0b10001111;
     55a:	8f e8       	ldi	r24, 0x8F	; 143
     55c:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
	PORTA_PIN4CTRL = (1 << PORT_PULLUPEN_bp);
     560:	88 e0       	ldi	r24, 0x08	; 8
     562:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <__TEXT_REGION_LENGTH__+0x700414>
	PORTA_PIN5CTRL = (1 << PORT_PULLUPEN_bp);
     566:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <__TEXT_REGION_LENGTH__+0x700415>
	PORTA_PIN6CTRL = (1 << PORT_PULLUPEN_bp);
     56a:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <__TEXT_REGION_LENGTH__+0x700416>
	PB4 - D4_LCD - Output/Low
	PB5 - D5_LCD - Output/Low
	PB6 - D6_LCD - Output/Low
	PB7 - D7_LCD - Output/Low
	*/
	PORTB_DIR = 0b11110101;
     56e:	95 ef       	ldi	r25, 0xF5	; 245
     570:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
	PORTB_OUTSET = (1 << PIN0_bp);
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
	PORTB_PIN1CTRL = (1 << PORT_PULLUPEN_bp);
     57a:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>
	//PORTB_PIN3CTRL = (1 << PORT_PULLUPEN_bp);
	PORTB_PIN3CTRL |= (0x1); //interrupt on both edges
     57e:	e3 e3       	ldi	r30, 0x33	; 51
     580:	f4 e0       	ldi	r31, 0x04	; 4
     582:	90 81       	ld	r25, Z
     584:	91 60       	ori	r25, 0x01	; 1
     586:	90 83       	st	Z, r25
	CPUINT.LVL1VEC = 0x08; //Set PORTB interrupt to be LEVEL1
     588:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <__TEXT_REGION_LENGTH__+0x700113>
	PC2 - D2_LCD - Output/Low
	PC3 - D3_LCD - Output/Low
	PC4 - R/W (0:RD, 1:WR) - Output/Low
	PC5 - RS (Reg Sel) (0:CMD, 1:DATA) - Output/Low
	*/
	PORTC_DIR = 0b00111111;
     58c:	8f e3       	ldi	r24, 0x3F	; 63
     58e:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>
	
	//RTC initialization
	while (RTC.STATUS > 0) {} // Wait for all register to be synchronized
     592:	e0 e4       	ldi	r30, 0x40	; 64
     594:	f1 e0       	ldi	r31, 0x01	; 1
     596:	81 81       	ldd	r24, Z+1	; 0x01
     598:	81 11       	cpse	r24, r1
     59a:	fd cf       	rjmp	.-6      	; 0x596 <initialize+0x5c>

	RTC.PER = 1;
     59c:	e0 e4       	ldi	r30, 0x40	; 64
     59e:	f1 e0       	ldi	r31, 0x01	; 1
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	82 87       	std	Z+10, r24	; 0x0a
     5a6:	93 87       	std	Z+11, r25	; 0x0b
	RTC.INTCTRL = 0 << RTC_CMP_bp
     5a8:	c1 e0       	ldi	r28, 0x01	; 1
     5aa:	c2 83       	std	Z+2, r28	; 0x02
	| 1 << RTC_OVF_bp; //Overflow interrupt.
	
	RTC.CTRLA = RTC_PRESCALER_DIV1_gc	//NO Prescaler
     5ac:	81 e8       	ldi	r24, 0x81	; 129
     5ae:	80 83       	st	Z, r24
	| 1 << RTC_RTCEN_bp       	//Enable RTC
	| 1 << RTC_RUNSTDBY_bp;   	//Run in standby

	RTC.CLKSEL = RTC_CLKSEL_INT1K_gc; // 32KHz divided by 32, i.e run at 1.024kHz
     5b0:	c7 83       	std	Z+7, r28	; 0x07
	
	encoder_val = read_gray_code_from_encoder();
     5b2:	0e 94 70 02 	call	0x4e0	; 0x4e0 <read_gray_code_from_encoder>
     5b6:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <encoder_val>
	encoder_val_tmp = 0;
     5ba:	10 92 25 38 	sts	0x3825, r1	; 0x803825 <encoder_val_tmp>
	
	current = 0;
     5be:	10 92 26 38 	sts	0x3826, r1	; 0x803826 <current>
     5c2:	10 92 27 38 	sts	0x3827, r1	; 0x803827 <current+0x1>
	voltage = 0;
     5c6:	10 92 06 38 	sts	0x3806, r1	; 0x803806 <__data_end>
     5ca:	10 92 07 38 	sts	0x3807, r1	; 0x803807 <__data_end+0x1>
	update  = TRUE;
     5ce:	c0 93 2c 38 	sts	0x382C, r28	; 0x80382c <update>
	rtc_counter = 0;
     5d2:	10 92 08 38 	sts	0x3808, r1	; 0x803808 <rtc_counter>
     5d6:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <rtc_counter+0x1>
     5da:	10 92 0a 38 	sts	0x380A, r1	; 0x80380a <rtc_counter+0x2>
     5de:	10 92 0b 38 	sts	0x380B, r1	; 0x80380b <rtc_counter+0x3>
	rtc_counter_prev = 0;
     5e2:	10 92 28 38 	sts	0x3828, r1	; 0x803828 <rtc_counter_prev>
     5e6:	10 92 29 38 	sts	0x3829, r1	; 0x803829 <rtc_counter_prev+0x1>
     5ea:	10 92 2a 38 	sts	0x382A, r1	; 0x80382a <rtc_counter_prev+0x2>
     5ee:	10 92 2b 38 	sts	0x382B, r1	; 0x80382b <rtc_counter_prev+0x3>
}
     5f2:	cf 91       	pop	r28
     5f4:	08 95       	ret

000005f6 <handle_encoder>:
	return val;
}

void handle_encoder()
{
	encoder_val_tmp = read_gray_code_from_encoder();
     5f6:	0e 94 70 02 	call	0x4e0	; 0x4e0 <read_gray_code_from_encoder>
     5fa:	80 93 25 38 	sts	0x3825, r24	; 0x803825 <encoder_val_tmp>
	

	if(encoder_val != encoder_val_tmp)
     5fe:	90 91 2d 38 	lds	r25, 0x382D	; 0x80382d <encoder_val>
     602:	80 91 25 38 	lds	r24, 0x3825	; 0x803825 <encoder_val_tmp>
     606:	98 17       	cp	r25, r24
     608:	09 f4       	brne	.+2      	; 0x60c <handle_encoder+0x16>
     60a:	c3 c0       	rjmp	.+390    	; 0x792 <handle_encoder+0x19c>
	{
		if((encoder_val == 0 && encoder_val_tmp == 2))
     60c:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <encoder_val>
     610:	81 11       	cpse	r24, r1
     612:	54 c0       	rjmp	.+168    	; 0x6bc <handle_encoder+0xc6>
     614:	80 91 25 38 	lds	r24, 0x3825	; 0x803825 <encoder_val_tmp>
     618:	82 30       	cpi	r24, 0x02	; 2
     61a:	09 f0       	breq	.+2      	; 0x61e <handle_encoder+0x28>
     61c:	4f c0       	rjmp	.+158    	; 0x6bc <handle_encoder+0xc6>
		{
			if (current <= MAX_CURRENT - 10)
     61e:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <current>
     622:	90 91 27 38 	lds	r25, 0x3827	; 0x803827 <current+0x1>
     626:	8b 3b       	cpi	r24, 0xBB	; 187
     628:	99 40       	sbci	r25, 0x09	; 9
     62a:	08 f0       	brcs	.+2      	; 0x62e <handle_encoder+0x38>
     62c:	9e c0       	rjmp	.+316    	; 0x76a <handle_encoder+0x174>
			{
				if (rtc_counter - rtc_counter_prev < 2)
     62e:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <rtc_counter>
     632:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <rtc_counter+0x1>
     636:	a0 91 0a 38 	lds	r26, 0x380A	; 0x80380a <rtc_counter+0x2>
     63a:	b0 91 0b 38 	lds	r27, 0x380B	; 0x80380b <rtc_counter+0x3>
     63e:	40 91 28 38 	lds	r20, 0x3828	; 0x803828 <rtc_counter_prev>
     642:	50 91 29 38 	lds	r21, 0x3829	; 0x803829 <rtc_counter_prev+0x1>
     646:	60 91 2a 38 	lds	r22, 0x382A	; 0x80382a <rtc_counter_prev+0x2>
     64a:	70 91 2b 38 	lds	r23, 0x382B	; 0x80382b <rtc_counter_prev+0x3>
     64e:	84 1b       	sub	r24, r20
     650:	95 0b       	sbc	r25, r21
     652:	a6 0b       	sbc	r26, r22
     654:	b7 0b       	sbc	r27, r23
     656:	02 97       	sbiw	r24, 0x02	; 2
     658:	a1 05       	cpc	r26, r1
     65a:	b1 05       	cpc	r27, r1
     65c:	10 f5       	brcc	.+68     	; 0x6a2 <handle_encoder+0xac>
				{
					if (current <= MAX_CURRENT - 100)
     65e:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <current>
     662:	90 91 27 38 	lds	r25, 0x3827	; 0x803827 <current+0x1>
     666:	81 36       	cpi	r24, 0x61	; 97
     668:	99 40       	sbci	r25, 0x09	; 9
     66a:	70 f4       	brcc	.+28     	; 0x688 <handle_encoder+0x92>
					{
						current += 100;
     66c:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <current>
     670:	90 91 27 38 	lds	r25, 0x3827	; 0x803827 <current+0x1>
     674:	8c 59       	subi	r24, 0x9C	; 156
     676:	9f 4f       	sbci	r25, 0xFF	; 255
     678:	80 93 26 38 	sts	0x3826, r24	; 0x803826 <current>
     67c:	90 93 27 38 	sts	0x3827, r25	; 0x803827 <current+0x1>
						update = TRUE;
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <update>
     686:	71 c0       	rjmp	.+226    	; 0x76a <handle_encoder+0x174>
					}
					else
					{
						current += 10;
     688:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <current>
     68c:	90 91 27 38 	lds	r25, 0x3827	; 0x803827 <current+0x1>
     690:	0a 96       	adiw	r24, 0x0a	; 10
     692:	80 93 26 38 	sts	0x3826, r24	; 0x803826 <current>
     696:	90 93 27 38 	sts	0x3827, r25	; 0x803827 <current+0x1>
						update = TRUE;
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <update>
     6a0:	64 c0       	rjmp	.+200    	; 0x76a <handle_encoder+0x174>
					}
				}
				else
				{
					current += 10;
     6a2:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <current>
     6a6:	90 91 27 38 	lds	r25, 0x3827	; 0x803827 <current+0x1>
     6aa:	0a 96       	adiw	r24, 0x0a	; 10
     6ac:	80 93 26 38 	sts	0x3826, r24	; 0x803826 <current>
     6b0:	90 93 27 38 	sts	0x3827, r25	; 0x803827 <current+0x1>
					update = TRUE;
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <update>
     6ba:	57 c0       	rjmp	.+174    	; 0x76a <handle_encoder+0x174>
				}
			}
		}
		else if((encoder_val == 1 && encoder_val_tmp == 3))
     6bc:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <encoder_val>
     6c0:	81 30       	cpi	r24, 0x01	; 1
     6c2:	09 f0       	breq	.+2      	; 0x6c6 <handle_encoder+0xd0>
     6c4:	52 c0       	rjmp	.+164    	; 0x76a <handle_encoder+0x174>
     6c6:	80 91 25 38 	lds	r24, 0x3825	; 0x803825 <encoder_val_tmp>
     6ca:	83 30       	cpi	r24, 0x03	; 3
     6cc:	09 f0       	breq	.+2      	; 0x6d0 <handle_encoder+0xda>
     6ce:	4d c0       	rjmp	.+154    	; 0x76a <handle_encoder+0x174>
		{
			if (current >= 10)
     6d0:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <current>
     6d4:	90 91 27 38 	lds	r25, 0x3827	; 0x803827 <current+0x1>
     6d8:	0a 97       	sbiw	r24, 0x0a	; 10
     6da:	08 f4       	brcc	.+2      	; 0x6de <handle_encoder+0xe8>
     6dc:	46 c0       	rjmp	.+140    	; 0x76a <handle_encoder+0x174>
			{
				if (rtc_counter - rtc_counter_prev < 2)
     6de:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <rtc_counter>
     6e2:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <rtc_counter+0x1>
     6e6:	a0 91 0a 38 	lds	r26, 0x380A	; 0x80380a <rtc_counter+0x2>
     6ea:	b0 91 0b 38 	lds	r27, 0x380B	; 0x80380b <rtc_counter+0x3>
     6ee:	40 91 28 38 	lds	r20, 0x3828	; 0x803828 <rtc_counter_prev>
     6f2:	50 91 29 38 	lds	r21, 0x3829	; 0x803829 <rtc_counter_prev+0x1>
     6f6:	60 91 2a 38 	lds	r22, 0x382A	; 0x80382a <rtc_counter_prev+0x2>
     6fa:	70 91 2b 38 	lds	r23, 0x382B	; 0x80382b <rtc_counter_prev+0x3>
     6fe:	84 1b       	sub	r24, r20
     700:	95 0b       	sbc	r25, r21
     702:	a6 0b       	sbc	r26, r22
     704:	b7 0b       	sbc	r27, r23
     706:	02 97       	sbiw	r24, 0x02	; 2
     708:	a1 05       	cpc	r26, r1
     70a:	b1 05       	cpc	r27, r1
     70c:	10 f5       	brcc	.+68     	; 0x752 <handle_encoder+0x15c>
				{
					if (current >= 100)
     70e:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <current>
     712:	90 91 27 38 	lds	r25, 0x3827	; 0x803827 <current+0x1>
     716:	84 36       	cpi	r24, 0x64	; 100
     718:	91 05       	cpc	r25, r1
     71a:	70 f0       	brcs	.+28     	; 0x738 <handle_encoder+0x142>
					{
						current -= 100;
     71c:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <current>
     720:	90 91 27 38 	lds	r25, 0x3827	; 0x803827 <current+0x1>
     724:	84 56       	subi	r24, 0x64	; 100
     726:	91 09       	sbc	r25, r1
     728:	80 93 26 38 	sts	0x3826, r24	; 0x803826 <current>
     72c:	90 93 27 38 	sts	0x3827, r25	; 0x803827 <current+0x1>
						update = TRUE;
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <update>
     736:	19 c0       	rjmp	.+50     	; 0x76a <handle_encoder+0x174>
					}
					else
					{
						current -= 10;
     738:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <current>
     73c:	90 91 27 38 	lds	r25, 0x3827	; 0x803827 <current+0x1>
     740:	0a 97       	sbiw	r24, 0x0a	; 10
     742:	80 93 26 38 	sts	0x3826, r24	; 0x803826 <current>
     746:	90 93 27 38 	sts	0x3827, r25	; 0x803827 <current+0x1>
						update = TRUE;
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <update>
     750:	0c c0       	rjmp	.+24     	; 0x76a <handle_encoder+0x174>
					}
				}
				else
				{
					current -= 10;
     752:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <current>
     756:	90 91 27 38 	lds	r25, 0x3827	; 0x803827 <current+0x1>
     75a:	0a 97       	sbiw	r24, 0x0a	; 10
     75c:	80 93 26 38 	sts	0x3826, r24	; 0x803826 <current>
     760:	90 93 27 38 	sts	0x3827, r25	; 0x803827 <current+0x1>
					update = TRUE;
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <update>
				}
			}
		}

		encoder_val = encoder_val_tmp;
     76a:	80 91 25 38 	lds	r24, 0x3825	; 0x803825 <encoder_val_tmp>
     76e:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <encoder_val>
		rtc_counter_prev = rtc_counter;
     772:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <rtc_counter>
     776:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <rtc_counter+0x1>
     77a:	a0 91 0a 38 	lds	r26, 0x380A	; 0x80380a <rtc_counter+0x2>
     77e:	b0 91 0b 38 	lds	r27, 0x380B	; 0x80380b <rtc_counter+0x3>
     782:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <rtc_counter_prev>
     786:	90 93 29 38 	sts	0x3829, r25	; 0x803829 <rtc_counter_prev+0x1>
     78a:	a0 93 2a 38 	sts	0x382A, r26	; 0x80382a <rtc_counter_prev+0x2>
     78e:	b0 93 2b 38 	sts	0x382B, r27	; 0x80382b <rtc_counter_prev+0x3>
     792:	08 95       	ret

00000794 <INA_Read_Short>:
	//INA_Write(twi, 0x00, 0x48, 0x07, ina226_addr);
	//If no communication for too long then do long delay to triger a watch dog counter
	INA_Write(twi, 0x00, 0x45, 0xFF, ina226_addr);
	
	_delay_ms(20);
}
     794:	ef 92       	push	r14
     796:	ff 92       	push	r15
     798:	0f 93       	push	r16
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	cd b7       	in	r28, 0x3d	; 61
     7a0:	de b7       	in	r29, 0x3e	; 62
     7a2:	28 97       	sbiw	r28, 0x08	; 8
     7a4:	cd bf       	out	0x3d, r28	; 61
     7a6:	de bf       	out	0x3e, r29	; 62
     7a8:	7c 01       	movw	r14, r24
     7aa:	84 2f       	mov	r24, r20
     7ac:	69 83       	std	Y+1, r22	; 0x01
     7ae:	02 e0       	ldi	r16, 0x02	; 2
     7b0:	21 e0       	ldi	r18, 0x01	; 1
     7b2:	ae 01       	movw	r20, r28
     7b4:	4f 5f       	subi	r20, 0xFF	; 255
     7b6:	5f 4f       	sbci	r21, 0xFF	; 255
     7b8:	68 2f       	mov	r22, r24
     7ba:	c7 01       	movw	r24, r14
     7bc:	0e 94 0d 08 	call	0x101a	; 0x101a <TWI_MasterWriteRead>
     7c0:	8f e0       	ldi	r24, 0x0F	; 15
     7c2:	97 e2       	ldi	r25, 0x27	; 39
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	f1 f7       	brne	.-4      	; 0x7c4 <INA_Read_Short+0x30>
     7c8:	00 c0       	rjmp	.+0      	; 0x7ca <INA_Read_Short+0x36>
     7ca:	00 00       	nop
     7cc:	c7 01       	movw	r24, r14
     7ce:	0b 96       	adiw	r24, 0x0b	; 11
     7d0:	28 96       	adiw	r28, 0x08	; 8
     7d2:	cd bf       	out	0x3d, r28	; 61
     7d4:	de bf       	out	0x3e, r29	; 62
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	0f 91       	pop	r16
     7dc:	ff 90       	pop	r15
     7de:	ef 90       	pop	r14
     7e0:	08 95       	ret

000007e2 <INA_Read_Long>:
     7e2:	ef 92       	push	r14
     7e4:	ff 92       	push	r15
     7e6:	0f 93       	push	r16
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	cd b7       	in	r28, 0x3d	; 61
     7ee:	de b7       	in	r29, 0x3e	; 62
     7f0:	28 97       	sbiw	r28, 0x08	; 8
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	de bf       	out	0x3e, r29	; 62
     7f6:	7c 01       	movw	r14, r24
     7f8:	84 2f       	mov	r24, r20
     7fa:	69 83       	std	Y+1, r22	; 0x01
     7fc:	02 e0       	ldi	r16, 0x02	; 2
     7fe:	21 e0       	ldi	r18, 0x01	; 1
     800:	ae 01       	movw	r20, r28
     802:	4f 5f       	subi	r20, 0xFF	; 255
     804:	5f 4f       	sbci	r21, 0xFF	; 255
     806:	68 2f       	mov	r22, r24
     808:	c7 01       	movw	r24, r14
     80a:	0e 94 0d 08 	call	0x101a	; 0x101a <TWI_MasterWriteRead>
     80e:	8f e0       	ldi	r24, 0x0F	; 15
     810:	97 e2       	ldi	r25, 0x27	; 39
     812:	01 97       	sbiw	r24, 0x01	; 1
     814:	f1 f7       	brne	.-4      	; 0x812 <INA_Read_Long+0x30>
     816:	00 c0       	rjmp	.+0      	; 0x818 <INA_Read_Long+0x36>
     818:	00 00       	nop
     81a:	c7 01       	movw	r24, r14
     81c:	0b 96       	adiw	r24, 0x0b	; 11
     81e:	28 96       	adiw	r28, 0x08	; 8
     820:	cd bf       	out	0x3d, r28	; 61
     822:	de bf       	out	0x3e, r29	; 62
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	0f 91       	pop	r16
     82a:	ff 90       	pop	r15
     82c:	ef 90       	pop	r14
     82e:	08 95       	ret

00000830 <get_voltage>:

uint16_t get_voltage(TWI_Master_t *twi, bool averaged, uint8_t ina226_addr)
{
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
	register8_t* read_val;
	if(averaged)
     834:	66 23       	and	r22, r22
     836:	29 f0       	breq	.+10     	; 0x842 <get_voltage+0x12>
	{
		read_val = INA_Read_Long(twi, 0x02, ina226_addr);
     838:	62 e0       	ldi	r22, 0x02	; 2
     83a:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <INA_Read_Long>
     83e:	ec 01       	movw	r28, r24
     840:	04 c0       	rjmp	.+8      	; 0x84a <get_voltage+0x1a>
	}
	else
	{
		read_val = INA_Read_Short(twi, 0x02, ina226_addr);
     842:	62 e0       	ldi	r22, 0x02	; 2
     844:	0e 94 ca 03 	call	0x794	; 0x794 <INA_Read_Short>
     848:	ec 01       	movw	r28, r24
     84a:	8f e0       	ldi	r24, 0x0F	; 15
     84c:	97 e2       	ldi	r25, 0x27	; 39
     84e:	01 97       	sbiw	r24, 0x01	; 1
     850:	f1 f7       	brne	.-4      	; 0x84e <get_voltage+0x1e>
     852:	00 c0       	rjmp	.+0      	; 0x854 <get_voltage+0x24>
     854:	00 00       	nop
	}
	_delay_ms(20);
	int voltage_bits = ((read_val[0] << 8) + (read_val[1]));
     856:	68 81       	ld	r22, Y
     858:	89 81       	ldd	r24, Y+1	; 0x01
	float voltage = voltage_bits * 0.00125 * 2.00; //; // 1.25 mV/bit
	int voltage_int = voltage * 100;
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	76 2f       	mov	r23, r22
     85e:	66 27       	eor	r22, r22
     860:	68 0f       	add	r22, r24
     862:	71 1d       	adc	r23, r1
     864:	07 2e       	mov	r0, r23
     866:	00 0c       	add	r0, r0
     868:	88 0b       	sbc	r24, r24
     86a:	99 0b       	sbc	r25, r25
     86c:	0e 94 86 09 	call	0x130c	; 0x130c <__floatsisf>
     870:	2a e0       	ldi	r18, 0x0A	; 10
     872:	37 ed       	ldi	r19, 0xD7	; 215
     874:	43 ea       	ldi	r20, 0xA3	; 163
     876:	5a e3       	ldi	r21, 0x3A	; 58
     878:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     87c:	9b 01       	movw	r18, r22
     87e:	ac 01       	movw	r20, r24
     880:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__addsf3>
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	48 ec       	ldi	r20, 0xC8	; 200
     88a:	52 e4       	ldi	r21, 0x42	; 66
     88c:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     890:	0e 94 4e 09 	call	0x129c	; 0x129c <__fixsfsi>
     894:	cb 01       	movw	r24, r22
	
	if(voltage_int > 8000 || voltage_int < 0)//if negative or thinks greater than 80V
     896:	61 34       	cpi	r22, 0x41	; 65
     898:	7f 41       	sbci	r23, 0x1F	; 31
     89a:	10 f0       	brcs	.+4      	; 0x8a0 <get_voltage+0x70>
	{ 
		voltage_int = 0;
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	if (read_val == 0xFFFFFFFF)
     8a0:	21 96       	adiw	r28, 0x01	; 1
     8a2:	11 f4       	brne	.+4      	; 0x8a8 <get_voltage+0x78>
	{
		voltage_int = -1;
     8a4:	8f ef       	ldi	r24, 0xFF	; 255
     8a6:	9f ef       	ldi	r25, 0xFF	; 255
	}
		
	return voltage_int;
}
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	08 95       	ret

000008ae <load_custom_characters>:
		_delay_ms(10);
	}
}

void load_custom_characters()
{
     8ae:	0f 93       	push	r16
     8b0:	1f 93       	push	r17
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	00 d0       	rcall	.+0      	; 0x8b8 <load_custom_characters+0xa>
     8b8:	cd b7       	in	r28, 0x3d	; 61
     8ba:	de b7       	in	r29, 0x3e	; 62
	
	unsigned char message[2];
	message[0] = (0x00);							//Control bit with continuous data stream
     8bc:	19 82       	std	Y+1, r1	; 0x01
	message[1] = (0x38);							//Function Set (8-bit data, 1 Line 5x8 character mode, Normal Instruction Table Chosen)
     8be:	88 e3       	ldi	r24, 0x38	; 56
     8c0:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
     8c2:	22 e0       	ldi	r18, 0x02	; 2
     8c4:	ae 01       	movw	r20, r28
     8c6:	4f 5f       	subi	r20, 0xFF	; 255
     8c8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ca:	6c e3       	ldi	r22, 0x3C	; 60
     8cc:	8c e0       	ldi	r24, 0x0C	; 12
     8ce:	98 e3       	ldi	r25, 0x38	; 56
     8d0:	0e 94 51 08 	call	0x10a2	; 0x10a2 <TWI_MasterWrite>
	while(twiMaster.status == 1);
     8d4:	ec e0       	ldi	r30, 0x0C	; 12
     8d6:	f8 e3       	ldi	r31, 0x38	; 56
     8d8:	87 89       	ldd	r24, Z+23	; 0x17
     8da:	81 30       	cpi	r24, 0x01	; 1
     8dc:	e9 f3       	breq	.-6      	; 0x8d8 <load_custom_characters+0x2a>
     8de:	87 e8       	ldi	r24, 0x87	; 135
     8e0:	93 e1       	ldi	r25, 0x13	; 19
     8e2:	01 97       	sbiw	r24, 0x01	; 1
     8e4:	f1 f7       	brne	.-4      	; 0x8e2 <load_custom_characters+0x34>
     8e6:	00 c0       	rjmp	.+0      	; 0x8e8 <load_custom_characters+0x3a>
     8e8:	00 00       	nop
	_delay_ms(10);
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
     8ea:	80 91 24 38 	lds	r24, 0x3824	; 0x803824 <twiMaster+0x18>
     8ee:	85 30       	cpi	r24, 0x05	; 5
     8f0:	c9 f4       	brne	.+50     	; 0x924 <load_custom_characters+0x76>
	{
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
     8f2:	0c e0       	ldi	r16, 0x0C	; 12
     8f4:	18 e3       	ldi	r17, 0x38	; 56
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
	while(twiMaster.status == 1);
	_delay_ms(10);
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
	{
		initialize_Screen();
     8f6:	0e 94 81 05 	call	0xb02	; 0xb02 <initialize_Screen>
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
     8fa:	22 e0       	ldi	r18, 0x02	; 2
     8fc:	ae 01       	movw	r20, r28
     8fe:	4f 5f       	subi	r20, 0xFF	; 255
     900:	5f 4f       	sbci	r21, 0xFF	; 255
     902:	6c e3       	ldi	r22, 0x3C	; 60
     904:	c8 01       	movw	r24, r16
     906:	0e 94 51 08 	call	0x10a2	; 0x10a2 <TWI_MasterWrite>
		while(twiMaster.status == 1);
     90a:	f8 01       	movw	r30, r16
     90c:	87 89       	ldd	r24, Z+23	; 0x17
     90e:	81 30       	cpi	r24, 0x01	; 1
     910:	e1 f3       	breq	.-8      	; 0x90a <load_custom_characters+0x5c>
     912:	87 e8       	ldi	r24, 0x87	; 135
     914:	93 e1       	ldi	r25, 0x13	; 19
     916:	01 97       	sbiw	r24, 0x01	; 1
     918:	f1 f7       	brne	.-4      	; 0x916 <load_custom_characters+0x68>
     91a:	00 c0       	rjmp	.+0      	; 0x91c <load_custom_characters+0x6e>
     91c:	00 00       	nop
	message[0] = (0x00);							//Control bit with continuous data stream
	message[1] = (0x38);							//Function Set (8-bit data, 1 Line 5x8 character mode, Normal Instruction Table Chosen)
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
	while(twiMaster.status == 1);
	_delay_ms(10);
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
     91e:	80 8d       	ldd	r24, Z+24	; 0x18
     920:	85 30       	cpi	r24, 0x05	; 5
     922:	49 f3       	breq	.-46     	; 0x8f6 <load_custom_characters+0x48>
		while(twiMaster.status == 1);
		_delay_ms(10);
	}
	
	// 1 bar
	lcd_command(SET_CGRAM_ADDRESS);
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	91 e0       	ldi	r25, 0x01	; 1
     930:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000010000);
     93c:	80 e1       	ldi	r24, 0x10	; 16
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000010000);
     944:	80 e1       	ldi	r24, 0x10	; 16
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000010000);
     94c:	80 e1       	ldi	r24, 0x10	; 16
     94e:	91 e0       	ldi	r25, 0x01	; 1
     950:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000010000);
     954:	80 e1       	ldi	r24, 0x10	; 16
     956:	91 e0       	ldi	r25, 0x01	; 1
     958:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	91 e0       	ldi	r25, 0x01	; 1
     968:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	//2 bar
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	91 e0       	ldi	r25, 0x01	; 1
     970:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	91 e0       	ldi	r25, 0x01	; 1
     978:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011000);
     97c:	88 e1       	ldi	r24, 0x18	; 24
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011000);
     984:	88 e1       	ldi	r24, 0x18	; 24
     986:	91 e0       	ldi	r25, 0x01	; 1
     988:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011000);
     98c:	88 e1       	ldi	r24, 0x18	; 24
     98e:	91 e0       	ldi	r25, 0x01	; 1
     990:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011000);
     994:	88 e1       	ldi	r24, 0x18	; 24
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	//3 bar
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	91 e0       	ldi	r25, 0x01	; 1
     9b0:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011100);
     9bc:	8c e1       	ldi	r24, 0x1C	; 28
     9be:	91 e0       	ldi	r25, 0x01	; 1
     9c0:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011100);
     9c4:	8c e1       	ldi	r24, 0x1C	; 28
     9c6:	91 e0       	ldi	r25, 0x01	; 1
     9c8:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011100);
     9cc:	8c e1       	ldi	r24, 0x1C	; 28
     9ce:	91 e0       	ldi	r25, 0x01	; 1
     9d0:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011100);
     9d4:	8c e1       	ldi	r24, 0x1C	; 28
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	//4 bar
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011110);
     9fc:	8e e1       	ldi	r24, 0x1E	; 30
     9fe:	91 e0       	ldi	r25, 0x01	; 1
     a00:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011110);
     a04:	8e e1       	ldi	r24, 0x1E	; 30
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011110);
     a0c:	8e e1       	ldi	r24, 0x1E	; 30
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011110);
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	91 e0       	ldi	r25, 0x01	; 1
     a18:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	91 e0       	ldi	r25, 0x01	; 1
     a20:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	91 e0       	ldi	r25, 0x01	; 1
     a28:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	//5 bar
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	91 e0       	ldi	r25, 0x01	; 1
     a30:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	91 e0       	ldi	r25, 0x01	; 1
     a38:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     a3c:	8f e1       	ldi	r24, 0x1F	; 31
     a3e:	91 e0       	ldi	r25, 0x01	; 1
     a40:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     a44:	8f e1       	ldi	r24, 0x1F	; 31
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     a4c:	8f e1       	ldi	r24, 0x1F	; 31
     a4e:	91 e0       	ldi	r25, 0x01	; 1
     a50:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     a54:	8f e1       	ldi	r24, 0x1F	; 31
     a56:	91 e0       	ldi	r25, 0x01	; 1
     a58:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	//10th bar
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	91 e0       	ldi	r25, 0x01	; 1
     a70:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000001);
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     a7c:	8f e1       	ldi	r24, 0x1F	; 31
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     a84:	8f e1       	ldi	r24, 0x1F	; 31
     a86:	91 e0       	ldi	r25, 0x01	; 1
     a88:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     a8c:	8f e1       	ldi	r24, 0x1F	; 31
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     a94:	8f e1       	ldi	r24, 0x1F	; 31
     a96:	91 e0       	ldi	r25, 0x01	; 1
     a98:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000001);
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	91 e0       	ldi	r25, 0x01	; 1
     aa0:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	//lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
	//lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
	//lcd_command(WRITE_DATA_TO_RAM | 0b0000000001);
	//lcd_command(WRITE_DATA_TO_RAM | 0b0000000001);
	//max current bar
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     aac:	8f e1       	ldi	r24, 0x1F	; 31
     aae:	91 e0       	ldi	r25, 0x01	; 1
     ab0:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     ab4:	8f e1       	ldi	r24, 0x1F	; 31
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     abc:	8f e1       	ldi	r24, 0x1F	; 31
     abe:	91 e0       	ldi	r25, 0x01	; 1
     ac0:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     ac4:	8f e1       	ldi	r24, 0x1F	; 31
     ac6:	91 e0       	ldi	r25, 0x01	; 1
     ac8:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     acc:	8f e1       	ldi	r24, 0x1F	; 31
     ace:	91 e0       	ldi	r25, 0x01	; 1
     ad0:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     ad4:	8f e1       	ldi	r24, 0x1F	; 31
     ad6:	91 e0       	ldi	r25, 0x01	; 1
     ad8:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     adc:	8f e1       	ldi	r24, 0x1F	; 31
     ade:	91 e0       	ldi	r25, 0x01	; 1
     ae0:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
     ae4:	8f e1       	ldi	r24, 0x1F	; 31
     ae6:	91 e0       	ldi	r25, 0x01	; 1
     ae8:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
	lcd_command(SET_DDRAM_ADDRESS);
     aec:	80 e8       	ldi	r24, 0x80	; 128
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
     af4:	0f 90       	pop	r0
     af6:	0f 90       	pop	r0
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	1f 91       	pop	r17
     afe:	0f 91       	pop	r16
     b00:	08 95       	ret

00000b02 <initialize_Screen>:
 */ 

#include "lcd_screen.h"

void initialize_Screen()
{
     b02:	cf 93       	push	r28
     b04:	df 93       	push	r29
     b06:	cd b7       	in	r28, 0x3d	; 61
     b08:	de b7       	in	r29, 0x3e	; 62
     b0a:	2a 97       	sbiw	r28, 0x0a	; 10
     b0c:	cd bf       	out	0x3d, r28	; 61
     b0e:	de bf       	out	0x3e, r29	; 62
     b10:	87 ea       	ldi	r24, 0xA7	; 167
     b12:	91 e6       	ldi	r25, 0x61	; 97
     b14:	01 97       	sbiw	r24, 0x01	; 1
     b16:	f1 f7       	brne	.-4      	; 0xb14 <initialize_Screen+0x12>
     b18:	00 c0       	rjmp	.+0      	; 0xb1a <initialize_Screen+0x18>
     b1a:	00 00       	nop
	_delay_ms(50);
	unsigned char message[10];
	
	message[0] = (0x00);							//Control bit with continuous data stream
     b1c:	19 82       	std	Y+1, r1	; 0x01
	message[1] = (0x38);							//Function Set (8-bit data, 1 Line 5x8 character mode, Normal Instruction Table Chosen)
     b1e:	88 e3       	ldi	r24, 0x38	; 56
     b20:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
     b22:	22 e0       	ldi	r18, 0x02	; 2
     b24:	ae 01       	movw	r20, r28
     b26:	4f 5f       	subi	r20, 0xFF	; 255
     b28:	5f 4f       	sbci	r21, 0xFF	; 255
     b2a:	6c e3       	ldi	r22, 0x3C	; 60
     b2c:	8c e0       	ldi	r24, 0x0C	; 12
     b2e:	98 e3       	ldi	r25, 0x38	; 56
     b30:	0e 94 51 08 	call	0x10a2	; 0x10a2 <TWI_MasterWrite>
	while(twiMaster.status == 1);
     b34:	ec e0       	ldi	r30, 0x0C	; 12
     b36:	f8 e3       	ldi	r31, 0x38	; 56
     b38:	87 89       	ldd	r24, Z+23	; 0x17
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	e9 f3       	breq	.-6      	; 0xb38 <initialize_Screen+0x36>
     b3e:	87 e8       	ldi	r24, 0x87	; 135
     b40:	93 e1       	ldi	r25, 0x13	; 19
     b42:	01 97       	sbiw	r24, 0x01	; 1
     b44:	f1 f7       	brne	.-4      	; 0xb42 <initialize_Screen+0x40>
     b46:	00 c0       	rjmp	.+0      	; 0xb48 <initialize_Screen+0x46>
     b48:	00 00       	nop
	_delay_ms(10);
	if (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
     b4a:	80 91 24 38 	lds	r24, 0x3824	; 0x803824 <twiMaster+0x18>
     b4e:	85 30       	cpi	r24, 0x05	; 5
     b50:	19 f4       	brne	.+6      	; 0xb58 <initialize_Screen+0x56>
	{
		initialize_Screen();
     b52:	0e 94 81 05 	call	0xb02	; 0xb02 <initialize_Screen>
		return;
     b56:	50 c0       	rjmp	.+160    	; 0xbf8 <initialize_Screen+0xf6>
	}
	
	message[0] = (0x00);
     b58:	19 82       	std	Y+1, r1	; 0x01
	message[1] = (0x39);							//Function Set (8-bit data, 1 Line 5x8 character mode, Extension Instruction Table Chosen)
     b5a:	89 e3       	ldi	r24, 0x39	; 57
     b5c:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
     b5e:	22 e0       	ldi	r18, 0x02	; 2
     b60:	ae 01       	movw	r20, r28
     b62:	4f 5f       	subi	r20, 0xFF	; 255
     b64:	5f 4f       	sbci	r21, 0xFF	; 255
     b66:	6c e3       	ldi	r22, 0x3C	; 60
     b68:	8c e0       	ldi	r24, 0x0C	; 12
     b6a:	98 e3       	ldi	r25, 0x38	; 56
     b6c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <TWI_MasterWrite>
	while(twiMaster.status == 1);
     b70:	ec e0       	ldi	r30, 0x0C	; 12
     b72:	f8 e3       	ldi	r31, 0x38	; 56
     b74:	87 89       	ldd	r24, Z+23	; 0x17
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	e9 f3       	breq	.-6      	; 0xb74 <initialize_Screen+0x72>
     b7a:	87 e8       	ldi	r24, 0x87	; 135
     b7c:	93 e1       	ldi	r25, 0x13	; 19
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	f1 f7       	brne	.-4      	; 0xb7e <initialize_Screen+0x7c>
     b82:	00 c0       	rjmp	.+0      	; 0xb84 <initialize_Screen+0x82>
     b84:	00 00       	nop
	_delay_ms(10);
	if (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
     b86:	80 91 24 38 	lds	r24, 0x3824	; 0x803824 <twiMaster+0x18>
     b8a:	85 30       	cpi	r24, 0x05	; 5
     b8c:	19 f4       	brne	.+6      	; 0xb94 <initialize_Screen+0x92>
	{
		initialize_Screen();
     b8e:	0e 94 81 05 	call	0xb02	; 0xb02 <initialize_Screen>
		return;
     b92:	32 c0       	rjmp	.+100    	; 0xbf8 <initialize_Screen+0xf6>
	}
	
	message[0] = (0x00);
     b94:	19 82       	std	Y+1, r1	; 0x01
	message[1] = (0x14);							//Set frame frequency to 192 Hz and Voltage Bias to 1/5
     b96:	84 e1       	ldi	r24, 0x14	; 20
     b98:	8a 83       	std	Y+2, r24	; 0x02
	message[2] = (0x78);							//Set contrast bits C3:0 to 8 (C5:0 - 0x28 *C5:4 is part of next data byte)
     b9a:	88 e7       	ldi	r24, 0x78	; 120
     b9c:	8b 83       	std	Y+3, r24	; 0x03
	message[3] = (0x5E);							//Turn on Icon Display and Booster Circuit and set C5:4 to 2 for contrast setting
     b9e:	8e e5       	ldi	r24, 0x5E	; 94
     ba0:	8c 83       	std	Y+4, r24	; 0x04
	message[4] = (0x6D);							//Turn on internal follower circuit and adjust V0 generator amplified ratio (Rab2:0 - 2)
     ba2:	8d e6       	ldi	r24, 0x6D	; 109
     ba4:	8d 83       	std	Y+5, r24	; 0x05
	message[5] = (0x0C);
     ba6:	8c e0       	ldi	r24, 0x0C	; 12
     ba8:	8e 83       	std	Y+6, r24	; 0x06
	message[6] = (0x01);
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	8f 83       	std	Y+7, r24	; 0x07
	message[7] = (0x06);
     bae:	86 e0       	ldi	r24, 0x06	; 6
     bb0:	88 87       	std	Y+8, r24	; 0x08
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 8);
     bb2:	28 e0       	ldi	r18, 0x08	; 8
     bb4:	ae 01       	movw	r20, r28
     bb6:	4f 5f       	subi	r20, 0xFF	; 255
     bb8:	5f 4f       	sbci	r21, 0xFF	; 255
     bba:	6c e3       	ldi	r22, 0x3C	; 60
     bbc:	8c e0       	ldi	r24, 0x0C	; 12
     bbe:	98 e3       	ldi	r25, 0x38	; 56
     bc0:	0e 94 51 08 	call	0x10a2	; 0x10a2 <TWI_MasterWrite>
	while(twiMaster.status == 1);
     bc4:	ec e0       	ldi	r30, 0x0C	; 12
     bc6:	f8 e3       	ldi	r31, 0x38	; 56
     bc8:	87 89       	ldd	r24, Z+23	; 0x17
     bca:	81 30       	cpi	r24, 0x01	; 1
     bcc:	e9 f3       	breq	.-6      	; 0xbc8 <initialize_Screen+0xc6>
     bce:	8f e4       	ldi	r24, 0x4F	; 79
     bd0:	93 ec       	ldi	r25, 0xC3	; 195
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	f1 f7       	brne	.-4      	; 0xbd2 <initialize_Screen+0xd0>
     bd6:	00 c0       	rjmp	.+0      	; 0xbd8 <initialize_Screen+0xd6>
     bd8:	00 00       	nop
	_delay_ms(100);
	if (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
     bda:	80 91 24 38 	lds	r24, 0x3824	; 0x803824 <twiMaster+0x18>
     bde:	85 30       	cpi	r24, 0x05	; 5
     be0:	19 f4       	brne	.+6      	; 0xbe8 <initialize_Screen+0xe6>
	{
		initialize_Screen();
     be2:	0e 94 81 05 	call	0xb02	; 0xb02 <initialize_Screen>
		return;
     be6:	08 c0       	rjmp	.+16     	; 0xbf8 <initialize_Screen+0xf6>
     be8:	87 ea       	ldi	r24, 0xA7	; 167
     bea:	91 e6       	ldi	r25, 0x61	; 97
     bec:	01 97       	sbiw	r24, 0x01	; 1
     bee:	f1 f7       	brne	.-4      	; 0xbec <initialize_Screen+0xea>
     bf0:	00 c0       	rjmp	.+0      	; 0xbf2 <initialize_Screen+0xf0>
     bf2:	00 00       	nop
	}
	
	_delay_ms(50);
	load_custom_characters();
     bf4:	0e 94 57 04 	call	0x8ae	; 0x8ae <load_custom_characters>
}
     bf8:	2a 96       	adiw	r28, 0x0a	; 10
     bfa:	cd bf       	out	0x3d, r28	; 61
     bfc:	de bf       	out	0x3e, r29	; 62
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	08 95       	ret

00000c04 <lcd_write>:
		lcd_command(SET_DDRAM_ADDRESS | (0b0001000000 + x));
	}
}

void lcd_write(char *message)
{
     c04:	bf 92       	push	r11
     c06:	cf 92       	push	r12
     c08:	df 92       	push	r13
     c0a:	ef 92       	push	r14
     c0c:	ff 92       	push	r15
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	cd b7       	in	r28, 0x3d	; 61
     c18:	de b7       	in	r29, 0x3e	; 62
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, size + 1);
		while(twiMaster.status == 1);
		_delay_ms(10);
	}
}
     c1a:	ed b6       	in	r14, 0x3d	; 61
     c1c:	fe b6       	in	r15, 0x3e	; 62
	}
}

void lcd_write(char *message)
{
	char size = strlen(message);
     c1e:	fc 01       	movw	r30, r24
     c20:	01 90       	ld	r0, Z+
     c22:	00 20       	and	r0, r0
     c24:	e9 f7       	brne	.-6      	; 0xc20 <lcd_write+0x1c>
     c26:	31 97       	sbiw	r30, 0x01	; 1
     c28:	9f 01       	movw	r18, r30
     c2a:	28 1b       	sub	r18, r24
     c2c:	39 0b       	sbc	r19, r25
     c2e:	62 2f       	mov	r22, r18
	unsigned char complete_message[size + 1];
     c30:	a9 01       	movw	r20, r18
     c32:	55 27       	eor	r21, r21
     c34:	4f 5f       	subi	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	ed b7       	in	r30, 0x3d	; 61
     c3a:	fe b7       	in	r31, 0x3e	; 62
     c3c:	e4 1b       	sub	r30, r20
     c3e:	f5 0b       	sbc	r31, r21
     c40:	ed bf       	out	0x3d, r30	; 61
     c42:	fe bf       	out	0x3e, r31	; 62
     c44:	4d b7       	in	r20, 0x3d	; 61
     c46:	5e b7       	in	r21, 0x3e	; 62
     c48:	4f 5f       	subi	r20, 0xFF	; 255
     c4a:	5f 4f       	sbci	r21, 0xFF	; 255
     c4c:	d4 2e       	mov	r13, r20
     c4e:	c5 2e       	mov	r12, r21
	
	complete_message[0] = (0x40);			//Control bit with R/S set high and continuous bytes
     c50:	70 e4       	ldi	r23, 0x40	; 64
     c52:	71 83       	std	Z+1, r23	; 0x01
	
	for(unsigned char i = 0; i < size; i ++)
     c54:	22 23       	and	r18, r18
     c56:	49 f0       	breq	.+18     	; 0xc6a <lcd_write+0x66>
     c58:	fc 01       	movw	r30, r24
     c5a:	da 01       	movw	r26, r20
     c5c:	11 96       	adiw	r26, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
	{
		complete_message[i + 1] = message[i];
     c60:	81 91       	ld	r24, Z+
     c62:	8d 93       	st	X+, r24
	char size = strlen(message);
	unsigned char complete_message[size + 1];
	
	complete_message[0] = (0x40);			//Control bit with R/S set high and continuous bytes
	
	for(unsigned char i = 0; i < size; i ++)
     c64:	9f 5f       	subi	r25, 0xFF	; 255
     c66:	69 13       	cpse	r22, r25
     c68:	fb cf       	rjmp	.-10     	; 0xc60 <lcd_write+0x5c>
	{
		complete_message[i + 1] = message[i];
	}

	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, size + 1);
     c6a:	bb 24       	eor	r11, r11
     c6c:	b3 94       	inc	r11
     c6e:	b2 0e       	add	r11, r18
     c70:	2b 2d       	mov	r18, r11
     c72:	6c e3       	ldi	r22, 0x3C	; 60
     c74:	8c e0       	ldi	r24, 0x0C	; 12
     c76:	98 e3       	ldi	r25, 0x38	; 56
     c78:	0e 94 51 08 	call	0x10a2	; 0x10a2 <TWI_MasterWrite>
	while(twiMaster.status == 1);
     c7c:	ec e0       	ldi	r30, 0x0C	; 12
     c7e:	f8 e3       	ldi	r31, 0x38	; 56
     c80:	87 89       	ldd	r24, Z+23	; 0x17
     c82:	81 30       	cpi	r24, 0x01	; 1
     c84:	e9 f3       	breq	.-6      	; 0xc80 <lcd_write+0x7c>
     c86:	87 e8       	ldi	r24, 0x87	; 135
     c88:	93 e1       	ldi	r25, 0x13	; 19
     c8a:	01 97       	sbiw	r24, 0x01	; 1
     c8c:	f1 f7       	brne	.-4      	; 0xc8a <lcd_write+0x86>
     c8e:	00 c0       	rjmp	.+0      	; 0xc90 <lcd_write+0x8c>
     c90:	00 00       	nop
	_delay_ms(10);
	
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
     c92:	80 91 24 38 	lds	r24, 0x3824	; 0x803824 <twiMaster+0x18>
     c96:	85 30       	cpi	r24, 0x05	; 5
     c98:	c1 f4       	brne	.+48     	; 0xcca <lcd_write+0xc6>
	{
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, size + 1);
     c9a:	0c e0       	ldi	r16, 0x0C	; 12
     c9c:	18 e3       	ldi	r17, 0x38	; 56
	while(twiMaster.status == 1);
	_delay_ms(10);
	
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
	{
		initialize_Screen();
     c9e:	0e 94 81 05 	call	0xb02	; 0xb02 <initialize_Screen>
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, size + 1);
     ca2:	2b 2d       	mov	r18, r11
     ca4:	4d 2d       	mov	r20, r13
     ca6:	5c 2d       	mov	r21, r12
     ca8:	6c e3       	ldi	r22, 0x3C	; 60
     caa:	c8 01       	movw	r24, r16
     cac:	0e 94 51 08 	call	0x10a2	; 0x10a2 <TWI_MasterWrite>
		while(twiMaster.status == 1);
     cb0:	f8 01       	movw	r30, r16
     cb2:	87 89       	ldd	r24, Z+23	; 0x17
     cb4:	81 30       	cpi	r24, 0x01	; 1
     cb6:	e1 f3       	breq	.-8      	; 0xcb0 <lcd_write+0xac>
     cb8:	87 e8       	ldi	r24, 0x87	; 135
     cba:	93 e1       	ldi	r25, 0x13	; 19
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	f1 f7       	brne	.-4      	; 0xcbc <lcd_write+0xb8>
     cc0:	00 c0       	rjmp	.+0      	; 0xcc2 <lcd_write+0xbe>
     cc2:	00 00       	nop

	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, size + 1);
	while(twiMaster.status == 1);
	_delay_ms(10);
	
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
     cc4:	80 8d       	ldd	r24, Z+24	; 0x18
     cc6:	85 30       	cpi	r24, 0x05	; 5
     cc8:	51 f3       	breq	.-44     	; 0xc9e <lcd_write+0x9a>
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, size + 1);
		while(twiMaster.status == 1);
		_delay_ms(10);
	}
}
     cca:	ed be       	out	0x3d, r14	; 61
     ccc:	fe be       	out	0x3e, r15	; 62
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
     cd6:	ff 90       	pop	r15
     cd8:	ef 90       	pop	r14
     cda:	df 90       	pop	r13
     cdc:	cf 90       	pop	r12
     cde:	bf 90       	pop	r11
     ce0:	08 95       	ret

00000ce2 <display_custom_character>:


void display_custom_character(uint8_t car_num)
{
     ce2:	0f 93       	push	r16
     ce4:	1f 93       	push	r17
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	00 d0       	rcall	.+0      	; 0xcec <display_custom_character+0xa>
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
	unsigned char complete_message[2];
	complete_message[0] = (0x40);			//Control bit with R/S set high and continuous bytes
     cf0:	90 e4       	ldi	r25, 0x40	; 64
     cf2:	99 83       	std	Y+1, r25	; 0x01
	complete_message[1] = (car_num);
     cf4:	8a 83       	std	Y+2, r24	; 0x02
	
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
     cf6:	22 e0       	ldi	r18, 0x02	; 2
     cf8:	ae 01       	movw	r20, r28
     cfa:	4f 5f       	subi	r20, 0xFF	; 255
     cfc:	5f 4f       	sbci	r21, 0xFF	; 255
     cfe:	6c e3       	ldi	r22, 0x3C	; 60
     d00:	8c e0       	ldi	r24, 0x0C	; 12
     d02:	98 e3       	ldi	r25, 0x38	; 56
     d04:	0e 94 51 08 	call	0x10a2	; 0x10a2 <TWI_MasterWrite>
	while(twiMaster.status == 1);
     d08:	ec e0       	ldi	r30, 0x0C	; 12
     d0a:	f8 e3       	ldi	r31, 0x38	; 56
     d0c:	87 89       	ldd	r24, Z+23	; 0x17
     d0e:	81 30       	cpi	r24, 0x01	; 1
     d10:	e9 f3       	breq	.-6      	; 0xd0c <display_custom_character+0x2a>
     d12:	87 e8       	ldi	r24, 0x87	; 135
     d14:	93 e1       	ldi	r25, 0x13	; 19
     d16:	01 97       	sbiw	r24, 0x01	; 1
     d18:	f1 f7       	brne	.-4      	; 0xd16 <display_custom_character+0x34>
     d1a:	00 c0       	rjmp	.+0      	; 0xd1c <display_custom_character+0x3a>
     d1c:	00 00       	nop
	_delay_ms(10);
	
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
     d1e:	80 91 24 38 	lds	r24, 0x3824	; 0x803824 <twiMaster+0x18>
     d22:	85 30       	cpi	r24, 0x05	; 5
     d24:	c9 f4       	brne	.+50     	; 0xd58 <display_custom_character+0x76>
	{
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
     d26:	0c e0       	ldi	r16, 0x0C	; 12
     d28:	18 e3       	ldi	r17, 0x38	; 56
	while(twiMaster.status == 1);
	_delay_ms(10);
	
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
	{
		initialize_Screen();
     d2a:	0e 94 81 05 	call	0xb02	; 0xb02 <initialize_Screen>
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
     d2e:	22 e0       	ldi	r18, 0x02	; 2
     d30:	ae 01       	movw	r20, r28
     d32:	4f 5f       	subi	r20, 0xFF	; 255
     d34:	5f 4f       	sbci	r21, 0xFF	; 255
     d36:	6c e3       	ldi	r22, 0x3C	; 60
     d38:	c8 01       	movw	r24, r16
     d3a:	0e 94 51 08 	call	0x10a2	; 0x10a2 <TWI_MasterWrite>
		while(twiMaster.status == 1);
     d3e:	f8 01       	movw	r30, r16
     d40:	87 89       	ldd	r24, Z+23	; 0x17
     d42:	81 30       	cpi	r24, 0x01	; 1
     d44:	e1 f3       	breq	.-8      	; 0xd3e <display_custom_character+0x5c>
     d46:	87 e8       	ldi	r24, 0x87	; 135
     d48:	93 e1       	ldi	r25, 0x13	; 19
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	f1 f7       	brne	.-4      	; 0xd4a <display_custom_character+0x68>
     d4e:	00 c0       	rjmp	.+0      	; 0xd50 <display_custom_character+0x6e>
     d50:	00 00       	nop
	
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
	while(twiMaster.status == 1);
	_delay_ms(10);
	
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
     d52:	80 8d       	ldd	r24, Z+24	; 0x18
     d54:	85 30       	cpi	r24, 0x05	; 5
     d56:	49 f3       	breq	.-46     	; 0xd2a <display_custom_character+0x48>
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
		while(twiMaster.status == 1);
		_delay_ms(10);
	}
}
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
     d64:	08 95       	ret

00000d66 <lcd_command>:

received
commands. Only the addressed slave makes the acknowledgement after each byte.
*/
void lcd_command(uint16_t command)
{
     d66:	0f 93       	push	r16
     d68:	1f 93       	push	r17
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	00 d0       	rcall	.+0      	; 0xd70 <lcd_command+0xa>
     d70:	1f 92       	push	r1
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
	unsigned char complete_message[2];
	uint8_t volatile comm;
	comm = (uint8_t)(command >> 2);
     d76:	9c 01       	movw	r18, r24
     d78:	36 95       	lsr	r19
     d7a:	27 95       	ror	r18
     d7c:	36 95       	lsr	r19
     d7e:	27 95       	ror	r18
     d80:	2b 83       	std	Y+3, r18	; 0x03
	complete_message[0] = comm & 0b11000000;                      // Control byte
     d82:	9b 81       	ldd	r25, Y+3	; 0x03
     d84:	90 7c       	andi	r25, 0xC0	; 192
     d86:	99 83       	std	Y+1, r25	; 0x01
	complete_message[1] = (uint8_t)(command);                     // Data byte
     d88:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
     d8a:	22 e0       	ldi	r18, 0x02	; 2
     d8c:	ae 01       	movw	r20, r28
     d8e:	4f 5f       	subi	r20, 0xFF	; 255
     d90:	5f 4f       	sbci	r21, 0xFF	; 255
     d92:	6c e3       	ldi	r22, 0x3C	; 60
     d94:	8c e0       	ldi	r24, 0x0C	; 12
     d96:	98 e3       	ldi	r25, 0x38	; 56
     d98:	0e 94 51 08 	call	0x10a2	; 0x10a2 <TWI_MasterWrite>
	while(twiMaster.status == 1);
     d9c:	ec e0       	ldi	r30, 0x0C	; 12
     d9e:	f8 e3       	ldi	r31, 0x38	; 56
     da0:	87 89       	ldd	r24, Z+23	; 0x17
     da2:	81 30       	cpi	r24, 0x01	; 1
     da4:	e9 f3       	breq	.-6      	; 0xda0 <lcd_command+0x3a>
     da6:	87 e8       	ldi	r24, 0x87	; 135
     da8:	93 e1       	ldi	r25, 0x13	; 19
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	f1 f7       	brne	.-4      	; 0xdaa <lcd_command+0x44>
     dae:	00 c0       	rjmp	.+0      	; 0xdb0 <lcd_command+0x4a>
     db0:	00 00       	nop
	_delay_ms(10);
	
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
     db2:	80 91 24 38 	lds	r24, 0x3824	; 0x803824 <twiMaster+0x18>
     db6:	85 30       	cpi	r24, 0x05	; 5
     db8:	c9 f4       	brne	.+50     	; 0xdec <lcd_command+0x86>
	{
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
     dba:	0c e0       	ldi	r16, 0x0C	; 12
     dbc:	18 e3       	ldi	r17, 0x38	; 56
	while(twiMaster.status == 1);
	_delay_ms(10);
	
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
	{
		initialize_Screen();
     dbe:	0e 94 81 05 	call	0xb02	; 0xb02 <initialize_Screen>
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
     dc2:	22 e0       	ldi	r18, 0x02	; 2
     dc4:	ae 01       	movw	r20, r28
     dc6:	4f 5f       	subi	r20, 0xFF	; 255
     dc8:	5f 4f       	sbci	r21, 0xFF	; 255
     dca:	6c e3       	ldi	r22, 0x3C	; 60
     dcc:	c8 01       	movw	r24, r16
     dce:	0e 94 51 08 	call	0x10a2	; 0x10a2 <TWI_MasterWrite>
		while(twiMaster.status == 1);
     dd2:	f8 01       	movw	r30, r16
     dd4:	87 89       	ldd	r24, Z+23	; 0x17
     dd6:	81 30       	cpi	r24, 0x01	; 1
     dd8:	e1 f3       	breq	.-8      	; 0xdd2 <lcd_command+0x6c>
     dda:	87 e8       	ldi	r24, 0x87	; 135
     ddc:	93 e1       	ldi	r25, 0x13	; 19
     dde:	01 97       	sbiw	r24, 0x01	; 1
     de0:	f1 f7       	brne	.-4      	; 0xdde <lcd_command+0x78>
     de2:	00 c0       	rjmp	.+0      	; 0xde4 <lcd_command+0x7e>
     de4:	00 00       	nop
	complete_message[1] = (uint8_t)(command);                     // Data byte
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
	while(twiMaster.status == 1);
	_delay_ms(10);
	
	while (twiMaster.result == TWIM_RESULT_NACK_RECEIVED)
     de6:	80 8d       	ldd	r24, Z+24	; 0x18
     de8:	85 30       	cpi	r24, 0x05	; 5
     dea:	49 f3       	breq	.-46     	; 0xdbe <lcd_command+0x58>
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
		while(twiMaster.status == 1);
		_delay_ms(10);
	}
}
     dec:	23 96       	adiw	r28, 0x03	; 3
     dee:	cd bf       	out	0x3d, r28	; 61
     df0:	de bf       	out	0x3e, r29	; 62
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	1f 91       	pop	r17
     df8:	0f 91       	pop	r16
     dfa:	08 95       	ret

00000dfc <setCursor>:
	{ 0x00, 0x10, 0x20 }   // Three line display address
};

void setCursor(uint8_t line_num, uint8_t x)
{
	if (line_num == 0)
     dfc:	81 11       	cpse	r24, r1
     dfe:	06 c0       	rjmp	.+12     	; 0xe0c <setCursor+0x10>
	{
		lcd_command(SET_DDRAM_ADDRESS | (0b0000000000 + x));
     e00:	86 2f       	mov	r24, r22
     e02:	80 68       	ori	r24, 0x80	; 128
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
     e0a:	08 95       	ret
	}
	else if (line_num == 1)
     e0c:	81 30       	cpi	r24, 0x01	; 1
     e0e:	39 f4       	brne	.+14     	; 0xe1e <setCursor+0x22>
	{
		lcd_command(SET_DDRAM_ADDRESS | (0b0001000000 + x));
     e10:	86 2f       	mov	r24, r22
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	80 5c       	subi	r24, 0xC0	; 192
     e16:	9f 4f       	sbci	r25, 0xFF	; 255
     e18:	80 68       	ori	r24, 0x80	; 128
     e1a:	0e 94 b3 06 	call	0xd66	; 0xd66 <lcd_command>
     e1e:	08 95       	ret

00000e20 <main>:
#include "board.h"

int main()
{
	//Pin/Settings initialization
    initialize();
     e20:	0e 94 9d 02 	call	0x53a	; 0x53a <initialize>
    sei();
     e24:	78 94       	sei
	
	//I2C Setup
	TWI_MasterInit(&twiMaster, &TWI0, TWI_BAUDSETTING);
     e26:	4e e5       	ldi	r20, 0x5E	; 94
     e28:	60 e1       	ldi	r22, 0x10	; 16
     e2a:	78 e0       	ldi	r23, 0x08	; 8
     e2c:	8c e0       	ldi	r24, 0x0C	; 12
     e2e:	98 e3       	ldi	r25, 0x38	; 56
     e30:	0e 94 fc 07 	call	0xff8	; 0xff8 <TWI_MasterInit>
     e34:	2f e7       	ldi	r18, 0x7F	; 127
     e36:	84 e8       	ldi	r24, 0x84	; 132
     e38:	9e e1       	ldi	r25, 0x1E	; 30
     e3a:	21 50       	subi	r18, 0x01	; 1
     e3c:	80 40       	sbci	r24, 0x00	; 0
     e3e:	90 40       	sbci	r25, 0x00	; 0
     e40:	e1 f7       	brne	.-8      	; 0xe3a <main+0x1a>
     e42:	00 c0       	rjmp	.+0      	; 0xe44 <main+0x24>
     e44:	00 00       	nop
	//LCD screen initialization
	_delay_ms(500);
	initialize_Screen();
     e46:	0e 94 81 05 	call	0xb02	; 0xb02 <initialize_Screen>
     e4a:	2f e7       	ldi	r18, 0x7F	; 127
     e4c:	84 e8       	ldi	r24, 0x84	; 132
     e4e:	9e e1       	ldi	r25, 0x1E	; 30
     e50:	21 50       	subi	r18, 0x01	; 1
     e52:	80 40       	sbci	r24, 0x00	; 0
     e54:	90 40       	sbci	r25, 0x00	; 0
     e56:	e1 f7       	brne	.-8      	; 0xe50 <main+0x30>
     e58:	00 c0       	rjmp	.+0      	; 0xe5a <main+0x3a>
     e5a:	00 00       	nop
	
	uint16_t temp_voltage;
	
    while (1)
    {
		if (rtc_counter % 500 == 0)
     e5c:	0f 2e       	mov	r0, r31
     e5e:	f4 ef       	ldi	r31, 0xF4	; 244
     e60:	cf 2e       	mov	r12, r31
     e62:	dd 24       	eor	r13, r13
     e64:	d3 94       	inc	r13
     e66:	e1 2c       	mov	r14, r1
     e68:	f1 2c       	mov	r15, r1
     e6a:	f0 2d       	mov	r31, r0
		{
			temp_voltage = get_voltage(&twiMaster, FALSE, INA_ADDRESS);
			if (abs(temp_voltage - voltage) > 5)
			{
				voltage = temp_voltage;
				update = TRUE;
     e6c:	c1 e0       	ldi	r28, 0x01	; 1
	
	uint16_t temp_voltage;
	
    while (1)
    {
		if (rtc_counter % 500 == 0)
     e6e:	60 91 08 38 	lds	r22, 0x3808	; 0x803808 <rtc_counter>
     e72:	70 91 09 38 	lds	r23, 0x3809	; 0x803809 <rtc_counter+0x1>
     e76:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <rtc_counter+0x2>
     e7a:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <rtc_counter+0x3>
     e7e:	a7 01       	movw	r20, r14
     e80:	96 01       	movw	r18, r12
     e82:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__udivmodsi4>
     e86:	67 2b       	or	r22, r23
     e88:	68 2b       	or	r22, r24
     e8a:	69 2b       	or	r22, r25
     e8c:	e1 f4       	brne	.+56     	; 0xec6 <main+0xa6>
		{
			temp_voltage = get_voltage(&twiMaster, FALSE, INA_ADDRESS);
     e8e:	41 e4       	ldi	r20, 0x41	; 65
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	8c e0       	ldi	r24, 0x0C	; 12
     e94:	98 e3       	ldi	r25, 0x38	; 56
     e96:	0e 94 18 04 	call	0x830	; 0x830 <get_voltage>
			if (abs(temp_voltage - voltage) > 5)
     e9a:	20 91 06 38 	lds	r18, 0x3806	; 0x803806 <__data_end>
     e9e:	30 91 07 38 	lds	r19, 0x3807	; 0x803807 <__data_end+0x1>
     ea2:	ac 01       	movw	r20, r24
     ea4:	42 1b       	sub	r20, r18
     ea6:	53 0b       	sbc	r21, r19
     ea8:	9a 01       	movw	r18, r20
     eaa:	22 f4       	brpl	.+8      	; 0xeb4 <main+0x94>
     eac:	22 27       	eor	r18, r18
     eae:	33 27       	eor	r19, r19
     eb0:	24 1b       	sub	r18, r20
     eb2:	35 0b       	sbc	r19, r21
     eb4:	26 30       	cpi	r18, 0x06	; 6
     eb6:	31 05       	cpc	r19, r1
     eb8:	34 f0       	brlt	.+12     	; 0xec6 <main+0xa6>
			{
				voltage = temp_voltage;
     eba:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <__data_end>
     ebe:	90 93 07 38 	sts	0x3807, r25	; 0x803807 <__data_end+0x1>
				update = TRUE;
     ec2:	c0 93 2c 38 	sts	0x382C, r28	; 0x80382c <update>
			}
		}
		
		if (update)
     ec6:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <update>
     eca:	88 23       	and	r24, r24
     ecc:	b1 f0       	breq	.+44     	; 0xefa <main+0xda>
		{
			voltage = get_voltage(&twiMaster, FALSE, INA_ADDRESS);
     ece:	41 e4       	ldi	r20, 0x41	; 65
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	8c e0       	ldi	r24, 0x0C	; 12
     ed4:	98 e3       	ldi	r25, 0x38	; 56
     ed6:	0e 94 18 04 	call	0x830	; 0x830 <get_voltage>
     eda:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <__data_end>
     ede:	90 93 07 38 	sts	0x3807, r25	; 0x803807 <__data_end+0x1>
			display_current_voltage(current, voltage);
     ee2:	60 91 06 38 	lds	r22, 0x3806	; 0x803806 <__data_end>
     ee6:	70 91 07 38 	lds	r23, 0x3807	; 0x803807 <__data_end+0x1>
     eea:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <current>
     eee:	90 91 27 38 	lds	r25, 0x3827	; 0x803827 <current+0x1>
     ef2:	0e 94 5d 00 	call	0xba	; 0xba <display_current_voltage>
			update = FALSE;
     ef6:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <update>
		}
		
		if (voltage > 5000)
     efa:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <__data_end>
     efe:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <__data_end+0x1>
     f02:	89 38       	cpi	r24, 0x89	; 137
     f04:	93 41       	sbci	r25, 0x13	; 19
     f06:	08 f4       	brcc	.+2      	; 0xf0a <main+0xea>
     f08:	b2 cf       	rjmp	.-156    	; 0xe6e <main+0x4e>
     f0a:	8f e7       	ldi	r24, 0x7F	; 127
     f0c:	94 e8       	ldi	r25, 0x84	; 132
     f0e:	2e e1       	ldi	r18, 0x1E	; 30
     f10:	81 50       	subi	r24, 0x01	; 1
     f12:	90 40       	sbci	r25, 0x00	; 0
     f14:	20 40       	sbci	r18, 0x00	; 0
     f16:	e1 f7       	brne	.-8      	; 0xf10 <main+0xf0>
     f18:	00 c0       	rjmp	.+0      	; 0xf1a <main+0xfa>
     f1a:	00 00       	nop
		{
			_delay_ms(500);
			display_danger();
     f1c:	0e 94 1b 02 	call	0x436	; 0x436 <display_danger>
     f20:	8f e7       	ldi	r24, 0x7F	; 127
     f22:	94 e8       	ldi	r25, 0x84	; 132
     f24:	2e e1       	ldi	r18, 0x1E	; 30
     f26:	81 50       	subi	r24, 0x01	; 1
     f28:	90 40       	sbci	r25, 0x00	; 0
     f2a:	20 40       	sbci	r18, 0x00	; 0
     f2c:	e1 f7       	brne	.-8      	; 0xf26 <main+0x106>
     f2e:	00 c0       	rjmp	.+0      	; 0xf30 <main+0x110>
     f30:	00 00       	nop
			_delay_ms(500);
			update = TRUE;
     f32:	c0 93 2c 38 	sts	0x382C, r28	; 0x80382c <update>
     f36:	9b cf       	rjmp	.-202    	; 0xe6e <main+0x4e>

00000f38 <__vector_25>:
		}
    }
}

ISR(TWI0_TWIM_vect)
{
     f38:	1f 92       	push	r1
     f3a:	0f 92       	push	r0
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	0f 92       	push	r0
     f40:	11 24       	eor	r1, r1
     f42:	2f 93       	push	r18
     f44:	3f 93       	push	r19
     f46:	4f 93       	push	r20
     f48:	5f 93       	push	r21
     f4a:	6f 93       	push	r22
     f4c:	7f 93       	push	r23
     f4e:	8f 93       	push	r24
     f50:	9f 93       	push	r25
     f52:	af 93       	push	r26
     f54:	bf 93       	push	r27
     f56:	ef 93       	push	r30
     f58:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twiMaster);
     f5a:	8c e0       	ldi	r24, 0x0C	; 12
     f5c:	98 e3       	ldi	r25, 0x38	; 56
     f5e:	0e 94 c8 08 	call	0x1190	; 0x1190 <TWI_MasterInterruptHandler>
}
     f62:	ff 91       	pop	r31
     f64:	ef 91       	pop	r30
     f66:	bf 91       	pop	r27
     f68:	af 91       	pop	r26
     f6a:	9f 91       	pop	r25
     f6c:	8f 91       	pop	r24
     f6e:	7f 91       	pop	r23
     f70:	6f 91       	pop	r22
     f72:	5f 91       	pop	r21
     f74:	4f 91       	pop	r20
     f76:	3f 91       	pop	r19
     f78:	2f 91       	pop	r18
     f7a:	0f 90       	pop	r0
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	0f 90       	pop	r0
     f80:	1f 90       	pop	r1
     f82:	18 95       	reti

00000f84 <__vector_6>:

ISR(RTC_CNT_vect)
{
     f84:	1f 92       	push	r1
     f86:	0f 92       	push	r0
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	0f 92       	push	r0
     f8c:	11 24       	eor	r1, r1
     f8e:	2f 93       	push	r18
     f90:	3f 93       	push	r19
     f92:	4f 93       	push	r20
     f94:	5f 93       	push	r21
     f96:	6f 93       	push	r22
     f98:	7f 93       	push	r23
     f9a:	8f 93       	push	r24
     f9c:	9f 93       	push	r25
     f9e:	af 93       	push	r26
     fa0:	bf 93       	push	r27
     fa2:	ef 93       	push	r30
     fa4:	ff 93       	push	r31
	handle_encoder();
     fa6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <handle_encoder>
	rtc_counter++;
     faa:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <rtc_counter>
     fae:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <rtc_counter+0x1>
     fb2:	a0 91 0a 38 	lds	r26, 0x380A	; 0x80380a <rtc_counter+0x2>
     fb6:	b0 91 0b 38 	lds	r27, 0x380B	; 0x80380b <rtc_counter+0x3>
     fba:	01 96       	adiw	r24, 0x01	; 1
     fbc:	a1 1d       	adc	r26, r1
     fbe:	b1 1d       	adc	r27, r1
     fc0:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <rtc_counter>
     fc4:	90 93 09 38 	sts	0x3809, r25	; 0x803809 <rtc_counter+0x1>
     fc8:	a0 93 0a 38 	sts	0x380A, r26	; 0x80380a <rtc_counter+0x2>
     fcc:	b0 93 0b 38 	sts	0x380B, r27	; 0x80380b <rtc_counter+0x3>
	RTC.INTFLAGS = RTC_OVF_bm;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     fd6:	ff 91       	pop	r31
     fd8:	ef 91       	pop	r30
     fda:	bf 91       	pop	r27
     fdc:	af 91       	pop	r26
     fde:	9f 91       	pop	r25
     fe0:	8f 91       	pop	r24
     fe2:	7f 91       	pop	r23
     fe4:	6f 91       	pop	r22
     fe6:	5f 91       	pop	r21
     fe8:	4f 91       	pop	r20
     fea:	3f 91       	pop	r19
     fec:	2f 91       	pop	r18
     fee:	0f 90       	pop	r0
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	0f 90       	pop	r0
     ff4:	1f 90       	pop	r1
     ff6:	18 95       	reti

00000ff8 <TWI_MasterInit>:
                    uint8_t bytesToRead)
{
	//PORTB_OUTTGL = (1 << 4);
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
	return twi_status;
}
     ff8:	fc 01       	movw	r30, r24
     ffa:	60 83       	st	Z, r22
     ffc:	71 83       	std	Z+1, r23	; 0x01
     ffe:	81 ec       	ldi	r24, 0xC1	; 193
    1000:	db 01       	movw	r26, r22
    1002:	13 96       	adiw	r26, 0x03	; 3
    1004:	8c 93       	st	X, r24
    1006:	a0 81       	ld	r26, Z
    1008:	b1 81       	ldd	r27, Z+1	; 0x01
    100a:	16 96       	adiw	r26, 0x06	; 6
    100c:	4c 93       	st	X, r20
    100e:	01 90       	ld	r0, Z+
    1010:	f0 81       	ld	r31, Z
    1012:	e0 2d       	mov	r30, r0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	85 83       	std	Z+5, r24	; 0x05
    1018:	08 95       	ret

0000101a <TWI_MasterWriteRead>:
    101a:	0f 93       	push	r16
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	fc 01       	movw	r30, r24
    1022:	29 30       	cpi	r18, 0x09	; 9
    1024:	98 f5       	brcc	.+102    	; 0x108c <TWI_MasterWriteRead+0x72>
    1026:	09 30       	cpi	r16, 0x09	; 9
    1028:	98 f5       	brcc	.+102    	; 0x1090 <TWI_MasterWriteRead+0x76>
    102a:	87 89       	ldd	r24, Z+23	; 0x17
    102c:	81 11       	cpse	r24, r1
    102e:	32 c0       	rjmp	.+100    	; 0x1094 <TWI_MasterWriteRead+0x7a>
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	87 8b       	std	Z+23, r24	; 0x17
    1034:	10 8e       	std	Z+24, r1	; 0x18
    1036:	66 0f       	add	r22, r22
    1038:	62 83       	std	Z+2, r22	; 0x02
    103a:	22 23       	and	r18, r18
    103c:	69 f0       	breq	.+26     	; 0x1058 <TWI_MasterWriteRead+0x3e>
    103e:	a4 2f       	mov	r26, r20
    1040:	b5 2f       	mov	r27, r21
    1042:	40 e0       	ldi	r20, 0x00	; 0
    1044:	50 e0       	ldi	r21, 0x00	; 0
    1046:	8d 91       	ld	r24, X+
    1048:	ef 01       	movw	r28, r30
    104a:	c4 0f       	add	r28, r20
    104c:	d5 1f       	adc	r29, r21
    104e:	8b 83       	std	Y+3, r24	; 0x03
    1050:	4f 5f       	subi	r20, 0xFF	; 255
    1052:	5f 4f       	sbci	r21, 0xFF	; 255
    1054:	42 17       	cp	r20, r18
    1056:	b8 f3       	brcs	.-18     	; 0x1046 <TWI_MasterWriteRead+0x2c>
    1058:	23 8b       	std	Z+19, r18	; 0x13
    105a:	04 8b       	std	Z+20, r16	; 0x14
    105c:	15 8a       	std	Z+21, r1	; 0x15
    105e:	16 8a       	std	Z+22, r1	; 0x16
    1060:	83 89       	ldd	r24, Z+19	; 0x13
    1062:	88 23       	and	r24, r24
    1064:	41 f0       	breq	.+16     	; 0x1076 <TWI_MasterWriteRead+0x5c>
    1066:	82 81       	ldd	r24, Z+2	; 0x02
    1068:	8e 7f       	andi	r24, 0xFE	; 254
    106a:	01 90       	ld	r0, Z+
    106c:	f0 81       	ld	r31, Z
    106e:	e0 2d       	mov	r30, r0
    1070:	87 83       	std	Z+7, r24	; 0x07
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	12 c0       	rjmp	.+36     	; 0x109a <TWI_MasterWriteRead+0x80>
    1076:	84 89       	ldd	r24, Z+20	; 0x14
    1078:	88 23       	and	r24, r24
    107a:	71 f0       	breq	.+28     	; 0x1098 <TWI_MasterWriteRead+0x7e>
    107c:	82 81       	ldd	r24, Z+2	; 0x02
    107e:	81 60       	ori	r24, 0x01	; 1
    1080:	01 90       	ld	r0, Z+
    1082:	f0 81       	ld	r31, Z
    1084:	e0 2d       	mov	r30, r0
    1086:	87 83       	std	Z+7, r24	; 0x07
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	07 c0       	rjmp	.+14     	; 0x109a <TWI_MasterWriteRead+0x80>
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	05 c0       	rjmp	.+10     	; 0x109a <TWI_MasterWriteRead+0x80>
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	03 c0       	rjmp	.+6      	; 0x109a <TWI_MasterWriteRead+0x80>
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	01 c0       	rjmp	.+2      	; 0x109a <TWI_MasterWriteRead+0x80>
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	0f 91       	pop	r16
    10a0:	08 95       	ret

000010a2 <TWI_MasterWrite>:
    10a2:	0f 93       	push	r16
    10a4:	00 e0       	ldi	r16, 0x00	; 0
    10a6:	0e 94 0d 08 	call	0x101a	; 0x101a <TWI_MasterWriteRead>
    10aa:	0f 91       	pop	r16
    10ac:	08 95       	ret

000010ae <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi) //--done
{
    10ae:	fc 01       	movw	r30, r24
	uint8_t currentStatus = twi->interface->MSTATUS;
    10b0:	a0 81       	ld	r26, Z
    10b2:	b1 81       	ldd	r27, Z+1	; 0x01
    10b4:	15 96       	adiw	r26, 0x05	; 5
    10b6:	9c 91       	ld	r25, X
    10b8:	15 97       	sbiw	r26, 0x05	; 5

	/* If bus error. */
	if (currentStatus & TWI_BUSERR_bm) {
    10ba:	92 ff       	sbrs	r25, 2
    10bc:	03 c0       	rjmp	.+6      	; 0x10c4 <TWI_MasterArbitrationLostBusErrorHandler+0x16>
		twi->result = TWIM_RESULT_BUS_ERROR;
    10be:	84 e0       	ldi	r24, 0x04	; 4
    10c0:	80 8f       	std	Z+24, r24	; 0x18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <TWI_MasterArbitrationLostBusErrorHandler+0x1a>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
    10c4:	83 e0       	ldi	r24, 0x03	; 3
    10c6:	80 8f       	std	Z+24, r24	; 0x18
	}

	/* Clear interrupt flag. */
	twi->interface->MSTATUS = currentStatus | TWI_ARBLOST_bm;
    10c8:	98 60       	ori	r25, 0x08	; 8
    10ca:	15 96       	adiw	r26, 0x05	; 5
    10cc:	9c 93       	st	X, r25

	twi->status = TWIM_STATUS_READY;
    10ce:	17 8a       	std	Z+23, r1	; 0x17
    10d0:	08 95       	ret

000010d2 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi) //--done
{
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	fc 01       	movw	r30, r24
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
    10d8:	93 89       	ldd	r25, Z+19	; 0x13
	uint8_t bytesToRead   = twi->bytesToRead;
    10da:	24 89       	ldd	r18, Z+20	; 0x14

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MSTATUS & TWI_RXACK_bm) {
    10dc:	a0 81       	ld	r26, Z
    10de:	b1 81       	ldd	r27, Z+1	; 0x01
    10e0:	15 96       	adiw	r26, 0x05	; 5
    10e2:	8c 91       	ld	r24, X
    10e4:	15 97       	sbiw	r26, 0x05	; 5
    10e6:	84 ff       	sbrs	r24, 4
    10e8:	07 c0       	rjmp	.+14     	; 0x10f8 <TWI_MasterWriteHandler+0x26>
		twi->interface->MCTRLB = TWI_MCMD_STOP_gc;
    10ea:	83 e0       	ldi	r24, 0x03	; 3
    10ec:	14 96       	adiw	r26, 0x04	; 4
    10ee:	8c 93       	st	X, r24
		twi->result = TWIM_RESULT_NACK_RECEIVED;
    10f0:	85 e0       	ldi	r24, 0x05	; 5
    10f2:	80 8f       	std	Z+24, r24	; 0x18
		twi->status = TWIM_STATUS_READY;
    10f4:	17 8a       	std	Z+23, r1	; 0x17
    10f6:	1c c0       	rjmp	.+56     	; 0x1130 <TWI_MasterWriteHandler+0x5e>
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    10f8:	85 89       	ldd	r24, Z+21	; 0x15
    10fa:	89 17       	cp	r24, r25
    10fc:	58 f4       	brcc	.+22     	; 0x1114 <TWI_MasterWriteHandler+0x42>
		uint8_t data = twi->writeData[twi->bytesWritten];
    10fe:	85 89       	ldd	r24, Z+21	; 0x15
    1100:	ef 01       	movw	r28, r30
    1102:	c8 0f       	add	r28, r24
    1104:	d1 1d       	adc	r29, r1
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MDATA = data;
    1108:	18 96       	adiw	r26, 0x08	; 8
    110a:	8c 93       	st	X, r24
		++twi->bytesWritten;
    110c:	85 89       	ldd	r24, Z+21	; 0x15
    110e:	8f 5f       	subi	r24, 0xFF	; 255
    1110:	85 8b       	std	Z+21, r24	; 0x15
    1112:	0e c0       	rjmp	.+28     	; 0x1130 <TWI_MasterWriteHandler+0x5e>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
    1114:	86 89       	ldd	r24, Z+22	; 0x16
    1116:	82 17       	cp	r24, r18
    1118:	28 f4       	brcc	.+10     	; 0x1124 <TWI_MasterWriteHandler+0x52>
		uint8_t readAddress = twi->address | 0x01;
    111a:	82 81       	ldd	r24, Z+2	; 0x02
    111c:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MADDR = readAddress;
    111e:	17 96       	adiw	r26, 0x07	; 7
    1120:	8c 93       	st	X, r24
    1122:	06 c0       	rjmp	.+12     	; 0x1130 <TWI_MasterWriteHandler+0x5e>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MCTRLB = TWI_MCMD_STOP_gc;
    1124:	83 e0       	ldi	r24, 0x03	; 3
    1126:	14 96       	adiw	r26, 0x04	; 4
    1128:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result) //--done
{
	twi->result = result;
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    112e:	17 8a       	std	Z+23, r1	; 0x17
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MCTRLB = TWI_MCMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	08 95       	ret

00001136 <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi) //--done
{
    1136:	fc 01       	movw	r30, r24
	//PORTB_OUTTGL = (1 << 4);
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
    1138:	86 89       	ldd	r24, Z+22	; 0x16
    113a:	88 30       	cpi	r24, 0x08	; 8
    113c:	70 f4       	brcc	.+28     	; 0x115a <TWI_MasterReadHandler+0x24>
		uint8_t data = twi->interface->MDATA;
    113e:	a0 81       	ld	r26, Z
    1140:	b1 81       	ldd	r27, Z+1	; 0x01
    1142:	18 96       	adiw	r26, 0x08	; 8
    1144:	8c 91       	ld	r24, X
		twi->readData[twi->bytesRead] = data; //--!
    1146:	96 89       	ldd	r25, Z+22	; 0x16
    1148:	df 01       	movw	r26, r30
    114a:	a9 0f       	add	r26, r25
    114c:	b1 1d       	adc	r27, r1
    114e:	1b 96       	adiw	r26, 0x0b	; 11
    1150:	8c 93       	st	X, r24
		twi->bytesRead++;
    1152:	86 89       	ldd	r24, Z+22	; 0x16
    1154:	8f 5f       	subi	r24, 0xFF	; 255
    1156:	86 8b       	std	Z+22, r24	; 0x16
    1158:	08 c0       	rjmp	.+16     	; 0x116a <TWI_MasterReadHandler+0x34>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MCTRLB = TWI_MCMD_STOP_gc;
    115a:	a0 81       	ld	r26, Z
    115c:	b1 81       	ldd	r27, Z+1	; 0x01
    115e:	83 e0       	ldi	r24, 0x03	; 3
    1160:	14 96       	adiw	r26, 0x04	; 4
    1162:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result) //--done
{
	twi->result = result;
    1164:	82 e0       	ldi	r24, 0x02	; 2
    1166:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    1168:	17 8a       	std	Z+23, r1	; 0x17
		twi->interface->MCTRLB = TWI_MCMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
    116a:	94 89       	ldd	r25, Z+20	; 0x14

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
    116c:	86 89       	ldd	r24, Z+22	; 0x16
    116e:	89 17       	cp	r24, r25
    1170:	30 f4       	brcc	.+12     	; 0x117e <TWI_MasterReadHandler+0x48>
		twi->interface->MCTRLB = TWI_MCMD_RECVTRANS_gc;
    1172:	01 90       	ld	r0, Z+
    1174:	f0 81       	ld	r31, Z
    1176:	e0 2d       	mov	r30, r0
    1178:	82 e0       	ldi	r24, 0x02	; 2
    117a:	84 83       	std	Z+4, r24	; 0x04
    117c:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MCTRLB = TWI_ACKACT_bm |
    117e:	a0 81       	ld	r26, Z
    1180:	b1 81       	ldd	r27, Z+1	; 0x01
    1182:	87 e0       	ldi	r24, 0x07	; 7
    1184:	14 96       	adiw	r26, 0x04	; 4
    1186:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result) //--done
{
	twi->result = result;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    118c:	17 8a       	std	Z+23, r1	; 0x17
    118e:	08 95       	ret

00001190 <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi) //--done
{
	uint8_t currentStatus = twi->interface->MSTATUS;
    1190:	dc 01       	movw	r26, r24
    1192:	ed 91       	ld	r30, X+
    1194:	fc 91       	ld	r31, X
    1196:	25 81       	ldd	r18, Z+5	; 0x05

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_ARBLOST_bm) ||
    1198:	32 2f       	mov	r19, r18
    119a:	3c 70       	andi	r19, 0x0C	; 12
    119c:	19 f0       	breq	.+6      	; 0x11a4 <TWI_MasterInterruptHandler+0x14>
	    (currentStatus & TWI_BUSERR_bm)) {
		TWI_MasterArbitrationLostBusErrorHandler(twi);
    119e:	0e 94 57 08 	call	0x10ae	; 0x10ae <TWI_MasterArbitrationLostBusErrorHandler>
    11a2:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_WIF_bm) {
    11a4:	26 ff       	sbrs	r18, 6
    11a6:	03 c0       	rjmp	.+6      	; 0x11ae <TWI_MasterInterruptHandler+0x1e>
		TWI_MasterWriteHandler(twi);
    11a8:	0e 94 69 08 	call	0x10d2	; 0x10d2 <TWI_MasterWriteHandler>
    11ac:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_RIF_bm) {
    11ae:	22 23       	and	r18, r18
    11b0:	1c f4       	brge	.+6      	; 0x11b8 <TWI_MasterInterruptHandler+0x28>
		TWI_MasterReadHandler(twi);
    11b2:	0e 94 9b 08 	call	0x1136	; 0x1136 <TWI_MasterReadHandler>
    11b6:	08 95       	ret
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result) //--done
{
	twi->result = result;
    11b8:	26 e0       	ldi	r18, 0x06	; 6
    11ba:	fc 01       	movw	r30, r24
    11bc:	20 8f       	std	Z+24, r18	; 0x18
	twi->status = TWIM_STATUS_READY;
    11be:	17 8a       	std	Z+23, r1	; 0x17
    11c0:	08 95       	ret

000011c2 <__subsf3>:
    11c2:	50 58       	subi	r21, 0x80	; 128

000011c4 <__addsf3>:
    11c4:	bb 27       	eor	r27, r27
    11c6:	aa 27       	eor	r26, r26
    11c8:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__addsf3x>
    11cc:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <__fp_round>
    11d0:	0e 94 ca 09 	call	0x1394	; 0x1394 <__fp_pscA>
    11d4:	38 f0       	brcs	.+14     	; 0x11e4 <__addsf3+0x20>
    11d6:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__fp_pscB>
    11da:	20 f0       	brcs	.+8      	; 0x11e4 <__addsf3+0x20>
    11dc:	39 f4       	brne	.+14     	; 0x11ec <__addsf3+0x28>
    11de:	9f 3f       	cpi	r25, 0xFF	; 255
    11e0:	19 f4       	brne	.+6      	; 0x11e8 <__addsf3+0x24>
    11e2:	26 f4       	brtc	.+8      	; 0x11ec <__addsf3+0x28>
    11e4:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__fp_nan>
    11e8:	0e f4       	brtc	.+2      	; 0x11ec <__addsf3+0x28>
    11ea:	e0 95       	com	r30
    11ec:	e7 fb       	bst	r30, 7
    11ee:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <__fp_inf>

000011f2 <__addsf3x>:
    11f2:	e9 2f       	mov	r30, r25
    11f4:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fp_split3>
    11f8:	58 f3       	brcs	.-42     	; 0x11d0 <__addsf3+0xc>
    11fa:	ba 17       	cp	r27, r26
    11fc:	62 07       	cpc	r22, r18
    11fe:	73 07       	cpc	r23, r19
    1200:	84 07       	cpc	r24, r20
    1202:	95 07       	cpc	r25, r21
    1204:	20 f0       	brcs	.+8      	; 0x120e <__addsf3x+0x1c>
    1206:	79 f4       	brne	.+30     	; 0x1226 <__addsf3x+0x34>
    1208:	a6 f5       	brtc	.+104    	; 0x1272 <__addsf3x+0x80>
    120a:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__fp_zero>
    120e:	0e f4       	brtc	.+2      	; 0x1212 <__addsf3x+0x20>
    1210:	e0 95       	com	r30
    1212:	0b 2e       	mov	r0, r27
    1214:	ba 2f       	mov	r27, r26
    1216:	a0 2d       	mov	r26, r0
    1218:	0b 01       	movw	r0, r22
    121a:	b9 01       	movw	r22, r18
    121c:	90 01       	movw	r18, r0
    121e:	0c 01       	movw	r0, r24
    1220:	ca 01       	movw	r24, r20
    1222:	a0 01       	movw	r20, r0
    1224:	11 24       	eor	r1, r1
    1226:	ff 27       	eor	r31, r31
    1228:	59 1b       	sub	r21, r25
    122a:	99 f0       	breq	.+38     	; 0x1252 <__addsf3x+0x60>
    122c:	59 3f       	cpi	r21, 0xF9	; 249
    122e:	50 f4       	brcc	.+20     	; 0x1244 <__addsf3x+0x52>
    1230:	50 3e       	cpi	r21, 0xE0	; 224
    1232:	68 f1       	brcs	.+90     	; 0x128e <__addsf3x+0x9c>
    1234:	1a 16       	cp	r1, r26
    1236:	f0 40       	sbci	r31, 0x00	; 0
    1238:	a2 2f       	mov	r26, r18
    123a:	23 2f       	mov	r18, r19
    123c:	34 2f       	mov	r19, r20
    123e:	44 27       	eor	r20, r20
    1240:	58 5f       	subi	r21, 0xF8	; 248
    1242:	f3 cf       	rjmp	.-26     	; 0x122a <__addsf3x+0x38>
    1244:	46 95       	lsr	r20
    1246:	37 95       	ror	r19
    1248:	27 95       	ror	r18
    124a:	a7 95       	ror	r26
    124c:	f0 40       	sbci	r31, 0x00	; 0
    124e:	53 95       	inc	r21
    1250:	c9 f7       	brne	.-14     	; 0x1244 <__addsf3x+0x52>
    1252:	7e f4       	brtc	.+30     	; 0x1272 <__addsf3x+0x80>
    1254:	1f 16       	cp	r1, r31
    1256:	ba 0b       	sbc	r27, r26
    1258:	62 0b       	sbc	r22, r18
    125a:	73 0b       	sbc	r23, r19
    125c:	84 0b       	sbc	r24, r20
    125e:	ba f0       	brmi	.+46     	; 0x128e <__addsf3x+0x9c>
    1260:	91 50       	subi	r25, 0x01	; 1
    1262:	a1 f0       	breq	.+40     	; 0x128c <__addsf3x+0x9a>
    1264:	ff 0f       	add	r31, r31
    1266:	bb 1f       	adc	r27, r27
    1268:	66 1f       	adc	r22, r22
    126a:	77 1f       	adc	r23, r23
    126c:	88 1f       	adc	r24, r24
    126e:	c2 f7       	brpl	.-16     	; 0x1260 <__addsf3x+0x6e>
    1270:	0e c0       	rjmp	.+28     	; 0x128e <__addsf3x+0x9c>
    1272:	ba 0f       	add	r27, r26
    1274:	62 1f       	adc	r22, r18
    1276:	73 1f       	adc	r23, r19
    1278:	84 1f       	adc	r24, r20
    127a:	48 f4       	brcc	.+18     	; 0x128e <__addsf3x+0x9c>
    127c:	87 95       	ror	r24
    127e:	77 95       	ror	r23
    1280:	67 95       	ror	r22
    1282:	b7 95       	ror	r27
    1284:	f7 95       	ror	r31
    1286:	9e 3f       	cpi	r25, 0xFE	; 254
    1288:	08 f0       	brcs	.+2      	; 0x128c <__addsf3x+0x9a>
    128a:	b0 cf       	rjmp	.-160    	; 0x11ec <__addsf3+0x28>
    128c:	93 95       	inc	r25
    128e:	88 0f       	add	r24, r24
    1290:	08 f0       	brcs	.+2      	; 0x1294 <__addsf3x+0xa2>
    1292:	99 27       	eor	r25, r25
    1294:	ee 0f       	add	r30, r30
    1296:	97 95       	ror	r25
    1298:	87 95       	ror	r24
    129a:	08 95       	ret

0000129c <__fixsfsi>:
    129c:	0e 94 55 09 	call	0x12aa	; 0x12aa <__fixunssfsi>
    12a0:	68 94       	set
    12a2:	b1 11       	cpse	r27, r1
    12a4:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__fp_szero>
    12a8:	08 95       	ret

000012aa <__fixunssfsi>:
    12aa:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__fp_splitA>
    12ae:	88 f0       	brcs	.+34     	; 0x12d2 <__fixunssfsi+0x28>
    12b0:	9f 57       	subi	r25, 0x7F	; 127
    12b2:	98 f0       	brcs	.+38     	; 0x12da <__fixunssfsi+0x30>
    12b4:	b9 2f       	mov	r27, r25
    12b6:	99 27       	eor	r25, r25
    12b8:	b7 51       	subi	r27, 0x17	; 23
    12ba:	b0 f0       	brcs	.+44     	; 0x12e8 <__fixunssfsi+0x3e>
    12bc:	e1 f0       	breq	.+56     	; 0x12f6 <__fixunssfsi+0x4c>
    12be:	66 0f       	add	r22, r22
    12c0:	77 1f       	adc	r23, r23
    12c2:	88 1f       	adc	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	1a f0       	brmi	.+6      	; 0x12ce <__fixunssfsi+0x24>
    12c8:	ba 95       	dec	r27
    12ca:	c9 f7       	brne	.-14     	; 0x12be <__fixunssfsi+0x14>
    12cc:	14 c0       	rjmp	.+40     	; 0x12f6 <__fixunssfsi+0x4c>
    12ce:	b1 30       	cpi	r27, 0x01	; 1
    12d0:	91 f0       	breq	.+36     	; 0x12f6 <__fixunssfsi+0x4c>
    12d2:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__fp_zero>
    12d6:	b1 e0       	ldi	r27, 0x01	; 1
    12d8:	08 95       	ret
    12da:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__fp_zero>
    12de:	67 2f       	mov	r22, r23
    12e0:	78 2f       	mov	r23, r24
    12e2:	88 27       	eor	r24, r24
    12e4:	b8 5f       	subi	r27, 0xF8	; 248
    12e6:	39 f0       	breq	.+14     	; 0x12f6 <__fixunssfsi+0x4c>
    12e8:	b9 3f       	cpi	r27, 0xF9	; 249
    12ea:	cc f3       	brlt	.-14     	; 0x12de <__fixunssfsi+0x34>
    12ec:	86 95       	lsr	r24
    12ee:	77 95       	ror	r23
    12f0:	67 95       	ror	r22
    12f2:	b3 95       	inc	r27
    12f4:	d9 f7       	brne	.-10     	; 0x12ec <__fixunssfsi+0x42>
    12f6:	3e f4       	brtc	.+14     	; 0x1306 <__fixunssfsi+0x5c>
    12f8:	90 95       	com	r25
    12fa:	80 95       	com	r24
    12fc:	70 95       	com	r23
    12fe:	61 95       	neg	r22
    1300:	7f 4f       	sbci	r23, 0xFF	; 255
    1302:	8f 4f       	sbci	r24, 0xFF	; 255
    1304:	9f 4f       	sbci	r25, 0xFF	; 255
    1306:	08 95       	ret

00001308 <__floatunsisf>:
    1308:	e8 94       	clt
    130a:	09 c0       	rjmp	.+18     	; 0x131e <__floatsisf+0x12>

0000130c <__floatsisf>:
    130c:	97 fb       	bst	r25, 7
    130e:	3e f4       	brtc	.+14     	; 0x131e <__floatsisf+0x12>
    1310:	90 95       	com	r25
    1312:	80 95       	com	r24
    1314:	70 95       	com	r23
    1316:	61 95       	neg	r22
    1318:	7f 4f       	sbci	r23, 0xFF	; 255
    131a:	8f 4f       	sbci	r24, 0xFF	; 255
    131c:	9f 4f       	sbci	r25, 0xFF	; 255
    131e:	99 23       	and	r25, r25
    1320:	a9 f0       	breq	.+42     	; 0x134c <__floatsisf+0x40>
    1322:	f9 2f       	mov	r31, r25
    1324:	96 e9       	ldi	r25, 0x96	; 150
    1326:	bb 27       	eor	r27, r27
    1328:	93 95       	inc	r25
    132a:	f6 95       	lsr	r31
    132c:	87 95       	ror	r24
    132e:	77 95       	ror	r23
    1330:	67 95       	ror	r22
    1332:	b7 95       	ror	r27
    1334:	f1 11       	cpse	r31, r1
    1336:	f8 cf       	rjmp	.-16     	; 0x1328 <__floatsisf+0x1c>
    1338:	fa f4       	brpl	.+62     	; 0x1378 <__floatsisf+0x6c>
    133a:	bb 0f       	add	r27, r27
    133c:	11 f4       	brne	.+4      	; 0x1342 <__floatsisf+0x36>
    133e:	60 ff       	sbrs	r22, 0
    1340:	1b c0       	rjmp	.+54     	; 0x1378 <__floatsisf+0x6c>
    1342:	6f 5f       	subi	r22, 0xFF	; 255
    1344:	7f 4f       	sbci	r23, 0xFF	; 255
    1346:	8f 4f       	sbci	r24, 0xFF	; 255
    1348:	9f 4f       	sbci	r25, 0xFF	; 255
    134a:	16 c0       	rjmp	.+44     	; 0x1378 <__floatsisf+0x6c>
    134c:	88 23       	and	r24, r24
    134e:	11 f0       	breq	.+4      	; 0x1354 <__floatsisf+0x48>
    1350:	96 e9       	ldi	r25, 0x96	; 150
    1352:	11 c0       	rjmp	.+34     	; 0x1376 <__floatsisf+0x6a>
    1354:	77 23       	and	r23, r23
    1356:	21 f0       	breq	.+8      	; 0x1360 <__floatsisf+0x54>
    1358:	9e e8       	ldi	r25, 0x8E	; 142
    135a:	87 2f       	mov	r24, r23
    135c:	76 2f       	mov	r23, r22
    135e:	05 c0       	rjmp	.+10     	; 0x136a <__floatsisf+0x5e>
    1360:	66 23       	and	r22, r22
    1362:	71 f0       	breq	.+28     	; 0x1380 <__floatsisf+0x74>
    1364:	96 e8       	ldi	r25, 0x86	; 134
    1366:	86 2f       	mov	r24, r22
    1368:	70 e0       	ldi	r23, 0x00	; 0
    136a:	60 e0       	ldi	r22, 0x00	; 0
    136c:	2a f0       	brmi	.+10     	; 0x1378 <__floatsisf+0x6c>
    136e:	9a 95       	dec	r25
    1370:	66 0f       	add	r22, r22
    1372:	77 1f       	adc	r23, r23
    1374:	88 1f       	adc	r24, r24
    1376:	da f7       	brpl	.-10     	; 0x136e <__floatsisf+0x62>
    1378:	88 0f       	add	r24, r24
    137a:	96 95       	lsr	r25
    137c:	87 95       	ror	r24
    137e:	97 f9       	bld	r25, 7
    1380:	08 95       	ret

00001382 <__fp_inf>:
    1382:	97 f9       	bld	r25, 7
    1384:	9f 67       	ori	r25, 0x7F	; 127
    1386:	80 e8       	ldi	r24, 0x80	; 128
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	60 e0       	ldi	r22, 0x00	; 0
    138c:	08 95       	ret

0000138e <__fp_nan>:
    138e:	9f ef       	ldi	r25, 0xFF	; 255
    1390:	80 ec       	ldi	r24, 0xC0	; 192
    1392:	08 95       	ret

00001394 <__fp_pscA>:
    1394:	00 24       	eor	r0, r0
    1396:	0a 94       	dec	r0
    1398:	16 16       	cp	r1, r22
    139a:	17 06       	cpc	r1, r23
    139c:	18 06       	cpc	r1, r24
    139e:	09 06       	cpc	r0, r25
    13a0:	08 95       	ret

000013a2 <__fp_pscB>:
    13a2:	00 24       	eor	r0, r0
    13a4:	0a 94       	dec	r0
    13a6:	12 16       	cp	r1, r18
    13a8:	13 06       	cpc	r1, r19
    13aa:	14 06       	cpc	r1, r20
    13ac:	05 06       	cpc	r0, r21
    13ae:	08 95       	ret

000013b0 <__fp_round>:
    13b0:	09 2e       	mov	r0, r25
    13b2:	03 94       	inc	r0
    13b4:	00 0c       	add	r0, r0
    13b6:	11 f4       	brne	.+4      	; 0x13bc <__fp_round+0xc>
    13b8:	88 23       	and	r24, r24
    13ba:	52 f0       	brmi	.+20     	; 0x13d0 <__fp_round+0x20>
    13bc:	bb 0f       	add	r27, r27
    13be:	40 f4       	brcc	.+16     	; 0x13d0 <__fp_round+0x20>
    13c0:	bf 2b       	or	r27, r31
    13c2:	11 f4       	brne	.+4      	; 0x13c8 <__fp_round+0x18>
    13c4:	60 ff       	sbrs	r22, 0
    13c6:	04 c0       	rjmp	.+8      	; 0x13d0 <__fp_round+0x20>
    13c8:	6f 5f       	subi	r22, 0xFF	; 255
    13ca:	7f 4f       	sbci	r23, 0xFF	; 255
    13cc:	8f 4f       	sbci	r24, 0xFF	; 255
    13ce:	9f 4f       	sbci	r25, 0xFF	; 255
    13d0:	08 95       	ret

000013d2 <__fp_split3>:
    13d2:	57 fd       	sbrc	r21, 7
    13d4:	90 58       	subi	r25, 0x80	; 128
    13d6:	44 0f       	add	r20, r20
    13d8:	55 1f       	adc	r21, r21
    13da:	59 f0       	breq	.+22     	; 0x13f2 <__fp_splitA+0x10>
    13dc:	5f 3f       	cpi	r21, 0xFF	; 255
    13de:	71 f0       	breq	.+28     	; 0x13fc <__fp_splitA+0x1a>
    13e0:	47 95       	ror	r20

000013e2 <__fp_splitA>:
    13e2:	88 0f       	add	r24, r24
    13e4:	97 fb       	bst	r25, 7
    13e6:	99 1f       	adc	r25, r25
    13e8:	61 f0       	breq	.+24     	; 0x1402 <__fp_splitA+0x20>
    13ea:	9f 3f       	cpi	r25, 0xFF	; 255
    13ec:	79 f0       	breq	.+30     	; 0x140c <__fp_splitA+0x2a>
    13ee:	87 95       	ror	r24
    13f0:	08 95       	ret
    13f2:	12 16       	cp	r1, r18
    13f4:	13 06       	cpc	r1, r19
    13f6:	14 06       	cpc	r1, r20
    13f8:	55 1f       	adc	r21, r21
    13fa:	f2 cf       	rjmp	.-28     	; 0x13e0 <__fp_split3+0xe>
    13fc:	46 95       	lsr	r20
    13fe:	f1 df       	rcall	.-30     	; 0x13e2 <__fp_splitA>
    1400:	08 c0       	rjmp	.+16     	; 0x1412 <__fp_splitA+0x30>
    1402:	16 16       	cp	r1, r22
    1404:	17 06       	cpc	r1, r23
    1406:	18 06       	cpc	r1, r24
    1408:	99 1f       	adc	r25, r25
    140a:	f1 cf       	rjmp	.-30     	; 0x13ee <__fp_splitA+0xc>
    140c:	86 95       	lsr	r24
    140e:	71 05       	cpc	r23, r1
    1410:	61 05       	cpc	r22, r1
    1412:	08 94       	sec
    1414:	08 95       	ret

00001416 <__fp_zero>:
    1416:	e8 94       	clt

00001418 <__fp_szero>:
    1418:	bb 27       	eor	r27, r27
    141a:	66 27       	eor	r22, r22
    141c:	77 27       	eor	r23, r23
    141e:	cb 01       	movw	r24, r22
    1420:	97 f9       	bld	r25, 7
    1422:	08 95       	ret

00001424 <__mulsf3>:
    1424:	0e 94 25 0a 	call	0x144a	; 0x144a <__mulsf3x>
    1428:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <__fp_round>
    142c:	0e 94 ca 09 	call	0x1394	; 0x1394 <__fp_pscA>
    1430:	38 f0       	brcs	.+14     	; 0x1440 <__mulsf3+0x1c>
    1432:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__fp_pscB>
    1436:	20 f0       	brcs	.+8      	; 0x1440 <__mulsf3+0x1c>
    1438:	95 23       	and	r25, r21
    143a:	11 f0       	breq	.+4      	; 0x1440 <__mulsf3+0x1c>
    143c:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <__fp_inf>
    1440:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__fp_nan>
    1444:	11 24       	eor	r1, r1
    1446:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__fp_szero>

0000144a <__mulsf3x>:
    144a:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fp_split3>
    144e:	70 f3       	brcs	.-36     	; 0x142c <__mulsf3+0x8>

00001450 <__mulsf3_pse>:
    1450:	95 9f       	mul	r25, r21
    1452:	c1 f3       	breq	.-16     	; 0x1444 <__mulsf3+0x20>
    1454:	95 0f       	add	r25, r21
    1456:	50 e0       	ldi	r21, 0x00	; 0
    1458:	55 1f       	adc	r21, r21
    145a:	62 9f       	mul	r22, r18
    145c:	f0 01       	movw	r30, r0
    145e:	72 9f       	mul	r23, r18
    1460:	bb 27       	eor	r27, r27
    1462:	f0 0d       	add	r31, r0
    1464:	b1 1d       	adc	r27, r1
    1466:	63 9f       	mul	r22, r19
    1468:	aa 27       	eor	r26, r26
    146a:	f0 0d       	add	r31, r0
    146c:	b1 1d       	adc	r27, r1
    146e:	aa 1f       	adc	r26, r26
    1470:	64 9f       	mul	r22, r20
    1472:	66 27       	eor	r22, r22
    1474:	b0 0d       	add	r27, r0
    1476:	a1 1d       	adc	r26, r1
    1478:	66 1f       	adc	r22, r22
    147a:	82 9f       	mul	r24, r18
    147c:	22 27       	eor	r18, r18
    147e:	b0 0d       	add	r27, r0
    1480:	a1 1d       	adc	r26, r1
    1482:	62 1f       	adc	r22, r18
    1484:	73 9f       	mul	r23, r19
    1486:	b0 0d       	add	r27, r0
    1488:	a1 1d       	adc	r26, r1
    148a:	62 1f       	adc	r22, r18
    148c:	83 9f       	mul	r24, r19
    148e:	a0 0d       	add	r26, r0
    1490:	61 1d       	adc	r22, r1
    1492:	22 1f       	adc	r18, r18
    1494:	74 9f       	mul	r23, r20
    1496:	33 27       	eor	r19, r19
    1498:	a0 0d       	add	r26, r0
    149a:	61 1d       	adc	r22, r1
    149c:	23 1f       	adc	r18, r19
    149e:	84 9f       	mul	r24, r20
    14a0:	60 0d       	add	r22, r0
    14a2:	21 1d       	adc	r18, r1
    14a4:	82 2f       	mov	r24, r18
    14a6:	76 2f       	mov	r23, r22
    14a8:	6a 2f       	mov	r22, r26
    14aa:	11 24       	eor	r1, r1
    14ac:	9f 57       	subi	r25, 0x7F	; 127
    14ae:	50 40       	sbci	r21, 0x00	; 0
    14b0:	9a f0       	brmi	.+38     	; 0x14d8 <__mulsf3_pse+0x88>
    14b2:	f1 f0       	breq	.+60     	; 0x14f0 <__mulsf3_pse+0xa0>
    14b4:	88 23       	and	r24, r24
    14b6:	4a f0       	brmi	.+18     	; 0x14ca <__mulsf3_pse+0x7a>
    14b8:	ee 0f       	add	r30, r30
    14ba:	ff 1f       	adc	r31, r31
    14bc:	bb 1f       	adc	r27, r27
    14be:	66 1f       	adc	r22, r22
    14c0:	77 1f       	adc	r23, r23
    14c2:	88 1f       	adc	r24, r24
    14c4:	91 50       	subi	r25, 0x01	; 1
    14c6:	50 40       	sbci	r21, 0x00	; 0
    14c8:	a9 f7       	brne	.-22     	; 0x14b4 <__mulsf3_pse+0x64>
    14ca:	9e 3f       	cpi	r25, 0xFE	; 254
    14cc:	51 05       	cpc	r21, r1
    14ce:	80 f0       	brcs	.+32     	; 0x14f0 <__mulsf3_pse+0xa0>
    14d0:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <__fp_inf>
    14d4:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__fp_szero>
    14d8:	5f 3f       	cpi	r21, 0xFF	; 255
    14da:	e4 f3       	brlt	.-8      	; 0x14d4 <__mulsf3_pse+0x84>
    14dc:	98 3e       	cpi	r25, 0xE8	; 232
    14de:	d4 f3       	brlt	.-12     	; 0x14d4 <__mulsf3_pse+0x84>
    14e0:	86 95       	lsr	r24
    14e2:	77 95       	ror	r23
    14e4:	67 95       	ror	r22
    14e6:	b7 95       	ror	r27
    14e8:	f7 95       	ror	r31
    14ea:	e7 95       	ror	r30
    14ec:	9f 5f       	subi	r25, 0xFF	; 255
    14ee:	c1 f7       	brne	.-16     	; 0x14e0 <__mulsf3_pse+0x90>
    14f0:	fe 2b       	or	r31, r30
    14f2:	88 0f       	add	r24, r24
    14f4:	91 1d       	adc	r25, r1
    14f6:	96 95       	lsr	r25
    14f8:	87 95       	ror	r24
    14fa:	97 f9       	bld	r25, 7
    14fc:	08 95       	ret

000014fe <__udivmodsi4>:
    14fe:	a1 e2       	ldi	r26, 0x21	; 33
    1500:	1a 2e       	mov	r1, r26
    1502:	aa 1b       	sub	r26, r26
    1504:	bb 1b       	sub	r27, r27
    1506:	fd 01       	movw	r30, r26
    1508:	0d c0       	rjmp	.+26     	; 0x1524 <__udivmodsi4_ep>

0000150a <__udivmodsi4_loop>:
    150a:	aa 1f       	adc	r26, r26
    150c:	bb 1f       	adc	r27, r27
    150e:	ee 1f       	adc	r30, r30
    1510:	ff 1f       	adc	r31, r31
    1512:	a2 17       	cp	r26, r18
    1514:	b3 07       	cpc	r27, r19
    1516:	e4 07       	cpc	r30, r20
    1518:	f5 07       	cpc	r31, r21
    151a:	20 f0       	brcs	.+8      	; 0x1524 <__udivmodsi4_ep>
    151c:	a2 1b       	sub	r26, r18
    151e:	b3 0b       	sbc	r27, r19
    1520:	e4 0b       	sbc	r30, r20
    1522:	f5 0b       	sbc	r31, r21

00001524 <__udivmodsi4_ep>:
    1524:	66 1f       	adc	r22, r22
    1526:	77 1f       	adc	r23, r23
    1528:	88 1f       	adc	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	1a 94       	dec	r1
    152e:	69 f7       	brne	.-38     	; 0x150a <__udivmodsi4_loop>
    1530:	60 95       	com	r22
    1532:	70 95       	com	r23
    1534:	80 95       	com	r24
    1536:	90 95       	com	r25
    1538:	9b 01       	movw	r18, r22
    153a:	ac 01       	movw	r20, r24
    153c:	bd 01       	movw	r22, r26
    153e:	cf 01       	movw	r24, r30
    1540:	08 95       	ret

00001542 <__umulhisi3>:
    1542:	a2 9f       	mul	r26, r18
    1544:	b0 01       	movw	r22, r0
    1546:	b3 9f       	mul	r27, r19
    1548:	c0 01       	movw	r24, r0
    154a:	a3 9f       	mul	r26, r19
    154c:	70 0d       	add	r23, r0
    154e:	81 1d       	adc	r24, r1
    1550:	11 24       	eor	r1, r1
    1552:	91 1d       	adc	r25, r1
    1554:	b2 9f       	mul	r27, r18
    1556:	70 0d       	add	r23, r0
    1558:	81 1d       	adc	r24, r1
    155a:	11 24       	eor	r1, r1
    155c:	91 1d       	adc	r25, r1
    155e:	08 95       	ret

00001560 <malloc>:
    1560:	0f 93       	push	r16
    1562:	1f 93       	push	r17
    1564:	cf 93       	push	r28
    1566:	df 93       	push	r29
    1568:	82 30       	cpi	r24, 0x02	; 2
    156a:	91 05       	cpc	r25, r1
    156c:	10 f4       	brcc	.+4      	; 0x1572 <malloc+0x12>
    156e:	82 e0       	ldi	r24, 0x02	; 2
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	e0 91 30 38 	lds	r30, 0x3830	; 0x803830 <__flp>
    1576:	f0 91 31 38 	lds	r31, 0x3831	; 0x803831 <__flp+0x1>
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	a0 e0       	ldi	r26, 0x00	; 0
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	30 97       	sbiw	r30, 0x00	; 0
    1584:	19 f1       	breq	.+70     	; 0x15cc <malloc+0x6c>
    1586:	40 81       	ld	r20, Z
    1588:	51 81       	ldd	r21, Z+1	; 0x01
    158a:	02 81       	ldd	r16, Z+2	; 0x02
    158c:	13 81       	ldd	r17, Z+3	; 0x03
    158e:	48 17       	cp	r20, r24
    1590:	59 07       	cpc	r21, r25
    1592:	c8 f0       	brcs	.+50     	; 0x15c6 <malloc+0x66>
    1594:	84 17       	cp	r24, r20
    1596:	95 07       	cpc	r25, r21
    1598:	69 f4       	brne	.+26     	; 0x15b4 <malloc+0x54>
    159a:	10 97       	sbiw	r26, 0x00	; 0
    159c:	31 f0       	breq	.+12     	; 0x15aa <malloc+0x4a>
    159e:	12 96       	adiw	r26, 0x02	; 2
    15a0:	0c 93       	st	X, r16
    15a2:	12 97       	sbiw	r26, 0x02	; 2
    15a4:	13 96       	adiw	r26, 0x03	; 3
    15a6:	1c 93       	st	X, r17
    15a8:	27 c0       	rjmp	.+78     	; 0x15f8 <malloc+0x98>
    15aa:	00 93 30 38 	sts	0x3830, r16	; 0x803830 <__flp>
    15ae:	10 93 31 38 	sts	0x3831, r17	; 0x803831 <__flp+0x1>
    15b2:	22 c0       	rjmp	.+68     	; 0x15f8 <malloc+0x98>
    15b4:	21 15       	cp	r18, r1
    15b6:	31 05       	cpc	r19, r1
    15b8:	19 f0       	breq	.+6      	; 0x15c0 <malloc+0x60>
    15ba:	42 17       	cp	r20, r18
    15bc:	53 07       	cpc	r21, r19
    15be:	18 f4       	brcc	.+6      	; 0x15c6 <malloc+0x66>
    15c0:	9a 01       	movw	r18, r20
    15c2:	bd 01       	movw	r22, r26
    15c4:	ef 01       	movw	r28, r30
    15c6:	df 01       	movw	r26, r30
    15c8:	f8 01       	movw	r30, r16
    15ca:	db cf       	rjmp	.-74     	; 0x1582 <malloc+0x22>
    15cc:	21 15       	cp	r18, r1
    15ce:	31 05       	cpc	r19, r1
    15d0:	f9 f0       	breq	.+62     	; 0x1610 <malloc+0xb0>
    15d2:	28 1b       	sub	r18, r24
    15d4:	39 0b       	sbc	r19, r25
    15d6:	24 30       	cpi	r18, 0x04	; 4
    15d8:	31 05       	cpc	r19, r1
    15da:	80 f4       	brcc	.+32     	; 0x15fc <malloc+0x9c>
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	9b 81       	ldd	r25, Y+3	; 0x03
    15e0:	61 15       	cp	r22, r1
    15e2:	71 05       	cpc	r23, r1
    15e4:	21 f0       	breq	.+8      	; 0x15ee <malloc+0x8e>
    15e6:	fb 01       	movw	r30, r22
    15e8:	82 83       	std	Z+2, r24	; 0x02
    15ea:	93 83       	std	Z+3, r25	; 0x03
    15ec:	04 c0       	rjmp	.+8      	; 0x15f6 <malloc+0x96>
    15ee:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <__flp>
    15f2:	90 93 31 38 	sts	0x3831, r25	; 0x803831 <__flp+0x1>
    15f6:	fe 01       	movw	r30, r28
    15f8:	32 96       	adiw	r30, 0x02	; 2
    15fa:	44 c0       	rjmp	.+136    	; 0x1684 <malloc+0x124>
    15fc:	fe 01       	movw	r30, r28
    15fe:	e2 0f       	add	r30, r18
    1600:	f3 1f       	adc	r31, r19
    1602:	81 93       	st	Z+, r24
    1604:	91 93       	st	Z+, r25
    1606:	22 50       	subi	r18, 0x02	; 2
    1608:	31 09       	sbc	r19, r1
    160a:	28 83       	st	Y, r18
    160c:	39 83       	std	Y+1, r19	; 0x01
    160e:	3a c0       	rjmp	.+116    	; 0x1684 <malloc+0x124>
    1610:	20 91 2e 38 	lds	r18, 0x382E	; 0x80382e <__brkval>
    1614:	30 91 2f 38 	lds	r19, 0x382F	; 0x80382f <__brkval+0x1>
    1618:	23 2b       	or	r18, r19
    161a:	41 f4       	brne	.+16     	; 0x162c <malloc+0xcc>
    161c:	20 91 02 38 	lds	r18, 0x3802	; 0x803802 <__malloc_heap_start>
    1620:	30 91 03 38 	lds	r19, 0x3803	; 0x803803 <__malloc_heap_start+0x1>
    1624:	20 93 2e 38 	sts	0x382E, r18	; 0x80382e <__brkval>
    1628:	30 93 2f 38 	sts	0x382F, r19	; 0x80382f <__brkval+0x1>
    162c:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__data_start>
    1630:	30 91 01 38 	lds	r19, 0x3801	; 0x803801 <__data_start+0x1>
    1634:	21 15       	cp	r18, r1
    1636:	31 05       	cpc	r19, r1
    1638:	41 f4       	brne	.+16     	; 0x164a <malloc+0xea>
    163a:	2d b7       	in	r18, 0x3d	; 61
    163c:	3e b7       	in	r19, 0x3e	; 62
    163e:	40 91 04 38 	lds	r20, 0x3804	; 0x803804 <__malloc_margin>
    1642:	50 91 05 38 	lds	r21, 0x3805	; 0x803805 <__malloc_margin+0x1>
    1646:	24 1b       	sub	r18, r20
    1648:	35 0b       	sbc	r19, r21
    164a:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <__brkval>
    164e:	f0 91 2f 38 	lds	r31, 0x382F	; 0x80382f <__brkval+0x1>
    1652:	e2 17       	cp	r30, r18
    1654:	f3 07       	cpc	r31, r19
    1656:	a0 f4       	brcc	.+40     	; 0x1680 <malloc+0x120>
    1658:	2e 1b       	sub	r18, r30
    165a:	3f 0b       	sbc	r19, r31
    165c:	28 17       	cp	r18, r24
    165e:	39 07       	cpc	r19, r25
    1660:	78 f0       	brcs	.+30     	; 0x1680 <malloc+0x120>
    1662:	ac 01       	movw	r20, r24
    1664:	4e 5f       	subi	r20, 0xFE	; 254
    1666:	5f 4f       	sbci	r21, 0xFF	; 255
    1668:	24 17       	cp	r18, r20
    166a:	35 07       	cpc	r19, r21
    166c:	48 f0       	brcs	.+18     	; 0x1680 <malloc+0x120>
    166e:	4e 0f       	add	r20, r30
    1670:	5f 1f       	adc	r21, r31
    1672:	40 93 2e 38 	sts	0x382E, r20	; 0x80382e <__brkval>
    1676:	50 93 2f 38 	sts	0x382F, r21	; 0x80382f <__brkval+0x1>
    167a:	81 93       	st	Z+, r24
    167c:	91 93       	st	Z+, r25
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <malloc+0x124>
    1680:	e0 e0       	ldi	r30, 0x00	; 0
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	cf 01       	movw	r24, r30
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	1f 91       	pop	r17
    168c:	0f 91       	pop	r16
    168e:	08 95       	ret

00001690 <free>:
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
    1694:	00 97       	sbiw	r24, 0x00	; 0
    1696:	09 f4       	brne	.+2      	; 0x169a <free+0xa>
    1698:	81 c0       	rjmp	.+258    	; 0x179c <free+0x10c>
    169a:	fc 01       	movw	r30, r24
    169c:	32 97       	sbiw	r30, 0x02	; 2
    169e:	12 82       	std	Z+2, r1	; 0x02
    16a0:	13 82       	std	Z+3, r1	; 0x03
    16a2:	a0 91 30 38 	lds	r26, 0x3830	; 0x803830 <__flp>
    16a6:	b0 91 31 38 	lds	r27, 0x3831	; 0x803831 <__flp+0x1>
    16aa:	10 97       	sbiw	r26, 0x00	; 0
    16ac:	81 f4       	brne	.+32     	; 0x16ce <free+0x3e>
    16ae:	20 81       	ld	r18, Z
    16b0:	31 81       	ldd	r19, Z+1	; 0x01
    16b2:	82 0f       	add	r24, r18
    16b4:	93 1f       	adc	r25, r19
    16b6:	20 91 2e 38 	lds	r18, 0x382E	; 0x80382e <__brkval>
    16ba:	30 91 2f 38 	lds	r19, 0x382F	; 0x80382f <__brkval+0x1>
    16be:	28 17       	cp	r18, r24
    16c0:	39 07       	cpc	r19, r25
    16c2:	51 f5       	brne	.+84     	; 0x1718 <free+0x88>
    16c4:	e0 93 2e 38 	sts	0x382E, r30	; 0x80382e <__brkval>
    16c8:	f0 93 2f 38 	sts	0x382F, r31	; 0x80382f <__brkval+0x1>
    16cc:	67 c0       	rjmp	.+206    	; 0x179c <free+0x10c>
    16ce:	ed 01       	movw	r28, r26
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	ce 17       	cp	r28, r30
    16d6:	df 07       	cpc	r29, r31
    16d8:	40 f4       	brcc	.+16     	; 0x16ea <free+0x5a>
    16da:	4a 81       	ldd	r20, Y+2	; 0x02
    16dc:	5b 81       	ldd	r21, Y+3	; 0x03
    16de:	9e 01       	movw	r18, r28
    16e0:	41 15       	cp	r20, r1
    16e2:	51 05       	cpc	r21, r1
    16e4:	f1 f0       	breq	.+60     	; 0x1722 <free+0x92>
    16e6:	ea 01       	movw	r28, r20
    16e8:	f5 cf       	rjmp	.-22     	; 0x16d4 <free+0x44>
    16ea:	c2 83       	std	Z+2, r28	; 0x02
    16ec:	d3 83       	std	Z+3, r29	; 0x03
    16ee:	40 81       	ld	r20, Z
    16f0:	51 81       	ldd	r21, Z+1	; 0x01
    16f2:	84 0f       	add	r24, r20
    16f4:	95 1f       	adc	r25, r21
    16f6:	c8 17       	cp	r28, r24
    16f8:	d9 07       	cpc	r29, r25
    16fa:	59 f4       	brne	.+22     	; 0x1712 <free+0x82>
    16fc:	88 81       	ld	r24, Y
    16fe:	99 81       	ldd	r25, Y+1	; 0x01
    1700:	84 0f       	add	r24, r20
    1702:	95 1f       	adc	r25, r21
    1704:	02 96       	adiw	r24, 0x02	; 2
    1706:	80 83       	st	Z, r24
    1708:	91 83       	std	Z+1, r25	; 0x01
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	9b 81       	ldd	r25, Y+3	; 0x03
    170e:	82 83       	std	Z+2, r24	; 0x02
    1710:	93 83       	std	Z+3, r25	; 0x03
    1712:	21 15       	cp	r18, r1
    1714:	31 05       	cpc	r19, r1
    1716:	29 f4       	brne	.+10     	; 0x1722 <free+0x92>
    1718:	e0 93 30 38 	sts	0x3830, r30	; 0x803830 <__flp>
    171c:	f0 93 31 38 	sts	0x3831, r31	; 0x803831 <__flp+0x1>
    1720:	3d c0       	rjmp	.+122    	; 0x179c <free+0x10c>
    1722:	e9 01       	movw	r28, r18
    1724:	ea 83       	std	Y+2, r30	; 0x02
    1726:	fb 83       	std	Y+3, r31	; 0x03
    1728:	49 91       	ld	r20, Y+
    172a:	59 91       	ld	r21, Y+
    172c:	c4 0f       	add	r28, r20
    172e:	d5 1f       	adc	r29, r21
    1730:	ec 17       	cp	r30, r28
    1732:	fd 07       	cpc	r31, r29
    1734:	61 f4       	brne	.+24     	; 0x174e <free+0xbe>
    1736:	80 81       	ld	r24, Z
    1738:	91 81       	ldd	r25, Z+1	; 0x01
    173a:	84 0f       	add	r24, r20
    173c:	95 1f       	adc	r25, r21
    173e:	02 96       	adiw	r24, 0x02	; 2
    1740:	e9 01       	movw	r28, r18
    1742:	88 83       	st	Y, r24
    1744:	99 83       	std	Y+1, r25	; 0x01
    1746:	82 81       	ldd	r24, Z+2	; 0x02
    1748:	93 81       	ldd	r25, Z+3	; 0x03
    174a:	8a 83       	std	Y+2, r24	; 0x02
    174c:	9b 83       	std	Y+3, r25	; 0x03
    174e:	e0 e0       	ldi	r30, 0x00	; 0
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	12 96       	adiw	r26, 0x02	; 2
    1754:	8d 91       	ld	r24, X+
    1756:	9c 91       	ld	r25, X
    1758:	13 97       	sbiw	r26, 0x03	; 3
    175a:	00 97       	sbiw	r24, 0x00	; 0
    175c:	19 f0       	breq	.+6      	; 0x1764 <free+0xd4>
    175e:	fd 01       	movw	r30, r26
    1760:	dc 01       	movw	r26, r24
    1762:	f7 cf       	rjmp	.-18     	; 0x1752 <free+0xc2>
    1764:	8d 91       	ld	r24, X+
    1766:	9c 91       	ld	r25, X
    1768:	11 97       	sbiw	r26, 0x01	; 1
    176a:	9d 01       	movw	r18, r26
    176c:	2e 5f       	subi	r18, 0xFE	; 254
    176e:	3f 4f       	sbci	r19, 0xFF	; 255
    1770:	82 0f       	add	r24, r18
    1772:	93 1f       	adc	r25, r19
    1774:	20 91 2e 38 	lds	r18, 0x382E	; 0x80382e <__brkval>
    1778:	30 91 2f 38 	lds	r19, 0x382F	; 0x80382f <__brkval+0x1>
    177c:	28 17       	cp	r18, r24
    177e:	39 07       	cpc	r19, r25
    1780:	69 f4       	brne	.+26     	; 0x179c <free+0x10c>
    1782:	30 97       	sbiw	r30, 0x00	; 0
    1784:	29 f4       	brne	.+10     	; 0x1790 <free+0x100>
    1786:	10 92 30 38 	sts	0x3830, r1	; 0x803830 <__flp>
    178a:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <__flp+0x1>
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <free+0x104>
    1790:	12 82       	std	Z+2, r1	; 0x02
    1792:	13 82       	std	Z+3, r1	; 0x03
    1794:	a0 93 2e 38 	sts	0x382E, r26	; 0x80382e <__brkval>
    1798:	b0 93 2f 38 	sts	0x382F, r27	; 0x80382f <__brkval+0x1>
    179c:	df 91       	pop	r29
    179e:	cf 91       	pop	r28
    17a0:	08 95       	ret

000017a2 <snprintf>:
    17a2:	ae e0       	ldi	r26, 0x0E	; 14
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e7 ed       	ldi	r30, 0xD7	; 215
    17a8:	fb e0       	ldi	r31, 0x0B	; 11
    17aa:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__prologue_saves__+0x1c>
    17ae:	0d 89       	ldd	r16, Y+21	; 0x15
    17b0:	1e 89       	ldd	r17, Y+22	; 0x16
    17b2:	8f 89       	ldd	r24, Y+23	; 0x17
    17b4:	98 8d       	ldd	r25, Y+24	; 0x18
    17b6:	26 e0       	ldi	r18, 0x06	; 6
    17b8:	2c 83       	std	Y+4, r18	; 0x04
    17ba:	09 83       	std	Y+1, r16	; 0x01
    17bc:	1a 83       	std	Y+2, r17	; 0x02
    17be:	97 ff       	sbrs	r25, 7
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <snprintf+0x24>
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	90 e8       	ldi	r25, 0x80	; 128
    17c6:	01 97       	sbiw	r24, 0x01	; 1
    17c8:	8d 83       	std	Y+5, r24	; 0x05
    17ca:	9e 83       	std	Y+6, r25	; 0x06
    17cc:	ae 01       	movw	r20, r28
    17ce:	45 5e       	subi	r20, 0xE5	; 229
    17d0:	5f 4f       	sbci	r21, 0xFF	; 255
    17d2:	69 8d       	ldd	r22, Y+25	; 0x19
    17d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17d6:	ce 01       	movw	r24, r28
    17d8:	01 96       	adiw	r24, 0x01	; 1
    17da:	0e 94 01 0c 	call	0x1802	; 0x1802 <vfprintf>
    17de:	4d 81       	ldd	r20, Y+5	; 0x05
    17e0:	5e 81       	ldd	r21, Y+6	; 0x06
    17e2:	57 fd       	sbrc	r21, 7
    17e4:	0a c0       	rjmp	.+20     	; 0x17fa <snprintf+0x58>
    17e6:	2f 81       	ldd	r18, Y+7	; 0x07
    17e8:	38 85       	ldd	r19, Y+8	; 0x08
    17ea:	42 17       	cp	r20, r18
    17ec:	53 07       	cpc	r21, r19
    17ee:	0c f4       	brge	.+2      	; 0x17f2 <snprintf+0x50>
    17f0:	9a 01       	movw	r18, r20
    17f2:	f8 01       	movw	r30, r16
    17f4:	e2 0f       	add	r30, r18
    17f6:	f3 1f       	adc	r31, r19
    17f8:	10 82       	st	Z, r1
    17fa:	2e 96       	adiw	r28, 0x0e	; 14
    17fc:	e4 e0       	ldi	r30, 0x04	; 4
    17fe:	0c 94 b9 0e 	jmp	0x1d72	; 0x1d72 <__epilogue_restores__+0x1c>

00001802 <vfprintf>:
    1802:	ab e0       	ldi	r26, 0x0B	; 11
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	e7 e0       	ldi	r30, 0x07	; 7
    1808:	fc e0       	ldi	r31, 0x0C	; 12
    180a:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__prologue_saves__>
    180e:	6c 01       	movw	r12, r24
    1810:	7b 01       	movw	r14, r22
    1812:	8a 01       	movw	r16, r20
    1814:	fc 01       	movw	r30, r24
    1816:	16 82       	std	Z+6, r1	; 0x06
    1818:	17 82       	std	Z+7, r1	; 0x07
    181a:	83 81       	ldd	r24, Z+3	; 0x03
    181c:	81 ff       	sbrs	r24, 1
    181e:	cc c1       	rjmp	.+920    	; 0x1bb8 <vfprintf+0x3b6>
    1820:	ce 01       	movw	r24, r28
    1822:	01 96       	adiw	r24, 0x01	; 1
    1824:	3c 01       	movw	r6, r24
    1826:	f6 01       	movw	r30, r12
    1828:	93 81       	ldd	r25, Z+3	; 0x03
    182a:	f7 01       	movw	r30, r14
    182c:	93 fd       	sbrc	r25, 3
    182e:	85 91       	lpm	r24, Z+
    1830:	93 ff       	sbrs	r25, 3
    1832:	81 91       	ld	r24, Z+
    1834:	7f 01       	movw	r14, r30
    1836:	88 23       	and	r24, r24
    1838:	09 f4       	brne	.+2      	; 0x183c <vfprintf+0x3a>
    183a:	ba c1       	rjmp	.+884    	; 0x1bb0 <vfprintf+0x3ae>
    183c:	85 32       	cpi	r24, 0x25	; 37
    183e:	39 f4       	brne	.+14     	; 0x184e <vfprintf+0x4c>
    1840:	93 fd       	sbrc	r25, 3
    1842:	85 91       	lpm	r24, Z+
    1844:	93 ff       	sbrs	r25, 3
    1846:	81 91       	ld	r24, Z+
    1848:	7f 01       	movw	r14, r30
    184a:	85 32       	cpi	r24, 0x25	; 37
    184c:	29 f4       	brne	.+10     	; 0x1858 <vfprintf+0x56>
    184e:	b6 01       	movw	r22, r12
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <fputc>
    1856:	e7 cf       	rjmp	.-50     	; 0x1826 <vfprintf+0x24>
    1858:	91 2c       	mov	r9, r1
    185a:	21 2c       	mov	r2, r1
    185c:	31 2c       	mov	r3, r1
    185e:	ff e1       	ldi	r31, 0x1F	; 31
    1860:	f3 15       	cp	r31, r3
    1862:	d8 f0       	brcs	.+54     	; 0x189a <vfprintf+0x98>
    1864:	8b 32       	cpi	r24, 0x2B	; 43
    1866:	79 f0       	breq	.+30     	; 0x1886 <vfprintf+0x84>
    1868:	38 f4       	brcc	.+14     	; 0x1878 <vfprintf+0x76>
    186a:	80 32       	cpi	r24, 0x20	; 32
    186c:	79 f0       	breq	.+30     	; 0x188c <vfprintf+0x8a>
    186e:	83 32       	cpi	r24, 0x23	; 35
    1870:	a1 f4       	brne	.+40     	; 0x189a <vfprintf+0x98>
    1872:	23 2d       	mov	r18, r3
    1874:	20 61       	ori	r18, 0x10	; 16
    1876:	1d c0       	rjmp	.+58     	; 0x18b2 <vfprintf+0xb0>
    1878:	8d 32       	cpi	r24, 0x2D	; 45
    187a:	61 f0       	breq	.+24     	; 0x1894 <vfprintf+0x92>
    187c:	80 33       	cpi	r24, 0x30	; 48
    187e:	69 f4       	brne	.+26     	; 0x189a <vfprintf+0x98>
    1880:	23 2d       	mov	r18, r3
    1882:	21 60       	ori	r18, 0x01	; 1
    1884:	16 c0       	rjmp	.+44     	; 0x18b2 <vfprintf+0xb0>
    1886:	83 2d       	mov	r24, r3
    1888:	82 60       	ori	r24, 0x02	; 2
    188a:	38 2e       	mov	r3, r24
    188c:	e3 2d       	mov	r30, r3
    188e:	e4 60       	ori	r30, 0x04	; 4
    1890:	3e 2e       	mov	r3, r30
    1892:	2a c0       	rjmp	.+84     	; 0x18e8 <vfprintf+0xe6>
    1894:	f3 2d       	mov	r31, r3
    1896:	f8 60       	ori	r31, 0x08	; 8
    1898:	1d c0       	rjmp	.+58     	; 0x18d4 <vfprintf+0xd2>
    189a:	37 fc       	sbrc	r3, 7
    189c:	2d c0       	rjmp	.+90     	; 0x18f8 <vfprintf+0xf6>
    189e:	20 ed       	ldi	r18, 0xD0	; 208
    18a0:	28 0f       	add	r18, r24
    18a2:	2a 30       	cpi	r18, 0x0A	; 10
    18a4:	40 f0       	brcs	.+16     	; 0x18b6 <vfprintf+0xb4>
    18a6:	8e 32       	cpi	r24, 0x2E	; 46
    18a8:	b9 f4       	brne	.+46     	; 0x18d8 <vfprintf+0xd6>
    18aa:	36 fc       	sbrc	r3, 6
    18ac:	81 c1       	rjmp	.+770    	; 0x1bb0 <vfprintf+0x3ae>
    18ae:	23 2d       	mov	r18, r3
    18b0:	20 64       	ori	r18, 0x40	; 64
    18b2:	32 2e       	mov	r3, r18
    18b4:	19 c0       	rjmp	.+50     	; 0x18e8 <vfprintf+0xe6>
    18b6:	36 fe       	sbrs	r3, 6
    18b8:	06 c0       	rjmp	.+12     	; 0x18c6 <vfprintf+0xc4>
    18ba:	8a e0       	ldi	r24, 0x0A	; 10
    18bc:	98 9e       	mul	r9, r24
    18be:	20 0d       	add	r18, r0
    18c0:	11 24       	eor	r1, r1
    18c2:	92 2e       	mov	r9, r18
    18c4:	11 c0       	rjmp	.+34     	; 0x18e8 <vfprintf+0xe6>
    18c6:	ea e0       	ldi	r30, 0x0A	; 10
    18c8:	2e 9e       	mul	r2, r30
    18ca:	20 0d       	add	r18, r0
    18cc:	11 24       	eor	r1, r1
    18ce:	22 2e       	mov	r2, r18
    18d0:	f3 2d       	mov	r31, r3
    18d2:	f0 62       	ori	r31, 0x20	; 32
    18d4:	3f 2e       	mov	r3, r31
    18d6:	08 c0       	rjmp	.+16     	; 0x18e8 <vfprintf+0xe6>
    18d8:	8c 36       	cpi	r24, 0x6C	; 108
    18da:	21 f4       	brne	.+8      	; 0x18e4 <vfprintf+0xe2>
    18dc:	83 2d       	mov	r24, r3
    18de:	80 68       	ori	r24, 0x80	; 128
    18e0:	38 2e       	mov	r3, r24
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <vfprintf+0xe6>
    18e4:	88 36       	cpi	r24, 0x68	; 104
    18e6:	41 f4       	brne	.+16     	; 0x18f8 <vfprintf+0xf6>
    18e8:	f7 01       	movw	r30, r14
    18ea:	93 fd       	sbrc	r25, 3
    18ec:	85 91       	lpm	r24, Z+
    18ee:	93 ff       	sbrs	r25, 3
    18f0:	81 91       	ld	r24, Z+
    18f2:	7f 01       	movw	r14, r30
    18f4:	81 11       	cpse	r24, r1
    18f6:	b3 cf       	rjmp	.-154    	; 0x185e <vfprintf+0x5c>
    18f8:	98 2f       	mov	r25, r24
    18fa:	9f 7d       	andi	r25, 0xDF	; 223
    18fc:	95 54       	subi	r25, 0x45	; 69
    18fe:	93 30       	cpi	r25, 0x03	; 3
    1900:	28 f4       	brcc	.+10     	; 0x190c <vfprintf+0x10a>
    1902:	0c 5f       	subi	r16, 0xFC	; 252
    1904:	1f 4f       	sbci	r17, 0xFF	; 255
    1906:	9f e3       	ldi	r25, 0x3F	; 63
    1908:	99 83       	std	Y+1, r25	; 0x01
    190a:	0d c0       	rjmp	.+26     	; 0x1926 <vfprintf+0x124>
    190c:	83 36       	cpi	r24, 0x63	; 99
    190e:	31 f0       	breq	.+12     	; 0x191c <vfprintf+0x11a>
    1910:	83 37       	cpi	r24, 0x73	; 115
    1912:	71 f0       	breq	.+28     	; 0x1930 <vfprintf+0x12e>
    1914:	83 35       	cpi	r24, 0x53	; 83
    1916:	09 f0       	breq	.+2      	; 0x191a <vfprintf+0x118>
    1918:	59 c0       	rjmp	.+178    	; 0x19cc <vfprintf+0x1ca>
    191a:	21 c0       	rjmp	.+66     	; 0x195e <vfprintf+0x15c>
    191c:	f8 01       	movw	r30, r16
    191e:	80 81       	ld	r24, Z
    1920:	89 83       	std	Y+1, r24	; 0x01
    1922:	0e 5f       	subi	r16, 0xFE	; 254
    1924:	1f 4f       	sbci	r17, 0xFF	; 255
    1926:	88 24       	eor	r8, r8
    1928:	83 94       	inc	r8
    192a:	91 2c       	mov	r9, r1
    192c:	53 01       	movw	r10, r6
    192e:	13 c0       	rjmp	.+38     	; 0x1956 <vfprintf+0x154>
    1930:	28 01       	movw	r4, r16
    1932:	f2 e0       	ldi	r31, 0x02	; 2
    1934:	4f 0e       	add	r4, r31
    1936:	51 1c       	adc	r5, r1
    1938:	f8 01       	movw	r30, r16
    193a:	a0 80       	ld	r10, Z
    193c:	b1 80       	ldd	r11, Z+1	; 0x01
    193e:	36 fe       	sbrs	r3, 6
    1940:	03 c0       	rjmp	.+6      	; 0x1948 <vfprintf+0x146>
    1942:	69 2d       	mov	r22, r9
    1944:	70 e0       	ldi	r23, 0x00	; 0
    1946:	02 c0       	rjmp	.+4      	; 0x194c <vfprintf+0x14a>
    1948:	6f ef       	ldi	r22, 0xFF	; 255
    194a:	7f ef       	ldi	r23, 0xFF	; 255
    194c:	c5 01       	movw	r24, r10
    194e:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <strnlen>
    1952:	4c 01       	movw	r8, r24
    1954:	82 01       	movw	r16, r4
    1956:	f3 2d       	mov	r31, r3
    1958:	ff 77       	andi	r31, 0x7F	; 127
    195a:	3f 2e       	mov	r3, r31
    195c:	16 c0       	rjmp	.+44     	; 0x198a <vfprintf+0x188>
    195e:	28 01       	movw	r4, r16
    1960:	22 e0       	ldi	r18, 0x02	; 2
    1962:	42 0e       	add	r4, r18
    1964:	51 1c       	adc	r5, r1
    1966:	f8 01       	movw	r30, r16
    1968:	a0 80       	ld	r10, Z
    196a:	b1 80       	ldd	r11, Z+1	; 0x01
    196c:	36 fe       	sbrs	r3, 6
    196e:	03 c0       	rjmp	.+6      	; 0x1976 <vfprintf+0x174>
    1970:	69 2d       	mov	r22, r9
    1972:	70 e0       	ldi	r23, 0x00	; 0
    1974:	02 c0       	rjmp	.+4      	; 0x197a <vfprintf+0x178>
    1976:	6f ef       	ldi	r22, 0xFF	; 255
    1978:	7f ef       	ldi	r23, 0xFF	; 255
    197a:	c5 01       	movw	r24, r10
    197c:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <strnlen_P>
    1980:	4c 01       	movw	r8, r24
    1982:	f3 2d       	mov	r31, r3
    1984:	f0 68       	ori	r31, 0x80	; 128
    1986:	3f 2e       	mov	r3, r31
    1988:	82 01       	movw	r16, r4
    198a:	33 fc       	sbrc	r3, 3
    198c:	1b c0       	rjmp	.+54     	; 0x19c4 <vfprintf+0x1c2>
    198e:	82 2d       	mov	r24, r2
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	88 16       	cp	r8, r24
    1994:	99 06       	cpc	r9, r25
    1996:	b0 f4       	brcc	.+44     	; 0x19c4 <vfprintf+0x1c2>
    1998:	b6 01       	movw	r22, r12
    199a:	80 e2       	ldi	r24, 0x20	; 32
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <fputc>
    19a2:	2a 94       	dec	r2
    19a4:	f4 cf       	rjmp	.-24     	; 0x198e <vfprintf+0x18c>
    19a6:	f5 01       	movw	r30, r10
    19a8:	37 fc       	sbrc	r3, 7
    19aa:	85 91       	lpm	r24, Z+
    19ac:	37 fe       	sbrs	r3, 7
    19ae:	81 91       	ld	r24, Z+
    19b0:	5f 01       	movw	r10, r30
    19b2:	b6 01       	movw	r22, r12
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <fputc>
    19ba:	21 10       	cpse	r2, r1
    19bc:	2a 94       	dec	r2
    19be:	21 e0       	ldi	r18, 0x01	; 1
    19c0:	82 1a       	sub	r8, r18
    19c2:	91 08       	sbc	r9, r1
    19c4:	81 14       	cp	r8, r1
    19c6:	91 04       	cpc	r9, r1
    19c8:	71 f7       	brne	.-36     	; 0x19a6 <vfprintf+0x1a4>
    19ca:	e8 c0       	rjmp	.+464    	; 0x1b9c <vfprintf+0x39a>
    19cc:	84 36       	cpi	r24, 0x64	; 100
    19ce:	11 f0       	breq	.+4      	; 0x19d4 <vfprintf+0x1d2>
    19d0:	89 36       	cpi	r24, 0x69	; 105
    19d2:	41 f5       	brne	.+80     	; 0x1a24 <vfprintf+0x222>
    19d4:	f8 01       	movw	r30, r16
    19d6:	37 fe       	sbrs	r3, 7
    19d8:	07 c0       	rjmp	.+14     	; 0x19e8 <vfprintf+0x1e6>
    19da:	60 81       	ld	r22, Z
    19dc:	71 81       	ldd	r23, Z+1	; 0x01
    19de:	82 81       	ldd	r24, Z+2	; 0x02
    19e0:	93 81       	ldd	r25, Z+3	; 0x03
    19e2:	0c 5f       	subi	r16, 0xFC	; 252
    19e4:	1f 4f       	sbci	r17, 0xFF	; 255
    19e6:	08 c0       	rjmp	.+16     	; 0x19f8 <vfprintf+0x1f6>
    19e8:	60 81       	ld	r22, Z
    19ea:	71 81       	ldd	r23, Z+1	; 0x01
    19ec:	07 2e       	mov	r0, r23
    19ee:	00 0c       	add	r0, r0
    19f0:	88 0b       	sbc	r24, r24
    19f2:	99 0b       	sbc	r25, r25
    19f4:	0e 5f       	subi	r16, 0xFE	; 254
    19f6:	1f 4f       	sbci	r17, 0xFF	; 255
    19f8:	f3 2d       	mov	r31, r3
    19fa:	ff 76       	andi	r31, 0x6F	; 111
    19fc:	3f 2e       	mov	r3, r31
    19fe:	97 ff       	sbrs	r25, 7
    1a00:	09 c0       	rjmp	.+18     	; 0x1a14 <vfprintf+0x212>
    1a02:	90 95       	com	r25
    1a04:	80 95       	com	r24
    1a06:	70 95       	com	r23
    1a08:	61 95       	neg	r22
    1a0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a10:	f0 68       	ori	r31, 0x80	; 128
    1a12:	3f 2e       	mov	r3, r31
    1a14:	2a e0       	ldi	r18, 0x0A	; 10
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	a3 01       	movw	r20, r6
    1a1a:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__ultoa_invert>
    1a1e:	88 2e       	mov	r8, r24
    1a20:	86 18       	sub	r8, r6
    1a22:	45 c0       	rjmp	.+138    	; 0x1aae <vfprintf+0x2ac>
    1a24:	85 37       	cpi	r24, 0x75	; 117
    1a26:	31 f4       	brne	.+12     	; 0x1a34 <vfprintf+0x232>
    1a28:	23 2d       	mov	r18, r3
    1a2a:	2f 7e       	andi	r18, 0xEF	; 239
    1a2c:	b2 2e       	mov	r11, r18
    1a2e:	2a e0       	ldi	r18, 0x0A	; 10
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	25 c0       	rjmp	.+74     	; 0x1a7e <vfprintf+0x27c>
    1a34:	93 2d       	mov	r25, r3
    1a36:	99 7f       	andi	r25, 0xF9	; 249
    1a38:	b9 2e       	mov	r11, r25
    1a3a:	8f 36       	cpi	r24, 0x6F	; 111
    1a3c:	c1 f0       	breq	.+48     	; 0x1a6e <vfprintf+0x26c>
    1a3e:	18 f4       	brcc	.+6      	; 0x1a46 <vfprintf+0x244>
    1a40:	88 35       	cpi	r24, 0x58	; 88
    1a42:	79 f0       	breq	.+30     	; 0x1a62 <vfprintf+0x260>
    1a44:	b5 c0       	rjmp	.+362    	; 0x1bb0 <vfprintf+0x3ae>
    1a46:	80 37       	cpi	r24, 0x70	; 112
    1a48:	19 f0       	breq	.+6      	; 0x1a50 <vfprintf+0x24e>
    1a4a:	88 37       	cpi	r24, 0x78	; 120
    1a4c:	21 f0       	breq	.+8      	; 0x1a56 <vfprintf+0x254>
    1a4e:	b0 c0       	rjmp	.+352    	; 0x1bb0 <vfprintf+0x3ae>
    1a50:	e9 2f       	mov	r30, r25
    1a52:	e0 61       	ori	r30, 0x10	; 16
    1a54:	be 2e       	mov	r11, r30
    1a56:	b4 fe       	sbrs	r11, 4
    1a58:	0d c0       	rjmp	.+26     	; 0x1a74 <vfprintf+0x272>
    1a5a:	fb 2d       	mov	r31, r11
    1a5c:	f4 60       	ori	r31, 0x04	; 4
    1a5e:	bf 2e       	mov	r11, r31
    1a60:	09 c0       	rjmp	.+18     	; 0x1a74 <vfprintf+0x272>
    1a62:	34 fe       	sbrs	r3, 4
    1a64:	0a c0       	rjmp	.+20     	; 0x1a7a <vfprintf+0x278>
    1a66:	29 2f       	mov	r18, r25
    1a68:	26 60       	ori	r18, 0x06	; 6
    1a6a:	b2 2e       	mov	r11, r18
    1a6c:	06 c0       	rjmp	.+12     	; 0x1a7a <vfprintf+0x278>
    1a6e:	28 e0       	ldi	r18, 0x08	; 8
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	05 c0       	rjmp	.+10     	; 0x1a7e <vfprintf+0x27c>
    1a74:	20 e1       	ldi	r18, 0x10	; 16
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	02 c0       	rjmp	.+4      	; 0x1a7e <vfprintf+0x27c>
    1a7a:	20 e1       	ldi	r18, 0x10	; 16
    1a7c:	32 e0       	ldi	r19, 0x02	; 2
    1a7e:	f8 01       	movw	r30, r16
    1a80:	b7 fe       	sbrs	r11, 7
    1a82:	07 c0       	rjmp	.+14     	; 0x1a92 <vfprintf+0x290>
    1a84:	60 81       	ld	r22, Z
    1a86:	71 81       	ldd	r23, Z+1	; 0x01
    1a88:	82 81       	ldd	r24, Z+2	; 0x02
    1a8a:	93 81       	ldd	r25, Z+3	; 0x03
    1a8c:	0c 5f       	subi	r16, 0xFC	; 252
    1a8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a90:	06 c0       	rjmp	.+12     	; 0x1a9e <vfprintf+0x29c>
    1a92:	60 81       	ld	r22, Z
    1a94:	71 81       	ldd	r23, Z+1	; 0x01
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	0e 5f       	subi	r16, 0xFE	; 254
    1a9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9e:	a3 01       	movw	r20, r6
    1aa0:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <__ultoa_invert>
    1aa4:	88 2e       	mov	r8, r24
    1aa6:	86 18       	sub	r8, r6
    1aa8:	fb 2d       	mov	r31, r11
    1aaa:	ff 77       	andi	r31, 0x7F	; 127
    1aac:	3f 2e       	mov	r3, r31
    1aae:	36 fe       	sbrs	r3, 6
    1ab0:	0d c0       	rjmp	.+26     	; 0x1acc <vfprintf+0x2ca>
    1ab2:	23 2d       	mov	r18, r3
    1ab4:	2e 7f       	andi	r18, 0xFE	; 254
    1ab6:	a2 2e       	mov	r10, r18
    1ab8:	89 14       	cp	r8, r9
    1aba:	58 f4       	brcc	.+22     	; 0x1ad2 <vfprintf+0x2d0>
    1abc:	34 fe       	sbrs	r3, 4
    1abe:	0b c0       	rjmp	.+22     	; 0x1ad6 <vfprintf+0x2d4>
    1ac0:	32 fc       	sbrc	r3, 2
    1ac2:	09 c0       	rjmp	.+18     	; 0x1ad6 <vfprintf+0x2d4>
    1ac4:	83 2d       	mov	r24, r3
    1ac6:	8e 7e       	andi	r24, 0xEE	; 238
    1ac8:	a8 2e       	mov	r10, r24
    1aca:	05 c0       	rjmp	.+10     	; 0x1ad6 <vfprintf+0x2d4>
    1acc:	b8 2c       	mov	r11, r8
    1ace:	a3 2c       	mov	r10, r3
    1ad0:	03 c0       	rjmp	.+6      	; 0x1ad8 <vfprintf+0x2d6>
    1ad2:	b8 2c       	mov	r11, r8
    1ad4:	01 c0       	rjmp	.+2      	; 0x1ad8 <vfprintf+0x2d6>
    1ad6:	b9 2c       	mov	r11, r9
    1ad8:	a4 fe       	sbrs	r10, 4
    1ada:	0f c0       	rjmp	.+30     	; 0x1afa <vfprintf+0x2f8>
    1adc:	fe 01       	movw	r30, r28
    1ade:	e8 0d       	add	r30, r8
    1ae0:	f1 1d       	adc	r31, r1
    1ae2:	80 81       	ld	r24, Z
    1ae4:	80 33       	cpi	r24, 0x30	; 48
    1ae6:	21 f4       	brne	.+8      	; 0x1af0 <vfprintf+0x2ee>
    1ae8:	9a 2d       	mov	r25, r10
    1aea:	99 7e       	andi	r25, 0xE9	; 233
    1aec:	a9 2e       	mov	r10, r25
    1aee:	09 c0       	rjmp	.+18     	; 0x1b02 <vfprintf+0x300>
    1af0:	a2 fe       	sbrs	r10, 2
    1af2:	06 c0       	rjmp	.+12     	; 0x1b00 <vfprintf+0x2fe>
    1af4:	b3 94       	inc	r11
    1af6:	b3 94       	inc	r11
    1af8:	04 c0       	rjmp	.+8      	; 0x1b02 <vfprintf+0x300>
    1afa:	8a 2d       	mov	r24, r10
    1afc:	86 78       	andi	r24, 0x86	; 134
    1afe:	09 f0       	breq	.+2      	; 0x1b02 <vfprintf+0x300>
    1b00:	b3 94       	inc	r11
    1b02:	a3 fc       	sbrc	r10, 3
    1b04:	11 c0       	rjmp	.+34     	; 0x1b28 <vfprintf+0x326>
    1b06:	a0 fe       	sbrs	r10, 0
    1b08:	06 c0       	rjmp	.+12     	; 0x1b16 <vfprintf+0x314>
    1b0a:	b2 14       	cp	r11, r2
    1b0c:	88 f4       	brcc	.+34     	; 0x1b30 <vfprintf+0x32e>
    1b0e:	28 0c       	add	r2, r8
    1b10:	92 2c       	mov	r9, r2
    1b12:	9b 18       	sub	r9, r11
    1b14:	0e c0       	rjmp	.+28     	; 0x1b32 <vfprintf+0x330>
    1b16:	b2 14       	cp	r11, r2
    1b18:	60 f4       	brcc	.+24     	; 0x1b32 <vfprintf+0x330>
    1b1a:	b6 01       	movw	r22, r12
    1b1c:	80 e2       	ldi	r24, 0x20	; 32
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <fputc>
    1b24:	b3 94       	inc	r11
    1b26:	f7 cf       	rjmp	.-18     	; 0x1b16 <vfprintf+0x314>
    1b28:	b2 14       	cp	r11, r2
    1b2a:	18 f4       	brcc	.+6      	; 0x1b32 <vfprintf+0x330>
    1b2c:	2b 18       	sub	r2, r11
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <vfprintf+0x332>
    1b30:	98 2c       	mov	r9, r8
    1b32:	21 2c       	mov	r2, r1
    1b34:	a4 fe       	sbrs	r10, 4
    1b36:	10 c0       	rjmp	.+32     	; 0x1b58 <vfprintf+0x356>
    1b38:	b6 01       	movw	r22, r12
    1b3a:	80 e3       	ldi	r24, 0x30	; 48
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <fputc>
    1b42:	a2 fe       	sbrs	r10, 2
    1b44:	17 c0       	rjmp	.+46     	; 0x1b74 <vfprintf+0x372>
    1b46:	a1 fc       	sbrc	r10, 1
    1b48:	03 c0       	rjmp	.+6      	; 0x1b50 <vfprintf+0x34e>
    1b4a:	88 e7       	ldi	r24, 0x78	; 120
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <vfprintf+0x352>
    1b50:	88 e5       	ldi	r24, 0x58	; 88
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	b6 01       	movw	r22, r12
    1b56:	0c c0       	rjmp	.+24     	; 0x1b70 <vfprintf+0x36e>
    1b58:	8a 2d       	mov	r24, r10
    1b5a:	86 78       	andi	r24, 0x86	; 134
    1b5c:	59 f0       	breq	.+22     	; 0x1b74 <vfprintf+0x372>
    1b5e:	a1 fe       	sbrs	r10, 1
    1b60:	02 c0       	rjmp	.+4      	; 0x1b66 <vfprintf+0x364>
    1b62:	8b e2       	ldi	r24, 0x2B	; 43
    1b64:	01 c0       	rjmp	.+2      	; 0x1b68 <vfprintf+0x366>
    1b66:	80 e2       	ldi	r24, 0x20	; 32
    1b68:	a7 fc       	sbrc	r10, 7
    1b6a:	8d e2       	ldi	r24, 0x2D	; 45
    1b6c:	b6 01       	movw	r22, r12
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <fputc>
    1b74:	89 14       	cp	r8, r9
    1b76:	38 f4       	brcc	.+14     	; 0x1b86 <vfprintf+0x384>
    1b78:	b6 01       	movw	r22, r12
    1b7a:	80 e3       	ldi	r24, 0x30	; 48
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <fputc>
    1b82:	9a 94       	dec	r9
    1b84:	f7 cf       	rjmp	.-18     	; 0x1b74 <vfprintf+0x372>
    1b86:	8a 94       	dec	r8
    1b88:	f3 01       	movw	r30, r6
    1b8a:	e8 0d       	add	r30, r8
    1b8c:	f1 1d       	adc	r31, r1
    1b8e:	80 81       	ld	r24, Z
    1b90:	b6 01       	movw	r22, r12
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <fputc>
    1b98:	81 10       	cpse	r8, r1
    1b9a:	f5 cf       	rjmp	.-22     	; 0x1b86 <vfprintf+0x384>
    1b9c:	22 20       	and	r2, r2
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <vfprintf+0x3a0>
    1ba0:	42 ce       	rjmp	.-892    	; 0x1826 <vfprintf+0x24>
    1ba2:	b6 01       	movw	r22, r12
    1ba4:	80 e2       	ldi	r24, 0x20	; 32
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <fputc>
    1bac:	2a 94       	dec	r2
    1bae:	f6 cf       	rjmp	.-20     	; 0x1b9c <vfprintf+0x39a>
    1bb0:	f6 01       	movw	r30, r12
    1bb2:	86 81       	ldd	r24, Z+6	; 0x06
    1bb4:	97 81       	ldd	r25, Z+7	; 0x07
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <vfprintf+0x3ba>
    1bb8:	8f ef       	ldi	r24, 0xFF	; 255
    1bba:	9f ef       	ldi	r25, 0xFF	; 255
    1bbc:	2b 96       	adiw	r28, 0x0b	; 11
    1bbe:	e2 e1       	ldi	r30, 0x12	; 18
    1bc0:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <__epilogue_restores__>

00001bc4 <strnlen_P>:
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	05 90       	lpm	r0, Z+
    1bc8:	61 50       	subi	r22, 0x01	; 1
    1bca:	70 40       	sbci	r23, 0x00	; 0
    1bcc:	01 10       	cpse	r0, r1
    1bce:	d8 f7       	brcc	.-10     	; 0x1bc6 <strnlen_P+0x2>
    1bd0:	80 95       	com	r24
    1bd2:	90 95       	com	r25
    1bd4:	8e 0f       	add	r24, r30
    1bd6:	9f 1f       	adc	r25, r31
    1bd8:	08 95       	ret

00001bda <strnlen>:
    1bda:	fc 01       	movw	r30, r24
    1bdc:	61 50       	subi	r22, 0x01	; 1
    1bde:	70 40       	sbci	r23, 0x00	; 0
    1be0:	01 90       	ld	r0, Z+
    1be2:	01 10       	cpse	r0, r1
    1be4:	d8 f7       	brcc	.-10     	; 0x1bdc <strnlen+0x2>
    1be6:	80 95       	com	r24
    1be8:	90 95       	com	r25
    1bea:	8e 0f       	add	r24, r30
    1bec:	9f 1f       	adc	r25, r31
    1bee:	08 95       	ret

00001bf0 <fputc>:
    1bf0:	0f 93       	push	r16
    1bf2:	1f 93       	push	r17
    1bf4:	cf 93       	push	r28
    1bf6:	df 93       	push	r29
    1bf8:	fb 01       	movw	r30, r22
    1bfa:	23 81       	ldd	r18, Z+3	; 0x03
    1bfc:	21 fd       	sbrc	r18, 1
    1bfe:	03 c0       	rjmp	.+6      	; 0x1c06 <fputc+0x16>
    1c00:	8f ef       	ldi	r24, 0xFF	; 255
    1c02:	9f ef       	ldi	r25, 0xFF	; 255
    1c04:	2c c0       	rjmp	.+88     	; 0x1c5e <fputc+0x6e>
    1c06:	22 ff       	sbrs	r18, 2
    1c08:	16 c0       	rjmp	.+44     	; 0x1c36 <fputc+0x46>
    1c0a:	46 81       	ldd	r20, Z+6	; 0x06
    1c0c:	57 81       	ldd	r21, Z+7	; 0x07
    1c0e:	24 81       	ldd	r18, Z+4	; 0x04
    1c10:	35 81       	ldd	r19, Z+5	; 0x05
    1c12:	42 17       	cp	r20, r18
    1c14:	53 07       	cpc	r21, r19
    1c16:	44 f4       	brge	.+16     	; 0x1c28 <fputc+0x38>
    1c18:	a0 81       	ld	r26, Z
    1c1a:	b1 81       	ldd	r27, Z+1	; 0x01
    1c1c:	9d 01       	movw	r18, r26
    1c1e:	2f 5f       	subi	r18, 0xFF	; 255
    1c20:	3f 4f       	sbci	r19, 0xFF	; 255
    1c22:	20 83       	st	Z, r18
    1c24:	31 83       	std	Z+1, r19	; 0x01
    1c26:	8c 93       	st	X, r24
    1c28:	26 81       	ldd	r18, Z+6	; 0x06
    1c2a:	37 81       	ldd	r19, Z+7	; 0x07
    1c2c:	2f 5f       	subi	r18, 0xFF	; 255
    1c2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c30:	26 83       	std	Z+6, r18	; 0x06
    1c32:	37 83       	std	Z+7, r19	; 0x07
    1c34:	14 c0       	rjmp	.+40     	; 0x1c5e <fputc+0x6e>
    1c36:	8b 01       	movw	r16, r22
    1c38:	ec 01       	movw	r28, r24
    1c3a:	fb 01       	movw	r30, r22
    1c3c:	00 84       	ldd	r0, Z+8	; 0x08
    1c3e:	f1 85       	ldd	r31, Z+9	; 0x09
    1c40:	e0 2d       	mov	r30, r0
    1c42:	09 95       	icall
    1c44:	89 2b       	or	r24, r25
    1c46:	e1 f6       	brne	.-72     	; 0x1c00 <fputc+0x10>
    1c48:	d8 01       	movw	r26, r16
    1c4a:	16 96       	adiw	r26, 0x06	; 6
    1c4c:	8d 91       	ld	r24, X+
    1c4e:	9c 91       	ld	r25, X
    1c50:	17 97       	sbiw	r26, 0x07	; 7
    1c52:	01 96       	adiw	r24, 0x01	; 1
    1c54:	16 96       	adiw	r26, 0x06	; 6
    1c56:	8d 93       	st	X+, r24
    1c58:	9c 93       	st	X, r25
    1c5a:	17 97       	sbiw	r26, 0x07	; 7
    1c5c:	ce 01       	movw	r24, r28
    1c5e:	df 91       	pop	r29
    1c60:	cf 91       	pop	r28
    1c62:	1f 91       	pop	r17
    1c64:	0f 91       	pop	r16
    1c66:	08 95       	ret

00001c68 <__ultoa_invert>:
    1c68:	fa 01       	movw	r30, r20
    1c6a:	aa 27       	eor	r26, r26
    1c6c:	28 30       	cpi	r18, 0x08	; 8
    1c6e:	51 f1       	breq	.+84     	; 0x1cc4 <__ultoa_invert+0x5c>
    1c70:	20 31       	cpi	r18, 0x10	; 16
    1c72:	81 f1       	breq	.+96     	; 0x1cd4 <__ultoa_invert+0x6c>
    1c74:	e8 94       	clt
    1c76:	6f 93       	push	r22
    1c78:	6e 7f       	andi	r22, 0xFE	; 254
    1c7a:	6e 5f       	subi	r22, 0xFE	; 254
    1c7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c80:	9f 4f       	sbci	r25, 0xFF	; 255
    1c82:	af 4f       	sbci	r26, 0xFF	; 255
    1c84:	b1 e0       	ldi	r27, 0x01	; 1
    1c86:	3e d0       	rcall	.+124    	; 0x1d04 <__ultoa_invert+0x9c>
    1c88:	b4 e0       	ldi	r27, 0x04	; 4
    1c8a:	3c d0       	rcall	.+120    	; 0x1d04 <__ultoa_invert+0x9c>
    1c8c:	67 0f       	add	r22, r23
    1c8e:	78 1f       	adc	r23, r24
    1c90:	89 1f       	adc	r24, r25
    1c92:	9a 1f       	adc	r25, r26
    1c94:	a1 1d       	adc	r26, r1
    1c96:	68 0f       	add	r22, r24
    1c98:	79 1f       	adc	r23, r25
    1c9a:	8a 1f       	adc	r24, r26
    1c9c:	91 1d       	adc	r25, r1
    1c9e:	a1 1d       	adc	r26, r1
    1ca0:	6a 0f       	add	r22, r26
    1ca2:	71 1d       	adc	r23, r1
    1ca4:	81 1d       	adc	r24, r1
    1ca6:	91 1d       	adc	r25, r1
    1ca8:	a1 1d       	adc	r26, r1
    1caa:	20 d0       	rcall	.+64     	; 0x1cec <__ultoa_invert+0x84>
    1cac:	09 f4       	brne	.+2      	; 0x1cb0 <__ultoa_invert+0x48>
    1cae:	68 94       	set
    1cb0:	3f 91       	pop	r19
    1cb2:	2a e0       	ldi	r18, 0x0A	; 10
    1cb4:	26 9f       	mul	r18, r22
    1cb6:	11 24       	eor	r1, r1
    1cb8:	30 19       	sub	r19, r0
    1cba:	30 5d       	subi	r19, 0xD0	; 208
    1cbc:	31 93       	st	Z+, r19
    1cbe:	de f6       	brtc	.-74     	; 0x1c76 <__ultoa_invert+0xe>
    1cc0:	cf 01       	movw	r24, r30
    1cc2:	08 95       	ret
    1cc4:	46 2f       	mov	r20, r22
    1cc6:	47 70       	andi	r20, 0x07	; 7
    1cc8:	40 5d       	subi	r20, 0xD0	; 208
    1cca:	41 93       	st	Z+, r20
    1ccc:	b3 e0       	ldi	r27, 0x03	; 3
    1cce:	0f d0       	rcall	.+30     	; 0x1cee <__ultoa_invert+0x86>
    1cd0:	c9 f7       	brne	.-14     	; 0x1cc4 <__ultoa_invert+0x5c>
    1cd2:	f6 cf       	rjmp	.-20     	; 0x1cc0 <__ultoa_invert+0x58>
    1cd4:	46 2f       	mov	r20, r22
    1cd6:	4f 70       	andi	r20, 0x0F	; 15
    1cd8:	40 5d       	subi	r20, 0xD0	; 208
    1cda:	4a 33       	cpi	r20, 0x3A	; 58
    1cdc:	18 f0       	brcs	.+6      	; 0x1ce4 <__ultoa_invert+0x7c>
    1cde:	49 5d       	subi	r20, 0xD9	; 217
    1ce0:	31 fd       	sbrc	r19, 1
    1ce2:	40 52       	subi	r20, 0x20	; 32
    1ce4:	41 93       	st	Z+, r20
    1ce6:	02 d0       	rcall	.+4      	; 0x1cec <__ultoa_invert+0x84>
    1ce8:	a9 f7       	brne	.-22     	; 0x1cd4 <__ultoa_invert+0x6c>
    1cea:	ea cf       	rjmp	.-44     	; 0x1cc0 <__ultoa_invert+0x58>
    1cec:	b4 e0       	ldi	r27, 0x04	; 4
    1cee:	a6 95       	lsr	r26
    1cf0:	97 95       	ror	r25
    1cf2:	87 95       	ror	r24
    1cf4:	77 95       	ror	r23
    1cf6:	67 95       	ror	r22
    1cf8:	ba 95       	dec	r27
    1cfa:	c9 f7       	brne	.-14     	; 0x1cee <__ultoa_invert+0x86>
    1cfc:	00 97       	sbiw	r24, 0x00	; 0
    1cfe:	61 05       	cpc	r22, r1
    1d00:	71 05       	cpc	r23, r1
    1d02:	08 95       	ret
    1d04:	9b 01       	movw	r18, r22
    1d06:	ac 01       	movw	r20, r24
    1d08:	0a 2e       	mov	r0, r26
    1d0a:	06 94       	lsr	r0
    1d0c:	57 95       	ror	r21
    1d0e:	47 95       	ror	r20
    1d10:	37 95       	ror	r19
    1d12:	27 95       	ror	r18
    1d14:	ba 95       	dec	r27
    1d16:	c9 f7       	brne	.-14     	; 0x1d0a <__ultoa_invert+0xa2>
    1d18:	62 0f       	add	r22, r18
    1d1a:	73 1f       	adc	r23, r19
    1d1c:	84 1f       	adc	r24, r20
    1d1e:	95 1f       	adc	r25, r21
    1d20:	a0 1d       	adc	r26, r0
    1d22:	08 95       	ret

00001d24 <__prologue_saves__>:
    1d24:	2f 92       	push	r2
    1d26:	3f 92       	push	r3
    1d28:	4f 92       	push	r4
    1d2a:	5f 92       	push	r5
    1d2c:	6f 92       	push	r6
    1d2e:	7f 92       	push	r7
    1d30:	8f 92       	push	r8
    1d32:	9f 92       	push	r9
    1d34:	af 92       	push	r10
    1d36:	bf 92       	push	r11
    1d38:	cf 92       	push	r12
    1d3a:	df 92       	push	r13
    1d3c:	ef 92       	push	r14
    1d3e:	ff 92       	push	r15
    1d40:	0f 93       	push	r16
    1d42:	1f 93       	push	r17
    1d44:	cf 93       	push	r28
    1d46:	df 93       	push	r29
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	ca 1b       	sub	r28, r26
    1d4e:	db 0b       	sbc	r29, r27
    1d50:	cd bf       	out	0x3d, r28	; 61
    1d52:	de bf       	out	0x3e, r29	; 62
    1d54:	09 94       	ijmp

00001d56 <__epilogue_restores__>:
    1d56:	2a 88       	ldd	r2, Y+18	; 0x12
    1d58:	39 88       	ldd	r3, Y+17	; 0x11
    1d5a:	48 88       	ldd	r4, Y+16	; 0x10
    1d5c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d5e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d60:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d62:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d64:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d66:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d68:	b9 84       	ldd	r11, Y+9	; 0x09
    1d6a:	c8 84       	ldd	r12, Y+8	; 0x08
    1d6c:	df 80       	ldd	r13, Y+7	; 0x07
    1d6e:	ee 80       	ldd	r14, Y+6	; 0x06
    1d70:	fd 80       	ldd	r15, Y+5	; 0x05
    1d72:	0c 81       	ldd	r16, Y+4	; 0x04
    1d74:	1b 81       	ldd	r17, Y+3	; 0x03
    1d76:	aa 81       	ldd	r26, Y+2	; 0x02
    1d78:	b9 81       	ldd	r27, Y+1	; 0x01
    1d7a:	ce 0f       	add	r28, r30
    1d7c:	d1 1d       	adc	r29, r1
    1d7e:	cd bf       	out	0x3d, r28	; 61
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	ed 01       	movw	r28, r26
    1d84:	08 95       	ret

00001d86 <_exit>:
    1d86:	f8 94       	cli

00001d88 <__stop_program>:
    1d88:	ff cf       	rjmp	.-2      	; 0x1d88 <__stop_program>
