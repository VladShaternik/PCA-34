
PCA-34.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00803800  00002974  00002a28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002932  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000042  0000a932  00002932  000029e6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000df  00803808  00803808  00002a30  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00002a30  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002a8c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000218  00000000  00000000  00002ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005964  00000000  00000000  00002ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000024de  00000000  00000000  0000864c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001e21  00000000  00000000  0000ab2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000688  00000000  00000000  0000c94c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000018dd  00000000  00000000  0000cfd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000027e3  00000000  00000000  0000e8b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000160  00000000  00000000  00011094  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <__vector_6>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <__vector_25>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	cd bf       	out	0x3d, r28	; 61
      84:	df e3       	ldi	r29, 0x3F	; 63
      86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
      88:	18 e3       	ldi	r17, 0x38	; 56
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b8 e3       	ldi	r27, 0x38	; 56
      8e:	e4 e7       	ldi	r30, 0x74	; 116
      90:	f9 e2       	ldi	r31, 0x29	; 41
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a8 30       	cpi	r26, 0x08	; 8
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	28 e3       	ldi	r18, 0x38	; 56
      a0:	a8 e0       	ldi	r26, 0x08	; 8
      a2:	b8 e3       	ldi	r27, 0x38	; 56
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a7 3e       	cpi	r26, 0xE7	; 231
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 0d 0b 	call	0x161a	; 0x161a <main>
      b2:	0c 94 97 14 	jmp	0x292e	; 0x292e <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <lcd_update>:
	
	lcd_update(TRUE);
}

void lcd_update(bool two_line)
{
      ba:	9f 92       	push	r9
      bc:	af 92       	push	r10
      be:	bf 92       	push	r11
      c0:	cf 92       	push	r12
      c2:	df 92       	push	r13
      c4:	ef 92       	push	r14
      c6:	ff 92       	push	r15
      c8:	0f 93       	push	r16
      ca:	1f 93       	push	r17
      cc:	cf 93       	push	r28
      ce:	df 93       	push	r29
	unsigned char n = two_line ? 2 : 1;
      d0:	81 11       	cpse	r24, r1
      d2:	2b c0       	rjmp	.+86     	; 0x12a <lcd_update+0x70>
      d4:	99 24       	eor	r9, r9
      d6:	93 94       	inc	r9
      d8:	2b c0       	rjmp	.+86     	; 0x130 <lcd_update+0x76>
	for (unsigned char i = 0; i < n; i++)
	{
		for (unsigned char j = 0; j < 20; j++)
		{
			if (lcd_screen[i][j] != lcd_screen_update[i][j])
      da:	f7 01       	movw	r30, r14
      dc:	20 81       	ld	r18, Z
      de:	31 81       	ldd	r19, Z+1	; 0x01
      e0:	88 81       	ld	r24, Y
      e2:	99 81       	ldd	r25, Y+1	; 0x01
      e4:	28 17       	cp	r18, r24
      e6:	39 07       	cpc	r19, r25
      e8:	61 f0       	breq	.+24     	; 0x102 <lcd_update+0x48>
			{
				setCursor(i, j);
      ea:	61 2f       	mov	r22, r17
      ec:	80 2f       	mov	r24, r16
      ee:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <setCursor>
				display_character(lcd_screen_update[i][j]);
      f2:	88 81       	ld	r24, Y
      f4:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <display_character>
				lcd_screen[i][j] = lcd_screen_update[i][j];
      f8:	88 81       	ld	r24, Y
      fa:	99 81       	ldd	r25, Y+1	; 0x01
      fc:	f7 01       	movw	r30, r14
      fe:	80 83       	st	Z, r24
     100:	91 83       	std	Z+1, r25	; 0x01
void lcd_update(bool two_line)
{
	unsigned char n = two_line ? 2 : 1;
	for (unsigned char i = 0; i < n; i++)
	{
		for (unsigned char j = 0; j < 20; j++)
     102:	1f 5f       	subi	r17, 0xFF	; 255
     104:	f2 e0       	ldi	r31, 0x02	; 2
     106:	ef 0e       	add	r14, r31
     108:	f1 1c       	adc	r15, r1
     10a:	22 96       	adiw	r28, 0x02	; 2
     10c:	14 31       	cpi	r17, 0x14	; 20
     10e:	29 f7       	brne	.-54     	; 0xda <lcd_update+0x20>
}

void lcd_update(bool two_line)
{
	unsigned char n = two_line ? 2 : 1;
	for (unsigned char i = 0; i < n; i++)
     110:	0f 5f       	subi	r16, 0xFF	; 255
     112:	88 e2       	ldi	r24, 0x28	; 40
     114:	a8 0e       	add	r10, r24
     116:	b1 1c       	adc	r11, r1
     118:	e8 e2       	ldi	r30, 0x28	; 40
     11a:	ce 0e       	add	r12, r30
     11c:	d1 1c       	adc	r13, r1
     11e:	09 15       	cp	r16, r9
     120:	a8 f4       	brcc	.+42     	; 0x14c <lcd_update+0x92>
	
	lcd_update(TRUE);
}

void lcd_update(bool two_line)
{
     122:	e6 01       	movw	r28, r12
     124:	75 01       	movw	r14, r10
     126:	10 e0       	ldi	r17, 0x00	; 0
     128:	d8 cf       	rjmp	.-80     	; 0xda <lcd_update+0x20>
	unsigned char n = two_line ? 2 : 1;
     12a:	68 94       	set
     12c:	99 24       	eor	r9, r9
     12e:	91 f8       	bld	r9, 1
     130:	0f 2e       	mov	r0, r31
     132:	fc e5       	ldi	r31, 0x5C	; 92
     134:	af 2e       	mov	r10, r31
     136:	f8 e3       	ldi	r31, 0x38	; 56
     138:	bf 2e       	mov	r11, r31
     13a:	f0 2d       	mov	r31, r0
     13c:	0f 2e       	mov	r0, r31
     13e:	f8 e0       	ldi	r31, 0x08	; 8
     140:	cf 2e       	mov	r12, r31
     142:	f8 e3       	ldi	r31, 0x38	; 56
     144:	df 2e       	mov	r13, r31
     146:	f0 2d       	mov	r31, r0
	
	lcd_update(TRUE);
}

void lcd_update(bool two_line)
{
     148:	00 e0       	ldi	r16, 0x00	; 0
     14a:	eb cf       	rjmp	.-42     	; 0x122 <lcd_update+0x68>
				display_character(lcd_screen_update[i][j]);
				lcd_screen[i][j] = lcd_screen_update[i][j];
			}
		}
	}
}
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	1f 91       	pop	r17
     152:	0f 91       	pop	r16
     154:	ff 90       	pop	r15
     156:	ef 90       	pop	r14
     158:	df 90       	pop	r13
     15a:	cf 90       	pop	r12
     15c:	bf 90       	pop	r11
     15e:	af 90       	pop	r10
     160:	9f 90       	pop	r9
     162:	08 95       	ret

00000164 <display_current_voltage>:
	
	desired_current_temp = desired_current;
}

void display_current_voltage(uint16_t cur, uint16_t vol)
{
     164:	2f 92       	push	r2
     166:	3f 92       	push	r3
     168:	4f 92       	push	r4
     16a:	5f 92       	push	r5
     16c:	6f 92       	push	r6
     16e:	7f 92       	push	r7
     170:	8f 92       	push	r8
     172:	9f 92       	push	r9
     174:	af 92       	push	r10
     176:	bf 92       	push	r11
     178:	cf 92       	push	r12
     17a:	df 92       	push	r13
     17c:	ef 92       	push	r14
     17e:	ff 92       	push	r15
     180:	0f 93       	push	r16
     182:	1f 93       	push	r17
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
     188:	2c 01       	movw	r4, r24
	lcd_col_counter = 0;
     18a:	10 92 d0 38 	sts	0x38D0, r1	; 0x8038d0 <lcd_col_counter>
	lcd_row_counter = 0;
     18e:	10 92 d7 38 	sts	0x38D7, r1	; 0x8038d7 <lcd_row_counter>
     192:	66 2e       	mov	r6, r22
     194:	77 2e       	mov	r7, r23
     196:	29 e5       	ldi	r18, 0x59	; 89
     198:	62 16       	cp	r6, r18
     19a:	2b e1       	ldi	r18, 0x1B	; 27
     19c:	72 06       	cpc	r7, r18
     19e:	30 f0       	brcs	.+12     	; 0x1ac <display_current_voltage+0x48>
     1a0:	0f 2e       	mov	r0, r31
     1a2:	f8 e5       	ldi	r31, 0x58	; 88
     1a4:	6f 2e       	mov	r6, r31
     1a6:	fb e1       	ldi	r31, 0x1B	; 27
     1a8:	7f 2e       	mov	r7, r31
     1aa:	f0 2d       	mov	r31, r0
	if (vol > 7000)
	{
		vol = 7000;
	}
	
	int length = snprintf(NULL, 0, "%02d.%dV ", vol / 100, vol / 10 % 10);
     1ac:	93 01       	movw	r18, r6
     1ae:	ad ec       	ldi	r26, 0xCD	; 205
     1b0:	bc ec       	ldi	r27, 0xCC	; 204
     1b2:	0e 94 48 10 	call	0x2090	; 0x2090 <__umulhisi3>
     1b6:	ac 01       	movw	r20, r24
     1b8:	56 95       	lsr	r21
     1ba:	47 95       	ror	r20
     1bc:	56 95       	lsr	r21
     1be:	47 95       	ror	r20
     1c0:	56 95       	lsr	r21
     1c2:	47 95       	ror	r20
     1c4:	9a 01       	movw	r18, r20
     1c6:	0e 94 48 10 	call	0x2090	; 0x2090 <__umulhisi3>
     1ca:	4c 01       	movw	r8, r24
     1cc:	96 94       	lsr	r9
     1ce:	87 94       	ror	r8
     1d0:	96 94       	lsr	r9
     1d2:	87 94       	ror	r8
     1d4:	96 94       	lsr	r9
     1d6:	87 94       	ror	r8
     1d8:	c4 01       	movw	r24, r8
     1da:	88 0f       	add	r24, r24
     1dc:	99 1f       	adc	r25, r25
     1de:	88 0c       	add	r8, r8
     1e0:	99 1c       	adc	r9, r9
     1e2:	88 0c       	add	r8, r8
     1e4:	99 1c       	adc	r9, r9
     1e6:	88 0c       	add	r8, r8
     1e8:	99 1c       	adc	r9, r9
     1ea:	88 0e       	add	r8, r24
     1ec:	99 1e       	adc	r9, r25
     1ee:	ca 01       	movw	r24, r20
     1f0:	88 19       	sub	r24, r8
     1f2:	99 09       	sbc	r25, r9
     1f4:	4c 01       	movw	r8, r24
     1f6:	93 01       	movw	r18, r6
     1f8:	36 95       	lsr	r19
     1fa:	27 95       	ror	r18
     1fc:	36 95       	lsr	r19
     1fe:	27 95       	ror	r18
     200:	ab e7       	ldi	r26, 0x7B	; 123
     202:	b4 e1       	ldi	r27, 0x14	; 20
     204:	0e 94 48 10 	call	0x2090	; 0x2090 <__umulhisi3>
     208:	6c 01       	movw	r12, r24
     20a:	d6 94       	lsr	r13
     20c:	c7 94       	ror	r12
     20e:	9f 92       	push	r9
     210:	8f 92       	push	r8
     212:	df 92       	push	r13
     214:	cf 92       	push	r12
     216:	0f 2e       	mov	r0, r31
     218:	f2 e3       	ldi	r31, 0x32	; 50
     21a:	ef 2e       	mov	r14, r31
     21c:	f9 ea       	ldi	r31, 0xA9	; 169
     21e:	ff 2e       	mov	r15, r31
     220:	f0 2d       	mov	r31, r0
     222:	ff 92       	push	r15
     224:	ef 92       	push	r14
     226:	1f 92       	push	r1
     228:	1f 92       	push	r1
     22a:	1f 92       	push	r1
     22c:	1f 92       	push	r1
     22e:	0e 94 78 11 	call	0x22f0	; 0x22f0 <snprintf>
     232:	8c 01       	movw	r16, r24
	char* str = malloc(length + 1);
     234:	5c 01       	movw	r10, r24
     236:	9f ef       	ldi	r25, 0xFF	; 255
     238:	a9 1a       	sub	r10, r25
     23a:	b9 0a       	sbc	r11, r25
     23c:	c5 01       	movw	r24, r10
     23e:	0e 94 57 10 	call	0x20ae	; 0x20ae <malloc>
     242:	ec 01       	movw	r28, r24
	snprintf(str, length + 1, "%02d.%dV ", vol / 100, vol / 10 % 10);
     244:	9f 92       	push	r9
     246:	8f 92       	push	r8
     248:	df 92       	push	r13
     24a:	cf 92       	push	r12
     24c:	ff 92       	push	r15
     24e:	ef 92       	push	r14
     250:	bf 92       	push	r11
     252:	af 92       	push	r10
     254:	df 93       	push	r29
     256:	8f 93       	push	r24
     258:	0e 94 78 11 	call	0x22f0	; 0x22f0 <snprintf>
	
	for(unsigned char i = 0; i < length; i++)
     25c:	2d b7       	in	r18, 0x3d	; 61
     25e:	3e b7       	in	r19, 0x3e	; 62
     260:	2c 5e       	subi	r18, 0xEC	; 236
     262:	3f 4f       	sbci	r19, 0xFF	; 255
     264:	2d bf       	out	0x3d, r18	; 61
     266:	3e bf       	out	0x3e, r19	; 62
     268:	10 16       	cp	r1, r16
     26a:	11 06       	cpc	r1, r17
     26c:	04 f5       	brge	.+64     	; 0x2ae <display_current_voltage+0x14a>
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = str[i];
     26e:	40 91 d7 38 	lds	r20, 0x38D7	; 0x8038d7 <lcd_row_counter>
     272:	90 91 d0 38 	lds	r25, 0x38D0	; 0x8038d0 <lcd_col_counter>
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	34 e1       	ldi	r19, 0x14	; 20
     27a:	43 9f       	mul	r20, r19
     27c:	a0 01       	movw	r20, r0
     27e:	11 24       	eor	r1, r1
     280:	fa 01       	movw	r30, r20
     282:	e9 0f       	add	r30, r25
     284:	f1 1d       	adc	r31, r1
     286:	ee 0f       	add	r30, r30
     288:	ff 1f       	adc	r31, r31
     28a:	e8 5f       	subi	r30, 0xF8	; 248
     28c:	f7 4c       	sbci	r31, 0xC7	; 199
     28e:	de 01       	movw	r26, r28
     290:	a8 0f       	add	r26, r24
     292:	b1 1d       	adc	r27, r1
     294:	2c 91       	ld	r18, X
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	20 83       	st	Z, r18
     29a:	31 83       	std	Z+1, r19	; 0x01
		lcd_col_counter++;
     29c:	9f 5f       	subi	r25, 0xFF	; 255
	
	int length = snprintf(NULL, 0, "%02d.%dV ", vol / 100, vol / 10 % 10);
	char* str = malloc(length + 1);
	snprintf(str, length + 1, "%02d.%dV ", vol / 100, vol / 10 % 10);
	
	for(unsigned char i = 0; i < length; i++)
     29e:	8f 5f       	subi	r24, 0xFF	; 255
     2a0:	28 2f       	mov	r18, r24
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	20 17       	cp	r18, r16
     2a6:	31 07       	cpc	r19, r17
     2a8:	5c f3       	brlt	.-42     	; 0x280 <display_current_voltage+0x11c>
     2aa:	90 93 d0 38 	sts	0x38D0, r25	; 0x8038d0 <lcd_col_counter>
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = str[i];
		lcd_col_counter++;
	}
	
	free(str);
     2ae:	ce 01       	movw	r24, r28
     2b0:	0e 94 ef 10 	call	0x21de	; 0x21de <free>
	
	vol = (vol + 50) / 100; // round to nearest hundred and get hundreds
     2b4:	62 e3       	ldi	r22, 0x32	; 50
     2b6:	66 0e       	add	r6, r22
     2b8:	71 1c       	adc	r7, r1
     2ba:	76 94       	lsr	r7
     2bc:	67 94       	ror	r6
     2be:	76 94       	lsr	r7
     2c0:	67 94       	ror	r6
     2c2:	93 01       	movw	r18, r6
     2c4:	ab e7       	ldi	r26, 0x7B	; 123
     2c6:	b4 e1       	ldi	r27, 0x14	; 20
     2c8:	0e 94 48 10 	call	0x2090	; 0x2090 <__umulhisi3>
     2cc:	ec 01       	movw	r28, r24
     2ce:	d6 95       	lsr	r29
     2d0:	c7 95       	ror	r28
	
	uint8_t full_bars = vol / 5;
	uint8_t last_bar  = vol % 5;
     2d2:	9e 01       	movw	r18, r28
     2d4:	ad ec       	ldi	r26, 0xCD	; 205
     2d6:	bc ec       	ldi	r27, 0xCC	; 204
     2d8:	0e 94 48 10 	call	0x2090	; 0x2090 <__umulhisi3>
     2dc:	96 95       	lsr	r25
     2de:	87 95       	ror	r24
     2e0:	96 95       	lsr	r25
     2e2:	87 95       	ror	r24
     2e4:	9c 01       	movw	r18, r24
     2e6:	22 0f       	add	r18, r18
     2e8:	33 1f       	adc	r19, r19
     2ea:	22 0f       	add	r18, r18
     2ec:	33 1f       	adc	r19, r19
     2ee:	82 0f       	add	r24, r18
     2f0:	93 1f       	adc	r25, r19
     2f2:	5c 2f       	mov	r21, r28
     2f4:	58 1b       	sub	r21, r24
     2f6:	93 01       	movw	r18, r6
     2f8:	a5 ec       	ldi	r26, 0xC5	; 197
     2fa:	b0 e2       	ldi	r27, 0x20	; 32
     2fc:	0e 94 48 10 	call	0x2090	; 0x2090 <__umulhisi3>
     300:	92 95       	swap	r25
     302:	82 95       	swap	r24
     304:	8f 70       	andi	r24, 0x0F	; 15
     306:	89 27       	eor	r24, r25
     308:	9f 70       	andi	r25, 0x0F	; 15
     30a:	89 27       	eor	r24, r25
	
	for(int i = 0; i < full_bars; i++)
     30c:	99 27       	eor	r25, r25
     30e:	18 16       	cp	r1, r24
     310:	19 06       	cpc	r1, r25
     312:	0c f0       	brlt	.+2      	; 0x316 <display_current_voltage+0x1b2>
     314:	56 c0       	rjmp	.+172    	; 0x3c2 <display_current_voltage+0x25e>
	{
		if (i >= ((MAX_VOLTAGE + 50) / 100) / 5 - 1 && vol >= (MAX_VOLTAGE + 50) / 100)
		{
			lcd_screen_update[lcd_row_counter][lcd_col_counter] = 6;
     316:	60 91 d7 38 	lds	r22, 0x38D7	; 0x8038d7 <lcd_row_counter>
     31a:	40 91 d0 38 	lds	r20, 0x38D0	; 0x8038d0 <lcd_col_counter>
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	30 e0       	ldi	r19, 0x00	; 0
				lcd_screen_update[lcd_row_counter][lcd_col_counter] = 5;
				lcd_col_counter++;
			}
			else
			{
				lcd_screen_update[lcd_row_counter][lcd_col_counter] = 4;
     322:	e4 e1       	ldi	r30, 0x14	; 20
     324:	6e 9f       	mul	r22, r30
     326:	b0 01       	movw	r22, r0
     328:	11 24       	eor	r1, r1
     32a:	04 e0       	ldi	r16, 0x04	; 4
     32c:	10 e0       	ldi	r17, 0x00	; 0
		}
		else
		{
			if ((i + 1) % 2 == 0)
			{
				lcd_screen_update[lcd_row_counter][lcd_col_counter] = 5;
     32e:	a5 e0       	ldi	r26, 0x05	; 5
     330:	b0 e0       	ldi	r27, 0x00	; 0
	
	for(int i = 0; i < full_bars; i++)
	{
		if (i >= ((MAX_VOLTAGE + 50) / 100) / 5 - 1 && vol >= (MAX_VOLTAGE + 50) / 100)
		{
			lcd_screen_update[lcd_row_counter][lcd_col_counter] = 6;
     332:	0f 2e       	mov	r0, r31
     334:	f6 e0       	ldi	r31, 0x06	; 6
     336:	ef 2e       	mov	r14, r31
     338:	f1 2c       	mov	r15, r1
     33a:	f0 2d       	mov	r31, r0
	uint8_t full_bars = vol / 5;
	uint8_t last_bar  = vol % 5;
	
	for(int i = 0; i < full_bars; i++)
	{
		if (i >= ((MAX_VOLTAGE + 50) / 100) / 5 - 1 && vol >= (MAX_VOLTAGE + 50) / 100)
     33c:	29 30       	cpi	r18, 0x09	; 9
     33e:	31 05       	cpc	r19, r1
     340:	ec f0       	brlt	.+58     	; 0x37c <display_current_voltage+0x218>
     342:	c2 33       	cpi	r28, 0x32	; 50
     344:	d1 05       	cpc	r29, r1
     346:	d0 f0       	brcs	.+52     	; 0x37c <display_current_voltage+0x218>
		{
			lcd_screen_update[lcd_row_counter][lcd_col_counter] = 6;
     348:	fb 01       	movw	r30, r22
     34a:	e4 0f       	add	r30, r20
     34c:	f1 1d       	adc	r31, r1
     34e:	ee 0f       	add	r30, r30
     350:	ff 1f       	adc	r31, r31
     352:	e8 5f       	subi	r30, 0xF8	; 248
     354:	f7 4c       	sbci	r31, 0xC7	; 199
     356:	e0 82       	st	Z, r14
     358:	f1 82       	std	Z+1, r15	; 0x01
			lcd_col_counter++;
     35a:	e1 e0       	ldi	r30, 0x01	; 1
     35c:	e4 0f       	add	r30, r20
			if (last_bar != 0)
     35e:	55 23       	and	r21, r21
     360:	39 f1       	breq	.+78     	; 0x3b0 <display_current_voltage+0x24c>
			{
				lcd_screen_update[lcd_row_counter][lcd_col_counter] = 6;
     362:	6b 01       	movw	r12, r22
     364:	ce 0e       	add	r12, r30
     366:	d1 1c       	adc	r13, r1
     368:	f6 01       	movw	r30, r12
     36a:	ee 0f       	add	r30, r30
     36c:	ff 1f       	adc	r31, r31
     36e:	e8 5f       	subi	r30, 0xF8	; 248
     370:	f7 4c       	sbci	r31, 0xC7	; 199
     372:	e0 82       	st	Z, r14
     374:	f1 82       	std	Z+1, r15	; 0x01
				lcd_col_counter++;
     376:	4e 5f       	subi	r20, 0xFE	; 254
				last_bar = 0;
     378:	50 e0       	ldi	r21, 0x00	; 0
     37a:	1b c0       	rjmp	.+54     	; 0x3b2 <display_current_voltage+0x24e>
			}
		}
		else
		{
			if ((i + 1) % 2 == 0)
     37c:	f9 01       	movw	r30, r18
     37e:	31 96       	adiw	r30, 0x01	; 1
     380:	e0 fd       	sbrc	r30, 0
     382:	0b c0       	rjmp	.+22     	; 0x39a <display_current_voltage+0x236>
			{
				lcd_screen_update[lcd_row_counter][lcd_col_counter] = 5;
     384:	fb 01       	movw	r30, r22
     386:	e4 0f       	add	r30, r20
     388:	f1 1d       	adc	r31, r1
     38a:	ee 0f       	add	r30, r30
     38c:	ff 1f       	adc	r31, r31
     38e:	e8 5f       	subi	r30, 0xF8	; 248
     390:	f7 4c       	sbci	r31, 0xC7	; 199
     392:	a0 83       	st	Z, r26
     394:	b1 83       	std	Z+1, r27	; 0x01
				lcd_col_counter++;
     396:	4f 5f       	subi	r20, 0xFF	; 255
     398:	0c c0       	rjmp	.+24     	; 0x3b2 <display_current_voltage+0x24e>
			}
			else
			{
				lcd_screen_update[lcd_row_counter][lcd_col_counter] = 4;
     39a:	fb 01       	movw	r30, r22
     39c:	e4 0f       	add	r30, r20
     39e:	f1 1d       	adc	r31, r1
     3a0:	ee 0f       	add	r30, r30
     3a2:	ff 1f       	adc	r31, r31
     3a4:	e8 5f       	subi	r30, 0xF8	; 248
     3a6:	f7 4c       	sbci	r31, 0xC7	; 199
     3a8:	00 83       	st	Z, r16
     3aa:	11 83       	std	Z+1, r17	; 0x01
				lcd_col_counter++;
     3ac:	4f 5f       	subi	r20, 0xFF	; 255
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <display_current_voltage+0x24e>
	for(int i = 0; i < full_bars; i++)
	{
		if (i >= ((MAX_VOLTAGE + 50) / 100) / 5 - 1 && vol >= (MAX_VOLTAGE + 50) / 100)
		{
			lcd_screen_update[lcd_row_counter][lcd_col_counter] = 6;
			lcd_col_counter++;
     3b0:	4e 2f       	mov	r20, r30
	vol = (vol + 50) / 100; // round to nearest hundred and get hundreds
	
	uint8_t full_bars = vol / 5;
	uint8_t last_bar  = vol % 5;
	
	for(int i = 0; i < full_bars; i++)
     3b2:	2f 5f       	subi	r18, 0xFF	; 255
     3b4:	3f 4f       	sbci	r19, 0xFF	; 255
     3b6:	28 17       	cp	r18, r24
     3b8:	39 07       	cpc	r19, r25
     3ba:	09 f0       	breq	.+2      	; 0x3be <display_current_voltage+0x25a>
     3bc:	bf cf       	rjmp	.-130    	; 0x33c <display_current_voltage+0x1d8>
     3be:	40 93 d0 38 	sts	0x38D0, r20	; 0x8038d0 <lcd_col_counter>
				lcd_col_counter++;
			}
		}
	}
	
	if (last_bar != 0)
     3c2:	55 23       	and	r21, r21
     3c4:	b9 f0       	breq	.+46     	; 0x3f4 <display_current_voltage+0x290>
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = last_bar - 1;
     3c6:	40 91 d0 38 	lds	r20, 0x38D0	; 0x8038d0 <lcd_col_counter>
     3ca:	e0 91 d7 38 	lds	r30, 0x38D7	; 0x8038d7 <lcd_row_counter>
     3ce:	24 e1       	ldi	r18, 0x14	; 20
     3d0:	e2 9f       	mul	r30, r18
     3d2:	f0 01       	movw	r30, r0
     3d4:	11 24       	eor	r1, r1
     3d6:	e4 0f       	add	r30, r20
     3d8:	f1 1d       	adc	r31, r1
     3da:	ee 0f       	add	r30, r30
     3dc:	ff 1f       	adc	r31, r31
     3de:	e8 5f       	subi	r30, 0xF8	; 248
     3e0:	f7 4c       	sbci	r31, 0xC7	; 199
     3e2:	25 2f       	mov	r18, r21
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	21 50       	subi	r18, 0x01	; 1
     3e8:	31 09       	sbc	r19, r1
     3ea:	20 83       	st	Z, r18
     3ec:	31 83       	std	Z+1, r19	; 0x01
		lcd_col_counter++;
     3ee:	4f 5f       	subi	r20, 0xFF	; 255
     3f0:	40 93 d0 38 	sts	0x38D0, r20	; 0x8038d0 <lcd_col_counter>
	}
	
	for (int i = full_bars; i < 20; i++)
     3f4:	84 31       	cpi	r24, 0x14	; 20
     3f6:	91 05       	cpc	r25, r1
     3f8:	c4 f4       	brge	.+48     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = ' ';
     3fa:	40 91 d7 38 	lds	r20, 0x38D7	; 0x8038d7 <lcd_row_counter>
     3fe:	20 91 d0 38 	lds	r18, 0x38D0	; 0x8038d0 <lcd_col_counter>
     402:	34 e1       	ldi	r19, 0x14	; 20
     404:	43 9f       	mul	r20, r19
     406:	a0 01       	movw	r20, r0
     408:	11 24       	eor	r1, r1
     40a:	60 e2       	ldi	r22, 0x20	; 32
     40c:	70 e0       	ldi	r23, 0x00	; 0
     40e:	fa 01       	movw	r30, r20
     410:	e2 0f       	add	r30, r18
     412:	f1 1d       	adc	r31, r1
     414:	ee 0f       	add	r30, r30
     416:	ff 1f       	adc	r31, r31
     418:	e8 5f       	subi	r30, 0xF8	; 248
     41a:	f7 4c       	sbci	r31, 0xC7	; 199
     41c:	60 83       	st	Z, r22
     41e:	71 83       	std	Z+1, r23	; 0x01
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = last_bar - 1;
		lcd_col_counter++;
	}
	
	for (int i = full_bars; i < 20; i++)
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	2f 5f       	subi	r18, 0xFF	; 255
     424:	84 31       	cpi	r24, 0x14	; 20
     426:	91 05       	cpc	r25, r1
     428:	91 f7       	brne	.-28     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = ' ';
		lcd_col_counter++;
	}
	// FINISH writing voltage number
	
	lcd_row_counter++;
     42a:	80 91 d7 38 	lds	r24, 0x38D7	; 0x8038d7 <lcd_row_counter>
     42e:	8f 5f       	subi	r24, 0xFF	; 255
     430:	80 93 d7 38 	sts	0x38D7, r24	; 0x8038d7 <lcd_row_counter>
	lcd_col_counter = 0;
     434:	10 92 d0 38 	sts	0x38D0, r1	; 0x8038d0 <lcd_col_counter>
	
	// START writing current number in format %02d.%dA
	
	length = snprintf(NULL, 0, "%02d.%dA ", cur / 100, cur / 10 % 10);
     438:	92 01       	movw	r18, r4
     43a:	ad ec       	ldi	r26, 0xCD	; 205
     43c:	bc ec       	ldi	r27, 0xCC	; 204
     43e:	0e 94 48 10 	call	0x2090	; 0x2090 <__umulhisi3>
     442:	ac 01       	movw	r20, r24
     444:	56 95       	lsr	r21
     446:	47 95       	ror	r20
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	56 95       	lsr	r21
     44e:	47 95       	ror	r20
     450:	9a 01       	movw	r18, r20
     452:	0e 94 48 10 	call	0x2090	; 0x2090 <__umulhisi3>
     456:	4c 01       	movw	r8, r24
     458:	96 94       	lsr	r9
     45a:	87 94       	ror	r8
     45c:	96 94       	lsr	r9
     45e:	87 94       	ror	r8
     460:	96 94       	lsr	r9
     462:	87 94       	ror	r8
     464:	c4 01       	movw	r24, r8
     466:	88 0f       	add	r24, r24
     468:	99 1f       	adc	r25, r25
     46a:	88 0c       	add	r8, r8
     46c:	99 1c       	adc	r9, r9
     46e:	88 0c       	add	r8, r8
     470:	99 1c       	adc	r9, r9
     472:	88 0c       	add	r8, r8
     474:	99 1c       	adc	r9, r9
     476:	88 0e       	add	r8, r24
     478:	99 1e       	adc	r9, r25
     47a:	ca 01       	movw	r24, r20
     47c:	88 19       	sub	r24, r8
     47e:	99 09       	sbc	r25, r9
     480:	4c 01       	movw	r8, r24
     482:	92 01       	movw	r18, r4
     484:	36 95       	lsr	r19
     486:	27 95       	ror	r18
     488:	36 95       	lsr	r19
     48a:	27 95       	ror	r18
     48c:	ab e7       	ldi	r26, 0x7B	; 123
     48e:	b4 e1       	ldi	r27, 0x14	; 20
     490:	0e 94 48 10 	call	0x2090	; 0x2090 <__umulhisi3>
     494:	6c 01       	movw	r12, r24
     496:	d6 94       	lsr	r13
     498:	c7 94       	ror	r12
     49a:	9f 92       	push	r9
     49c:	8f 92       	push	r8
     49e:	df 92       	push	r13
     4a0:	cf 92       	push	r12
     4a2:	0f 2e       	mov	r0, r31
     4a4:	fc e3       	ldi	r31, 0x3C	; 60
     4a6:	ef 2e       	mov	r14, r31
     4a8:	f9 ea       	ldi	r31, 0xA9	; 169
     4aa:	ff 2e       	mov	r15, r31
     4ac:	f0 2d       	mov	r31, r0
     4ae:	ff 92       	push	r15
     4b0:	ef 92       	push	r14
     4b2:	1f 92       	push	r1
     4b4:	1f 92       	push	r1
     4b6:	1f 92       	push	r1
     4b8:	1f 92       	push	r1
     4ba:	0e 94 78 11 	call	0x22f0	; 0x22f0 <snprintf>
     4be:	8c 01       	movw	r16, r24
	str = malloc(length + 1);
     4c0:	5c 01       	movw	r10, r24
     4c2:	9f ef       	ldi	r25, 0xFF	; 255
     4c4:	a9 1a       	sub	r10, r25
     4c6:	b9 0a       	sbc	r11, r25
     4c8:	c5 01       	movw	r24, r10
     4ca:	0e 94 57 10 	call	0x20ae	; 0x20ae <malloc>
     4ce:	ec 01       	movw	r28, r24
	snprintf(str, length + 1, "%02d.%dA ", cur / 100, cur / 10 % 10);
     4d0:	9f 92       	push	r9
     4d2:	8f 92       	push	r8
     4d4:	df 92       	push	r13
     4d6:	cf 92       	push	r12
     4d8:	ff 92       	push	r15
     4da:	ef 92       	push	r14
     4dc:	bf 92       	push	r11
     4de:	af 92       	push	r10
     4e0:	df 93       	push	r29
     4e2:	8f 93       	push	r24
     4e4:	0e 94 78 11 	call	0x22f0	; 0x22f0 <snprintf>
	
	for(unsigned char i = 0; i < length; i++)
     4e8:	2d b7       	in	r18, 0x3d	; 61
     4ea:	3e b7       	in	r19, 0x3e	; 62
     4ec:	2c 5e       	subi	r18, 0xEC	; 236
     4ee:	3f 4f       	sbci	r19, 0xFF	; 255
     4f0:	2d bf       	out	0x3d, r18	; 61
     4f2:	3e bf       	out	0x3e, r19	; 62
     4f4:	10 16       	cp	r1, r16
     4f6:	11 06       	cpc	r1, r17
     4f8:	04 f5       	brge	.+64     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = str[i];
     4fa:	40 91 d7 38 	lds	r20, 0x38D7	; 0x8038d7 <lcd_row_counter>
     4fe:	90 91 d0 38 	lds	r25, 0x38D0	; 0x8038d0 <lcd_col_counter>
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	34 e1       	ldi	r19, 0x14	; 20
     506:	43 9f       	mul	r20, r19
     508:	a0 01       	movw	r20, r0
     50a:	11 24       	eor	r1, r1
     50c:	fa 01       	movw	r30, r20
     50e:	e9 0f       	add	r30, r25
     510:	f1 1d       	adc	r31, r1
     512:	ee 0f       	add	r30, r30
     514:	ff 1f       	adc	r31, r31
     516:	e8 5f       	subi	r30, 0xF8	; 248
     518:	f7 4c       	sbci	r31, 0xC7	; 199
     51a:	de 01       	movw	r26, r28
     51c:	a8 0f       	add	r26, r24
     51e:	b1 1d       	adc	r27, r1
     520:	2c 91       	ld	r18, X
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	20 83       	st	Z, r18
     526:	31 83       	std	Z+1, r19	; 0x01
		lcd_col_counter++;
     528:	9f 5f       	subi	r25, 0xFF	; 255
	
	length = snprintf(NULL, 0, "%02d.%dA ", cur / 100, cur / 10 % 10);
	str = malloc(length + 1);
	snprintf(str, length + 1, "%02d.%dA ", cur / 100, cur / 10 % 10);
	
	for(unsigned char i = 0; i < length; i++)
     52a:	8f 5f       	subi	r24, 0xFF	; 255
     52c:	28 2f       	mov	r18, r24
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	20 17       	cp	r18, r16
     532:	31 07       	cpc	r19, r17
     534:	5c f3       	brlt	.-42     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     536:	90 93 d0 38 	sts	0x38D0, r25	; 0x8038d0 <lcd_col_counter>
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = str[i];
		lcd_col_counter++;
	}
	
	free(str);
     53a:	ce 01       	movw	r24, r28
     53c:	0e 94 ef 10 	call	0x21de	; 0x21de <free>
	// FINISH writing current number
	
	// START writing current bars
	cur = (cur + 5) / 10; // round to nearest tenth and get tenth
     540:	65 e0       	ldi	r22, 0x05	; 5
     542:	46 0e       	add	r4, r22
     544:	51 1c       	adc	r5, r1
     546:	92 01       	movw	r18, r4
     548:	ad ec       	ldi	r26, 0xCD	; 205
     54a:	bc ec       	ldi	r27, 0xCC	; 204
     54c:	0e 94 48 10 	call	0x2090	; 0x2090 <__umulhisi3>
     550:	1c 01       	movw	r2, r24
     552:	36 94       	lsr	r3
     554:	27 94       	ror	r2
     556:	36 94       	lsr	r3
     558:	27 94       	ror	r2
     55a:	36 94       	lsr	r3
     55c:	27 94       	ror	r2
	
	full_bars = cur / 25;
	last_bar  = (cur % 25) / 5;
     55e:	91 01       	movw	r18, r2
     560:	af ea       	ldi	r26, 0xAF	; 175
     562:	b7 e4       	ldi	r27, 0x47	; 71
     564:	0e 94 48 10 	call	0x2090	; 0x2090 <__umulhisi3>
     568:	a1 01       	movw	r20, r2
     56a:	48 1b       	sub	r20, r24
     56c:	59 0b       	sbc	r21, r25
     56e:	56 95       	lsr	r21
     570:	47 95       	ror	r20
     572:	84 0f       	add	r24, r20
     574:	95 1f       	adc	r25, r21
     576:	92 95       	swap	r25
     578:	82 95       	swap	r24
     57a:	8f 70       	andi	r24, 0x0F	; 15
     57c:	89 27       	eor	r24, r25
     57e:	9f 70       	andi	r25, 0x0F	; 15
     580:	89 27       	eor	r24, r25
     582:	49 e1       	ldi	r20, 0x19	; 25
     584:	48 9f       	mul	r20, r24
     586:	90 01       	movw	r18, r0
     588:	49 9f       	mul	r20, r25
     58a:	30 0d       	add	r19, r0
     58c:	11 24       	eor	r1, r1
     58e:	c1 01       	movw	r24, r2
     590:	82 1b       	sub	r24, r18
     592:	93 0b       	sbc	r25, r19
     594:	9c 01       	movw	r18, r24
     596:	ad ec       	ldi	r26, 0xCD	; 205
     598:	bc ec       	ldi	r27, 0xCC	; 204
     59a:	0e 94 48 10 	call	0x2090	; 0x2090 <__umulhisi3>
     59e:	5c 01       	movw	r10, r24
     5a0:	b6 94       	lsr	r11
     5a2:	a7 94       	ror	r10
     5a4:	b6 94       	lsr	r11
     5a6:	a7 94       	ror	r10
     5a8:	7a 2c       	mov	r7, r10
     5aa:	92 01       	movw	r18, r4
     5ac:	36 95       	lsr	r19
     5ae:	27 95       	ror	r18
     5b0:	a3 e1       	ldi	r26, 0x13	; 19
     5b2:	b3 e8       	ldi	r27, 0x83	; 131
     5b4:	0e 94 48 10 	call	0x2090	; 0x2090 <__umulhisi3>
     5b8:	00 24       	eor	r0, r0
     5ba:	88 0f       	add	r24, r24
     5bc:	99 1f       	adc	r25, r25
     5be:	00 1c       	adc	r0, r0
     5c0:	88 0f       	add	r24, r24
     5c2:	99 1f       	adc	r25, r25
     5c4:	00 1c       	adc	r0, r0
     5c6:	89 2f       	mov	r24, r25
     5c8:	90 2d       	mov	r25, r0
     5ca:	99 27       	eor	r25, r25
	
	for(int i = 0; i < full_bars; i++)
     5cc:	ac 01       	movw	r20, r24
     5ce:	18 16       	cp	r1, r24
     5d0:	19 06       	cpc	r1, r25
     5d2:	0c f0       	brlt	.+2      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
     5d4:	56 c0       	rjmp	.+172    	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
	{
		if (i == full_bars - 1 && cur == (MAX_CURRENT + 5) / 10)
		{
			lcd_screen_update[lcd_row_counter][lcd_col_counter] = 6;
     5d6:	e0 91 d7 38 	lds	r30, 0x38D7	; 0x8038d7 <lcd_row_counter>
     5da:	c0 90 d0 38 	lds	r12, 0x38D0	; 0x8038d0 <lcd_col_counter>
     5de:	c3 94       	inc	r12
     5e0:	dc 2c       	mov	r13, r12
     5e2:	20 e0       	ldi	r18, 0x00	; 0
     5e4:	30 e0       	ldi	r19, 0x00	; 0
	full_bars = cur / 25;
	last_bar  = (cur % 25) / 5;
	
	for(int i = 0; i < full_bars; i++)
	{
		if (i == full_bars - 1 && cur == (MAX_CURRENT + 5) / 10)
     5e6:	dc 01       	movw	r26, r24
     5e8:	11 97       	sbiw	r26, 0x01	; 1
				lcd_screen_update[lcd_row_counter][lcd_col_counter] = 5;
				lcd_col_counter++;
			}
			else
			{
				lcd_screen_update[lcd_row_counter][lcd_col_counter] = 4;
     5ea:	c4 e1       	ldi	r28, 0x14	; 20
     5ec:	ec 9f       	mul	r30, r28
     5ee:	f0 01       	movw	r30, r0
     5f0:	11 24       	eor	r1, r1
     5f2:	68 94       	set
     5f4:	ee 24       	eor	r14, r14
     5f6:	e2 f8       	bld	r14, 2
     5f8:	f1 2c       	mov	r15, r1
		}
		else
		{
			if ((i + 1) % 4 == 0)
			{
				lcd_screen_update[lcd_row_counter][lcd_col_counter] = 5;
     5fa:	05 e0       	ldi	r16, 0x05	; 5
     5fc:	10 e0       	ldi	r17, 0x00	; 0
	
	for(int i = 0; i < full_bars; i++)
	{
		if (i == full_bars - 1 && cur == (MAX_CURRENT + 5) / 10)
		{
			lcd_screen_update[lcd_row_counter][lcd_col_counter] = 6;
     5fe:	0f 2e       	mov	r0, r31
     600:	f6 e0       	ldi	r31, 0x06	; 6
     602:	8f 2e       	mov	r8, r31
     604:	91 2c       	mov	r9, r1
     606:	f0 2d       	mov	r31, r0
     608:	66 24       	eor	r6, r6
     60a:	6a 94       	dec	r6
     60c:	6d 0c       	add	r6, r13
	full_bars = cur / 25;
	last_bar  = (cur % 25) / 5;
	
	for(int i = 0; i < full_bars; i++)
	{
		if (i == full_bars - 1 && cur == (MAX_CURRENT + 5) / 10)
     60e:	a2 17       	cp	r26, r18
     610:	b3 07       	cpc	r27, r19
     612:	79 f4       	brne	.+30     	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
     614:	da ef       	ldi	r29, 0xFA	; 250
     616:	2d 16       	cp	r2, r29
     618:	31 04       	cpc	r3, r1
     61a:	59 f4       	brne	.+22     	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
		{
			lcd_screen_update[lcd_row_counter][lcd_col_counter] = 6;
     61c:	bf 01       	movw	r22, r30
     61e:	66 0d       	add	r22, r6
     620:	71 1d       	adc	r23, r1
     622:	66 0f       	add	r22, r22
     624:	77 1f       	adc	r23, r23
     626:	68 5f       	subi	r22, 0xF8	; 248
     628:	77 4c       	sbci	r23, 0xC7	; 199
     62a:	eb 01       	movw	r28, r22
     62c:	88 82       	st	Y, r8
     62e:	99 82       	std	Y+1, r9	; 0x01
			lcd_col_counter++;
     630:	1c c0       	rjmp	.+56     	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
		}
		else
		{
			if ((i + 1) % 4 == 0)
     632:	b9 01       	movw	r22, r18
     634:	6f 5f       	subi	r22, 0xFF	; 255
     636:	7f 4f       	sbci	r23, 0xFF	; 255
     638:	63 70       	andi	r22, 0x03	; 3
     63a:	77 27       	eor	r23, r23
     63c:	67 2b       	or	r22, r23
     63e:	59 f4       	brne	.+22     	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
			{
				lcd_screen_update[lcd_row_counter][lcd_col_counter] = 5;
     640:	bf 01       	movw	r22, r30
     642:	66 0d       	add	r22, r6
     644:	71 1d       	adc	r23, r1
     646:	66 0f       	add	r22, r22
     648:	77 1f       	adc	r23, r23
     64a:	68 5f       	subi	r22, 0xF8	; 248
     64c:	77 4c       	sbci	r23, 0xC7	; 199
     64e:	eb 01       	movw	r28, r22
     650:	08 83       	st	Y, r16
     652:	19 83       	std	Y+1, r17	; 0x01
     654:	0a c0       	rjmp	.+20     	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
				lcd_col_counter++;
			}
			else
			{
				lcd_screen_update[lcd_row_counter][lcd_col_counter] = 4;
     656:	bf 01       	movw	r22, r30
     658:	66 0d       	add	r22, r6
     65a:	71 1d       	adc	r23, r1
     65c:	66 0f       	add	r22, r22
     65e:	77 1f       	adc	r23, r23
     660:	68 5f       	subi	r22, 0xF8	; 248
     662:	77 4c       	sbci	r23, 0xC7	; 199
     664:	eb 01       	movw	r28, r22
     666:	e8 82       	st	Y, r14
     668:	f9 82       	std	Y+1, r15	; 0x01
	cur = (cur + 5) / 10; // round to nearest tenth and get tenth
	
	full_bars = cur / 25;
	last_bar  = (cur % 25) / 5;
	
	for(int i = 0; i < full_bars; i++)
     66a:	2f 5f       	subi	r18, 0xFF	; 255
     66c:	3f 4f       	sbci	r19, 0xFF	; 255
     66e:	d3 94       	inc	r13
     670:	24 17       	cp	r18, r20
     672:	35 07       	cpc	r19, r21
     674:	49 f6       	brne	.-110    	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
     676:	9c 01       	movw	r18, r24
     678:	21 50       	subi	r18, 0x01	; 1
     67a:	31 09       	sbc	r19, r1
     67c:	c2 0e       	add	r12, r18
     67e:	c0 92 d0 38 	sts	0x38D0, r12	; 0x8038d0 <lcd_col_counter>
				lcd_col_counter++;
			}
		}
	}
	
	if (last_bar != 0)
     682:	77 20       	and	r7, r7
     684:	b9 f0       	breq	.+46     	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = last_bar - 1;
     686:	20 91 d0 38 	lds	r18, 0x38D0	; 0x8038d0 <lcd_col_counter>
     68a:	e0 91 d7 38 	lds	r30, 0x38D7	; 0x8038d7 <lcd_row_counter>
     68e:	d4 e1       	ldi	r29, 0x14	; 20
     690:	ed 9f       	mul	r30, r29
     692:	f0 01       	movw	r30, r0
     694:	11 24       	eor	r1, r1
     696:	e2 0f       	add	r30, r18
     698:	f1 1d       	adc	r31, r1
     69a:	ee 0f       	add	r30, r30
     69c:	ff 1f       	adc	r31, r31
     69e:	e8 5f       	subi	r30, 0xF8	; 248
     6a0:	f7 4c       	sbci	r31, 0xC7	; 199
     6a2:	bb 24       	eor	r11, r11
     6a4:	31 e0       	ldi	r19, 0x01	; 1
     6a6:	a3 1a       	sub	r10, r19
     6a8:	b1 08       	sbc	r11, r1
     6aa:	a0 82       	st	Z, r10
     6ac:	b1 82       	std	Z+1, r11	; 0x01
		lcd_col_counter++;
     6ae:	2f 5f       	subi	r18, 0xFF	; 255
     6b0:	20 93 d0 38 	sts	0x38D0, r18	; 0x8038d0 <lcd_col_counter>
	}
	
	for (int i = full_bars; i < 20; i++)
     6b4:	44 31       	cpi	r20, 0x14	; 20
     6b6:	51 05       	cpc	r21, r1
     6b8:	f4 f4       	brge	.+60     	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = ' ';
     6ba:	60 91 d7 38 	lds	r22, 0x38D7	; 0x8038d7 <lcd_row_counter>
     6be:	30 91 d0 38 	lds	r19, 0x38D0	; 0x8038d0 <lcd_col_counter>
     6c2:	23 2f       	mov	r18, r19
     6c4:	c4 e1       	ldi	r28, 0x14	; 20
     6c6:	6c 9f       	mul	r22, r28
     6c8:	b0 01       	movw	r22, r0
     6ca:	11 24       	eor	r1, r1
     6cc:	a0 e2       	ldi	r26, 0x20	; 32
     6ce:	b0 e0       	ldi	r27, 0x00	; 0
     6d0:	fb 01       	movw	r30, r22
     6d2:	e2 0f       	add	r30, r18
     6d4:	f1 1d       	adc	r31, r1
     6d6:	ee 0f       	add	r30, r30
     6d8:	ff 1f       	adc	r31, r31
     6da:	e8 5f       	subi	r30, 0xF8	; 248
     6dc:	f7 4c       	sbci	r31, 0xC7	; 199
     6de:	a0 83       	st	Z, r26
     6e0:	b1 83       	std	Z+1, r27	; 0x01
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = last_bar - 1;
		lcd_col_counter++;
	}
	
	for (int i = full_bars; i < 20; i++)
     6e2:	4f 5f       	subi	r20, 0xFF	; 255
     6e4:	5f 4f       	sbci	r21, 0xFF	; 255
     6e6:	2f 5f       	subi	r18, 0xFF	; 255
     6e8:	44 31       	cpi	r20, 0x14	; 20
     6ea:	51 05       	cpc	r21, r1
     6ec:	89 f7       	brne	.-30     	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
     6ee:	38 1b       	sub	r19, r24
     6f0:	3c 5e       	subi	r19, 0xEC	; 236
     6f2:	30 93 d0 38 	sts	0x38D0, r19	; 0x8038d0 <lcd_col_counter>
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = ' ';
		lcd_col_counter++;
	}
	// FINISH writing current bars
	
	lcd_update(TRUE);
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	0e 94 5d 00 	call	0xba	; 0xba <lcd_update>
}
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	1f 91       	pop	r17
     702:	0f 91       	pop	r16
     704:	ff 90       	pop	r15
     706:	ef 90       	pop	r14
     708:	df 90       	pop	r13
     70a:	cf 90       	pop	r12
     70c:	bf 90       	pop	r11
     70e:	af 90       	pop	r10
     710:	9f 90       	pop	r9
     712:	8f 90       	pop	r8
     714:	7f 90       	pop	r7
     716:	6f 90       	pop	r6
     718:	5f 90       	pop	r5
     71a:	4f 90       	pop	r4
     71c:	3f 90       	pop	r3
     71e:	2f 90       	pop	r2
     720:	08 95       	ret

00000722 <display_set_current>:
		}
	}
}

void display_set_current()
{
     722:	cf 92       	push	r12
     724:	df 92       	push	r13
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
	// START writing current number in format %02d.%dA
	int length = snprintf(NULL, 0, "SET CUR");
     732:	0f 2e       	mov	r0, r31
     734:	f6 e4       	ldi	r31, 0x46	; 70
     736:	ef 2e       	mov	r14, r31
     738:	f9 ea       	ldi	r31, 0xA9	; 169
     73a:	ff 2e       	mov	r15, r31
     73c:	f0 2d       	mov	r31, r0
     73e:	ff 92       	push	r15
     740:	ef 92       	push	r14
     742:	1f 92       	push	r1
     744:	1f 92       	push	r1
     746:	1f 92       	push	r1
     748:	1f 92       	push	r1
     74a:	0e 94 78 11 	call	0x22f0	; 0x22f0 <snprintf>
     74e:	8c 01       	movw	r16, r24
	char* str = malloc(length + 1);
     750:	6c 01       	movw	r12, r24
     752:	2f ef       	ldi	r18, 0xFF	; 255
     754:	c2 1a       	sub	r12, r18
     756:	d2 0a       	sbc	r13, r18
     758:	c6 01       	movw	r24, r12
     75a:	0e 94 57 10 	call	0x20ae	; 0x20ae <malloc>
     75e:	ec 01       	movw	r28, r24
	snprintf(str, length + 1, "SET CUR");
     760:	ff 92       	push	r15
     762:	ef 92       	push	r14
     764:	df 92       	push	r13
     766:	cf 92       	push	r12
     768:	df 93       	push	r29
     76a:	cf 93       	push	r28
     76c:	0e 94 78 11 	call	0x22f0	; 0x22f0 <snprintf>
	
	for(unsigned char i = 0; i < length; i++)
     770:	8d b7       	in	r24, 0x3d	; 61
     772:	9e b7       	in	r25, 0x3e	; 62
     774:	0c 96       	adiw	r24, 0x0c	; 12
     776:	8d bf       	out	0x3d, r24	; 61
     778:	9e bf       	out	0x3e, r25	; 62
     77a:	10 16       	cp	r1, r16
     77c:	11 06       	cpc	r1, r17
     77e:	04 f5       	brge	.+64     	; 0x7c0 <display_set_current+0x9e>
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = str[i];
     780:	40 91 d7 38 	lds	r20, 0x38D7	; 0x8038d7 <lcd_row_counter>
     784:	90 91 d0 38 	lds	r25, 0x38D0	; 0x8038d0 <lcd_col_counter>
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	24 e1       	ldi	r18, 0x14	; 20
     78c:	42 9f       	mul	r20, r18
     78e:	a0 01       	movw	r20, r0
     790:	11 24       	eor	r1, r1
     792:	fa 01       	movw	r30, r20
     794:	e9 0f       	add	r30, r25
     796:	f1 1d       	adc	r31, r1
     798:	ee 0f       	add	r30, r30
     79a:	ff 1f       	adc	r31, r31
     79c:	e8 5f       	subi	r30, 0xF8	; 248
     79e:	f7 4c       	sbci	r31, 0xC7	; 199
     7a0:	de 01       	movw	r26, r28
     7a2:	a8 0f       	add	r26, r24
     7a4:	b1 1d       	adc	r27, r1
     7a6:	2c 91       	ld	r18, X
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	20 83       	st	Z, r18
     7ac:	31 83       	std	Z+1, r19	; 0x01
		lcd_col_counter++;
     7ae:	9f 5f       	subi	r25, 0xFF	; 255
	// START writing current number in format %02d.%dA
	int length = snprintf(NULL, 0, "SET CUR");
	char* str = malloc(length + 1);
	snprintf(str, length + 1, "SET CUR");
	
	for(unsigned char i = 0; i < length; i++)
     7b0:	8f 5f       	subi	r24, 0xFF	; 255
     7b2:	28 2f       	mov	r18, r24
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	20 17       	cp	r18, r16
     7b8:	31 07       	cpc	r19, r17
     7ba:	5c f3       	brlt	.-42     	; 0x792 <display_set_current+0x70>
     7bc:	90 93 d0 38 	sts	0x38D0, r25	; 0x8038d0 <lcd_col_counter>
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = str[i];
		lcd_col_counter++;
	}
	
	free(str);
     7c0:	ce 01       	movw	r24, r28
     7c2:	0e 94 ef 10 	call	0x21de	; 0x21de <free>
	
	length = snprintf(NULL, 0, "RENT: ");
     7c6:	0f 2e       	mov	r0, r31
     7c8:	fe e4       	ldi	r31, 0x4E	; 78
     7ca:	ef 2e       	mov	r14, r31
     7cc:	f9 ea       	ldi	r31, 0xA9	; 169
     7ce:	ff 2e       	mov	r15, r31
     7d0:	f0 2d       	mov	r31, r0
     7d2:	ff 92       	push	r15
     7d4:	ef 92       	push	r14
     7d6:	1f 92       	push	r1
     7d8:	1f 92       	push	r1
     7da:	1f 92       	push	r1
     7dc:	1f 92       	push	r1
     7de:	0e 94 78 11 	call	0x22f0	; 0x22f0 <snprintf>
     7e2:	8c 01       	movw	r16, r24
	str = malloc(length + 1);
     7e4:	6c 01       	movw	r12, r24
     7e6:	8f ef       	ldi	r24, 0xFF	; 255
     7e8:	c8 1a       	sub	r12, r24
     7ea:	d8 0a       	sbc	r13, r24
     7ec:	c6 01       	movw	r24, r12
     7ee:	0e 94 57 10 	call	0x20ae	; 0x20ae <malloc>
     7f2:	ec 01       	movw	r28, r24
	snprintf(str, length + 1, "RENT: ");
     7f4:	ff 92       	push	r15
     7f6:	ef 92       	push	r14
     7f8:	df 92       	push	r13
     7fa:	cf 92       	push	r12
     7fc:	df 93       	push	r29
     7fe:	cf 93       	push	r28
     800:	0e 94 78 11 	call	0x22f0	; 0x22f0 <snprintf>
	
	for(unsigned char i = 0; i < length; i++)
     804:	8d b7       	in	r24, 0x3d	; 61
     806:	9e b7       	in	r25, 0x3e	; 62
     808:	0c 96       	adiw	r24, 0x0c	; 12
     80a:	8d bf       	out	0x3d, r24	; 61
     80c:	9e bf       	out	0x3e, r25	; 62
     80e:	10 16       	cp	r1, r16
     810:	11 06       	cpc	r1, r17
     812:	04 f5       	brge	.+64     	; 0x854 <display_set_current+0x132>
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = str[i];
     814:	40 91 d7 38 	lds	r20, 0x38D7	; 0x8038d7 <lcd_row_counter>
     818:	90 91 d0 38 	lds	r25, 0x38D0	; 0x8038d0 <lcd_col_counter>
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	24 e1       	ldi	r18, 0x14	; 20
     820:	42 9f       	mul	r20, r18
     822:	a0 01       	movw	r20, r0
     824:	11 24       	eor	r1, r1
     826:	fa 01       	movw	r30, r20
     828:	e9 0f       	add	r30, r25
     82a:	f1 1d       	adc	r31, r1
     82c:	ee 0f       	add	r30, r30
     82e:	ff 1f       	adc	r31, r31
     830:	e8 5f       	subi	r30, 0xF8	; 248
     832:	f7 4c       	sbci	r31, 0xC7	; 199
     834:	de 01       	movw	r26, r28
     836:	a8 0f       	add	r26, r24
     838:	b1 1d       	adc	r27, r1
     83a:	2c 91       	ld	r18, X
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	20 83       	st	Z, r18
     840:	31 83       	std	Z+1, r19	; 0x01
		lcd_col_counter++;
     842:	9f 5f       	subi	r25, 0xFF	; 255
	
	length = snprintf(NULL, 0, "RENT: ");
	str = malloc(length + 1);
	snprintf(str, length + 1, "RENT: ");
	
	for(unsigned char i = 0; i < length; i++)
     844:	8f 5f       	subi	r24, 0xFF	; 255
     846:	28 2f       	mov	r18, r24
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	20 17       	cp	r18, r16
     84c:	31 07       	cpc	r19, r17
     84e:	5c f3       	brlt	.-42     	; 0x826 <display_set_current+0x104>
     850:	90 93 d0 38 	sts	0x38D0, r25	; 0x8038d0 <lcd_col_counter>
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = str[i];
		lcd_col_counter++;
	}
	
	free(str);
     854:	ce 01       	movw	r24, r28
     856:	0e 94 ef 10 	call	0x21de	; 0x21de <free>
	
	length = snprintf(NULL, 0, "%02d.%dA", desired_current / 100, desired_current / 10 % 10);
     85a:	20 91 5a 38 	lds	r18, 0x385A	; 0x80385a <desired_current>
     85e:	30 91 5b 38 	lds	r19, 0x385B	; 0x80385b <desired_current+0x1>
     862:	e0 91 5a 38 	lds	r30, 0x385A	; 0x80385a <desired_current>
     866:	f0 91 5b 38 	lds	r31, 0x385B	; 0x80385b <desired_current+0x1>
     86a:	ad ec       	ldi	r26, 0xCD	; 205
     86c:	bc ec       	ldi	r27, 0xCC	; 204
     86e:	0e 94 48 10 	call	0x2090	; 0x2090 <__umulhisi3>
     872:	ac 01       	movw	r20, r24
     874:	56 95       	lsr	r21
     876:	47 95       	ror	r20
     878:	56 95       	lsr	r21
     87a:	47 95       	ror	r20
     87c:	56 95       	lsr	r21
     87e:	47 95       	ror	r20
     880:	9a 01       	movw	r18, r20
     882:	0e 94 48 10 	call	0x2090	; 0x2090 <__umulhisi3>
     886:	96 95       	lsr	r25
     888:	87 95       	ror	r24
     88a:	96 95       	lsr	r25
     88c:	87 95       	ror	r24
     88e:	96 95       	lsr	r25
     890:	87 95       	ror	r24
     892:	9c 01       	movw	r18, r24
     894:	22 0f       	add	r18, r18
     896:	33 1f       	adc	r19, r19
     898:	88 0f       	add	r24, r24
     89a:	99 1f       	adc	r25, r25
     89c:	88 0f       	add	r24, r24
     89e:	99 1f       	adc	r25, r25
     8a0:	88 0f       	add	r24, r24
     8a2:	99 1f       	adc	r25, r25
     8a4:	82 0f       	add	r24, r18
     8a6:	93 1f       	adc	r25, r19
     8a8:	48 1b       	sub	r20, r24
     8aa:	59 0b       	sbc	r21, r25
     8ac:	5f 93       	push	r21
     8ae:	4f 93       	push	r20
     8b0:	9f 01       	movw	r18, r30
     8b2:	36 95       	lsr	r19
     8b4:	27 95       	ror	r18
     8b6:	36 95       	lsr	r19
     8b8:	27 95       	ror	r18
     8ba:	ab e7       	ldi	r26, 0x7B	; 123
     8bc:	b4 e1       	ldi	r27, 0x14	; 20
     8be:	0e 94 48 10 	call	0x2090	; 0x2090 <__umulhisi3>
     8c2:	96 95       	lsr	r25
     8c4:	87 95       	ror	r24
     8c6:	9f 93       	push	r25
     8c8:	8f 93       	push	r24
     8ca:	0f 2e       	mov	r0, r31
     8cc:	f5 e5       	ldi	r31, 0x55	; 85
     8ce:	ef 2e       	mov	r14, r31
     8d0:	f9 ea       	ldi	r31, 0xA9	; 169
     8d2:	ff 2e       	mov	r15, r31
     8d4:	f0 2d       	mov	r31, r0
     8d6:	ff 92       	push	r15
     8d8:	ef 92       	push	r14
     8da:	1f 92       	push	r1
     8dc:	1f 92       	push	r1
     8de:	1f 92       	push	r1
     8e0:	1f 92       	push	r1
     8e2:	0e 94 78 11 	call	0x22f0	; 0x22f0 <snprintf>
     8e6:	8c 01       	movw	r16, r24
	str = malloc(length + 1);
     8e8:	6c 01       	movw	r12, r24
     8ea:	8f ef       	ldi	r24, 0xFF	; 255
     8ec:	c8 1a       	sub	r12, r24
     8ee:	d8 0a       	sbc	r13, r24
     8f0:	c6 01       	movw	r24, r12
     8f2:	0e 94 57 10 	call	0x20ae	; 0x20ae <malloc>
     8f6:	ec 01       	movw	r28, r24
	snprintf(str, length + 1, "%02d.%dA", desired_current / 100, desired_current / 10 % 10);
     8f8:	20 91 5a 38 	lds	r18, 0x385A	; 0x80385a <desired_current>
     8fc:	30 91 5b 38 	lds	r19, 0x385B	; 0x80385b <desired_current+0x1>
     900:	e0 91 5a 38 	lds	r30, 0x385A	; 0x80385a <desired_current>
     904:	f0 91 5b 38 	lds	r31, 0x385B	; 0x80385b <desired_current+0x1>
     908:	ad ec       	ldi	r26, 0xCD	; 205
     90a:	bc ec       	ldi	r27, 0xCC	; 204
     90c:	0e 94 48 10 	call	0x2090	; 0x2090 <__umulhisi3>
     910:	ac 01       	movw	r20, r24
     912:	56 95       	lsr	r21
     914:	47 95       	ror	r20
     916:	56 95       	lsr	r21
     918:	47 95       	ror	r20
     91a:	56 95       	lsr	r21
     91c:	47 95       	ror	r20
     91e:	9a 01       	movw	r18, r20
     920:	0e 94 48 10 	call	0x2090	; 0x2090 <__umulhisi3>
     924:	96 95       	lsr	r25
     926:	87 95       	ror	r24
     928:	96 95       	lsr	r25
     92a:	87 95       	ror	r24
     92c:	96 95       	lsr	r25
     92e:	87 95       	ror	r24
     930:	9c 01       	movw	r18, r24
     932:	22 0f       	add	r18, r18
     934:	33 1f       	adc	r19, r19
     936:	88 0f       	add	r24, r24
     938:	99 1f       	adc	r25, r25
     93a:	88 0f       	add	r24, r24
     93c:	99 1f       	adc	r25, r25
     93e:	88 0f       	add	r24, r24
     940:	99 1f       	adc	r25, r25
     942:	82 0f       	add	r24, r18
     944:	93 1f       	adc	r25, r19
     946:	48 1b       	sub	r20, r24
     948:	59 0b       	sbc	r21, r25
     94a:	5f 93       	push	r21
     94c:	4f 93       	push	r20
     94e:	9f 01       	movw	r18, r30
     950:	36 95       	lsr	r19
     952:	27 95       	ror	r18
     954:	36 95       	lsr	r19
     956:	27 95       	ror	r18
     958:	ab e7       	ldi	r26, 0x7B	; 123
     95a:	b4 e1       	ldi	r27, 0x14	; 20
     95c:	0e 94 48 10 	call	0x2090	; 0x2090 <__umulhisi3>
     960:	96 95       	lsr	r25
     962:	87 95       	ror	r24
     964:	9f 93       	push	r25
     966:	8f 93       	push	r24
     968:	ff 92       	push	r15
     96a:	ef 92       	push	r14
     96c:	df 92       	push	r13
     96e:	cf 92       	push	r12
     970:	df 93       	push	r29
     972:	cf 93       	push	r28
     974:	0e 94 78 11 	call	0x22f0	; 0x22f0 <snprintf>
	
	for(unsigned char i = 0; i < length; i++)
     978:	8d b7       	in	r24, 0x3d	; 61
     97a:	9e b7       	in	r25, 0x3e	; 62
     97c:	44 96       	adiw	r24, 0x14	; 20
     97e:	8d bf       	out	0x3d, r24	; 61
     980:	9e bf       	out	0x3e, r25	; 62
     982:	10 16       	cp	r1, r16
     984:	11 06       	cpc	r1, r17
     986:	f4 f4       	brge	.+60     	; 0x9c4 <display_set_current+0x2a2>
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = str[i];
     988:	40 91 d7 38 	lds	r20, 0x38D7	; 0x8038d7 <lcd_row_counter>
     98c:	90 91 d0 38 	lds	r25, 0x38D0	; 0x8038d0 <lcd_col_counter>
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	24 e1       	ldi	r18, 0x14	; 20
     994:	42 9f       	mul	r20, r18
     996:	a0 01       	movw	r20, r0
     998:	11 24       	eor	r1, r1
     99a:	fa 01       	movw	r30, r20
     99c:	e9 0f       	add	r30, r25
     99e:	f1 1d       	adc	r31, r1
     9a0:	ee 0f       	add	r30, r30
     9a2:	ff 1f       	adc	r31, r31
     9a4:	e8 5f       	subi	r30, 0xF8	; 248
     9a6:	f7 4c       	sbci	r31, 0xC7	; 199
     9a8:	de 01       	movw	r26, r28
     9aa:	a8 0f       	add	r26, r24
     9ac:	b1 1d       	adc	r27, r1
     9ae:	2c 91       	ld	r18, X
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	20 83       	st	Z, r18
     9b4:	31 83       	std	Z+1, r19	; 0x01
		lcd_col_counter++;
     9b6:	9f 5f       	subi	r25, 0xFF	; 255
	
	length = snprintf(NULL, 0, "%02d.%dA", desired_current / 100, desired_current / 10 % 10);
	str = malloc(length + 1);
	snprintf(str, length + 1, "%02d.%dA", desired_current / 100, desired_current / 10 % 10);
	
	for(unsigned char i = 0; i < length; i++)
     9b8:	8f 5f       	subi	r24, 0xFF	; 255
     9ba:	28 2f       	mov	r18, r24
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	20 17       	cp	r18, r16
     9c0:	31 07       	cpc	r19, r17
     9c2:	5c f3       	brlt	.-42     	; 0x99a <display_set_current+0x278>
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = str[i];
		lcd_col_counter++;
	}
	
	free(str);
     9c4:	ce 01       	movw	r24, r28
     9c6:	0e 94 ef 10 	call	0x21de	; 0x21de <free>
	// FINISH writing current number
	
	lcd_col_counter = 0;
     9ca:	10 92 d0 38 	sts	0x38D0, r1	; 0x8038d0 <lcd_col_counter>
	lcd_row_counter = 0;
     9ce:	10 92 d7 38 	sts	0x38D7, r1	; 0x8038d7 <lcd_row_counter>
	
	lcd_update(FALSE);
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	0e 94 5d 00 	call	0xba	; 0xba <lcd_update>
}
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	1f 91       	pop	r17
     9de:	0f 91       	pop	r16
     9e0:	ff 90       	pop	r15
     9e2:	ef 90       	pop	r14
     9e4:	df 90       	pop	r13
     9e6:	cf 90       	pop	r12
     9e8:	08 95       	ret

000009ea <display_danger>:

void display_danger()
{
	lcd_command(CLEAR_DISPLAY);
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(FUNCTION_SET | 0b0000111100);
     9f2:	8c e3       	ldi	r24, 0x3C	; 60
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_write(" OVER ");
     9fa:	8e e5       	ldi	r24, 0x5E	; 94
     9fc:	99 ea       	ldi	r25, 0xA9	; 169
     9fe:	0e 94 fd 09 	call	0x13fa	; 0x13fa <lcd_write>
	lcd_write("VOLTAGE");
     a02:	85 e6       	ldi	r24, 0x65	; 101
     a04:	99 ea       	ldi	r25, 0xA9	; 169
     a06:	0e 94 fd 09 	call	0x13fa	; 0x13fa <lcd_write>
	lcd_write(" ! ! !");
     a0a:	8d e6       	ldi	r24, 0x6D	; 109
     a0c:	99 ea       	ldi	r25, 0xA9	; 169
     a0e:	0e 94 fd 09 	call	0x13fa	; 0x13fa <lcd_write>
     a12:	08 95       	ret

00000a14 <debounce>:
/*          6 times more than @precisionUs)                             */
/* @return - whether the function debounced pin correctly (If running   */
/*           time of the function reached @maxUs returns false(0))      */
/************************************************************************/
uint8_t debounce(volatile unsigned char *port, uint8_t pin, uint8_t precisionUs, uint8_t maxUs)
{
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	ec 01       	movw	r28, r24
	uint8_t counter = 0;
	uint8_t counterUs = 0;
	uint8_t isHigh = FALSE;
	
	while(counter != precisionUs && counterUs != maxUs)
     a1a:	44 23       	and	r20, r20
     a1c:	39 f1       	breq	.+78     	; 0xa6c <debounce+0x58>
     a1e:	22 23       	and	r18, r18
     a20:	39 f1       	breq	.+78     	; 0xa70 <debounce+0x5c>
     a22:	a1 e0       	ldi	r26, 0x01	; 1
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	02 c0       	rjmp	.+4      	; 0xa2c <debounce+0x18>
     a28:	aa 0f       	add	r26, r26
     a2a:	bb 1f       	adc	r27, r27
     a2c:	6a 95       	dec	r22
     a2e:	e2 f7       	brpl	.-8      	; 0xa28 <debounce+0x14>
	{
		// *(volatile uint8_t *)(port) - is a dereference of a port's address, therefore, we read directly from memory
		if(*(volatile uint8_t *)(port) & (1 << pin))
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	e0 e0       	ldi	r30, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	01 c0       	rjmp	.+2      	; 0xa3a <debounce+0x26>
     a38:	95 2f       	mov	r25, r21
     a3a:	68 81       	ld	r22, Y
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	6a 23       	and	r22, r26
     a40:	7b 23       	and	r23, r27
     a42:	67 2b       	or	r22, r23
     a44:	29 f0       	breq	.+10     	; 0xa50 <debounce+0x3c>
		{
			counter = isHigh ? counter + 1 : 0;
     a46:	ee 23       	and	r30, r30
     a48:	c9 f0       	breq	.+50     	; 0xa7c <debounce+0x68>
     a4a:	3f 5f       	subi	r19, 0xFF	; 255
			isHigh = TRUE;
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	03 c0       	rjmp	.+6      	; 0xa56 <debounce+0x42>
		}
		else
		{
			counter = isHigh ? 0 : counter + 1;
     a50:	e1 11       	cpse	r30, r1
     a52:	16 c0       	rjmp	.+44     	; 0xa80 <debounce+0x6c>
     a54:	3f 5f       	subi	r19, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a56:	86 e0       	ldi	r24, 0x06	; 6
     a58:	8a 95       	dec	r24
     a5a:	f1 f7       	brne	.-4      	; 0xa58 <debounce+0x44>
     a5c:	00 c0       	rjmp	.+0      	; 0xa5e <debounce+0x4a>
{
	uint8_t counter = 0;
	uint8_t counterUs = 0;
	uint8_t isHigh = FALSE;
	
	while(counter != precisionUs && counterUs != maxUs)
     a5e:	34 17       	cp	r19, r20
     a60:	41 f0       	breq	.+16     	; 0xa72 <debounce+0x5e>
     a62:	51 e0       	ldi	r21, 0x01	; 1
     a64:	59 0f       	add	r21, r25
     a66:	29 13       	cpse	r18, r25
     a68:	e7 cf       	rjmp	.-50     	; 0xa38 <debounce+0x24>
     a6a:	03 c0       	rjmp	.+6      	; 0xa72 <debounce+0x5e>
/*           time of the function reached @maxUs returns false(0))      */
/************************************************************************/
uint8_t debounce(volatile unsigned char *port, uint8_t pin, uint8_t precisionUs, uint8_t maxUs)
{
	uint8_t counter = 0;
	uint8_t counterUs = 0;
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	01 c0       	rjmp	.+2      	; 0xa72 <debounce+0x5e>
     a70:	90 e0       	ldi	r25, 0x00	; 0
		}
		_delay_us(1);
		counterUs++;
	}
	
	return counterUs != maxUs;
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	29 13       	cpse	r18, r25
     a76:	0b c0       	rjmp	.+22     	; 0xa8e <debounce+0x7a>
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	09 c0       	rjmp	.+18     	; 0xa8e <debounce+0x7a>
	{
		// *(volatile uint8_t *)(port) - is a dereference of a port's address, therefore, we read directly from memory
		if(*(volatile uint8_t *)(port) & (1 << pin))
		{
			counter = isHigh ? counter + 1 : 0;
			isHigh = TRUE;
     a7c:	e1 e0       	ldi	r30, 0x01	; 1
     a7e:	01 c0       	rjmp	.+2      	; 0xa82 <debounce+0x6e>
		}
		else
		{
			counter = isHigh ? 0 : counter + 1;
			isHigh = FALSE;
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	86 e0       	ldi	r24, 0x06	; 6
     a84:	8a 95       	dec	r24
     a86:	f1 f7       	brne	.-4      	; 0xa84 <debounce+0x70>
     a88:	00 c0       	rjmp	.+0      	; 0xa8a <debounce+0x76>
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	ea cf       	rjmp	.-44     	; 0xa62 <debounce+0x4e>
		_delay_us(1);
		counterUs++;
	}
	
	return counterUs != maxUs;
}
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	08 95       	ret

00000a94 <read_gray_code_from_encoder>:

uint8_t read_gray_code_from_encoder()
{
     a94:	1f 93       	push	r17
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
	uint8_t val=0;
	
	bool is_debounce_successful = TRUE;
	is_debounce_successful &= debounce(&PORTA_IN, ENCDR_A, 10, 60);
     a9a:	2c e3       	ldi	r18, 0x3C	; 60
     a9c:	4a e0       	ldi	r20, 0x0A	; 10
     a9e:	66 e0       	ldi	r22, 0x06	; 6
     aa0:	88 e0       	ldi	r24, 0x08	; 8
     aa2:	94 e0       	ldi	r25, 0x04	; 4
     aa4:	0e 94 0a 05 	call	0xa14	; 0xa14 <debounce>
     aa8:	18 2f       	mov	r17, r24
	is_debounce_successful &= debounce(&PORTA_IN, ENCDR_B, 10, 60);
     aaa:	2c e3       	ldi	r18, 0x3C	; 60
     aac:	4a e0       	ldi	r20, 0x0A	; 10
     aae:	65 e0       	ldi	r22, 0x05	; 5
     ab0:	88 e0       	ldi	r24, 0x08	; 8
     ab2:	94 e0       	ldi	r25, 0x04	; 4
     ab4:	0e 94 0a 05 	call	0xa14	; 0xa14 <debounce>
	
	if (is_debounce_successful)
     ab8:	11 70       	andi	r17, 0x01	; 1
     aba:	c1 2f       	mov	r28, r17
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	d9 2f       	mov	r29, r25
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	8c 23       	and	r24, r28
     ac4:	9d 23       	and	r25, r29
     ac6:	89 2b       	or	r24, r25
     ac8:	69 f0       	breq	.+26     	; 0xae4 <read_gray_code_from_encoder+0x50>
	{
		if(!(PORTA_IN & (1 << ENCDR_A)))
     aca:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     ace:	86 fd       	sbrc	r24, 6
     ad0:	02 c0       	rjmp	.+4      	; 0xad6 <read_gray_code_from_encoder+0x42>
		{
			val |= (1 << 1);
     ad2:	82 e0       	ldi	r24, 0x02	; 2
     ad4:	01 c0       	rjmp	.+2      	; 0xad8 <read_gray_code_from_encoder+0x44>
	return counterUs != maxUs;
}

uint8_t read_gray_code_from_encoder()
{
	uint8_t val=0;
     ad6:	80 e0       	ldi	r24, 0x00	; 0
		if(!(PORTA_IN & (1 << ENCDR_A)))
		{
			val |= (1 << 1);
		}

		if(!(PORTA_IN & (1 << ENCDR_B)))
     ad8:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     adc:	95 fd       	sbrc	r25, 5
     ade:	03 c0       	rjmp	.+6      	; 0xae6 <read_gray_code_from_encoder+0x52>
		{
			val |= (1<<0);
     ae0:	81 60       	ori	r24, 0x01	; 1
     ae2:	01 c0       	rjmp	.+2      	; 0xae6 <read_gray_code_from_encoder+0x52>
	return counterUs != maxUs;
}

uint8_t read_gray_code_from_encoder()
{
	uint8_t val=0;
     ae4:	80 e0       	ldi	r24, 0x00	; 0
			val |= (1<<0);
		}
	}

	return val;
}
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	1f 91       	pop	r17
     aec:	08 95       	ret

00000aee <initialize>:
#include "board.h"

void initialize()
{
     aee:	cf 93       	push	r28
	CPU_CCP = 0xD8; //temporarily remove protection for protected I/O registers (Cannot change clock prescaler without doing this first)
     af0:	88 ed       	ldi	r24, 0xD8	; 216
     af2:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLB = (0 << 0); // disable prescaler (There's a default prescaler of 6)
     af4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     af8:	87 ea       	ldi	r24, 0xA7	; 167
     afa:	91 e6       	ldi	r25, 0x61	; 97
     afc:	01 97       	sbiw	r24, 0x01	; 1
     afe:	f1 f7       	brne	.-4      	; 0xafc <initialize+0xe>
     b00:	00 c0       	rjmp	.+0      	; 0xb02 <initialize+0x14>
     b02:	00 00       	nop
	_delay_ms(5);
	CLKCTRL_MCLKCTRLA |= (1 << 7); // System clock is output to CLKOUT pin (20 MHz)
     b04:	e0 e6       	ldi	r30, 0x60	; 96
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	80 81       	ld	r24, Z
     b0a:	80 68       	ori	r24, 0x80	; 128
     b0c:	80 83       	st	Z, r24
	PA4 - SW_Encoder - Input/Pull-up
	PA5 - B_Encoder - Input/Pull-up - Interrupt both edges
	PA6 - A_Encoder - Input/Pull-up - Interrupt both edges
	PA7 - Display LED (Backlight) - Output/Low
	*/
	PORTA_DIR = 0b10001111;
     b0e:	8f e8       	ldi	r24, 0x8F	; 143
     b10:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
	PORTA_PIN4CTRL = (1 << PORT_PULLUPEN_bp);
     b14:	88 e0       	ldi	r24, 0x08	; 8
     b16:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <__TEXT_REGION_LENGTH__+0x700414>
	PORTA_PIN5CTRL = (1 << PORT_PULLUPEN_bp);
     b1a:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <__TEXT_REGION_LENGTH__+0x700415>
	PORTA_PIN6CTRL = (1 << PORT_PULLUPEN_bp);
     b1e:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <__TEXT_REGION_LENGTH__+0x700416>
	PB4 - D4_LCD - Output/Low
	PB5 - D5_LCD - Output/Low
	PB6 - D6_LCD - Output/Low
	PB7 - D7_LCD - Output/Low
	*/
	PORTB_DIR = 0b11110101;
     b22:	95 ef       	ldi	r25, 0xF5	; 245
     b24:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
	PORTB_OUTSET = (1 << PIN0_bp);
     b28:	91 e0       	ldi	r25, 0x01	; 1
     b2a:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
	PORTB_PIN1CTRL = (1 << PORT_PULLUPEN_bp);
     b2e:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>
	//PORTB_PIN3CTRL = (1 << PORT_PULLUPEN_bp);
	PORTB_PIN3CTRL |= (0x1); //interrupt on both edges
     b32:	e3 e3       	ldi	r30, 0x33	; 51
     b34:	f4 e0       	ldi	r31, 0x04	; 4
     b36:	90 81       	ld	r25, Z
     b38:	91 60       	ori	r25, 0x01	; 1
     b3a:	90 83       	st	Z, r25
	CPUINT.LVL1VEC = 0x08; //Set PORTB interrupt to be LEVEL1
     b3c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <__TEXT_REGION_LENGTH__+0x700113>
	PC2 - D2_LCD - Output/Low
	PC3 - D3_LCD - Output/Low
	PC4 - R/W (0:RD, 1:WR) - Output/Low
	PC5 - RS (Reg Sel) (0:CMD, 1:DATA) - Output/Low
	*/
	PORTC_DIR = 0b00111111;
     b40:	8f e3       	ldi	r24, 0x3F	; 63
     b42:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>
	
	//RTC initialization
	while (RTC.STATUS > 0) {} // Wait for all register to be synchronized
     b46:	e0 e4       	ldi	r30, 0x40	; 64
     b48:	f1 e0       	ldi	r31, 0x01	; 1
     b4a:	81 81       	ldd	r24, Z+1	; 0x01
     b4c:	81 11       	cpse	r24, r1
     b4e:	fd cf       	rjmp	.-6      	; 0xb4a <initialize+0x5c>

	RTC.PER = 1;
     b50:	e0 e4       	ldi	r30, 0x40	; 64
     b52:	f1 e0       	ldi	r31, 0x01	; 1
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	82 87       	std	Z+10, r24	; 0x0a
     b5a:	93 87       	std	Z+11, r25	; 0x0b
	RTC.INTCTRL = 0 << RTC_CMP_bp
     b5c:	c1 e0       	ldi	r28, 0x01	; 1
     b5e:	c2 83       	std	Z+2, r28	; 0x02
	| 1 << RTC_OVF_bp; //Overflow interrupt.
	
	RTC.CTRLA = RTC_PRESCALER_DIV1_gc	//NO Prescaler
     b60:	81 e8       	ldi	r24, 0x81	; 129
     b62:	80 83       	st	Z, r24
	| 1 << RTC_RTCEN_bp       	//Enable RTC
	| 1 << RTC_RUNSTDBY_bp;   	//Run in standby

	RTC.CLKSEL = RTC_CLKSEL_INT1K_gc; // 32KHz divided by 32, i.e run at 1.024kHz
     b64:	c7 83       	std	Z+7, r28	; 0x07
	
	encoder_val = read_gray_code_from_encoder();
     b66:	0e 94 4a 05 	call	0xa94	; 0xa94 <read_gray_code_from_encoder>
     b6a:	80 93 e2 38 	sts	0x38E2, r24	; 0x8038e2 <encoder_val>
	encoder_val_tmp = 0;
     b6e:	10 92 cd 38 	sts	0x38CD, r1	; 0x8038cd <encoder_val_tmp>
	
	current              = 0;
     b72:	10 92 ce 38 	sts	0x38CE, r1	; 0x8038ce <current>
     b76:	10 92 cf 38 	sts	0x38CF, r1	; 0x8038cf <current+0x1>
	temp_current         = 0;
     b7a:	10 92 cb 38 	sts	0x38CB, r1	; 0x8038cb <temp_current>
     b7e:	10 92 cc 38 	sts	0x38CC, r1	; 0x8038cc <temp_current+0x1>
	voltage              = 0;
     b82:	10 92 ac 38 	sts	0x38AC, r1	; 0x8038ac <voltage>
     b86:	10 92 ad 38 	sts	0x38AD, r1	; 0x8038ad <voltage+0x1>
	temp_voltage         = 0;
     b8a:	10 92 d8 38 	sts	0x38D8, r1	; 0x8038d8 <temp_voltage>
     b8e:	10 92 d9 38 	sts	0x38D9, r1	; 0x8038d9 <temp_voltage+0x1>
	update               = TRUE;
     b92:	c0 93 e1 38 	sts	0x38E1, r28	; 0x8038e1 <update>
	set_current_mode     = FALSE;
     b96:	10 92 dc 38 	sts	0x38DC, r1	; 0x8038dc <set_current_mode>
	set_current_mode_on  = 0;
     b9a:	10 92 d2 38 	sts	0x38D2, r1	; 0x8038d2 <set_current_mode_on>
	rtc_idle_counter     = 0;
     b9e:	10 92 dd 38 	sts	0x38DD, r1	; 0x8038dd <rtc_idle_counter>
     ba2:	10 92 de 38 	sts	0x38DE, r1	; 0x8038de <rtc_idle_counter+0x1>
     ba6:	10 92 df 38 	sts	0x38DF, r1	; 0x8038df <rtc_idle_counter+0x2>
     baa:	10 92 e0 38 	sts	0x38E0, r1	; 0x8038e0 <rtc_idle_counter+0x3>
	rtc_counter          = 0;
     bae:	10 92 ae 38 	sts	0x38AE, r1	; 0x8038ae <rtc_counter>
     bb2:	10 92 af 38 	sts	0x38AF, r1	; 0x8038af <rtc_counter+0x1>
     bb6:	10 92 b0 38 	sts	0x38B0, r1	; 0x8038b0 <rtc_counter+0x2>
     bba:	10 92 b1 38 	sts	0x38B1, r1	; 0x8038b1 <rtc_counter+0x3>
	rtc_counter_1_4      = FALSE;
     bbe:	10 92 d1 38 	sts	0x38D1, r1	; 0x8038d1 <rtc_counter_1_4>
	rtc_counter_1_2      = FALSE;
     bc2:	10 92 db 38 	sts	0x38DB, r1	; 0x8038db <rtc_counter_1_2>
	rtc_counter_prev     = 0;
     bc6:	10 92 d3 38 	sts	0x38D3, r1	; 0x8038d3 <rtc_counter_prev>
     bca:	10 92 d4 38 	sts	0x38D4, r1	; 0x8038d4 <rtc_counter_prev+0x1>
     bce:	10 92 d5 38 	sts	0x38D5, r1	; 0x8038d5 <rtc_counter_prev+0x2>
     bd2:	10 92 d6 38 	sts	0x38D6, r1	; 0x8038d6 <rtc_counter_prev+0x3>
	encoder_sw_was_low   = FALSE;
     bd6:	10 92 da 38 	sts	0x38DA, r1	; 0x8038da <encoder_sw_was_low>
	
	desired_current = MAX_CURRENT + 1;
     bda:	85 ec       	ldi	r24, 0xC5	; 197
     bdc:	99 e0       	ldi	r25, 0x09	; 9
     bde:	80 93 5a 38 	sts	0x385A, r24	; 0x80385a <desired_current>
     be2:	90 93 5b 38 	sts	0x385B, r25	; 0x80385b <desired_current+0x1>
	
	if (desired_current < 0 || desired_current > MAX_CURRENT)
     be6:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
     bea:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
     bee:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
     bf2:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
     bf6:	85 3c       	cpi	r24, 0xC5	; 197
     bf8:	99 40       	sbci	r25, 0x09	; 9
     bfa:	60 f0       	brcs	.+24     	; 0xc14 <initialize+0x126>
	{
		desired_current = 0;
     bfc:	10 92 5a 38 	sts	0x385A, r1	; 0x80385a <desired_current>
     c00:	10 92 5b 38 	sts	0x385B, r1	; 0x80385b <desired_current+0x1>
		eeprom_update_word((uint16_t*) 0x00, desired_current);
     c04:	60 91 5a 38 	lds	r22, 0x385A	; 0x80385a <desired_current>
     c08:	70 91 5b 38 	lds	r23, 0x385B	; 0x80385b <desired_current+0x1>
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	0e 94 39 14 	call	0x2872	; 0x2872 <eeprom_update_word>
	}
	
	desired_current_temp = desired_current;
     c14:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
     c18:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
     c1c:	80 93 58 38 	sts	0x3858, r24	; 0x803858 <desired_current_temp>
     c20:	90 93 59 38 	sts	0x3859, r25	; 0x803859 <desired_current_temp+0x1>
}
     c24:	cf 91       	pop	r28
     c26:	08 95       	ret

00000c28 <handle_encoder>:
	return val;
}

void handle_encoder()
{
	encoder_val_tmp = read_gray_code_from_encoder();
     c28:	0e 94 4a 05 	call	0xa94	; 0xa94 <read_gray_code_from_encoder>
     c2c:	80 93 cd 38 	sts	0x38CD, r24	; 0x8038cd <encoder_val_tmp>
	
	desired_current = (desired_current / 10) * 10;
     c30:	20 91 5a 38 	lds	r18, 0x385A	; 0x80385a <desired_current>
     c34:	30 91 5b 38 	lds	r19, 0x385B	; 0x80385b <desired_current+0x1>
     c38:	ad ec       	ldi	r26, 0xCD	; 205
     c3a:	bc ec       	ldi	r27, 0xCC	; 204
     c3c:	0e 94 48 10 	call	0x2090	; 0x2090 <__umulhisi3>
     c40:	96 95       	lsr	r25
     c42:	87 95       	ror	r24
     c44:	96 95       	lsr	r25
     c46:	87 95       	ror	r24
     c48:	96 95       	lsr	r25
     c4a:	87 95       	ror	r24
     c4c:	9c 01       	movw	r18, r24
     c4e:	22 0f       	add	r18, r18
     c50:	33 1f       	adc	r19, r19
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	88 0f       	add	r24, r24
     c58:	99 1f       	adc	r25, r25
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	82 0f       	add	r24, r18
     c60:	93 1f       	adc	r25, r19
     c62:	80 93 5a 38 	sts	0x385A, r24	; 0x80385a <desired_current>
     c66:	90 93 5b 38 	sts	0x385B, r25	; 0x80385b <desired_current+0x1>

	if(encoder_val != encoder_val_tmp)
     c6a:	90 91 e2 38 	lds	r25, 0x38E2	; 0x8038e2 <encoder_val>
     c6e:	80 91 cd 38 	lds	r24, 0x38CD	; 0x8038cd <encoder_val_tmp>
     c72:	98 17       	cp	r25, r24
     c74:	09 f4       	brne	.+2      	; 0xc78 <handle_encoder+0x50>
     c76:	c3 c0       	rjmp	.+390    	; 0xdfe <handle_encoder+0x1d6>
	{
		if((encoder_val == 0 && encoder_val_tmp == 2))
     c78:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <encoder_val>
     c7c:	81 11       	cpse	r24, r1
     c7e:	54 c0       	rjmp	.+168    	; 0xd28 <handle_encoder+0x100>
     c80:	80 91 cd 38 	lds	r24, 0x38CD	; 0x8038cd <encoder_val_tmp>
     c84:	82 30       	cpi	r24, 0x02	; 2
     c86:	09 f0       	breq	.+2      	; 0xc8a <handle_encoder+0x62>
     c88:	4f c0       	rjmp	.+158    	; 0xd28 <handle_encoder+0x100>
		{
			if (desired_current <= MAX_CURRENT - 10)
     c8a:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
     c8e:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
     c92:	8b 3b       	cpi	r24, 0xBB	; 187
     c94:	99 40       	sbci	r25, 0x09	; 9
     c96:	08 f0       	brcs	.+2      	; 0xc9a <handle_encoder+0x72>
     c98:	9e c0       	rjmp	.+316    	; 0xdd6 <handle_encoder+0x1ae>
			{
				if (rtc_counter - rtc_counter_prev < 2)
     c9a:	80 91 ae 38 	lds	r24, 0x38AE	; 0x8038ae <rtc_counter>
     c9e:	90 91 af 38 	lds	r25, 0x38AF	; 0x8038af <rtc_counter+0x1>
     ca2:	a0 91 b0 38 	lds	r26, 0x38B0	; 0x8038b0 <rtc_counter+0x2>
     ca6:	b0 91 b1 38 	lds	r27, 0x38B1	; 0x8038b1 <rtc_counter+0x3>
     caa:	40 91 d3 38 	lds	r20, 0x38D3	; 0x8038d3 <rtc_counter_prev>
     cae:	50 91 d4 38 	lds	r21, 0x38D4	; 0x8038d4 <rtc_counter_prev+0x1>
     cb2:	60 91 d5 38 	lds	r22, 0x38D5	; 0x8038d5 <rtc_counter_prev+0x2>
     cb6:	70 91 d6 38 	lds	r23, 0x38D6	; 0x8038d6 <rtc_counter_prev+0x3>
     cba:	84 1b       	sub	r24, r20
     cbc:	95 0b       	sbc	r25, r21
     cbe:	a6 0b       	sbc	r26, r22
     cc0:	b7 0b       	sbc	r27, r23
     cc2:	02 97       	sbiw	r24, 0x02	; 2
     cc4:	a1 05       	cpc	r26, r1
     cc6:	b1 05       	cpc	r27, r1
     cc8:	10 f5       	brcc	.+68     	; 0xd0e <handle_encoder+0xe6>
				{
					if (desired_current <= MAX_CURRENT - 100)
     cca:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
     cce:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
     cd2:	81 36       	cpi	r24, 0x61	; 97
     cd4:	99 40       	sbci	r25, 0x09	; 9
     cd6:	70 f4       	brcc	.+28     	; 0xcf4 <handle_encoder+0xcc>
					{
						desired_current += 100;
     cd8:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
     cdc:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
     ce0:	8c 59       	subi	r24, 0x9C	; 156
     ce2:	9f 4f       	sbci	r25, 0xFF	; 255
     ce4:	80 93 5a 38 	sts	0x385A, r24	; 0x80385a <desired_current>
     ce8:	90 93 5b 38 	sts	0x385B, r25	; 0x80385b <desired_current+0x1>
						update = TRUE;
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	80 93 e1 38 	sts	0x38E1, r24	; 0x8038e1 <update>
     cf2:	71 c0       	rjmp	.+226    	; 0xdd6 <handle_encoder+0x1ae>
					}
					else
					{
						desired_current += 10;
     cf4:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
     cf8:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
     cfc:	0a 96       	adiw	r24, 0x0a	; 10
     cfe:	80 93 5a 38 	sts	0x385A, r24	; 0x80385a <desired_current>
     d02:	90 93 5b 38 	sts	0x385B, r25	; 0x80385b <desired_current+0x1>
						update = TRUE;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	80 93 e1 38 	sts	0x38E1, r24	; 0x8038e1 <update>
     d0c:	64 c0       	rjmp	.+200    	; 0xdd6 <handle_encoder+0x1ae>
					}
				}
				else
				{
					desired_current += 10;
     d0e:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
     d12:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
     d16:	0a 96       	adiw	r24, 0x0a	; 10
     d18:	80 93 5a 38 	sts	0x385A, r24	; 0x80385a <desired_current>
     d1c:	90 93 5b 38 	sts	0x385B, r25	; 0x80385b <desired_current+0x1>
					update = TRUE;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	80 93 e1 38 	sts	0x38E1, r24	; 0x8038e1 <update>
     d26:	57 c0       	rjmp	.+174    	; 0xdd6 <handle_encoder+0x1ae>
				}
			}
		}
		else if((encoder_val == 1 && encoder_val_tmp == 3))
     d28:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <encoder_val>
     d2c:	81 30       	cpi	r24, 0x01	; 1
     d2e:	09 f0       	breq	.+2      	; 0xd32 <handle_encoder+0x10a>
     d30:	52 c0       	rjmp	.+164    	; 0xdd6 <handle_encoder+0x1ae>
     d32:	80 91 cd 38 	lds	r24, 0x38CD	; 0x8038cd <encoder_val_tmp>
     d36:	83 30       	cpi	r24, 0x03	; 3
     d38:	09 f0       	breq	.+2      	; 0xd3c <handle_encoder+0x114>
     d3a:	4d c0       	rjmp	.+154    	; 0xdd6 <handle_encoder+0x1ae>
		{
			if (desired_current >= 10)
     d3c:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
     d40:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
     d44:	0a 97       	sbiw	r24, 0x0a	; 10
     d46:	08 f4       	brcc	.+2      	; 0xd4a <handle_encoder+0x122>
     d48:	46 c0       	rjmp	.+140    	; 0xdd6 <handle_encoder+0x1ae>
			{
				if (rtc_counter - rtc_counter_prev < 2)
     d4a:	80 91 ae 38 	lds	r24, 0x38AE	; 0x8038ae <rtc_counter>
     d4e:	90 91 af 38 	lds	r25, 0x38AF	; 0x8038af <rtc_counter+0x1>
     d52:	a0 91 b0 38 	lds	r26, 0x38B0	; 0x8038b0 <rtc_counter+0x2>
     d56:	b0 91 b1 38 	lds	r27, 0x38B1	; 0x8038b1 <rtc_counter+0x3>
     d5a:	40 91 d3 38 	lds	r20, 0x38D3	; 0x8038d3 <rtc_counter_prev>
     d5e:	50 91 d4 38 	lds	r21, 0x38D4	; 0x8038d4 <rtc_counter_prev+0x1>
     d62:	60 91 d5 38 	lds	r22, 0x38D5	; 0x8038d5 <rtc_counter_prev+0x2>
     d66:	70 91 d6 38 	lds	r23, 0x38D6	; 0x8038d6 <rtc_counter_prev+0x3>
     d6a:	84 1b       	sub	r24, r20
     d6c:	95 0b       	sbc	r25, r21
     d6e:	a6 0b       	sbc	r26, r22
     d70:	b7 0b       	sbc	r27, r23
     d72:	02 97       	sbiw	r24, 0x02	; 2
     d74:	a1 05       	cpc	r26, r1
     d76:	b1 05       	cpc	r27, r1
     d78:	10 f5       	brcc	.+68     	; 0xdbe <handle_encoder+0x196>
				{
					if (desired_current >= 100)
     d7a:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
     d7e:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
     d82:	84 36       	cpi	r24, 0x64	; 100
     d84:	91 05       	cpc	r25, r1
     d86:	70 f0       	brcs	.+28     	; 0xda4 <handle_encoder+0x17c>
					{
						desired_current -= 100;
     d88:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
     d8c:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
     d90:	84 56       	subi	r24, 0x64	; 100
     d92:	91 09       	sbc	r25, r1
     d94:	80 93 5a 38 	sts	0x385A, r24	; 0x80385a <desired_current>
     d98:	90 93 5b 38 	sts	0x385B, r25	; 0x80385b <desired_current+0x1>
						update = TRUE;
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	80 93 e1 38 	sts	0x38E1, r24	; 0x8038e1 <update>
     da2:	19 c0       	rjmp	.+50     	; 0xdd6 <handle_encoder+0x1ae>
					}
					else
					{
						desired_current -= 10;
     da4:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
     da8:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
     dac:	0a 97       	sbiw	r24, 0x0a	; 10
     dae:	80 93 5a 38 	sts	0x385A, r24	; 0x80385a <desired_current>
     db2:	90 93 5b 38 	sts	0x385B, r25	; 0x80385b <desired_current+0x1>
						update = TRUE;
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	80 93 e1 38 	sts	0x38E1, r24	; 0x8038e1 <update>
     dbc:	0c c0       	rjmp	.+24     	; 0xdd6 <handle_encoder+0x1ae>
					}
				}
				else
				{
					desired_current -= 10;
     dbe:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
     dc2:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
     dc6:	0a 97       	sbiw	r24, 0x0a	; 10
     dc8:	80 93 5a 38 	sts	0x385A, r24	; 0x80385a <desired_current>
     dcc:	90 93 5b 38 	sts	0x385B, r25	; 0x80385b <desired_current+0x1>
					update = TRUE;
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	80 93 e1 38 	sts	0x38E1, r24	; 0x8038e1 <update>
				}
			}
		}

		encoder_val = encoder_val_tmp;
     dd6:	80 91 cd 38 	lds	r24, 0x38CD	; 0x8038cd <encoder_val_tmp>
     dda:	80 93 e2 38 	sts	0x38E2, r24	; 0x8038e2 <encoder_val>
		rtc_counter_prev = rtc_counter;
     dde:	80 91 ae 38 	lds	r24, 0x38AE	; 0x8038ae <rtc_counter>
     de2:	90 91 af 38 	lds	r25, 0x38AF	; 0x8038af <rtc_counter+0x1>
     de6:	a0 91 b0 38 	lds	r26, 0x38B0	; 0x8038b0 <rtc_counter+0x2>
     dea:	b0 91 b1 38 	lds	r27, 0x38B1	; 0x8038b1 <rtc_counter+0x3>
     dee:	80 93 d3 38 	sts	0x38D3, r24	; 0x8038d3 <rtc_counter_prev>
     df2:	90 93 d4 38 	sts	0x38D4, r25	; 0x8038d4 <rtc_counter_prev+0x1>
     df6:	a0 93 d5 38 	sts	0x38D5, r26	; 0x8038d5 <rtc_counter_prev+0x2>
     dfa:	b0 93 d6 38 	sts	0x38D6, r27	; 0x8038d6 <rtc_counter_prev+0x3>
     dfe:	08 95       	ret

00000e00 <INA_Read_Short>:
	//INA_Write(twi, 0x00, 0x48, 0x07, ina226_addr);
	//If no communication for too long then do long delay to triger a watch dog counter
	INA_Write(twi, 0x00, 0x45, 0xFF, ina226_addr);
	
	_delay_ms(20);
}
     e00:	ef 92       	push	r14
     e02:	ff 92       	push	r15
     e04:	0f 93       	push	r16
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
     e0e:	28 97       	sbiw	r28, 0x08	; 8
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	7c 01       	movw	r14, r24
     e16:	84 2f       	mov	r24, r20
     e18:	69 83       	std	Y+1, r22	; 0x01
     e1a:	02 e0       	ldi	r16, 0x02	; 2
     e1c:	21 e0       	ldi	r18, 0x01	; 1
     e1e:	ae 01       	movw	r20, r28
     e20:	4f 5f       	subi	r20, 0xFF	; 255
     e22:	5f 4f       	sbci	r21, 0xFF	; 255
     e24:	68 2f       	mov	r22, r24
     e26:	c7 01       	movw	r24, r14
     e28:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <TWI_MasterWriteRead>
     e2c:	8f e0       	ldi	r24, 0x0F	; 15
     e2e:	97 e2       	ldi	r25, 0x27	; 39
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	f1 f7       	brne	.-4      	; 0xe30 <INA_Read_Short+0x30>
     e34:	00 c0       	rjmp	.+0      	; 0xe36 <INA_Read_Short+0x36>
     e36:	00 00       	nop
     e38:	c7 01       	movw	r24, r14
     e3a:	0b 96       	adiw	r24, 0x0b	; 11
     e3c:	28 96       	adiw	r28, 0x08	; 8
     e3e:	cd bf       	out	0x3d, r28	; 61
     e40:	de bf       	out	0x3e, r29	; 62
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	0f 91       	pop	r16
     e48:	ff 90       	pop	r15
     e4a:	ef 90       	pop	r14
     e4c:	08 95       	ret

00000e4e <INA_Read_Long>:
     e4e:	ef 92       	push	r14
     e50:	ff 92       	push	r15
     e52:	0f 93       	push	r16
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	28 97       	sbiw	r28, 0x08	; 8
     e5e:	cd bf       	out	0x3d, r28	; 61
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	7c 01       	movw	r14, r24
     e64:	84 2f       	mov	r24, r20
     e66:	69 83       	std	Y+1, r22	; 0x01
     e68:	02 e0       	ldi	r16, 0x02	; 2
     e6a:	21 e0       	ldi	r18, 0x01	; 1
     e6c:	ae 01       	movw	r20, r28
     e6e:	4f 5f       	subi	r20, 0xFF	; 255
     e70:	5f 4f       	sbci	r21, 0xFF	; 255
     e72:	68 2f       	mov	r22, r24
     e74:	c7 01       	movw	r24, r14
     e76:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <TWI_MasterWriteRead>
     e7a:	8f e0       	ldi	r24, 0x0F	; 15
     e7c:	97 e2       	ldi	r25, 0x27	; 39
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	f1 f7       	brne	.-4      	; 0xe7e <INA_Read_Long+0x30>
     e82:	00 c0       	rjmp	.+0      	; 0xe84 <INA_Read_Long+0x36>
     e84:	00 00       	nop
     e86:	c7 01       	movw	r24, r14
     e88:	0b 96       	adiw	r24, 0x0b	; 11
     e8a:	28 96       	adiw	r28, 0x08	; 8
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	de bf       	out	0x3e, r29	; 62
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	0f 91       	pop	r16
     e96:	ff 90       	pop	r15
     e98:	ef 90       	pop	r14
     e9a:	08 95       	ret

00000e9c <get_voltage>:

uint16_t get_voltage(TWI_Master_t *twi, bool averaged, uint8_t ina226_addr)
{
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
	register8_t* read_val;
	if(averaged)
     ea0:	66 23       	and	r22, r22
     ea2:	29 f0       	breq	.+10     	; 0xeae <get_voltage+0x12>
	{
		read_val = INA_Read_Long(twi, 0x02, ina226_addr);
     ea4:	62 e0       	ldi	r22, 0x02	; 2
     ea6:	0e 94 27 07 	call	0xe4e	; 0xe4e <INA_Read_Long>
     eaa:	ec 01       	movw	r28, r24
     eac:	04 c0       	rjmp	.+8      	; 0xeb6 <get_voltage+0x1a>
	}
	else
	{
		read_val = INA_Read_Short(twi, 0x02, ina226_addr);
     eae:	62 e0       	ldi	r22, 0x02	; 2
     eb0:	0e 94 00 07 	call	0xe00	; 0xe00 <INA_Read_Short>
     eb4:	ec 01       	movw	r28, r24
     eb6:	8f e0       	ldi	r24, 0x0F	; 15
     eb8:	97 e2       	ldi	r25, 0x27	; 39
     eba:	01 97       	sbiw	r24, 0x01	; 1
     ebc:	f1 f7       	brne	.-4      	; 0xeba <get_voltage+0x1e>
     ebe:	00 c0       	rjmp	.+0      	; 0xec0 <get_voltage+0x24>
     ec0:	00 00       	nop
	}
	_delay_ms(20);
	int voltage_bits = ((read_val[0] << 8) + (read_val[1]));
     ec2:	68 81       	ld	r22, Y
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
	float voltage = voltage_bits * 0.00125 * 2.00; //; // 1.25 mV/bit
	int voltage_int = voltage * 100;
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	76 2f       	mov	r23, r22
     eca:	66 27       	eor	r22, r22
     ecc:	68 0f       	add	r22, r24
     ece:	71 1d       	adc	r23, r1
     ed0:	07 2e       	mov	r0, r23
     ed2:	00 0c       	add	r0, r0
     ed4:	88 0b       	sbc	r24, r24
     ed6:	99 0b       	sbc	r25, r25
     ed8:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__floatsisf>
     edc:	2a e0       	ldi	r18, 0x0A	; 10
     ede:	37 ed       	ldi	r19, 0xD7	; 215
     ee0:	43 ea       	ldi	r20, 0xA3	; 163
     ee2:	5a e3       	ldi	r21, 0x3A	; 58
     ee4:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__mulsf3>
     ee8:	9b 01       	movw	r18, r22
     eea:	ac 01       	movw	r20, r24
     eec:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__addsf3>
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	48 ec       	ldi	r20, 0xC8	; 200
     ef6:	52 e4       	ldi	r21, 0x42	; 66
     ef8:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__mulsf3>
     efc:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__fixsfsi>
     f00:	cb 01       	movw	r24, r22
	
	if(voltage_int > 8000 || voltage_int < 0)//if negative or thinks greater than 80V
     f02:	61 34       	cpi	r22, 0x41	; 65
     f04:	7f 41       	sbci	r23, 0x1F	; 31
     f06:	10 f0       	brcs	.+4      	; 0xf0c <get_voltage+0x70>
	{ 
		voltage_int = 0;
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	if (read_val == 0xFFFFFFFF)
     f0c:	21 96       	adiw	r28, 0x01	; 1
     f0e:	11 f4       	brne	.+4      	; 0xf14 <get_voltage+0x78>
	{
		voltage_int = -1;
     f10:	8f ef       	ldi	r24, 0xFF	; 255
     f12:	9f ef       	ldi	r25, 0xFF	; 255
	}
		
	return voltage_int;
}
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	08 95       	ret

00000f1a <get_current>:

uint16_t get_current(TWI_Master_t *twi, bool averaged, uint8_t ina226_addr)
{
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	00 d0       	rcall	.+0      	; 0xf24 <get_current+0xa>
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
	register8_t* read_val;
	if(averaged)
     f28:	66 23       	and	r22, r22
     f2a:	29 f0       	breq	.+10     	; 0xf36 <get_current+0x1c>
	{
		read_val = INA_Read_Long(twi, 0x01, ina226_addr);
     f2c:	61 e0       	ldi	r22, 0x01	; 1
     f2e:	0e 94 27 07 	call	0xe4e	; 0xe4e <INA_Read_Long>
     f32:	8c 01       	movw	r16, r24
     f34:	04 c0       	rjmp	.+8      	; 0xf3e <get_current+0x24>
	}
	else
	{
		read_val = INA_Read_Short(twi, 0x01, ina226_addr);
     f36:	61 e0       	ldi	r22, 0x01	; 1
     f38:	0e 94 00 07 	call	0xe00	; 0xe00 <INA_Read_Short>
     f3c:	8c 01       	movw	r16, r24
     f3e:	8f e0       	ldi	r24, 0x0F	; 15
     f40:	97 e2       	ldi	r25, 0x27	; 39
     f42:	01 97       	sbiw	r24, 0x01	; 1
     f44:	f1 f7       	brne	.-4      	; 0xf42 <get_current+0x28>
     f46:	00 c0       	rjmp	.+0      	; 0xf48 <get_current+0x2e>
     f48:	00 00       	nop
	}
	_delay_ms(20);
	int shunt_voltage_bits = ((read_val[0] << 8) + (read_val[1]));
     f4a:	f8 01       	movw	r30, r16
     f4c:	60 81       	ld	r22, Z
     f4e:	81 81       	ldd	r24, Z+1	; 0x01
	float current = shunt_voltage_bits * 0.0000025 / 0.002; // * 2.5 uV / 2 milli Ohm
	int volatile current_int = current * 100;
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	76 2f       	mov	r23, r22
     f54:	66 27       	eor	r22, r22
     f56:	68 0f       	add	r22, r24
     f58:	71 1d       	adc	r23, r1
     f5a:	07 2e       	mov	r0, r23
     f5c:	00 0c       	add	r0, r0
     f5e:	88 0b       	sbc	r24, r24
     f60:	99 0b       	sbc	r25, r25
     f62:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__floatsisf>
     f66:	2c ea       	ldi	r18, 0xAC	; 172
     f68:	35 ec       	ldi	r19, 0xC5	; 197
     f6a:	47 e2       	ldi	r20, 0x27	; 39
     f6c:	56 e3       	ldi	r21, 0x36	; 54
     f6e:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__mulsf3>
     f72:	2f e6       	ldi	r18, 0x6F	; 111
     f74:	32 e1       	ldi	r19, 0x12	; 18
     f76:	43 e0       	ldi	r20, 0x03	; 3
     f78:	5b e3       	ldi	r21, 0x3B	; 59
     f7a:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__divsf3>
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	48 ec       	ldi	r20, 0xC8	; 200
     f84:	52 e4       	ldi	r21, 0x42	; 66
     f86:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__mulsf3>
     f8a:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__fixsfsi>
     f8e:	69 83       	std	Y+1, r22	; 0x01
     f90:	7a 83       	std	Y+2, r23	; 0x02
	
	if(current_int > 8000 || current_int < 0)//if negative or thinks greater than 80A
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	9a 81       	ldd	r25, Y+2	; 0x02
     f96:	81 34       	cpi	r24, 0x41	; 65
     f98:	9f 41       	sbci	r25, 0x1F	; 31
     f9a:	24 f4       	brge	.+8      	; 0xfa4 <get_current+0x8a>
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	9a 81       	ldd	r25, Y+2	; 0x02
     fa0:	99 23       	and	r25, r25
     fa2:	14 f4       	brge	.+4      	; 0xfa8 <get_current+0x8e>
	{ 
		current_int = 0;
     fa4:	19 82       	std	Y+1, r1	; 0x01
     fa6:	1a 82       	std	Y+2, r1	; 0x02
	}

	if (read_val == 0xFFFFFFFF)
     fa8:	0f 3f       	cpi	r16, 0xFF	; 255
     faa:	1f 4f       	sbci	r17, 0xFF	; 255
     fac:	21 f4       	brne	.+8      	; 0xfb6 <get_current+0x9c>
	{
		current_int = -1;
     fae:	8f ef       	ldi	r24, 0xFF	; 255
     fb0:	9f ef       	ldi	r25, 0xFF	; 255
     fb2:	89 83       	std	Y+1, r24	; 0x01
     fb4:	9a 83       	std	Y+2, r25	; 0x02
	}
	
	return current_int;
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	9a 81       	ldd	r25, Y+2	; 0x02
}
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
     fc6:	08 95       	ret

00000fc8 <clear_lcd_update>:
		lcd_command(FUNCTION_SET | 0b0000111100);
	}
}

void clear_lcd_update()
{
     fc8:	ac e5       	ldi	r26, 0x5C	; 92
     fca:	b8 e3       	ldi	r27, 0x38	; 56
     fcc:	e4 e8       	ldi	r30, 0x84	; 132
     fce:	f8 e3       	ldi	r31, 0x38	; 56
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 20; j++)
		{
			lcd_screen[i][j] = ' ';
     fd0:	80 e2       	ldi	r24, 0x20	; 32
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	8d 93       	st	X+, r24
     fd6:	9d 93       	st	X+, r25

void clear_lcd_update()
{
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 20; j++)
     fd8:	ae 17       	cp	r26, r30
     fda:	bf 07       	cpc	r27, r31
     fdc:	d9 f7       	brne	.-10     	; 0xfd4 <clear_lcd_update+0xc>
     fde:	2c ea       	ldi	r18, 0xAC	; 172
     fe0:	38 e3       	ldi	r19, 0x38	; 56
		{
			lcd_screen[i][j] = ' ';
     fe2:	80 e2       	ldi	r24, 0x20	; 32
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	81 93       	st	Z+, r24
     fe8:	91 93       	st	Z+, r25

void clear_lcd_update()
{
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 20; j++)
     fea:	e2 17       	cp	r30, r18
     fec:	f3 07       	cpc	r31, r19
     fee:	d9 f7       	brne	.-10     	; 0xfe6 <clear_lcd_update+0x1e>
     ff0:	a8 e0       	ldi	r26, 0x08	; 8
     ff2:	b8 e3       	ldi	r27, 0x38	; 56
     ff4:	e0 e3       	ldi	r30, 0x30	; 48
     ff6:	f8 e3       	ldi	r31, 0x38	; 56
	
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 20; j++)
		{
			lcd_screen_update[i][j] = ' ';
     ff8:	80 e2       	ldi	r24, 0x20	; 32
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	8d 93       	st	X+, r24
     ffe:	9d 93       	st	X+, r25
		}
	}
	
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 20; j++)
    1000:	ae 17       	cp	r26, r30
    1002:	bf 07       	cpc	r27, r31
    1004:	d9 f7       	brne	.-10     	; 0xffc <clear_lcd_update+0x34>
    1006:	28 e5       	ldi	r18, 0x58	; 88
    1008:	38 e3       	ldi	r19, 0x38	; 56
		{
			lcd_screen_update[i][j] = ' ';
    100a:	80 e2       	ldi	r24, 0x20	; 32
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	81 93       	st	Z+, r24
    1010:	91 93       	st	Z+, r25
		}
	}
	
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 20; j++)
    1012:	2e 17       	cp	r18, r30
    1014:	3f 07       	cpc	r19, r31
    1016:	d9 f7       	brne	.-10     	; 0x100e <clear_lcd_update+0x46>
		{
			lcd_screen_update[i][j] = ' ';
		}
	}
	
	lcd_row_counter = 0;
    1018:	10 92 d7 38 	sts	0x38D7, r1	; 0x8038d7 <lcd_row_counter>
	lcd_col_counter = 0;
    101c:	10 92 d0 38 	sts	0x38D0, r1	; 0x8038d0 <lcd_col_counter>
    1020:	08 95       	ret

00001022 <load_custom_characters>:
		two_line_mode = true;
	}
}

void load_custom_characters()
{
    1022:	0f 93       	push	r16
    1024:	1f 93       	push	r17
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	00 d0       	rcall	.+0      	; 0x102c <load_custom_characters+0xa>
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
	
	unsigned char message[2];
	message[0] = (0x00);							//Control bit with continuous data stream
    1030:	19 82       	std	Y+1, r1	; 0x01
	message[1] = (0x38);							//Function Set (8-bit data, 1 Line 5x8 character mode, Normal Instruction Table Chosen)
    1032:	88 e3       	ldi	r24, 0x38	; 56
    1034:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
    1036:	22 e0       	ldi	r18, 0x02	; 2
    1038:	ae 01       	movw	r20, r28
    103a:	4f 5f       	subi	r20, 0xFF	; 255
    103c:	5f 4f       	sbci	r21, 0xFF	; 255
    103e:	6c e3       	ldi	r22, 0x3C	; 60
    1040:	82 eb       	ldi	r24, 0xB2	; 178
    1042:	98 e3       	ldi	r25, 0x38	; 56
    1044:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <TWI_MasterWrite>
	while(twiMaster.status == 1);
    1048:	e2 eb       	ldi	r30, 0xB2	; 178
    104a:	f8 e3       	ldi	r31, 0x38	; 56
    104c:	87 89       	ldd	r24, Z+23	; 0x17
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	e9 f3       	breq	.-6      	; 0x104c <load_custom_characters+0x2a>
    1052:	87 e8       	ldi	r24, 0x87	; 135
    1054:	93 e1       	ldi	r25, 0x13	; 19
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	f1 f7       	brne	.-4      	; 0x1056 <load_custom_characters+0x34>
    105a:	00 c0       	rjmp	.+0      	; 0x105c <load_custom_characters+0x3a>
    105c:	00 00       	nop
	_delay_ms(10);
	while (twiMaster.result != TWIM_RESULT_OK)
    105e:	80 91 ca 38 	lds	r24, 0x38CA	; 0x8038ca <twiMaster+0x18>
    1062:	81 30       	cpi	r24, 0x01	; 1
    1064:	c9 f0       	breq	.+50     	; 0x1098 <load_custom_characters+0x76>
	{
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
    1066:	02 eb       	ldi	r16, 0xB2	; 178
    1068:	18 e3       	ldi	r17, 0x38	; 56
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
	while(twiMaster.status == 1);
	_delay_ms(10);
	while (twiMaster.result != TWIM_RESULT_OK)
	{
		initialize_Screen();
    106a:	0e 94 3b 09 	call	0x1276	; 0x1276 <initialize_Screen>
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
    106e:	22 e0       	ldi	r18, 0x02	; 2
    1070:	ae 01       	movw	r20, r28
    1072:	4f 5f       	subi	r20, 0xFF	; 255
    1074:	5f 4f       	sbci	r21, 0xFF	; 255
    1076:	6c e3       	ldi	r22, 0x3C	; 60
    1078:	c8 01       	movw	r24, r16
    107a:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <TWI_MasterWrite>
		while(twiMaster.status == 1);
    107e:	f8 01       	movw	r30, r16
    1080:	87 89       	ldd	r24, Z+23	; 0x17
    1082:	81 30       	cpi	r24, 0x01	; 1
    1084:	e1 f3       	breq	.-8      	; 0x107e <load_custom_characters+0x5c>
    1086:	87 e8       	ldi	r24, 0x87	; 135
    1088:	93 e1       	ldi	r25, 0x13	; 19
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	f1 f7       	brne	.-4      	; 0x108a <load_custom_characters+0x68>
    108e:	00 c0       	rjmp	.+0      	; 0x1090 <load_custom_characters+0x6e>
    1090:	00 00       	nop
	message[0] = (0x00);							//Control bit with continuous data stream
	message[1] = (0x38);							//Function Set (8-bit data, 1 Line 5x8 character mode, Normal Instruction Table Chosen)
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
	while(twiMaster.status == 1);
	_delay_ms(10);
	while (twiMaster.result != TWIM_RESULT_OK)
    1092:	80 8d       	ldd	r24, Z+24	; 0x18
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	49 f7       	brne	.-46     	; 0x106a <load_custom_characters+0x48>
		while(twiMaster.status == 1);
		_delay_ms(10);
	}
	
	// 1 bar
	lcd_command(SET_CGRAM_ADDRESS);
    1098:	80 e4       	ldi	r24, 0x40	; 64
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	91 e0       	ldi	r25, 0x01	; 1
    10ac:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000010000);
    10b0:	80 e1       	ldi	r24, 0x10	; 16
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000010000);
    10b8:	80 e1       	ldi	r24, 0x10	; 16
    10ba:	91 e0       	ldi	r25, 0x01	; 1
    10bc:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000010000);
    10c0:	80 e1       	ldi	r24, 0x10	; 16
    10c2:	91 e0       	ldi	r25, 0x01	; 1
    10c4:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000010000);
    10c8:	80 e1       	ldi	r24, 0x10	; 16
    10ca:	91 e0       	ldi	r25, 0x01	; 1
    10cc:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	91 e0       	ldi	r25, 0x01	; 1
    10d4:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	91 e0       	ldi	r25, 0x01	; 1
    10dc:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	//2 bar
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	91 e0       	ldi	r25, 0x01	; 1
    10e4:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	91 e0       	ldi	r25, 0x01	; 1
    10ec:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011000);
    10f0:	88 e1       	ldi	r24, 0x18	; 24
    10f2:	91 e0       	ldi	r25, 0x01	; 1
    10f4:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011000);
    10f8:	88 e1       	ldi	r24, 0x18	; 24
    10fa:	91 e0       	ldi	r25, 0x01	; 1
    10fc:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011000);
    1100:	88 e1       	ldi	r24, 0x18	; 24
    1102:	91 e0       	ldi	r25, 0x01	; 1
    1104:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011000);
    1108:	88 e1       	ldi	r24, 0x18	; 24
    110a:	91 e0       	ldi	r25, 0x01	; 1
    110c:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	91 e0       	ldi	r25, 0x01	; 1
    1114:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	91 e0       	ldi	r25, 0x01	; 1
    111c:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	//3 bar
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	91 e0       	ldi	r25, 0x01	; 1
    1124:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	91 e0       	ldi	r25, 0x01	; 1
    112c:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011100);
    1130:	8c e1       	ldi	r24, 0x1C	; 28
    1132:	91 e0       	ldi	r25, 0x01	; 1
    1134:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011100);
    1138:	8c e1       	ldi	r24, 0x1C	; 28
    113a:	91 e0       	ldi	r25, 0x01	; 1
    113c:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011100);
    1140:	8c e1       	ldi	r24, 0x1C	; 28
    1142:	91 e0       	ldi	r25, 0x01	; 1
    1144:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011100);
    1148:	8c e1       	ldi	r24, 0x1C	; 28
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	91 e0       	ldi	r25, 0x01	; 1
    1154:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	91 e0       	ldi	r25, 0x01	; 1
    115c:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	//4 bar
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	91 e0       	ldi	r25, 0x01	; 1
    1164:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	91 e0       	ldi	r25, 0x01	; 1
    116c:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011110);
    1170:	8e e1       	ldi	r24, 0x1E	; 30
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011110);
    1178:	8e e1       	ldi	r24, 0x1E	; 30
    117a:	91 e0       	ldi	r25, 0x01	; 1
    117c:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011110);
    1180:	8e e1       	ldi	r24, 0x1E	; 30
    1182:	91 e0       	ldi	r25, 0x01	; 1
    1184:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011110);
    1188:	8e e1       	ldi	r24, 0x1E	; 30
    118a:	91 e0       	ldi	r25, 0x01	; 1
    118c:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	91 e0       	ldi	r25, 0x01	; 1
    1194:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	91 e0       	ldi	r25, 0x01	; 1
    119c:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	//5 bar
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	91 e0       	ldi	r25, 0x01	; 1
    11a4:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	91 e0       	ldi	r25, 0x01	; 1
    11ac:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    11b0:	8f e1       	ldi	r24, 0x1F	; 31
    11b2:	91 e0       	ldi	r25, 0x01	; 1
    11b4:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    11b8:	8f e1       	ldi	r24, 0x1F	; 31
    11ba:	91 e0       	ldi	r25, 0x01	; 1
    11bc:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    11c0:	8f e1       	ldi	r24, 0x1F	; 31
    11c2:	91 e0       	ldi	r25, 0x01	; 1
    11c4:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    11c8:	8f e1       	ldi	r24, 0x1F	; 31
    11ca:	91 e0       	ldi	r25, 0x01	; 1
    11cc:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	91 e0       	ldi	r25, 0x01	; 1
    11d4:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	91 e0       	ldi	r25, 0x01	; 1
    11dc:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	//10th bar
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	91 e0       	ldi	r25, 0x01	; 1
    11e4:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000001);
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	91 e0       	ldi	r25, 0x01	; 1
    11ec:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    11f0:	8f e1       	ldi	r24, 0x1F	; 31
    11f2:	91 e0       	ldi	r25, 0x01	; 1
    11f4:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    11f8:	8f e1       	ldi	r24, 0x1F	; 31
    11fa:	91 e0       	ldi	r25, 0x01	; 1
    11fc:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    1200:	8f e1       	ldi	r24, 0x1F	; 31
    1202:	91 e0       	ldi	r25, 0x01	; 1
    1204:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    1208:	8f e1       	ldi	r24, 0x1F	; 31
    120a:	91 e0       	ldi	r25, 0x01	; 1
    120c:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000001);
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	91 e0       	ldi	r25, 0x01	; 1
    1214:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	91 e0       	ldi	r25, 0x01	; 1
    121c:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	//lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
	//lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
	//lcd_command(WRITE_DATA_TO_RAM | 0b0000000001);
	//lcd_command(WRITE_DATA_TO_RAM | 0b0000000001);
	//max current bar
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    1220:	8f e1       	ldi	r24, 0x1F	; 31
    1222:	91 e0       	ldi	r25, 0x01	; 1
    1224:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    1228:	8f e1       	ldi	r24, 0x1F	; 31
    122a:	91 e0       	ldi	r25, 0x01	; 1
    122c:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    1230:	8f e1       	ldi	r24, 0x1F	; 31
    1232:	91 e0       	ldi	r25, 0x01	; 1
    1234:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    1238:	8f e1       	ldi	r24, 0x1F	; 31
    123a:	91 e0       	ldi	r25, 0x01	; 1
    123c:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    1240:	8f e1       	ldi	r24, 0x1F	; 31
    1242:	91 e0       	ldi	r25, 0x01	; 1
    1244:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    1248:	8f e1       	ldi	r24, 0x1F	; 31
    124a:	91 e0       	ldi	r25, 0x01	; 1
    124c:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    1250:	8f e1       	ldi	r24, 0x1F	; 31
    1252:	91 e0       	ldi	r25, 0x01	; 1
    1254:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    1258:	8f e1       	ldi	r24, 0x1F	; 31
    125a:	91 e0       	ldi	r25, 0x01	; 1
    125c:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	lcd_command(SET_DDRAM_ADDRESS);
    1260:	80 e8       	ldi	r24, 0x80	; 128
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	1f 91       	pop	r17
    1272:	0f 91       	pop	r16
    1274:	08 95       	ret

00001276 <initialize_Screen>:
#include "lcd_screen.h"

volatile bool two_line_mode = true;

void initialize_Screen()
{
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	2a 97       	sbiw	r28, 0x0a	; 10
    1280:	cd bf       	out	0x3d, r28	; 61
    1282:	de bf       	out	0x3e, r29	; 62
    1284:	87 ea       	ldi	r24, 0xA7	; 167
    1286:	91 e6       	ldi	r25, 0x61	; 97
    1288:	01 97       	sbiw	r24, 0x01	; 1
    128a:	f1 f7       	brne	.-4      	; 0x1288 <initialize_Screen+0x12>
    128c:	00 c0       	rjmp	.+0      	; 0x128e <initialize_Screen+0x18>
    128e:	00 00       	nop
	_delay_ms(50);
	unsigned char message[10];
	
	message[0] = (0x00);							//Control bit with continuous data stream
    1290:	19 82       	std	Y+1, r1	; 0x01
	message[1] = (0x38);							//Function Set (8-bit data, 1 Line 5x8 character mode, Normal Instruction Table Chosen)
    1292:	88 e3       	ldi	r24, 0x38	; 56
    1294:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
    1296:	22 e0       	ldi	r18, 0x02	; 2
    1298:	ae 01       	movw	r20, r28
    129a:	4f 5f       	subi	r20, 0xFF	; 255
    129c:	5f 4f       	sbci	r21, 0xFF	; 255
    129e:	6c e3       	ldi	r22, 0x3C	; 60
    12a0:	82 eb       	ldi	r24, 0xB2	; 178
    12a2:	98 e3       	ldi	r25, 0x38	; 56
    12a4:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <TWI_MasterWrite>
	while(twiMaster.status == 1);
    12a8:	e2 eb       	ldi	r30, 0xB2	; 178
    12aa:	f8 e3       	ldi	r31, 0x38	; 56
    12ac:	87 89       	ldd	r24, Z+23	; 0x17
    12ae:	81 30       	cpi	r24, 0x01	; 1
    12b0:	e9 f3       	breq	.-6      	; 0x12ac <initialize_Screen+0x36>
    12b2:	87 e8       	ldi	r24, 0x87	; 135
    12b4:	93 e1       	ldi	r25, 0x13	; 19
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	f1 f7       	brne	.-4      	; 0x12b6 <initialize_Screen+0x40>
    12ba:	00 c0       	rjmp	.+0      	; 0x12bc <initialize_Screen+0x46>
    12bc:	00 00       	nop
	_delay_ms(10);
	while (twiMaster.result != TWIM_RESULT_OK)
    12be:	80 91 ca 38 	lds	r24, 0x38CA	; 0x8038ca <twiMaster+0x18>
    12c2:	81 30       	cpi	r24, 0x01	; 1
    12c4:	19 f0       	breq	.+6      	; 0x12cc <initialize_Screen+0x56>
	{
		initialize_Screen();
    12c6:	0e 94 3b 09 	call	0x1276	; 0x1276 <initialize_Screen>
		return;
    12ca:	91 c0       	rjmp	.+290    	; 0x13ee <initialize_Screen+0x178>
	}
	
	message[0] = (0x00);
    12cc:	19 82       	std	Y+1, r1	; 0x01
	message[1] = (0x39);							//Function Set (8-bit data, 1 Line 5x8 character mode, Extension Instruction Table Chosen)
    12ce:	89 e3       	ldi	r24, 0x39	; 57
    12d0:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
    12d2:	22 e0       	ldi	r18, 0x02	; 2
    12d4:	ae 01       	movw	r20, r28
    12d6:	4f 5f       	subi	r20, 0xFF	; 255
    12d8:	5f 4f       	sbci	r21, 0xFF	; 255
    12da:	6c e3       	ldi	r22, 0x3C	; 60
    12dc:	82 eb       	ldi	r24, 0xB2	; 178
    12de:	98 e3       	ldi	r25, 0x38	; 56
    12e0:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <TWI_MasterWrite>
	while(twiMaster.status == 1);
    12e4:	e2 eb       	ldi	r30, 0xB2	; 178
    12e6:	f8 e3       	ldi	r31, 0x38	; 56
    12e8:	87 89       	ldd	r24, Z+23	; 0x17
    12ea:	81 30       	cpi	r24, 0x01	; 1
    12ec:	e9 f3       	breq	.-6      	; 0x12e8 <initialize_Screen+0x72>
    12ee:	87 e8       	ldi	r24, 0x87	; 135
    12f0:	93 e1       	ldi	r25, 0x13	; 19
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	f1 f7       	brne	.-4      	; 0x12f2 <initialize_Screen+0x7c>
    12f6:	00 c0       	rjmp	.+0      	; 0x12f8 <initialize_Screen+0x82>
    12f8:	00 00       	nop
	_delay_ms(10);
	while (twiMaster.result != TWIM_RESULT_OK)
    12fa:	80 91 ca 38 	lds	r24, 0x38CA	; 0x8038ca <twiMaster+0x18>
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	19 f0       	breq	.+6      	; 0x1308 <initialize_Screen+0x92>
	{
		initialize_Screen();
    1302:	0e 94 3b 09 	call	0x1276	; 0x1276 <initialize_Screen>
		return;
    1306:	73 c0       	rjmp	.+230    	; 0x13ee <initialize_Screen+0x178>
	}
	
	message[0] = (0x00);
    1308:	19 82       	std	Y+1, r1	; 0x01
	message[1] = (0x14);							//Set frame frequency to 192 Hz and Voltage Bias to 1/5
    130a:	84 e1       	ldi	r24, 0x14	; 20
    130c:	8a 83       	std	Y+2, r24	; 0x02
	message[2] = (0x78);							//Set contrast bits C3:0 to 8 (C5:0 - 0x28 *C5:4 is part of next data byte)
    130e:	88 e7       	ldi	r24, 0x78	; 120
    1310:	8b 83       	std	Y+3, r24	; 0x03
	message[3] = (0x5E);							//Turn on Icon Display and Booster Circuit and set C5:4 to 2 for contrast setting
    1312:	8e e5       	ldi	r24, 0x5E	; 94
    1314:	8c 83       	std	Y+4, r24	; 0x04
	message[4] = (0x6D);							//Turn on internal follower circuit and adjust V0 generator amplified ratio (Rab2:0 - 2)
    1316:	8d e6       	ldi	r24, 0x6D	; 109
    1318:	8d 83       	std	Y+5, r24	; 0x05
	message[5] = (0x0C);
    131a:	8c e0       	ldi	r24, 0x0C	; 12
    131c:	8e 83       	std	Y+6, r24	; 0x06
	message[6] = (0x01);
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	8f 83       	std	Y+7, r24	; 0x07
	message[7] = (0x06);
    1322:	86 e0       	ldi	r24, 0x06	; 6
    1324:	88 87       	std	Y+8, r24	; 0x08
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 8);
    1326:	28 e0       	ldi	r18, 0x08	; 8
    1328:	ae 01       	movw	r20, r28
    132a:	4f 5f       	subi	r20, 0xFF	; 255
    132c:	5f 4f       	sbci	r21, 0xFF	; 255
    132e:	6c e3       	ldi	r22, 0x3C	; 60
    1330:	82 eb       	ldi	r24, 0xB2	; 178
    1332:	98 e3       	ldi	r25, 0x38	; 56
    1334:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <TWI_MasterWrite>
	while(twiMaster.status == 1);
    1338:	e2 eb       	ldi	r30, 0xB2	; 178
    133a:	f8 e3       	ldi	r31, 0x38	; 56
    133c:	87 89       	ldd	r24, Z+23	; 0x17
    133e:	81 30       	cpi	r24, 0x01	; 1
    1340:	e9 f3       	breq	.-6      	; 0x133c <initialize_Screen+0xc6>
    1342:	8f e4       	ldi	r24, 0x4F	; 79
    1344:	93 ec       	ldi	r25, 0xC3	; 195
    1346:	01 97       	sbiw	r24, 0x01	; 1
    1348:	f1 f7       	brne	.-4      	; 0x1346 <initialize_Screen+0xd0>
    134a:	00 c0       	rjmp	.+0      	; 0x134c <initialize_Screen+0xd6>
    134c:	00 00       	nop
	_delay_ms(100);
	while (twiMaster.result != TWIM_RESULT_OK)
    134e:	80 91 ca 38 	lds	r24, 0x38CA	; 0x8038ca <twiMaster+0x18>
    1352:	81 30       	cpi	r24, 0x01	; 1
    1354:	19 f0       	breq	.+6      	; 0x135c <initialize_Screen+0xe6>
	{
		initialize_Screen();
    1356:	0e 94 3b 09 	call	0x1276	; 0x1276 <initialize_Screen>
		return;
    135a:	49 c0       	rjmp	.+146    	; 0x13ee <initialize_Screen+0x178>
    135c:	87 ea       	ldi	r24, 0xA7	; 167
    135e:	91 e6       	ldi	r25, 0x61	; 97
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	f1 f7       	brne	.-4      	; 0x1360 <initialize_Screen+0xea>
    1364:	00 c0       	rjmp	.+0      	; 0x1366 <initialize_Screen+0xf0>
    1366:	00 00       	nop
	}
	
	_delay_ms(50);
	load_custom_characters();
    1368:	0e 94 11 08 	call	0x1022	; 0x1022 <load_custom_characters>
    136c:	ac e5       	ldi	r26, 0x5C	; 92
    136e:	b8 e3       	ldi	r27, 0x38	; 56
    1370:	e4 e8       	ldi	r30, 0x84	; 132
    1372:	f8 e3       	ldi	r31, 0x38	; 56
	
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 20; j++)
		{
			lcd_screen[i][j] = ' ';
    1374:	80 e2       	ldi	r24, 0x20	; 32
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	8d 93       	st	X+, r24
    137a:	9d 93       	st	X+, r25
	_delay_ms(50);
	load_custom_characters();
	
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 20; j++)
    137c:	ae 17       	cp	r26, r30
    137e:	bf 07       	cpc	r27, r31
    1380:	d9 f7       	brne	.-10     	; 0x1378 <initialize_Screen+0x102>
    1382:	2c ea       	ldi	r18, 0xAC	; 172
    1384:	38 e3       	ldi	r19, 0x38	; 56
		{
			lcd_screen[i][j] = ' ';
    1386:	80 e2       	ldi	r24, 0x20	; 32
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	81 93       	st	Z+, r24
    138c:	91 93       	st	Z+, r25
	_delay_ms(50);
	load_custom_characters();
	
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 20; j++)
    138e:	e2 17       	cp	r30, r18
    1390:	f3 07       	cpc	r31, r19
    1392:	d9 f7       	brne	.-10     	; 0x138a <initialize_Screen+0x114>
    1394:	a8 e0       	ldi	r26, 0x08	; 8
    1396:	b8 e3       	ldi	r27, 0x38	; 56
    1398:	e0 e3       	ldi	r30, 0x30	; 48
    139a:	f8 e3       	ldi	r31, 0x38	; 56
	
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 20; j++)
		{
			lcd_screen_update[i][j] = ' ';
    139c:	80 e2       	ldi	r24, 0x20	; 32
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	8d 93       	st	X+, r24
    13a2:	9d 93       	st	X+, r25
		}
	}
	
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 20; j++)
    13a4:	ae 17       	cp	r26, r30
    13a6:	bf 07       	cpc	r27, r31
    13a8:	d9 f7       	brne	.-10     	; 0x13a0 <initialize_Screen+0x12a>
    13aa:	28 e5       	ldi	r18, 0x58	; 88
    13ac:	38 e3       	ldi	r19, 0x38	; 56
		{
			lcd_screen_update[i][j] = ' ';
    13ae:	80 e2       	ldi	r24, 0x20	; 32
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	81 93       	st	Z+, r24
    13b4:	91 93       	st	Z+, r25
		}
	}
	
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 20; j++)
    13b6:	2e 17       	cp	r18, r30
    13b8:	3f 07       	cpc	r19, r31
    13ba:	d9 f7       	brne	.-10     	; 0x13b2 <initialize_Screen+0x13c>
		{
			lcd_screen_update[i][j] = ' ';
		}
	}
	
	lcd_row_counter = 0;
    13bc:	10 92 d7 38 	sts	0x38D7, r1	; 0x8038d7 <lcd_row_counter>
	lcd_col_counter = 0;
    13c0:	10 92 d0 38 	sts	0x38D0, r1	; 0x8038d0 <lcd_col_counter>
	
	if (two_line_mode)
    13c4:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <two_line_mode>
    13c8:	88 23       	and	r24, r24
    13ca:	49 f0       	breq	.+18     	; 0x13de <initialize_Screen+0x168>
	{
		lcd_command(CLEAR_DISPLAY);
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
		lcd_command(FUNCTION_SET | 0b0000111000);
    13d4:	88 e3       	ldi	r24, 0x38	; 56
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
    13dc:	08 c0       	rjmp	.+16     	; 0x13ee <initialize_Screen+0x178>
	}
	else
	{
		lcd_command(CLEAR_DISPLAY);
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
		lcd_command(FUNCTION_SET | 0b0000111100);
    13e6:	8c e3       	ldi	r24, 0x3C	; 60
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
	}
}
    13ee:	2a 96       	adiw	r28, 0x0a	; 10
    13f0:	cd bf       	out	0x3d, r28	; 61
    13f2:	de bf       	out	0x3e, r29	; 62
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	08 95       	ret

000013fa <lcd_write>:
		lcd_command(SET_DDRAM_ADDRESS | (0b0001000000 + x));
	}
}

void lcd_write(char *message)
{
    13fa:	cf 92       	push	r12
    13fc:	df 92       	push	r13
    13fe:	ef 92       	push	r14
    1400:	ff 92       	push	r15
    1402:	0f 93       	push	r16
    1404:	1f 93       	push	r17
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	8c 01       	movw	r16, r24
	while (twiMaster.result != TWIM_RESULT_OK)
	{
		initialize_Screen();
		lcd_write(message);
	}
}
    1410:	ed b6       	in	r14, 0x3d	; 61
    1412:	fe b6       	in	r15, 0x3e	; 62
	}
}

void lcd_write(char *message)
{
	char size = strlen(message);
    1414:	fc 01       	movw	r30, r24
    1416:	01 90       	ld	r0, Z+
    1418:	00 20       	and	r0, r0
    141a:	e9 f7       	brne	.-6      	; 0x1416 <lcd_write+0x1c>
    141c:	31 97       	sbiw	r30, 0x01	; 1
    141e:	bf 01       	movw	r22, r30
    1420:	68 1b       	sub	r22, r24
    1422:	79 0b       	sbc	r23, r25
    1424:	36 2f       	mov	r19, r22
	unsigned char complete_message[size + 1];
    1426:	cb 01       	movw	r24, r22
    1428:	99 27       	eor	r25, r25
    142a:	01 96       	adiw	r24, 0x01	; 1
    142c:	4d b7       	in	r20, 0x3d	; 61
    142e:	5e b7       	in	r21, 0x3e	; 62
    1430:	48 1b       	sub	r20, r24
    1432:	59 0b       	sbc	r21, r25
    1434:	4d bf       	out	0x3d, r20	; 61
    1436:	5e bf       	out	0x3e, r21	; 62
    1438:	4f 5f       	subi	r20, 0xFF	; 255
    143a:	5f 4f       	sbci	r21, 0xFF	; 255
	
	complete_message[0] = (0x40);			//Control bit with R/S set high and continuous bytes
    143c:	80 e4       	ldi	r24, 0x40	; 64
    143e:	ed b7       	in	r30, 0x3d	; 61
    1440:	fe b7       	in	r31, 0x3e	; 62
    1442:	81 83       	std	Z+1, r24	; 0x01
	
	for(unsigned char i = 0; i < size; i++)
    1444:	66 23       	and	r22, r22
    1446:	41 f0       	breq	.+16     	; 0x1458 <lcd_write+0x5e>
    1448:	d8 01       	movw	r26, r16
    144a:	32 96       	adiw	r30, 0x02	; 2
    144c:	80 e0       	ldi	r24, 0x00	; 0
	{
		complete_message[i + 1] = message[i];
    144e:	9d 91       	ld	r25, X+
    1450:	91 93       	st	Z+, r25
	char size = strlen(message);
	unsigned char complete_message[size + 1];
	
	complete_message[0] = (0x40);			//Control bit with R/S set high and continuous bytes
	
	for(unsigned char i = 0; i < size; i++)
    1452:	8f 5f       	subi	r24, 0xFF	; 255
    1454:	38 13       	cpse	r19, r24
    1456:	fb cf       	rjmp	.-10     	; 0x144e <lcd_write+0x54>
	{
		complete_message[i + 1] = message[i];
	}

	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, size + 1);
    1458:	21 e0       	ldi	r18, 0x01	; 1
    145a:	26 0f       	add	r18, r22
    145c:	6c e3       	ldi	r22, 0x3C	; 60
    145e:	82 eb       	ldi	r24, 0xB2	; 178
    1460:	98 e3       	ldi	r25, 0x38	; 56
    1462:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <TWI_MasterWrite>
	while(twiMaster.status == 1);
    1466:	e2 eb       	ldi	r30, 0xB2	; 178
    1468:	f8 e3       	ldi	r31, 0x38	; 56
    146a:	87 89       	ldd	r24, Z+23	; 0x17
    146c:	81 30       	cpi	r24, 0x01	; 1
    146e:	e9 f3       	breq	.-6      	; 0x146a <lcd_write+0x70>
    1470:	87 e8       	ldi	r24, 0x87	; 135
    1472:	93 e1       	ldi	r25, 0x13	; 19
    1474:	01 97       	sbiw	r24, 0x01	; 1
    1476:	f1 f7       	brne	.-4      	; 0x1474 <lcd_write+0x7a>
    1478:	00 c0       	rjmp	.+0      	; 0x147a <lcd_write+0x80>
    147a:	00 00       	nop
	_delay_ms(10);
	
	while (twiMaster.result != TWIM_RESULT_OK)
    147c:	80 91 ca 38 	lds	r24, 0x38CA	; 0x8038ca <twiMaster+0x18>
    1480:	81 30       	cpi	r24, 0x01	; 1
    1482:	79 f0       	breq	.+30     	; 0x14a2 <lcd_write+0xa8>
    1484:	0f 2e       	mov	r0, r31
    1486:	f2 eb       	ldi	r31, 0xB2	; 178
    1488:	cf 2e       	mov	r12, r31
    148a:	f8 e3       	ldi	r31, 0x38	; 56
    148c:	df 2e       	mov	r13, r31
    148e:	f0 2d       	mov	r31, r0
	{
		initialize_Screen();
    1490:	0e 94 3b 09 	call	0x1276	; 0x1276 <initialize_Screen>
		lcd_write(message);
    1494:	c8 01       	movw	r24, r16
    1496:	0e 94 fd 09 	call	0x13fa	; 0x13fa <lcd_write>

	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, size + 1);
	while(twiMaster.status == 1);
	_delay_ms(10);
	
	while (twiMaster.result != TWIM_RESULT_OK)
    149a:	f6 01       	movw	r30, r12
    149c:	80 8d       	ldd	r24, Z+24	; 0x18
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	b9 f7       	brne	.-18     	; 0x1490 <lcd_write+0x96>
	{
		initialize_Screen();
		lcd_write(message);
	}
}
    14a2:	ed be       	out	0x3d, r14	; 61
    14a4:	fe be       	out	0x3e, r15	; 62
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	1f 91       	pop	r17
    14ac:	0f 91       	pop	r16
    14ae:	ff 90       	pop	r15
    14b0:	ef 90       	pop	r14
    14b2:	df 90       	pop	r13
    14b4:	cf 90       	pop	r12
    14b6:	08 95       	ret

000014b8 <display_character>:


void display_character(uint8_t car_num)
{
    14b8:	0f 93       	push	r16
    14ba:	1f 93       	push	r17
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <display_character+0xa>
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
	unsigned char complete_message[2];
	complete_message[0] = (0x40);			//Control bit with R/S set high and continuous bytes
    14c6:	90 e4       	ldi	r25, 0x40	; 64
    14c8:	99 83       	std	Y+1, r25	; 0x01
	complete_message[1] = (car_num);
    14ca:	8a 83       	std	Y+2, r24	; 0x02
	
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
    14cc:	22 e0       	ldi	r18, 0x02	; 2
    14ce:	ae 01       	movw	r20, r28
    14d0:	4f 5f       	subi	r20, 0xFF	; 255
    14d2:	5f 4f       	sbci	r21, 0xFF	; 255
    14d4:	6c e3       	ldi	r22, 0x3C	; 60
    14d6:	82 eb       	ldi	r24, 0xB2	; 178
    14d8:	98 e3       	ldi	r25, 0x38	; 56
    14da:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <TWI_MasterWrite>
	while(twiMaster.status == 1);
    14de:	e2 eb       	ldi	r30, 0xB2	; 178
    14e0:	f8 e3       	ldi	r31, 0x38	; 56
    14e2:	87 89       	ldd	r24, Z+23	; 0x17
    14e4:	81 30       	cpi	r24, 0x01	; 1
    14e6:	e9 f3       	breq	.-6      	; 0x14e2 <display_character+0x2a>
    14e8:	87 e8       	ldi	r24, 0x87	; 135
    14ea:	93 e1       	ldi	r25, 0x13	; 19
    14ec:	01 97       	sbiw	r24, 0x01	; 1
    14ee:	f1 f7       	brne	.-4      	; 0x14ec <display_character+0x34>
    14f0:	00 c0       	rjmp	.+0      	; 0x14f2 <display_character+0x3a>
    14f2:	00 00       	nop
	_delay_ms(10);
	
	while (twiMaster.result != TWIM_RESULT_OK)
    14f4:	80 91 ca 38 	lds	r24, 0x38CA	; 0x8038ca <twiMaster+0x18>
    14f8:	81 30       	cpi	r24, 0x01	; 1
    14fa:	c9 f0       	breq	.+50     	; 0x152e <display_character+0x76>
	{
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
    14fc:	02 eb       	ldi	r16, 0xB2	; 178
    14fe:	18 e3       	ldi	r17, 0x38	; 56
	while(twiMaster.status == 1);
	_delay_ms(10);
	
	while (twiMaster.result != TWIM_RESULT_OK)
	{
		initialize_Screen();
    1500:	0e 94 3b 09 	call	0x1276	; 0x1276 <initialize_Screen>
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
    1504:	22 e0       	ldi	r18, 0x02	; 2
    1506:	ae 01       	movw	r20, r28
    1508:	4f 5f       	subi	r20, 0xFF	; 255
    150a:	5f 4f       	sbci	r21, 0xFF	; 255
    150c:	6c e3       	ldi	r22, 0x3C	; 60
    150e:	c8 01       	movw	r24, r16
    1510:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <TWI_MasterWrite>
		while(twiMaster.status == 1);
    1514:	f8 01       	movw	r30, r16
    1516:	87 89       	ldd	r24, Z+23	; 0x17
    1518:	81 30       	cpi	r24, 0x01	; 1
    151a:	e1 f3       	breq	.-8      	; 0x1514 <display_character+0x5c>
    151c:	87 e8       	ldi	r24, 0x87	; 135
    151e:	93 e1       	ldi	r25, 0x13	; 19
    1520:	01 97       	sbiw	r24, 0x01	; 1
    1522:	f1 f7       	brne	.-4      	; 0x1520 <display_character+0x68>
    1524:	00 c0       	rjmp	.+0      	; 0x1526 <display_character+0x6e>
    1526:	00 00       	nop
	
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
	while(twiMaster.status == 1);
	_delay_ms(10);
	
	while (twiMaster.result != TWIM_RESULT_OK)
    1528:	80 8d       	ldd	r24, Z+24	; 0x18
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	49 f7       	brne	.-46     	; 0x1500 <display_character+0x48>
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
		while(twiMaster.status == 1);
		_delay_ms(10);
	}
}
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	1f 91       	pop	r17
    1538:	0f 91       	pop	r16
    153a:	08 95       	ret

0000153c <lcd_command>:

received
commands. Only the addressed slave makes the acknowledgement after each byte.
*/
void lcd_command(uint16_t command)
{
    153c:	ef 92       	push	r14
    153e:	ff 92       	push	r15
    1540:	0f 93       	push	r16
    1542:	1f 93       	push	r17
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	00 d0       	rcall	.+0      	; 0x154a <lcd_command+0xe>
    154a:	1f 92       	push	r1
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	7c 01       	movw	r14, r24
	unsigned char complete_message[2];
	uint8_t volatile comm;
	comm = (uint8_t)(command >> 2);
    1552:	96 95       	lsr	r25
    1554:	87 95       	ror	r24
    1556:	96 95       	lsr	r25
    1558:	87 95       	ror	r24
    155a:	8b 83       	std	Y+3, r24	; 0x03
	complete_message[0] = comm & 0b11000000;                      // Control byte
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	80 7c       	andi	r24, 0xC0	; 192
    1560:	89 83       	std	Y+1, r24	; 0x01
	complete_message[1] = (uint8_t)(command);                     // Data byte
    1562:	ea 82       	std	Y+2, r14	; 0x02
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
    1564:	22 e0       	ldi	r18, 0x02	; 2
    1566:	ae 01       	movw	r20, r28
    1568:	4f 5f       	subi	r20, 0xFF	; 255
    156a:	5f 4f       	sbci	r21, 0xFF	; 255
    156c:	6c e3       	ldi	r22, 0x3C	; 60
    156e:	82 eb       	ldi	r24, 0xB2	; 178
    1570:	98 e3       	ldi	r25, 0x38	; 56
    1572:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <TWI_MasterWrite>
	while(twiMaster.status == 1);
    1576:	e2 eb       	ldi	r30, 0xB2	; 178
    1578:	f8 e3       	ldi	r31, 0x38	; 56
    157a:	87 89       	ldd	r24, Z+23	; 0x17
    157c:	81 30       	cpi	r24, 0x01	; 1
    157e:	e9 f3       	breq	.-6      	; 0x157a <lcd_command+0x3e>
    1580:	87 e8       	ldi	r24, 0x87	; 135
    1582:	93 e1       	ldi	r25, 0x13	; 19
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	f1 f7       	brne	.-4      	; 0x1584 <lcd_command+0x48>
    1588:	00 c0       	rjmp	.+0      	; 0x158a <lcd_command+0x4e>
    158a:	00 00       	nop
	_delay_ms(10);
	
	while (twiMaster.result != TWIM_RESULT_OK)
    158c:	80 91 ca 38 	lds	r24, 0x38CA	; 0x8038ca <twiMaster+0x18>
    1590:	81 30       	cpi	r24, 0x01	; 1
    1592:	c9 f0       	breq	.+50     	; 0x15c6 <lcd_command+0x8a>
	{
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
    1594:	02 eb       	ldi	r16, 0xB2	; 178
    1596:	18 e3       	ldi	r17, 0x38	; 56
	while(twiMaster.status == 1);
	_delay_ms(10);
	
	while (twiMaster.result != TWIM_RESULT_OK)
	{
		initialize_Screen();
    1598:	0e 94 3b 09 	call	0x1276	; 0x1276 <initialize_Screen>
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
    159c:	22 e0       	ldi	r18, 0x02	; 2
    159e:	ae 01       	movw	r20, r28
    15a0:	4f 5f       	subi	r20, 0xFF	; 255
    15a2:	5f 4f       	sbci	r21, 0xFF	; 255
    15a4:	6c e3       	ldi	r22, 0x3C	; 60
    15a6:	c8 01       	movw	r24, r16
    15a8:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <TWI_MasterWrite>
		while(twiMaster.status == 1);
    15ac:	f8 01       	movw	r30, r16
    15ae:	87 89       	ldd	r24, Z+23	; 0x17
    15b0:	81 30       	cpi	r24, 0x01	; 1
    15b2:	e1 f3       	breq	.-8      	; 0x15ac <lcd_command+0x70>
    15b4:	87 e8       	ldi	r24, 0x87	; 135
    15b6:	93 e1       	ldi	r25, 0x13	; 19
    15b8:	01 97       	sbiw	r24, 0x01	; 1
    15ba:	f1 f7       	brne	.-4      	; 0x15b8 <lcd_command+0x7c>
    15bc:	00 c0       	rjmp	.+0      	; 0x15be <lcd_command+0x82>
    15be:	00 00       	nop
	complete_message[1] = (uint8_t)(command);                     // Data byte
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
	while(twiMaster.status == 1);
	_delay_ms(10);
	
	while (twiMaster.result != TWIM_RESULT_OK)
    15c0:	80 8d       	ldd	r24, Z+24	; 0x18
    15c2:	81 30       	cpi	r24, 0x01	; 1
    15c4:	49 f7       	brne	.-46     	; 0x1598 <lcd_command+0x5c>
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
		while(twiMaster.status == 1);
		_delay_ms(10);
	}
	
	if (command == (FUNCTION_SET | 0b0000111100))
    15c6:	fc e3       	ldi	r31, 0x3C	; 60
    15c8:	ef 16       	cp	r14, r31
    15ca:	f1 04       	cpc	r15, r1
    15cc:	19 f4       	brne	.+6      	; 0x15d4 <lcd_command+0x98>
	{
		two_line_mode = false;
    15ce:	10 92 06 38 	sts	0x3806, r1	; 0x803806 <two_line_mode>
    15d2:	07 c0       	rjmp	.+14     	; 0x15e2 <lcd_command+0xa6>
	}
	else if (command == (FUNCTION_SET | 0b0000111000))
    15d4:	88 e3       	ldi	r24, 0x38	; 56
    15d6:	e8 16       	cp	r14, r24
    15d8:	f1 04       	cpc	r15, r1
    15da:	19 f4       	brne	.+6      	; 0x15e2 <lcd_command+0xa6>
	{
		two_line_mode = true;
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <two_line_mode>
	}
}
    15e2:	23 96       	adiw	r28, 0x03	; 3
    15e4:	cd bf       	out	0x3d, r28	; 61
    15e6:	de bf       	out	0x3e, r29	; 62
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	1f 91       	pop	r17
    15ee:	0f 91       	pop	r16
    15f0:	ff 90       	pop	r15
    15f2:	ef 90       	pop	r14
    15f4:	08 95       	ret

000015f6 <setCursor>:
	lcd_col_counter = 0;
}

void setCursor(uint8_t line_num, uint8_t x)
{
	if (line_num == 0)
    15f6:	81 11       	cpse	r24, r1
    15f8:	06 c0       	rjmp	.+12     	; 0x1606 <setCursor+0x10>
	{
		lcd_command(SET_DDRAM_ADDRESS | (0b0000000000 + x));
    15fa:	86 2f       	mov	r24, r22
    15fc:	80 68       	ori	r24, 0x80	; 128
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
    1604:	08 95       	ret
	}
	else if (line_num == 1)
    1606:	81 30       	cpi	r24, 0x01	; 1
    1608:	39 f4       	brne	.+14     	; 0x1618 <setCursor+0x22>
	{
		lcd_command(SET_DDRAM_ADDRESS | (0b0001000000 + x));
    160a:	86 2f       	mov	r24, r22
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	80 5c       	subi	r24, 0xC0	; 192
    1610:	9f 4f       	sbci	r25, 0xFF	; 255
    1612:	80 68       	ori	r24, 0x80	; 128
    1614:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
    1618:	08 95       	ret

0000161a <main>:
#include "board.h"

int main()
{
    161a:	cf 93       	push	r28
    161c:	df 93       	push	r29
    161e:	1f 92       	push	r1
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
	//Pin/Settings initialization
    initialize();
    1624:	0e 94 77 05 	call	0xaee	; 0xaee <initialize>
    sei();
    1628:	78 94       	sei
	
	//I2C Setup
	TWI_MasterInit(&twiMaster, &TWI0, TWI_BAUDSETTING);
    162a:	4e e5       	ldi	r20, 0x5E	; 94
    162c:	60 e1       	ldi	r22, 0x10	; 16
    162e:	78 e0       	ldi	r23, 0x08	; 8
    1630:	82 eb       	ldi	r24, 0xB2	; 178
    1632:	98 e3       	ldi	r25, 0x38	; 56
    1634:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <TWI_MasterInit>
    1638:	2f e7       	ldi	r18, 0x7F	; 127
    163a:	84 e8       	ldi	r24, 0x84	; 132
    163c:	9e e1       	ldi	r25, 0x1E	; 30
    163e:	21 50       	subi	r18, 0x01	; 1
    1640:	80 40       	sbci	r24, 0x00	; 0
    1642:	90 40       	sbci	r25, 0x00	; 0
    1644:	e1 f7       	brne	.-8      	; 0x163e <main+0x24>
    1646:	00 c0       	rjmp	.+0      	; 0x1648 <main+0x2e>
    1648:	00 00       	nop
	//LCD screen initialization
	_delay_ms(500);
	initialize_Screen();
    164a:	0e 94 3b 09 	call	0x1276	; 0x1276 <initialize_Screen>
    164e:	2f e7       	ldi	r18, 0x7F	; 127
    1650:	84 e8       	ldi	r24, 0x84	; 132
    1652:	9e e1       	ldi	r25, 0x1E	; 30
    1654:	21 50       	subi	r18, 0x01	; 1
    1656:	80 40       	sbci	r24, 0x00	; 0
    1658:	90 40       	sbci	r25, 0x00	; 0
    165a:	e1 f7       	brne	.-8      	; 0x1654 <main+0x3a>
    165c:	00 c0       	rjmp	.+0      	; 0x165e <main+0x44>
    165e:	00 00       	nop
	_delay_ms(500);	
	
	volatile bool set_current_blink_temp = TRUE;
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	89 83       	std	Y+1, r24	; 0x01
					
						temp_current = get_current(&twiMaster, FALSE, INA_ADDRESS);
						if (abs(temp_current - current) > 5)
						{
							current = temp_current;
							update = TRUE;
    1664:	11 e0       	ldi	r17, 0x01	; 1
	_delay_ms(500);	
	
	volatile bool set_current_blink_temp = TRUE;
    while (1)
    {
		if (voltage > 200 && rtc_counter_1_2)
    1666:	80 91 ac 38 	lds	r24, 0x38AC	; 0x8038ac <voltage>
    166a:	90 91 ad 38 	lds	r25, 0x38AD	; 0x8038ad <voltage+0x1>
    166e:	89 3c       	cpi	r24, 0xC9	; 201
    1670:	91 05       	cpc	r25, r1
    1672:	d8 f0       	brcs	.+54     	; 0x16aa <main+0x90>
    1674:	80 91 db 38 	lds	r24, 0x38DB	; 0x8038db <rtc_counter_1_2>
    1678:	88 23       	and	r24, r24
    167a:	b9 f0       	breq	.+46     	; 0x16aa <main+0x90>
	    {
		    set_current_mode_on = set_current_mode ? 1 : 2;
    167c:	80 91 dc 38 	lds	r24, 0x38DC	; 0x8038dc <set_current_mode>
    1680:	81 11       	cpse	r24, r1
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <main+0x6e>
    1684:	82 e0       	ldi	r24, 0x02	; 2
    1686:	01 c0       	rjmp	.+2      	; 0x168a <main+0x70>
    1688:	81 2f       	mov	r24, r17
    168a:	80 93 d2 38 	sts	0x38D2, r24	; 0x8038d2 <set_current_mode_on>
		    display_danger();
    168e:	0e 94 f5 04 	call	0x9ea	; 0x9ea <display_danger>
    1692:	2f e7       	ldi	r18, 0x7F	; 127
    1694:	84 e8       	ldi	r24, 0x84	; 132
    1696:	9e e1       	ldi	r25, 0x1E	; 30
    1698:	21 50       	subi	r18, 0x01	; 1
    169a:	80 40       	sbci	r24, 0x00	; 0
    169c:	90 40       	sbci	r25, 0x00	; 0
    169e:	e1 f7       	brne	.-8      	; 0x1698 <main+0x7e>
    16a0:	00 c0       	rjmp	.+0      	; 0x16a2 <main+0x88>
    16a2:	00 00       	nop
		    _delay_ms(500);
			rtc_counter_1_2 = FALSE;
    16a4:	10 92 db 38 	sts	0x38DB, r1	; 0x8038db <rtc_counter_1_2>
    16a8:	de cf       	rjmp	.-68     	; 0x1666 <main+0x4c>
	    }
		else
		{
			if (set_current_mode_on == 1)
    16aa:	80 91 d2 38 	lds	r24, 0x38D2	; 0x8038d2 <set_current_mode_on>
    16ae:	81 30       	cpi	r24, 0x01	; 1
    16b0:	79 f4       	brne	.+30     	; 0x16d0 <main+0xb6>
			{
				lcd_command(CLEAR_DISPLAY);
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
				lcd_command(FUNCTION_SET | 0b0000111100);
    16ba:	8c e3       	ldi	r24, 0x3C	; 60
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
				clear_lcd_update();
    16c2:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <clear_lcd_update>
				display_set_current();
    16c6:	0e 94 91 03 	call	0x722	; 0x722 <display_set_current>
				set_current_mode_on = 0;
    16ca:	10 92 d2 38 	sts	0x38D2, r1	; 0x8038d2 <set_current_mode_on>
    16ce:	cb cf       	rjmp	.-106    	; 0x1666 <main+0x4c>
			}
			else if (set_current_mode_on == 2)
    16d0:	80 91 d2 38 	lds	r24, 0x38D2	; 0x8038d2 <set_current_mode_on>
    16d4:	82 30       	cpi	r24, 0x02	; 2
    16d6:	39 f5       	brne	.+78     	; 0x1726 <main+0x10c>
			{
				lcd_command(CLEAR_DISPLAY);
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
				lcd_command(FUNCTION_SET | 0b0000111000);
    16e0:	88 e3       	ldi	r24, 0x38	; 56
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	0e 94 9e 0a 	call	0x153c	; 0x153c <lcd_command>
				clear_lcd_update();
    16e8:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <clear_lcd_update>
				display_current_voltage(current, voltage);
    16ec:	60 91 ac 38 	lds	r22, 0x38AC	; 0x8038ac <voltage>
    16f0:	70 91 ad 38 	lds	r23, 0x38AD	; 0x8038ad <voltage+0x1>
    16f4:	80 91 ce 38 	lds	r24, 0x38CE	; 0x8038ce <current>
    16f8:	90 91 cf 38 	lds	r25, 0x38CF	; 0x8038cf <current+0x1>
    16fc:	0e 94 b2 00 	call	0x164	; 0x164 <display_current_voltage>
				// TODO - set DAC to the desired current
				eeprom_update_word((uint16_t*) 0x00, desired_current);
    1700:	60 91 5a 38 	lds	r22, 0x385A	; 0x80385a <desired_current>
    1704:	70 91 5b 38 	lds	r23, 0x385B	; 0x80385b <desired_current+0x1>
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	0e 94 39 14 	call	0x2872	; 0x2872 <eeprom_update_word>
				desired_current_temp = desired_current;
    1710:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
    1714:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
    1718:	80 93 58 38 	sts	0x3858, r24	; 0x803858 <desired_current_temp>
    171c:	90 93 59 38 	sts	0x3859, r25	; 0x803859 <desired_current_temp+0x1>
				
				set_current_mode_on = 0;
    1720:	10 92 d2 38 	sts	0x38D2, r1	; 0x8038d2 <set_current_mode_on>
    1724:	a0 cf       	rjmp	.-192    	; 0x1666 <main+0x4c>
			}
			else
			{
				if (set_current_mode)
    1726:	80 91 dc 38 	lds	r24, 0x38DC	; 0x8038dc <set_current_mode>
    172a:	88 23       	and	r24, r24
    172c:	09 f4       	brne	.+2      	; 0x1730 <main+0x116>
    172e:	6c c0       	rjmp	.+216    	; 0x1808 <main+0x1ee>
				{
					if (rtc_counter_1_4)
    1730:	80 91 d1 38 	lds	r24, 0x38D1	; 0x8038d1 <rtc_counter_1_4>
    1734:	88 23       	and	r24, r24
    1736:	09 f4       	brne	.+2      	; 0x173a <main+0x120>
    1738:	50 c0       	rjmp	.+160    	; 0x17da <main+0x1c0>
					{
						temp_voltage = get_voltage(&twiMaster, FALSE, INA_ADDRESS);
    173a:	41 e4       	ldi	r20, 0x41	; 65
    173c:	60 e0       	ldi	r22, 0x00	; 0
    173e:	82 eb       	ldi	r24, 0xB2	; 178
    1740:	98 e3       	ldi	r25, 0x38	; 56
    1742:	0e 94 4e 07 	call	0xe9c	; 0xe9c <get_voltage>
    1746:	80 93 d8 38 	sts	0x38D8, r24	; 0x8038d8 <temp_voltage>
    174a:	90 93 d9 38 	sts	0x38D9, r25	; 0x8038d9 <temp_voltage+0x1>
						if (abs(temp_voltage - voltage) > 5)
    174e:	80 91 d8 38 	lds	r24, 0x38D8	; 0x8038d8 <temp_voltage>
    1752:	90 91 d9 38 	lds	r25, 0x38D9	; 0x8038d9 <temp_voltage+0x1>
    1756:	20 91 ac 38 	lds	r18, 0x38AC	; 0x8038ac <voltage>
    175a:	30 91 ad 38 	lds	r19, 0x38AD	; 0x8038ad <voltage+0x1>
    175e:	82 1b       	sub	r24, r18
    1760:	93 0b       	sbc	r25, r19
    1762:	9c 01       	movw	r18, r24
    1764:	22 f4       	brpl	.+8      	; 0x176e <main+0x154>
    1766:	22 27       	eor	r18, r18
    1768:	33 27       	eor	r19, r19
    176a:	28 1b       	sub	r18, r24
    176c:	39 0b       	sbc	r19, r25
    176e:	26 30       	cpi	r18, 0x06	; 6
    1770:	31 05       	cpc	r19, r1
    1772:	54 f0       	brlt	.+20     	; 0x1788 <main+0x16e>
						{
							voltage = temp_voltage;
    1774:	80 91 d8 38 	lds	r24, 0x38D8	; 0x8038d8 <temp_voltage>
    1778:	90 91 d9 38 	lds	r25, 0x38D9	; 0x8038d9 <temp_voltage+0x1>
    177c:	80 93 ac 38 	sts	0x38AC, r24	; 0x8038ac <voltage>
    1780:	90 93 ad 38 	sts	0x38AD, r25	; 0x8038ad <voltage+0x1>
							update = TRUE;
    1784:	10 93 e1 38 	sts	0x38E1, r17	; 0x8038e1 <update>
						}
						
						temp_current = get_current(&twiMaster, FALSE, INA_ADDRESS);
    1788:	41 e4       	ldi	r20, 0x41	; 65
    178a:	60 e0       	ldi	r22, 0x00	; 0
    178c:	82 eb       	ldi	r24, 0xB2	; 178
    178e:	98 e3       	ldi	r25, 0x38	; 56
    1790:	0e 94 8d 07 	call	0xf1a	; 0xf1a <get_current>
    1794:	80 93 cb 38 	sts	0x38CB, r24	; 0x8038cb <temp_current>
    1798:	90 93 cc 38 	sts	0x38CC, r25	; 0x8038cc <temp_current+0x1>
						if (abs(temp_current - current) > 5)
    179c:	80 91 cb 38 	lds	r24, 0x38CB	; 0x8038cb <temp_current>
    17a0:	90 91 cc 38 	lds	r25, 0x38CC	; 0x8038cc <temp_current+0x1>
    17a4:	20 91 ce 38 	lds	r18, 0x38CE	; 0x8038ce <current>
    17a8:	30 91 cf 38 	lds	r19, 0x38CF	; 0x8038cf <current+0x1>
    17ac:	82 1b       	sub	r24, r18
    17ae:	93 0b       	sbc	r25, r19
    17b0:	9c 01       	movw	r18, r24
    17b2:	22 f4       	brpl	.+8      	; 0x17bc <main+0x1a2>
    17b4:	22 27       	eor	r18, r18
    17b6:	33 27       	eor	r19, r19
    17b8:	28 1b       	sub	r18, r24
    17ba:	39 0b       	sbc	r19, r25
    17bc:	26 30       	cpi	r18, 0x06	; 6
    17be:	31 05       	cpc	r19, r1
    17c0:	54 f0       	brlt	.+20     	; 0x17d6 <main+0x1bc>
						{
							current = temp_current;
    17c2:	80 91 cb 38 	lds	r24, 0x38CB	; 0x8038cb <temp_current>
    17c6:	90 91 cc 38 	lds	r25, 0x38CC	; 0x8038cc <temp_current+0x1>
    17ca:	80 93 ce 38 	sts	0x38CE, r24	; 0x8038ce <current>
    17ce:	90 93 cf 38 	sts	0x38CF, r25	; 0x8038cf <current+0x1>
							update = TRUE;
    17d2:	10 93 e1 38 	sts	0x38E1, r17	; 0x8038e1 <update>
						}
						
						rtc_counter_1_4 = FALSE;
    17d6:	10 92 d1 38 	sts	0x38D1, r1	; 0x8038d1 <rtc_counter_1_4>
					}
					
					if (desired_current_temp != desired_current)
    17da:	20 91 58 38 	lds	r18, 0x3858	; 0x803858 <desired_current_temp>
    17de:	30 91 59 38 	lds	r19, 0x3859	; 0x803859 <desired_current_temp+0x1>
    17e2:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
    17e6:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
    17ea:	28 17       	cp	r18, r24
    17ec:	39 07       	cpc	r19, r25
    17ee:	09 f4       	brne	.+2      	; 0x17f2 <main+0x1d8>
    17f0:	3a cf       	rjmp	.-396    	; 0x1666 <main+0x4c>
					{
						desired_current_temp = desired_current;
    17f2:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
    17f6:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
    17fa:	80 93 58 38 	sts	0x3858, r24	; 0x803858 <desired_current_temp>
    17fe:	90 93 59 38 	sts	0x3859, r25	; 0x803859 <desired_current_temp+0x1>
						display_set_current();
    1802:	0e 94 91 03 	call	0x722	; 0x722 <display_set_current>
    1806:	2f cf       	rjmp	.-418    	; 0x1666 <main+0x4c>
					}
				}
				else
				{
					if (rtc_counter_1_4)
    1808:	80 91 d1 38 	lds	r24, 0x38D1	; 0x8038d1 <rtc_counter_1_4>
    180c:	88 23       	and	r24, r24
    180e:	09 f4       	brne	.+2      	; 0x1812 <main+0x1f8>
    1810:	50 c0       	rjmp	.+160    	; 0x18b2 <main+0x298>
					{
						temp_voltage = get_voltage(&twiMaster, FALSE, INA_ADDRESS);
    1812:	41 e4       	ldi	r20, 0x41	; 65
    1814:	60 e0       	ldi	r22, 0x00	; 0
    1816:	82 eb       	ldi	r24, 0xB2	; 178
    1818:	98 e3       	ldi	r25, 0x38	; 56
    181a:	0e 94 4e 07 	call	0xe9c	; 0xe9c <get_voltage>
    181e:	80 93 d8 38 	sts	0x38D8, r24	; 0x8038d8 <temp_voltage>
    1822:	90 93 d9 38 	sts	0x38D9, r25	; 0x8038d9 <temp_voltage+0x1>
						if (abs(temp_voltage - voltage) > 5)
    1826:	80 91 d8 38 	lds	r24, 0x38D8	; 0x8038d8 <temp_voltage>
    182a:	90 91 d9 38 	lds	r25, 0x38D9	; 0x8038d9 <temp_voltage+0x1>
    182e:	20 91 ac 38 	lds	r18, 0x38AC	; 0x8038ac <voltage>
    1832:	30 91 ad 38 	lds	r19, 0x38AD	; 0x8038ad <voltage+0x1>
    1836:	82 1b       	sub	r24, r18
    1838:	93 0b       	sbc	r25, r19
    183a:	9c 01       	movw	r18, r24
    183c:	22 f4       	brpl	.+8      	; 0x1846 <main+0x22c>
    183e:	22 27       	eor	r18, r18
    1840:	33 27       	eor	r19, r19
    1842:	28 1b       	sub	r18, r24
    1844:	39 0b       	sbc	r19, r25
    1846:	26 30       	cpi	r18, 0x06	; 6
    1848:	31 05       	cpc	r19, r1
    184a:	54 f0       	brlt	.+20     	; 0x1860 <main+0x246>
						{
							voltage = temp_voltage;
    184c:	80 91 d8 38 	lds	r24, 0x38D8	; 0x8038d8 <temp_voltage>
    1850:	90 91 d9 38 	lds	r25, 0x38D9	; 0x8038d9 <temp_voltage+0x1>
    1854:	80 93 ac 38 	sts	0x38AC, r24	; 0x8038ac <voltage>
    1858:	90 93 ad 38 	sts	0x38AD, r25	; 0x8038ad <voltage+0x1>
							update = TRUE;
    185c:	10 93 e1 38 	sts	0x38E1, r17	; 0x8038e1 <update>
						}
					
						temp_current = get_current(&twiMaster, FALSE, INA_ADDRESS);
    1860:	41 e4       	ldi	r20, 0x41	; 65
    1862:	60 e0       	ldi	r22, 0x00	; 0
    1864:	82 eb       	ldi	r24, 0xB2	; 178
    1866:	98 e3       	ldi	r25, 0x38	; 56
    1868:	0e 94 8d 07 	call	0xf1a	; 0xf1a <get_current>
    186c:	80 93 cb 38 	sts	0x38CB, r24	; 0x8038cb <temp_current>
    1870:	90 93 cc 38 	sts	0x38CC, r25	; 0x8038cc <temp_current+0x1>
						if (abs(temp_current - current) > 5)
    1874:	80 91 cb 38 	lds	r24, 0x38CB	; 0x8038cb <temp_current>
    1878:	90 91 cc 38 	lds	r25, 0x38CC	; 0x8038cc <temp_current+0x1>
    187c:	20 91 ce 38 	lds	r18, 0x38CE	; 0x8038ce <current>
    1880:	30 91 cf 38 	lds	r19, 0x38CF	; 0x8038cf <current+0x1>
    1884:	82 1b       	sub	r24, r18
    1886:	93 0b       	sbc	r25, r19
    1888:	9c 01       	movw	r18, r24
    188a:	22 f4       	brpl	.+8      	; 0x1894 <main+0x27a>
    188c:	22 27       	eor	r18, r18
    188e:	33 27       	eor	r19, r19
    1890:	28 1b       	sub	r18, r24
    1892:	39 0b       	sbc	r19, r25
    1894:	26 30       	cpi	r18, 0x06	; 6
    1896:	31 05       	cpc	r19, r1
    1898:	54 f0       	brlt	.+20     	; 0x18ae <main+0x294>
						{
							current = temp_current;
    189a:	80 91 cb 38 	lds	r24, 0x38CB	; 0x8038cb <temp_current>
    189e:	90 91 cc 38 	lds	r25, 0x38CC	; 0x8038cc <temp_current+0x1>
    18a2:	80 93 ce 38 	sts	0x38CE, r24	; 0x8038ce <current>
    18a6:	90 93 cf 38 	sts	0x38CF, r25	; 0x8038cf <current+0x1>
							update = TRUE;
    18aa:	10 93 e1 38 	sts	0x38E1, r17	; 0x8038e1 <update>
						}
					
						rtc_counter_1_4 = FALSE;
    18ae:	10 92 d1 38 	sts	0x38D1, r1	; 0x8038d1 <rtc_counter_1_4>
					}
				
					if (update)
    18b2:	80 91 e1 38 	lds	r24, 0x38E1	; 0x8038e1 <update>
    18b6:	88 23       	and	r24, r24
    18b8:	09 f4       	brne	.+2      	; 0x18bc <main+0x2a2>
    18ba:	d5 ce       	rjmp	.-598    	; 0x1666 <main+0x4c>
					{
						display_current_voltage(current, voltage);
    18bc:	60 91 ac 38 	lds	r22, 0x38AC	; 0x8038ac <voltage>
    18c0:	70 91 ad 38 	lds	r23, 0x38AD	; 0x8038ad <voltage+0x1>
    18c4:	80 91 ce 38 	lds	r24, 0x38CE	; 0x8038ce <current>
    18c8:	90 91 cf 38 	lds	r25, 0x38CF	; 0x8038cf <current+0x1>
    18cc:	0e 94 b2 00 	call	0x164	; 0x164 <display_current_voltage>
						update = FALSE;
    18d0:	10 92 e1 38 	sts	0x38E1, r1	; 0x8038e1 <update>
    18d4:	c8 ce       	rjmp	.-624    	; 0x1666 <main+0x4c>

000018d6 <__vector_25>:
		}
    }
}

ISR(TWI0_TWIM_vect)
{
    18d6:	1f 92       	push	r1
    18d8:	0f 92       	push	r0
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	0f 92       	push	r0
    18de:	11 24       	eor	r1, r1
    18e0:	2f 93       	push	r18
    18e2:	3f 93       	push	r19
    18e4:	4f 93       	push	r20
    18e6:	5f 93       	push	r21
    18e8:	6f 93       	push	r22
    18ea:	7f 93       	push	r23
    18ec:	8f 93       	push	r24
    18ee:	9f 93       	push	r25
    18f0:	af 93       	push	r26
    18f2:	bf 93       	push	r27
    18f4:	ef 93       	push	r30
    18f6:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twiMaster);
    18f8:	82 eb       	ldi	r24, 0xB2	; 178
    18fa:	98 e3       	ldi	r25, 0x38	; 56
    18fc:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <TWI_MasterInterruptHandler>
}
    1900:	ff 91       	pop	r31
    1902:	ef 91       	pop	r30
    1904:	bf 91       	pop	r27
    1906:	af 91       	pop	r26
    1908:	9f 91       	pop	r25
    190a:	8f 91       	pop	r24
    190c:	7f 91       	pop	r23
    190e:	6f 91       	pop	r22
    1910:	5f 91       	pop	r21
    1912:	4f 91       	pop	r20
    1914:	3f 91       	pop	r19
    1916:	2f 91       	pop	r18
    1918:	0f 90       	pop	r0
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	0f 90       	pop	r0
    191e:	1f 90       	pop	r1
    1920:	18 95       	reti

00001922 <__vector_6>:

// WARNING - DISPLAY COMMANDS WILL NOT BE EXECUTED IN THIS INTERRUPT 
//(since commands need to use i2c interrupt, which is impossible if 
//the program is in this interrupt)
ISR(RTC_CNT_vect)
{
    1922:	1f 92       	push	r1
    1924:	0f 92       	push	r0
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	0f 92       	push	r0
    192a:	11 24       	eor	r1, r1
    192c:	2f 93       	push	r18
    192e:	3f 93       	push	r19
    1930:	4f 93       	push	r20
    1932:	5f 93       	push	r21
    1934:	6f 93       	push	r22
    1936:	7f 93       	push	r23
    1938:	8f 93       	push	r24
    193a:	9f 93       	push	r25
    193c:	af 93       	push	r26
    193e:	bf 93       	push	r27
    1940:	ef 93       	push	r30
    1942:	ff 93       	push	r31
	bool is_debounce_successful = TRUE;
	is_debounce_successful &= debounce(&PORTA_IN, ENCDR_SW, 10, 60);
    1944:	2c e3       	ldi	r18, 0x3C	; 60
    1946:	4a e0       	ldi	r20, 0x0A	; 10
    1948:	64 e0       	ldi	r22, 0x04	; 4
    194a:	88 e0       	ldi	r24, 0x08	; 8
    194c:	94 e0       	ldi	r25, 0x04	; 4
    194e:	0e 94 0a 05 	call	0xa14	; 0xa14 <debounce>
	
	if (is_debounce_successful)
    1952:	80 ff       	sbrs	r24, 0
    1954:	30 c0       	rjmp	.+96     	; 0x19b6 <__vector_6+0x94>
	{
		if(!(PORTA_IN & (1 << ENCDR_SW)))//if switch pin is low
    1956:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    195a:	84 fd       	sbrc	r24, 4
    195c:	03 c0       	rjmp	.+6      	; 0x1964 <__vector_6+0x42>
		{
			encoder_sw_was_low = TRUE;
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	80 93 da 38 	sts	0x38DA, r24	; 0x8038da <encoder_sw_was_low>
		}
		
		if((PORTA_IN & (1 << ENCDR_SW)) && encoder_sw_was_low)//if switch pin is high and was low
    1964:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    1968:	84 ff       	sbrs	r24, 4
    196a:	25 c0       	rjmp	.+74     	; 0x19b6 <__vector_6+0x94>
    196c:	80 91 da 38 	lds	r24, 0x38DA	; 0x8038da <encoder_sw_was_low>
    1970:	88 23       	and	r24, r24
    1972:	09 f1       	breq	.+66     	; 0x19b6 <__vector_6+0x94>
		{
			set_current_mode = !set_current_mode;
    1974:	90 91 dc 38 	lds	r25, 0x38DC	; 0x8038dc <set_current_mode>
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	89 27       	eor	r24, r25
    197c:	80 93 dc 38 	sts	0x38DC, r24	; 0x8038dc <set_current_mode>
			set_current_mode_on = set_current_mode ? 1 : 2;
    1980:	80 91 dc 38 	lds	r24, 0x38DC	; 0x8038dc <set_current_mode>
    1984:	81 11       	cpse	r24, r1
    1986:	02 c0       	rjmp	.+4      	; 0x198c <__vector_6+0x6a>
    1988:	82 e0       	ldi	r24, 0x02	; 2
    198a:	01 c0       	rjmp	.+2      	; 0x198e <__vector_6+0x6c>
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	80 93 d2 38 	sts	0x38D2, r24	; 0x8038d2 <set_current_mode_on>
			rtc_idle_counter = rtc_counter;
    1992:	80 91 ae 38 	lds	r24, 0x38AE	; 0x8038ae <rtc_counter>
    1996:	90 91 af 38 	lds	r25, 0x38AF	; 0x8038af <rtc_counter+0x1>
    199a:	a0 91 b0 38 	lds	r26, 0x38B0	; 0x8038b0 <rtc_counter+0x2>
    199e:	b0 91 b1 38 	lds	r27, 0x38B1	; 0x8038b1 <rtc_counter+0x3>
    19a2:	80 93 dd 38 	sts	0x38DD, r24	; 0x8038dd <rtc_idle_counter>
    19a6:	90 93 de 38 	sts	0x38DE, r25	; 0x8038de <rtc_idle_counter+0x1>
    19aa:	a0 93 df 38 	sts	0x38DF, r26	; 0x8038df <rtc_idle_counter+0x2>
    19ae:	b0 93 e0 38 	sts	0x38E0, r27	; 0x8038e0 <rtc_idle_counter+0x3>
			
			encoder_sw_was_low = FALSE;
    19b2:	10 92 da 38 	sts	0x38DA, r1	; 0x8038da <encoder_sw_was_low>
		}
	}
	
	if (set_current_mode)
    19b6:	80 91 dc 38 	lds	r24, 0x38DC	; 0x8038dc <set_current_mode>
    19ba:	81 11       	cpse	r24, r1
	{
		handle_encoder();
    19bc:	0e 94 14 06 	call	0xc28	; 0xc28 <handle_encoder>
	}
	if (rtc_counter % 250 == 0)
    19c0:	60 91 ae 38 	lds	r22, 0x38AE	; 0x8038ae <rtc_counter>
    19c4:	70 91 af 38 	lds	r23, 0x38AF	; 0x8038af <rtc_counter+0x1>
    19c8:	80 91 b0 38 	lds	r24, 0x38B0	; 0x8038b0 <rtc_counter+0x2>
    19cc:	90 91 b1 38 	lds	r25, 0x38B1	; 0x8038b1 <rtc_counter+0x3>
    19d0:	2a ef       	ldi	r18, 0xFA	; 250
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	40 e0       	ldi	r20, 0x00	; 0
    19d6:	50 e0       	ldi	r21, 0x00	; 0
    19d8:	0e 94 26 10 	call	0x204c	; 0x204c <__udivmodsi4>
    19dc:	67 2b       	or	r22, r23
    19de:	68 2b       	or	r22, r24
    19e0:	69 2b       	or	r22, r25
    19e2:	19 f4       	brne	.+6      	; 0x19ea <__vector_6+0xc8>
	{
		rtc_counter_1_4 = TRUE;
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	80 93 d1 38 	sts	0x38D1, r24	; 0x8038d1 <rtc_counter_1_4>
	}
	if (rtc_counter % 500 == 0)
    19ea:	60 91 ae 38 	lds	r22, 0x38AE	; 0x8038ae <rtc_counter>
    19ee:	70 91 af 38 	lds	r23, 0x38AF	; 0x8038af <rtc_counter+0x1>
    19f2:	80 91 b0 38 	lds	r24, 0x38B0	; 0x8038b0 <rtc_counter+0x2>
    19f6:	90 91 b1 38 	lds	r25, 0x38B1	; 0x8038b1 <rtc_counter+0x3>
    19fa:	24 ef       	ldi	r18, 0xF4	; 244
    19fc:	31 e0       	ldi	r19, 0x01	; 1
    19fe:	40 e0       	ldi	r20, 0x00	; 0
    1a00:	50 e0       	ldi	r21, 0x00	; 0
    1a02:	0e 94 26 10 	call	0x204c	; 0x204c <__udivmodsi4>
    1a06:	67 2b       	or	r22, r23
    1a08:	68 2b       	or	r22, r24
    1a0a:	69 2b       	or	r22, r25
    1a0c:	19 f4       	brne	.+6      	; 0x1a14 <__vector_6+0xf2>
	{
		rtc_counter_1_2 = TRUE;
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	80 93 db 38 	sts	0x38DB, r24	; 0x8038db <rtc_counter_1_2>
	}
	rtc_counter++;
    1a14:	80 91 ae 38 	lds	r24, 0x38AE	; 0x8038ae <rtc_counter>
    1a18:	90 91 af 38 	lds	r25, 0x38AF	; 0x8038af <rtc_counter+0x1>
    1a1c:	a0 91 b0 38 	lds	r26, 0x38B0	; 0x8038b0 <rtc_counter+0x2>
    1a20:	b0 91 b1 38 	lds	r27, 0x38B1	; 0x8038b1 <rtc_counter+0x3>
    1a24:	01 96       	adiw	r24, 0x01	; 1
    1a26:	a1 1d       	adc	r26, r1
    1a28:	b1 1d       	adc	r27, r1
    1a2a:	80 93 ae 38 	sts	0x38AE, r24	; 0x8038ae <rtc_counter>
    1a2e:	90 93 af 38 	sts	0x38AF, r25	; 0x8038af <rtc_counter+0x1>
    1a32:	a0 93 b0 38 	sts	0x38B0, r26	; 0x8038b0 <rtc_counter+0x2>
    1a36:	b0 93 b1 38 	sts	0x38B1, r27	; 0x8038b1 <rtc_counter+0x3>
	RTC.INTFLAGS = RTC_OVF_bm;
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    1a40:	ff 91       	pop	r31
    1a42:	ef 91       	pop	r30
    1a44:	bf 91       	pop	r27
    1a46:	af 91       	pop	r26
    1a48:	9f 91       	pop	r25
    1a4a:	8f 91       	pop	r24
    1a4c:	7f 91       	pop	r23
    1a4e:	6f 91       	pop	r22
    1a50:	5f 91       	pop	r21
    1a52:	4f 91       	pop	r20
    1a54:	3f 91       	pop	r19
    1a56:	2f 91       	pop	r18
    1a58:	0f 90       	pop	r0
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	0f 90       	pop	r0
    1a5e:	1f 90       	pop	r1
    1a60:	18 95       	reti

00001a62 <TWI_MasterInit>:
                    uint8_t bytesToRead)
{
	//PORTB_OUTTGL = (1 << 4);
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
	return twi_status;
}
    1a62:	fc 01       	movw	r30, r24
    1a64:	60 83       	st	Z, r22
    1a66:	71 83       	std	Z+1, r23	; 0x01
    1a68:	81 ec       	ldi	r24, 0xC1	; 193
    1a6a:	db 01       	movw	r26, r22
    1a6c:	13 96       	adiw	r26, 0x03	; 3
    1a6e:	8c 93       	st	X, r24
    1a70:	a0 81       	ld	r26, Z
    1a72:	b1 81       	ldd	r27, Z+1	; 0x01
    1a74:	16 96       	adiw	r26, 0x06	; 6
    1a76:	4c 93       	st	X, r20
    1a78:	01 90       	ld	r0, Z+
    1a7a:	f0 81       	ld	r31, Z
    1a7c:	e0 2d       	mov	r30, r0
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	85 83       	std	Z+5, r24	; 0x05
    1a82:	08 95       	ret

00001a84 <TWI_MasterWriteRead>:
    1a84:	0f 93       	push	r16
    1a86:	cf 93       	push	r28
    1a88:	df 93       	push	r29
    1a8a:	fc 01       	movw	r30, r24
    1a8c:	29 30       	cpi	r18, 0x09	; 9
    1a8e:	98 f5       	brcc	.+102    	; 0x1af6 <TWI_MasterWriteRead+0x72>
    1a90:	09 30       	cpi	r16, 0x09	; 9
    1a92:	98 f5       	brcc	.+102    	; 0x1afa <TWI_MasterWriteRead+0x76>
    1a94:	87 89       	ldd	r24, Z+23	; 0x17
    1a96:	81 11       	cpse	r24, r1
    1a98:	32 c0       	rjmp	.+100    	; 0x1afe <TWI_MasterWriteRead+0x7a>
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	87 8b       	std	Z+23, r24	; 0x17
    1a9e:	10 8e       	std	Z+24, r1	; 0x18
    1aa0:	66 0f       	add	r22, r22
    1aa2:	62 83       	std	Z+2, r22	; 0x02
    1aa4:	22 23       	and	r18, r18
    1aa6:	69 f0       	breq	.+26     	; 0x1ac2 <TWI_MasterWriteRead+0x3e>
    1aa8:	a4 2f       	mov	r26, r20
    1aaa:	b5 2f       	mov	r27, r21
    1aac:	40 e0       	ldi	r20, 0x00	; 0
    1aae:	50 e0       	ldi	r21, 0x00	; 0
    1ab0:	8d 91       	ld	r24, X+
    1ab2:	ef 01       	movw	r28, r30
    1ab4:	c4 0f       	add	r28, r20
    1ab6:	d5 1f       	adc	r29, r21
    1ab8:	8b 83       	std	Y+3, r24	; 0x03
    1aba:	4f 5f       	subi	r20, 0xFF	; 255
    1abc:	5f 4f       	sbci	r21, 0xFF	; 255
    1abe:	42 17       	cp	r20, r18
    1ac0:	b8 f3       	brcs	.-18     	; 0x1ab0 <TWI_MasterWriteRead+0x2c>
    1ac2:	23 8b       	std	Z+19, r18	; 0x13
    1ac4:	04 8b       	std	Z+20, r16	; 0x14
    1ac6:	15 8a       	std	Z+21, r1	; 0x15
    1ac8:	16 8a       	std	Z+22, r1	; 0x16
    1aca:	83 89       	ldd	r24, Z+19	; 0x13
    1acc:	88 23       	and	r24, r24
    1ace:	41 f0       	breq	.+16     	; 0x1ae0 <TWI_MasterWriteRead+0x5c>
    1ad0:	82 81       	ldd	r24, Z+2	; 0x02
    1ad2:	8e 7f       	andi	r24, 0xFE	; 254
    1ad4:	01 90       	ld	r0, Z+
    1ad6:	f0 81       	ld	r31, Z
    1ad8:	e0 2d       	mov	r30, r0
    1ada:	87 83       	std	Z+7, r24	; 0x07
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	12 c0       	rjmp	.+36     	; 0x1b04 <TWI_MasterWriteRead+0x80>
    1ae0:	84 89       	ldd	r24, Z+20	; 0x14
    1ae2:	88 23       	and	r24, r24
    1ae4:	71 f0       	breq	.+28     	; 0x1b02 <TWI_MasterWriteRead+0x7e>
    1ae6:	82 81       	ldd	r24, Z+2	; 0x02
    1ae8:	81 60       	ori	r24, 0x01	; 1
    1aea:	01 90       	ld	r0, Z+
    1aec:	f0 81       	ld	r31, Z
    1aee:	e0 2d       	mov	r30, r0
    1af0:	87 83       	std	Z+7, r24	; 0x07
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	07 c0       	rjmp	.+14     	; 0x1b04 <TWI_MasterWriteRead+0x80>
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	05 c0       	rjmp	.+10     	; 0x1b04 <TWI_MasterWriteRead+0x80>
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	03 c0       	rjmp	.+6      	; 0x1b04 <TWI_MasterWriteRead+0x80>
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	01 c0       	rjmp	.+2      	; 0x1b04 <TWI_MasterWriteRead+0x80>
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	df 91       	pop	r29
    1b06:	cf 91       	pop	r28
    1b08:	0f 91       	pop	r16
    1b0a:	08 95       	ret

00001b0c <TWI_MasterWrite>:
    1b0c:	0f 93       	push	r16
    1b0e:	00 e0       	ldi	r16, 0x00	; 0
    1b10:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <TWI_MasterWriteRead>
    1b14:	0f 91       	pop	r16
    1b16:	08 95       	ret

00001b18 <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi) //--done
{
    1b18:	fc 01       	movw	r30, r24
	uint8_t currentStatus = twi->interface->MSTATUS;
    1b1a:	a0 81       	ld	r26, Z
    1b1c:	b1 81       	ldd	r27, Z+1	; 0x01
    1b1e:	15 96       	adiw	r26, 0x05	; 5
    1b20:	9c 91       	ld	r25, X
    1b22:	15 97       	sbiw	r26, 0x05	; 5

	/* If bus error. */
	if (currentStatus & TWI_BUSERR_bm) {
    1b24:	92 ff       	sbrs	r25, 2
    1b26:	03 c0       	rjmp	.+6      	; 0x1b2e <TWI_MasterArbitrationLostBusErrorHandler+0x16>
		twi->result = TWIM_RESULT_BUS_ERROR;
    1b28:	84 e0       	ldi	r24, 0x04	; 4
    1b2a:	80 8f       	std	Z+24, r24	; 0x18
    1b2c:	02 c0       	rjmp	.+4      	; 0x1b32 <TWI_MasterArbitrationLostBusErrorHandler+0x1a>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
    1b2e:	83 e0       	ldi	r24, 0x03	; 3
    1b30:	80 8f       	std	Z+24, r24	; 0x18
	}

	/* Clear interrupt flag. */
	twi->interface->MSTATUS = currentStatus | TWI_ARBLOST_bm;
    1b32:	98 60       	ori	r25, 0x08	; 8
    1b34:	15 96       	adiw	r26, 0x05	; 5
    1b36:	9c 93       	st	X, r25

	twi->status = TWIM_STATUS_READY;
    1b38:	17 8a       	std	Z+23, r1	; 0x17
    1b3a:	08 95       	ret

00001b3c <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi) //--done
{
    1b3c:	cf 93       	push	r28
    1b3e:	df 93       	push	r29
    1b40:	fc 01       	movw	r30, r24
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
    1b42:	93 89       	ldd	r25, Z+19	; 0x13
	uint8_t bytesToRead   = twi->bytesToRead;
    1b44:	24 89       	ldd	r18, Z+20	; 0x14

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MSTATUS & TWI_RXACK_bm) {
    1b46:	a0 81       	ld	r26, Z
    1b48:	b1 81       	ldd	r27, Z+1	; 0x01
    1b4a:	15 96       	adiw	r26, 0x05	; 5
    1b4c:	8c 91       	ld	r24, X
    1b4e:	15 97       	sbiw	r26, 0x05	; 5
    1b50:	84 ff       	sbrs	r24, 4
    1b52:	07 c0       	rjmp	.+14     	; 0x1b62 <TWI_MasterWriteHandler+0x26>
		twi->interface->MCTRLB = TWI_MCMD_STOP_gc;
    1b54:	83 e0       	ldi	r24, 0x03	; 3
    1b56:	14 96       	adiw	r26, 0x04	; 4
    1b58:	8c 93       	st	X, r24
		twi->result = TWIM_RESULT_NACK_RECEIVED;
    1b5a:	85 e0       	ldi	r24, 0x05	; 5
    1b5c:	80 8f       	std	Z+24, r24	; 0x18
		twi->status = TWIM_STATUS_READY;
    1b5e:	17 8a       	std	Z+23, r1	; 0x17
    1b60:	1c c0       	rjmp	.+56     	; 0x1b9a <TWI_MasterWriteHandler+0x5e>
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    1b62:	85 89       	ldd	r24, Z+21	; 0x15
    1b64:	89 17       	cp	r24, r25
    1b66:	58 f4       	brcc	.+22     	; 0x1b7e <TWI_MasterWriteHandler+0x42>
		uint8_t data = twi->writeData[twi->bytesWritten];
    1b68:	85 89       	ldd	r24, Z+21	; 0x15
    1b6a:	ef 01       	movw	r28, r30
    1b6c:	c8 0f       	add	r28, r24
    1b6e:	d1 1d       	adc	r29, r1
    1b70:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MDATA = data;
    1b72:	18 96       	adiw	r26, 0x08	; 8
    1b74:	8c 93       	st	X, r24
		++twi->bytesWritten;
    1b76:	85 89       	ldd	r24, Z+21	; 0x15
    1b78:	8f 5f       	subi	r24, 0xFF	; 255
    1b7a:	85 8b       	std	Z+21, r24	; 0x15
    1b7c:	0e c0       	rjmp	.+28     	; 0x1b9a <TWI_MasterWriteHandler+0x5e>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
    1b7e:	86 89       	ldd	r24, Z+22	; 0x16
    1b80:	82 17       	cp	r24, r18
    1b82:	28 f4       	brcc	.+10     	; 0x1b8e <TWI_MasterWriteHandler+0x52>
		uint8_t readAddress = twi->address | 0x01;
    1b84:	82 81       	ldd	r24, Z+2	; 0x02
    1b86:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MADDR = readAddress;
    1b88:	17 96       	adiw	r26, 0x07	; 7
    1b8a:	8c 93       	st	X, r24
    1b8c:	06 c0       	rjmp	.+12     	; 0x1b9a <TWI_MasterWriteHandler+0x5e>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MCTRLB = TWI_MCMD_STOP_gc;
    1b8e:	83 e0       	ldi	r24, 0x03	; 3
    1b90:	14 96       	adiw	r26, 0x04	; 4
    1b92:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result) //--done
{
	twi->result = result;
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    1b98:	17 8a       	std	Z+23, r1	; 0x17
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MCTRLB = TWI_MCMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
    1b9a:	df 91       	pop	r29
    1b9c:	cf 91       	pop	r28
    1b9e:	08 95       	ret

00001ba0 <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi) //--done
{
    1ba0:	fc 01       	movw	r30, r24
	//PORTB_OUTTGL = (1 << 4);
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
    1ba2:	86 89       	ldd	r24, Z+22	; 0x16
    1ba4:	88 30       	cpi	r24, 0x08	; 8
    1ba6:	70 f4       	brcc	.+28     	; 0x1bc4 <TWI_MasterReadHandler+0x24>
		uint8_t data = twi->interface->MDATA;
    1ba8:	a0 81       	ld	r26, Z
    1baa:	b1 81       	ldd	r27, Z+1	; 0x01
    1bac:	18 96       	adiw	r26, 0x08	; 8
    1bae:	8c 91       	ld	r24, X
		twi->readData[twi->bytesRead] = data; //--!
    1bb0:	96 89       	ldd	r25, Z+22	; 0x16
    1bb2:	df 01       	movw	r26, r30
    1bb4:	a9 0f       	add	r26, r25
    1bb6:	b1 1d       	adc	r27, r1
    1bb8:	1b 96       	adiw	r26, 0x0b	; 11
    1bba:	8c 93       	st	X, r24
		twi->bytesRead++;
    1bbc:	86 89       	ldd	r24, Z+22	; 0x16
    1bbe:	8f 5f       	subi	r24, 0xFF	; 255
    1bc0:	86 8b       	std	Z+22, r24	; 0x16
    1bc2:	08 c0       	rjmp	.+16     	; 0x1bd4 <TWI_MasterReadHandler+0x34>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MCTRLB = TWI_MCMD_STOP_gc;
    1bc4:	a0 81       	ld	r26, Z
    1bc6:	b1 81       	ldd	r27, Z+1	; 0x01
    1bc8:	83 e0       	ldi	r24, 0x03	; 3
    1bca:	14 96       	adiw	r26, 0x04	; 4
    1bcc:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result) //--done
{
	twi->result = result;
    1bce:	82 e0       	ldi	r24, 0x02	; 2
    1bd0:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    1bd2:	17 8a       	std	Z+23, r1	; 0x17
		twi->interface->MCTRLB = TWI_MCMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
    1bd4:	94 89       	ldd	r25, Z+20	; 0x14

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
    1bd6:	86 89       	ldd	r24, Z+22	; 0x16
    1bd8:	89 17       	cp	r24, r25
    1bda:	30 f4       	brcc	.+12     	; 0x1be8 <TWI_MasterReadHandler+0x48>
		twi->interface->MCTRLB = TWI_MCMD_RECVTRANS_gc;
    1bdc:	01 90       	ld	r0, Z+
    1bde:	f0 81       	ld	r31, Z
    1be0:	e0 2d       	mov	r30, r0
    1be2:	82 e0       	ldi	r24, 0x02	; 2
    1be4:	84 83       	std	Z+4, r24	; 0x04
    1be6:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MCTRLB = TWI_ACKACT_bm |
    1be8:	a0 81       	ld	r26, Z
    1bea:	b1 81       	ldd	r27, Z+1	; 0x01
    1bec:	87 e0       	ldi	r24, 0x07	; 7
    1bee:	14 96       	adiw	r26, 0x04	; 4
    1bf0:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result) //--done
{
	twi->result = result;
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    1bf6:	17 8a       	std	Z+23, r1	; 0x17
    1bf8:	08 95       	ret

00001bfa <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi) //--done
{
	uint8_t currentStatus = twi->interface->MSTATUS;
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	ed 91       	ld	r30, X+
    1bfe:	fc 91       	ld	r31, X
    1c00:	25 81       	ldd	r18, Z+5	; 0x05

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_ARBLOST_bm) ||
    1c02:	32 2f       	mov	r19, r18
    1c04:	3c 70       	andi	r19, 0x0C	; 12
    1c06:	19 f0       	breq	.+6      	; 0x1c0e <TWI_MasterInterruptHandler+0x14>
	    (currentStatus & TWI_BUSERR_bm)) {
		TWI_MasterArbitrationLostBusErrorHandler(twi);
    1c08:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <TWI_MasterArbitrationLostBusErrorHandler>
    1c0c:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_WIF_bm) {
    1c0e:	26 ff       	sbrs	r18, 6
    1c10:	03 c0       	rjmp	.+6      	; 0x1c18 <TWI_MasterInterruptHandler+0x1e>
		TWI_MasterWriteHandler(twi);
    1c12:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <TWI_MasterWriteHandler>
    1c16:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_RIF_bm) {
    1c18:	22 23       	and	r18, r18
    1c1a:	1c f4       	brge	.+6      	; 0x1c22 <TWI_MasterInterruptHandler+0x28>
		TWI_MasterReadHandler(twi);
    1c1c:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <TWI_MasterReadHandler>
    1c20:	08 95       	ret
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result) //--done
{
	twi->result = result;
    1c22:	26 e0       	ldi	r18, 0x06	; 6
    1c24:	fc 01       	movw	r30, r24
    1c26:	20 8f       	std	Z+24, r18	; 0x18
	twi->status = TWIM_STATUS_READY;
    1c28:	17 8a       	std	Z+23, r1	; 0x17
    1c2a:	08 95       	ret

00001c2c <__subsf3>:
    1c2c:	50 58       	subi	r21, 0x80	; 128

00001c2e <__addsf3>:
    1c2e:	bb 27       	eor	r27, r27
    1c30:	aa 27       	eor	r26, r26
    1c32:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <__addsf3x>
    1c36:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__fp_round>
    1c3a:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fp_pscA>
    1c3e:	38 f0       	brcs	.+14     	; 0x1c4e <__addsf3+0x20>
    1c40:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__fp_pscB>
    1c44:	20 f0       	brcs	.+8      	; 0x1c4e <__addsf3+0x20>
    1c46:	39 f4       	brne	.+14     	; 0x1c56 <__addsf3+0x28>
    1c48:	9f 3f       	cpi	r25, 0xFF	; 255
    1c4a:	19 f4       	brne	.+6      	; 0x1c52 <__addsf3+0x24>
    1c4c:	26 f4       	brtc	.+8      	; 0x1c56 <__addsf3+0x28>
    1c4e:	0c 94 6e 0f 	jmp	0x1edc	; 0x1edc <__fp_nan>
    1c52:	0e f4       	brtc	.+2      	; 0x1c56 <__addsf3+0x28>
    1c54:	e0 95       	com	r30
    1c56:	e7 fb       	bst	r30, 7
    1c58:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <__fp_inf>

00001c5c <__addsf3x>:
    1c5c:	e9 2f       	mov	r30, r25
    1c5e:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__fp_split3>
    1c62:	58 f3       	brcs	.-42     	; 0x1c3a <__addsf3+0xc>
    1c64:	ba 17       	cp	r27, r26
    1c66:	62 07       	cpc	r22, r18
    1c68:	73 07       	cpc	r23, r19
    1c6a:	84 07       	cpc	r24, r20
    1c6c:	95 07       	cpc	r25, r21
    1c6e:	20 f0       	brcs	.+8      	; 0x1c78 <__addsf3x+0x1c>
    1c70:	79 f4       	brne	.+30     	; 0x1c90 <__addsf3x+0x34>
    1c72:	a6 f5       	brtc	.+104    	; 0x1cdc <__addsf3x+0x80>
    1c74:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <__fp_zero>
    1c78:	0e f4       	brtc	.+2      	; 0x1c7c <__addsf3x+0x20>
    1c7a:	e0 95       	com	r30
    1c7c:	0b 2e       	mov	r0, r27
    1c7e:	ba 2f       	mov	r27, r26
    1c80:	a0 2d       	mov	r26, r0
    1c82:	0b 01       	movw	r0, r22
    1c84:	b9 01       	movw	r22, r18
    1c86:	90 01       	movw	r18, r0
    1c88:	0c 01       	movw	r0, r24
    1c8a:	ca 01       	movw	r24, r20
    1c8c:	a0 01       	movw	r20, r0
    1c8e:	11 24       	eor	r1, r1
    1c90:	ff 27       	eor	r31, r31
    1c92:	59 1b       	sub	r21, r25
    1c94:	99 f0       	breq	.+38     	; 0x1cbc <__addsf3x+0x60>
    1c96:	59 3f       	cpi	r21, 0xF9	; 249
    1c98:	50 f4       	brcc	.+20     	; 0x1cae <__addsf3x+0x52>
    1c9a:	50 3e       	cpi	r21, 0xE0	; 224
    1c9c:	68 f1       	brcs	.+90     	; 0x1cf8 <__addsf3x+0x9c>
    1c9e:	1a 16       	cp	r1, r26
    1ca0:	f0 40       	sbci	r31, 0x00	; 0
    1ca2:	a2 2f       	mov	r26, r18
    1ca4:	23 2f       	mov	r18, r19
    1ca6:	34 2f       	mov	r19, r20
    1ca8:	44 27       	eor	r20, r20
    1caa:	58 5f       	subi	r21, 0xF8	; 248
    1cac:	f3 cf       	rjmp	.-26     	; 0x1c94 <__addsf3x+0x38>
    1cae:	46 95       	lsr	r20
    1cb0:	37 95       	ror	r19
    1cb2:	27 95       	ror	r18
    1cb4:	a7 95       	ror	r26
    1cb6:	f0 40       	sbci	r31, 0x00	; 0
    1cb8:	53 95       	inc	r21
    1cba:	c9 f7       	brne	.-14     	; 0x1cae <__addsf3x+0x52>
    1cbc:	7e f4       	brtc	.+30     	; 0x1cdc <__addsf3x+0x80>
    1cbe:	1f 16       	cp	r1, r31
    1cc0:	ba 0b       	sbc	r27, r26
    1cc2:	62 0b       	sbc	r22, r18
    1cc4:	73 0b       	sbc	r23, r19
    1cc6:	84 0b       	sbc	r24, r20
    1cc8:	ba f0       	brmi	.+46     	; 0x1cf8 <__addsf3x+0x9c>
    1cca:	91 50       	subi	r25, 0x01	; 1
    1ccc:	a1 f0       	breq	.+40     	; 0x1cf6 <__addsf3x+0x9a>
    1cce:	ff 0f       	add	r31, r31
    1cd0:	bb 1f       	adc	r27, r27
    1cd2:	66 1f       	adc	r22, r22
    1cd4:	77 1f       	adc	r23, r23
    1cd6:	88 1f       	adc	r24, r24
    1cd8:	c2 f7       	brpl	.-16     	; 0x1cca <__addsf3x+0x6e>
    1cda:	0e c0       	rjmp	.+28     	; 0x1cf8 <__addsf3x+0x9c>
    1cdc:	ba 0f       	add	r27, r26
    1cde:	62 1f       	adc	r22, r18
    1ce0:	73 1f       	adc	r23, r19
    1ce2:	84 1f       	adc	r24, r20
    1ce4:	48 f4       	brcc	.+18     	; 0x1cf8 <__addsf3x+0x9c>
    1ce6:	87 95       	ror	r24
    1ce8:	77 95       	ror	r23
    1cea:	67 95       	ror	r22
    1cec:	b7 95       	ror	r27
    1cee:	f7 95       	ror	r31
    1cf0:	9e 3f       	cpi	r25, 0xFE	; 254
    1cf2:	08 f0       	brcs	.+2      	; 0x1cf6 <__addsf3x+0x9a>
    1cf4:	b0 cf       	rjmp	.-160    	; 0x1c56 <__addsf3+0x28>
    1cf6:	93 95       	inc	r25
    1cf8:	88 0f       	add	r24, r24
    1cfa:	08 f0       	brcs	.+2      	; 0x1cfe <__addsf3x+0xa2>
    1cfc:	99 27       	eor	r25, r25
    1cfe:	ee 0f       	add	r30, r30
    1d00:	97 95       	ror	r25
    1d02:	87 95       	ror	r24
    1d04:	08 95       	ret

00001d06 <__divsf3>:
    1d06:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__divsf3x>
    1d0a:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__fp_round>
    1d0e:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__fp_pscB>
    1d12:	58 f0       	brcs	.+22     	; 0x1d2a <__divsf3+0x24>
    1d14:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fp_pscA>
    1d18:	40 f0       	brcs	.+16     	; 0x1d2a <__divsf3+0x24>
    1d1a:	29 f4       	brne	.+10     	; 0x1d26 <__divsf3+0x20>
    1d1c:	5f 3f       	cpi	r21, 0xFF	; 255
    1d1e:	29 f0       	breq	.+10     	; 0x1d2a <__divsf3+0x24>
    1d20:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <__fp_inf>
    1d24:	51 11       	cpse	r21, r1
    1d26:	0c 94 b3 0f 	jmp	0x1f66	; 0x1f66 <__fp_szero>
    1d2a:	0c 94 6e 0f 	jmp	0x1edc	; 0x1edc <__fp_nan>

00001d2e <__divsf3x>:
    1d2e:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__fp_split3>
    1d32:	68 f3       	brcs	.-38     	; 0x1d0e <__divsf3+0x8>

00001d34 <__divsf3_pse>:
    1d34:	99 23       	and	r25, r25
    1d36:	b1 f3       	breq	.-20     	; 0x1d24 <__divsf3+0x1e>
    1d38:	55 23       	and	r21, r21
    1d3a:	91 f3       	breq	.-28     	; 0x1d20 <__divsf3+0x1a>
    1d3c:	95 1b       	sub	r25, r21
    1d3e:	55 0b       	sbc	r21, r21
    1d40:	bb 27       	eor	r27, r27
    1d42:	aa 27       	eor	r26, r26
    1d44:	62 17       	cp	r22, r18
    1d46:	73 07       	cpc	r23, r19
    1d48:	84 07       	cpc	r24, r20
    1d4a:	38 f0       	brcs	.+14     	; 0x1d5a <__divsf3_pse+0x26>
    1d4c:	9f 5f       	subi	r25, 0xFF	; 255
    1d4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d50:	22 0f       	add	r18, r18
    1d52:	33 1f       	adc	r19, r19
    1d54:	44 1f       	adc	r20, r20
    1d56:	aa 1f       	adc	r26, r26
    1d58:	a9 f3       	breq	.-22     	; 0x1d44 <__divsf3_pse+0x10>
    1d5a:	35 d0       	rcall	.+106    	; 0x1dc6 <__divsf3_pse+0x92>
    1d5c:	0e 2e       	mov	r0, r30
    1d5e:	3a f0       	brmi	.+14     	; 0x1d6e <__divsf3_pse+0x3a>
    1d60:	e0 e8       	ldi	r30, 0x80	; 128
    1d62:	32 d0       	rcall	.+100    	; 0x1dc8 <__divsf3_pse+0x94>
    1d64:	91 50       	subi	r25, 0x01	; 1
    1d66:	50 40       	sbci	r21, 0x00	; 0
    1d68:	e6 95       	lsr	r30
    1d6a:	00 1c       	adc	r0, r0
    1d6c:	ca f7       	brpl	.-14     	; 0x1d60 <__divsf3_pse+0x2c>
    1d6e:	2b d0       	rcall	.+86     	; 0x1dc6 <__divsf3_pse+0x92>
    1d70:	fe 2f       	mov	r31, r30
    1d72:	29 d0       	rcall	.+82     	; 0x1dc6 <__divsf3_pse+0x92>
    1d74:	66 0f       	add	r22, r22
    1d76:	77 1f       	adc	r23, r23
    1d78:	88 1f       	adc	r24, r24
    1d7a:	bb 1f       	adc	r27, r27
    1d7c:	26 17       	cp	r18, r22
    1d7e:	37 07       	cpc	r19, r23
    1d80:	48 07       	cpc	r20, r24
    1d82:	ab 07       	cpc	r26, r27
    1d84:	b0 e8       	ldi	r27, 0x80	; 128
    1d86:	09 f0       	breq	.+2      	; 0x1d8a <__divsf3_pse+0x56>
    1d88:	bb 0b       	sbc	r27, r27
    1d8a:	80 2d       	mov	r24, r0
    1d8c:	bf 01       	movw	r22, r30
    1d8e:	ff 27       	eor	r31, r31
    1d90:	93 58       	subi	r25, 0x83	; 131
    1d92:	5f 4f       	sbci	r21, 0xFF	; 255
    1d94:	3a f0       	brmi	.+14     	; 0x1da4 <__divsf3_pse+0x70>
    1d96:	9e 3f       	cpi	r25, 0xFE	; 254
    1d98:	51 05       	cpc	r21, r1
    1d9a:	78 f0       	brcs	.+30     	; 0x1dba <__divsf3_pse+0x86>
    1d9c:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <__fp_inf>
    1da0:	0c 94 b3 0f 	jmp	0x1f66	; 0x1f66 <__fp_szero>
    1da4:	5f 3f       	cpi	r21, 0xFF	; 255
    1da6:	e4 f3       	brlt	.-8      	; 0x1da0 <__divsf3_pse+0x6c>
    1da8:	98 3e       	cpi	r25, 0xE8	; 232
    1daa:	d4 f3       	brlt	.-12     	; 0x1da0 <__divsf3_pse+0x6c>
    1dac:	86 95       	lsr	r24
    1dae:	77 95       	ror	r23
    1db0:	67 95       	ror	r22
    1db2:	b7 95       	ror	r27
    1db4:	f7 95       	ror	r31
    1db6:	9f 5f       	subi	r25, 0xFF	; 255
    1db8:	c9 f7       	brne	.-14     	; 0x1dac <__divsf3_pse+0x78>
    1dba:	88 0f       	add	r24, r24
    1dbc:	91 1d       	adc	r25, r1
    1dbe:	96 95       	lsr	r25
    1dc0:	87 95       	ror	r24
    1dc2:	97 f9       	bld	r25, 7
    1dc4:	08 95       	ret
    1dc6:	e1 e0       	ldi	r30, 0x01	; 1
    1dc8:	66 0f       	add	r22, r22
    1dca:	77 1f       	adc	r23, r23
    1dcc:	88 1f       	adc	r24, r24
    1dce:	bb 1f       	adc	r27, r27
    1dd0:	62 17       	cp	r22, r18
    1dd2:	73 07       	cpc	r23, r19
    1dd4:	84 07       	cpc	r24, r20
    1dd6:	ba 07       	cpc	r27, r26
    1dd8:	20 f0       	brcs	.+8      	; 0x1de2 <__divsf3_pse+0xae>
    1dda:	62 1b       	sub	r22, r18
    1ddc:	73 0b       	sbc	r23, r19
    1dde:	84 0b       	sbc	r24, r20
    1de0:	ba 0b       	sbc	r27, r26
    1de2:	ee 1f       	adc	r30, r30
    1de4:	88 f7       	brcc	.-30     	; 0x1dc8 <__divsf3_pse+0x94>
    1de6:	e0 95       	com	r30
    1de8:	08 95       	ret

00001dea <__fixsfsi>:
    1dea:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__fixunssfsi>
    1dee:	68 94       	set
    1df0:	b1 11       	cpse	r27, r1
    1df2:	0c 94 b3 0f 	jmp	0x1f66	; 0x1f66 <__fp_szero>
    1df6:	08 95       	ret

00001df8 <__fixunssfsi>:
    1df8:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__fp_splitA>
    1dfc:	88 f0       	brcs	.+34     	; 0x1e20 <__fixunssfsi+0x28>
    1dfe:	9f 57       	subi	r25, 0x7F	; 127
    1e00:	98 f0       	brcs	.+38     	; 0x1e28 <__fixunssfsi+0x30>
    1e02:	b9 2f       	mov	r27, r25
    1e04:	99 27       	eor	r25, r25
    1e06:	b7 51       	subi	r27, 0x17	; 23
    1e08:	b0 f0       	brcs	.+44     	; 0x1e36 <__fixunssfsi+0x3e>
    1e0a:	e1 f0       	breq	.+56     	; 0x1e44 <__fixunssfsi+0x4c>
    1e0c:	66 0f       	add	r22, r22
    1e0e:	77 1f       	adc	r23, r23
    1e10:	88 1f       	adc	r24, r24
    1e12:	99 1f       	adc	r25, r25
    1e14:	1a f0       	brmi	.+6      	; 0x1e1c <__fixunssfsi+0x24>
    1e16:	ba 95       	dec	r27
    1e18:	c9 f7       	brne	.-14     	; 0x1e0c <__fixunssfsi+0x14>
    1e1a:	14 c0       	rjmp	.+40     	; 0x1e44 <__fixunssfsi+0x4c>
    1e1c:	b1 30       	cpi	r27, 0x01	; 1
    1e1e:	91 f0       	breq	.+36     	; 0x1e44 <__fixunssfsi+0x4c>
    1e20:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__fp_zero>
    1e24:	b1 e0       	ldi	r27, 0x01	; 1
    1e26:	08 95       	ret
    1e28:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <__fp_zero>
    1e2c:	67 2f       	mov	r22, r23
    1e2e:	78 2f       	mov	r23, r24
    1e30:	88 27       	eor	r24, r24
    1e32:	b8 5f       	subi	r27, 0xF8	; 248
    1e34:	39 f0       	breq	.+14     	; 0x1e44 <__fixunssfsi+0x4c>
    1e36:	b9 3f       	cpi	r27, 0xF9	; 249
    1e38:	cc f3       	brlt	.-14     	; 0x1e2c <__fixunssfsi+0x34>
    1e3a:	86 95       	lsr	r24
    1e3c:	77 95       	ror	r23
    1e3e:	67 95       	ror	r22
    1e40:	b3 95       	inc	r27
    1e42:	d9 f7       	brne	.-10     	; 0x1e3a <__fixunssfsi+0x42>
    1e44:	3e f4       	brtc	.+14     	; 0x1e54 <__fixunssfsi+0x5c>
    1e46:	90 95       	com	r25
    1e48:	80 95       	com	r24
    1e4a:	70 95       	com	r23
    1e4c:	61 95       	neg	r22
    1e4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e50:	8f 4f       	sbci	r24, 0xFF	; 255
    1e52:	9f 4f       	sbci	r25, 0xFF	; 255
    1e54:	08 95       	ret

00001e56 <__floatunsisf>:
    1e56:	e8 94       	clt
    1e58:	09 c0       	rjmp	.+18     	; 0x1e6c <__floatsisf+0x12>

00001e5a <__floatsisf>:
    1e5a:	97 fb       	bst	r25, 7
    1e5c:	3e f4       	brtc	.+14     	; 0x1e6c <__floatsisf+0x12>
    1e5e:	90 95       	com	r25
    1e60:	80 95       	com	r24
    1e62:	70 95       	com	r23
    1e64:	61 95       	neg	r22
    1e66:	7f 4f       	sbci	r23, 0xFF	; 255
    1e68:	8f 4f       	sbci	r24, 0xFF	; 255
    1e6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e6c:	99 23       	and	r25, r25
    1e6e:	a9 f0       	breq	.+42     	; 0x1e9a <__floatsisf+0x40>
    1e70:	f9 2f       	mov	r31, r25
    1e72:	96 e9       	ldi	r25, 0x96	; 150
    1e74:	bb 27       	eor	r27, r27
    1e76:	93 95       	inc	r25
    1e78:	f6 95       	lsr	r31
    1e7a:	87 95       	ror	r24
    1e7c:	77 95       	ror	r23
    1e7e:	67 95       	ror	r22
    1e80:	b7 95       	ror	r27
    1e82:	f1 11       	cpse	r31, r1
    1e84:	f8 cf       	rjmp	.-16     	; 0x1e76 <__floatsisf+0x1c>
    1e86:	fa f4       	brpl	.+62     	; 0x1ec6 <__floatsisf+0x6c>
    1e88:	bb 0f       	add	r27, r27
    1e8a:	11 f4       	brne	.+4      	; 0x1e90 <__floatsisf+0x36>
    1e8c:	60 ff       	sbrs	r22, 0
    1e8e:	1b c0       	rjmp	.+54     	; 0x1ec6 <__floatsisf+0x6c>
    1e90:	6f 5f       	subi	r22, 0xFF	; 255
    1e92:	7f 4f       	sbci	r23, 0xFF	; 255
    1e94:	8f 4f       	sbci	r24, 0xFF	; 255
    1e96:	9f 4f       	sbci	r25, 0xFF	; 255
    1e98:	16 c0       	rjmp	.+44     	; 0x1ec6 <__floatsisf+0x6c>
    1e9a:	88 23       	and	r24, r24
    1e9c:	11 f0       	breq	.+4      	; 0x1ea2 <__floatsisf+0x48>
    1e9e:	96 e9       	ldi	r25, 0x96	; 150
    1ea0:	11 c0       	rjmp	.+34     	; 0x1ec4 <__floatsisf+0x6a>
    1ea2:	77 23       	and	r23, r23
    1ea4:	21 f0       	breq	.+8      	; 0x1eae <__floatsisf+0x54>
    1ea6:	9e e8       	ldi	r25, 0x8E	; 142
    1ea8:	87 2f       	mov	r24, r23
    1eaa:	76 2f       	mov	r23, r22
    1eac:	05 c0       	rjmp	.+10     	; 0x1eb8 <__floatsisf+0x5e>
    1eae:	66 23       	and	r22, r22
    1eb0:	71 f0       	breq	.+28     	; 0x1ece <__floatsisf+0x74>
    1eb2:	96 e8       	ldi	r25, 0x86	; 134
    1eb4:	86 2f       	mov	r24, r22
    1eb6:	70 e0       	ldi	r23, 0x00	; 0
    1eb8:	60 e0       	ldi	r22, 0x00	; 0
    1eba:	2a f0       	brmi	.+10     	; 0x1ec6 <__floatsisf+0x6c>
    1ebc:	9a 95       	dec	r25
    1ebe:	66 0f       	add	r22, r22
    1ec0:	77 1f       	adc	r23, r23
    1ec2:	88 1f       	adc	r24, r24
    1ec4:	da f7       	brpl	.-10     	; 0x1ebc <__floatsisf+0x62>
    1ec6:	88 0f       	add	r24, r24
    1ec8:	96 95       	lsr	r25
    1eca:	87 95       	ror	r24
    1ecc:	97 f9       	bld	r25, 7
    1ece:	08 95       	ret

00001ed0 <__fp_inf>:
    1ed0:	97 f9       	bld	r25, 7
    1ed2:	9f 67       	ori	r25, 0x7F	; 127
    1ed4:	80 e8       	ldi	r24, 0x80	; 128
    1ed6:	70 e0       	ldi	r23, 0x00	; 0
    1ed8:	60 e0       	ldi	r22, 0x00	; 0
    1eda:	08 95       	ret

00001edc <__fp_nan>:
    1edc:	9f ef       	ldi	r25, 0xFF	; 255
    1ede:	80 ec       	ldi	r24, 0xC0	; 192
    1ee0:	08 95       	ret

00001ee2 <__fp_pscA>:
    1ee2:	00 24       	eor	r0, r0
    1ee4:	0a 94       	dec	r0
    1ee6:	16 16       	cp	r1, r22
    1ee8:	17 06       	cpc	r1, r23
    1eea:	18 06       	cpc	r1, r24
    1eec:	09 06       	cpc	r0, r25
    1eee:	08 95       	ret

00001ef0 <__fp_pscB>:
    1ef0:	00 24       	eor	r0, r0
    1ef2:	0a 94       	dec	r0
    1ef4:	12 16       	cp	r1, r18
    1ef6:	13 06       	cpc	r1, r19
    1ef8:	14 06       	cpc	r1, r20
    1efa:	05 06       	cpc	r0, r21
    1efc:	08 95       	ret

00001efe <__fp_round>:
    1efe:	09 2e       	mov	r0, r25
    1f00:	03 94       	inc	r0
    1f02:	00 0c       	add	r0, r0
    1f04:	11 f4       	brne	.+4      	; 0x1f0a <__fp_round+0xc>
    1f06:	88 23       	and	r24, r24
    1f08:	52 f0       	brmi	.+20     	; 0x1f1e <__fp_round+0x20>
    1f0a:	bb 0f       	add	r27, r27
    1f0c:	40 f4       	brcc	.+16     	; 0x1f1e <__fp_round+0x20>
    1f0e:	bf 2b       	or	r27, r31
    1f10:	11 f4       	brne	.+4      	; 0x1f16 <__fp_round+0x18>
    1f12:	60 ff       	sbrs	r22, 0
    1f14:	04 c0       	rjmp	.+8      	; 0x1f1e <__fp_round+0x20>
    1f16:	6f 5f       	subi	r22, 0xFF	; 255
    1f18:	7f 4f       	sbci	r23, 0xFF	; 255
    1f1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f1e:	08 95       	ret

00001f20 <__fp_split3>:
    1f20:	57 fd       	sbrc	r21, 7
    1f22:	90 58       	subi	r25, 0x80	; 128
    1f24:	44 0f       	add	r20, r20
    1f26:	55 1f       	adc	r21, r21
    1f28:	59 f0       	breq	.+22     	; 0x1f40 <__fp_splitA+0x10>
    1f2a:	5f 3f       	cpi	r21, 0xFF	; 255
    1f2c:	71 f0       	breq	.+28     	; 0x1f4a <__fp_splitA+0x1a>
    1f2e:	47 95       	ror	r20

00001f30 <__fp_splitA>:
    1f30:	88 0f       	add	r24, r24
    1f32:	97 fb       	bst	r25, 7
    1f34:	99 1f       	adc	r25, r25
    1f36:	61 f0       	breq	.+24     	; 0x1f50 <__fp_splitA+0x20>
    1f38:	9f 3f       	cpi	r25, 0xFF	; 255
    1f3a:	79 f0       	breq	.+30     	; 0x1f5a <__fp_splitA+0x2a>
    1f3c:	87 95       	ror	r24
    1f3e:	08 95       	ret
    1f40:	12 16       	cp	r1, r18
    1f42:	13 06       	cpc	r1, r19
    1f44:	14 06       	cpc	r1, r20
    1f46:	55 1f       	adc	r21, r21
    1f48:	f2 cf       	rjmp	.-28     	; 0x1f2e <__fp_split3+0xe>
    1f4a:	46 95       	lsr	r20
    1f4c:	f1 df       	rcall	.-30     	; 0x1f30 <__fp_splitA>
    1f4e:	08 c0       	rjmp	.+16     	; 0x1f60 <__fp_splitA+0x30>
    1f50:	16 16       	cp	r1, r22
    1f52:	17 06       	cpc	r1, r23
    1f54:	18 06       	cpc	r1, r24
    1f56:	99 1f       	adc	r25, r25
    1f58:	f1 cf       	rjmp	.-30     	; 0x1f3c <__fp_splitA+0xc>
    1f5a:	86 95       	lsr	r24
    1f5c:	71 05       	cpc	r23, r1
    1f5e:	61 05       	cpc	r22, r1
    1f60:	08 94       	sec
    1f62:	08 95       	ret

00001f64 <__fp_zero>:
    1f64:	e8 94       	clt

00001f66 <__fp_szero>:
    1f66:	bb 27       	eor	r27, r27
    1f68:	66 27       	eor	r22, r22
    1f6a:	77 27       	eor	r23, r23
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	97 f9       	bld	r25, 7
    1f70:	08 95       	ret

00001f72 <__mulsf3>:
    1f72:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <__mulsf3x>
    1f76:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__fp_round>
    1f7a:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__fp_pscA>
    1f7e:	38 f0       	brcs	.+14     	; 0x1f8e <__mulsf3+0x1c>
    1f80:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__fp_pscB>
    1f84:	20 f0       	brcs	.+8      	; 0x1f8e <__mulsf3+0x1c>
    1f86:	95 23       	and	r25, r21
    1f88:	11 f0       	breq	.+4      	; 0x1f8e <__mulsf3+0x1c>
    1f8a:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <__fp_inf>
    1f8e:	0c 94 6e 0f 	jmp	0x1edc	; 0x1edc <__fp_nan>
    1f92:	11 24       	eor	r1, r1
    1f94:	0c 94 b3 0f 	jmp	0x1f66	; 0x1f66 <__fp_szero>

00001f98 <__mulsf3x>:
    1f98:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__fp_split3>
    1f9c:	70 f3       	brcs	.-36     	; 0x1f7a <__mulsf3+0x8>

00001f9e <__mulsf3_pse>:
    1f9e:	95 9f       	mul	r25, r21
    1fa0:	c1 f3       	breq	.-16     	; 0x1f92 <__mulsf3+0x20>
    1fa2:	95 0f       	add	r25, r21
    1fa4:	50 e0       	ldi	r21, 0x00	; 0
    1fa6:	55 1f       	adc	r21, r21
    1fa8:	62 9f       	mul	r22, r18
    1faa:	f0 01       	movw	r30, r0
    1fac:	72 9f       	mul	r23, r18
    1fae:	bb 27       	eor	r27, r27
    1fb0:	f0 0d       	add	r31, r0
    1fb2:	b1 1d       	adc	r27, r1
    1fb4:	63 9f       	mul	r22, r19
    1fb6:	aa 27       	eor	r26, r26
    1fb8:	f0 0d       	add	r31, r0
    1fba:	b1 1d       	adc	r27, r1
    1fbc:	aa 1f       	adc	r26, r26
    1fbe:	64 9f       	mul	r22, r20
    1fc0:	66 27       	eor	r22, r22
    1fc2:	b0 0d       	add	r27, r0
    1fc4:	a1 1d       	adc	r26, r1
    1fc6:	66 1f       	adc	r22, r22
    1fc8:	82 9f       	mul	r24, r18
    1fca:	22 27       	eor	r18, r18
    1fcc:	b0 0d       	add	r27, r0
    1fce:	a1 1d       	adc	r26, r1
    1fd0:	62 1f       	adc	r22, r18
    1fd2:	73 9f       	mul	r23, r19
    1fd4:	b0 0d       	add	r27, r0
    1fd6:	a1 1d       	adc	r26, r1
    1fd8:	62 1f       	adc	r22, r18
    1fda:	83 9f       	mul	r24, r19
    1fdc:	a0 0d       	add	r26, r0
    1fde:	61 1d       	adc	r22, r1
    1fe0:	22 1f       	adc	r18, r18
    1fe2:	74 9f       	mul	r23, r20
    1fe4:	33 27       	eor	r19, r19
    1fe6:	a0 0d       	add	r26, r0
    1fe8:	61 1d       	adc	r22, r1
    1fea:	23 1f       	adc	r18, r19
    1fec:	84 9f       	mul	r24, r20
    1fee:	60 0d       	add	r22, r0
    1ff0:	21 1d       	adc	r18, r1
    1ff2:	82 2f       	mov	r24, r18
    1ff4:	76 2f       	mov	r23, r22
    1ff6:	6a 2f       	mov	r22, r26
    1ff8:	11 24       	eor	r1, r1
    1ffa:	9f 57       	subi	r25, 0x7F	; 127
    1ffc:	50 40       	sbci	r21, 0x00	; 0
    1ffe:	9a f0       	brmi	.+38     	; 0x2026 <__mulsf3_pse+0x88>
    2000:	f1 f0       	breq	.+60     	; 0x203e <__mulsf3_pse+0xa0>
    2002:	88 23       	and	r24, r24
    2004:	4a f0       	brmi	.+18     	; 0x2018 <__mulsf3_pse+0x7a>
    2006:	ee 0f       	add	r30, r30
    2008:	ff 1f       	adc	r31, r31
    200a:	bb 1f       	adc	r27, r27
    200c:	66 1f       	adc	r22, r22
    200e:	77 1f       	adc	r23, r23
    2010:	88 1f       	adc	r24, r24
    2012:	91 50       	subi	r25, 0x01	; 1
    2014:	50 40       	sbci	r21, 0x00	; 0
    2016:	a9 f7       	brne	.-22     	; 0x2002 <__mulsf3_pse+0x64>
    2018:	9e 3f       	cpi	r25, 0xFE	; 254
    201a:	51 05       	cpc	r21, r1
    201c:	80 f0       	brcs	.+32     	; 0x203e <__mulsf3_pse+0xa0>
    201e:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <__fp_inf>
    2022:	0c 94 b3 0f 	jmp	0x1f66	; 0x1f66 <__fp_szero>
    2026:	5f 3f       	cpi	r21, 0xFF	; 255
    2028:	e4 f3       	brlt	.-8      	; 0x2022 <__mulsf3_pse+0x84>
    202a:	98 3e       	cpi	r25, 0xE8	; 232
    202c:	d4 f3       	brlt	.-12     	; 0x2022 <__mulsf3_pse+0x84>
    202e:	86 95       	lsr	r24
    2030:	77 95       	ror	r23
    2032:	67 95       	ror	r22
    2034:	b7 95       	ror	r27
    2036:	f7 95       	ror	r31
    2038:	e7 95       	ror	r30
    203a:	9f 5f       	subi	r25, 0xFF	; 255
    203c:	c1 f7       	brne	.-16     	; 0x202e <__mulsf3_pse+0x90>
    203e:	fe 2b       	or	r31, r30
    2040:	88 0f       	add	r24, r24
    2042:	91 1d       	adc	r25, r1
    2044:	96 95       	lsr	r25
    2046:	87 95       	ror	r24
    2048:	97 f9       	bld	r25, 7
    204a:	08 95       	ret

0000204c <__udivmodsi4>:
    204c:	a1 e2       	ldi	r26, 0x21	; 33
    204e:	1a 2e       	mov	r1, r26
    2050:	aa 1b       	sub	r26, r26
    2052:	bb 1b       	sub	r27, r27
    2054:	fd 01       	movw	r30, r26
    2056:	0d c0       	rjmp	.+26     	; 0x2072 <__udivmodsi4_ep>

00002058 <__udivmodsi4_loop>:
    2058:	aa 1f       	adc	r26, r26
    205a:	bb 1f       	adc	r27, r27
    205c:	ee 1f       	adc	r30, r30
    205e:	ff 1f       	adc	r31, r31
    2060:	a2 17       	cp	r26, r18
    2062:	b3 07       	cpc	r27, r19
    2064:	e4 07       	cpc	r30, r20
    2066:	f5 07       	cpc	r31, r21
    2068:	20 f0       	brcs	.+8      	; 0x2072 <__udivmodsi4_ep>
    206a:	a2 1b       	sub	r26, r18
    206c:	b3 0b       	sbc	r27, r19
    206e:	e4 0b       	sbc	r30, r20
    2070:	f5 0b       	sbc	r31, r21

00002072 <__udivmodsi4_ep>:
    2072:	66 1f       	adc	r22, r22
    2074:	77 1f       	adc	r23, r23
    2076:	88 1f       	adc	r24, r24
    2078:	99 1f       	adc	r25, r25
    207a:	1a 94       	dec	r1
    207c:	69 f7       	brne	.-38     	; 0x2058 <__udivmodsi4_loop>
    207e:	60 95       	com	r22
    2080:	70 95       	com	r23
    2082:	80 95       	com	r24
    2084:	90 95       	com	r25
    2086:	9b 01       	movw	r18, r22
    2088:	ac 01       	movw	r20, r24
    208a:	bd 01       	movw	r22, r26
    208c:	cf 01       	movw	r24, r30
    208e:	08 95       	ret

00002090 <__umulhisi3>:
    2090:	a2 9f       	mul	r26, r18
    2092:	b0 01       	movw	r22, r0
    2094:	b3 9f       	mul	r27, r19
    2096:	c0 01       	movw	r24, r0
    2098:	a3 9f       	mul	r26, r19
    209a:	70 0d       	add	r23, r0
    209c:	81 1d       	adc	r24, r1
    209e:	11 24       	eor	r1, r1
    20a0:	91 1d       	adc	r25, r1
    20a2:	b2 9f       	mul	r27, r18
    20a4:	70 0d       	add	r23, r0
    20a6:	81 1d       	adc	r24, r1
    20a8:	11 24       	eor	r1, r1
    20aa:	91 1d       	adc	r25, r1
    20ac:	08 95       	ret

000020ae <malloc>:
    20ae:	0f 93       	push	r16
    20b0:	1f 93       	push	r17
    20b2:	cf 93       	push	r28
    20b4:	df 93       	push	r29
    20b6:	82 30       	cpi	r24, 0x02	; 2
    20b8:	91 05       	cpc	r25, r1
    20ba:	10 f4       	brcc	.+4      	; 0x20c0 <malloc+0x12>
    20bc:	82 e0       	ldi	r24, 0x02	; 2
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	e0 91 e5 38 	lds	r30, 0x38E5	; 0x8038e5 <__flp>
    20c4:	f0 91 e6 38 	lds	r31, 0x38E6	; 0x8038e6 <__flp+0x1>
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	a0 e0       	ldi	r26, 0x00	; 0
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	30 97       	sbiw	r30, 0x00	; 0
    20d2:	19 f1       	breq	.+70     	; 0x211a <malloc+0x6c>
    20d4:	40 81       	ld	r20, Z
    20d6:	51 81       	ldd	r21, Z+1	; 0x01
    20d8:	02 81       	ldd	r16, Z+2	; 0x02
    20da:	13 81       	ldd	r17, Z+3	; 0x03
    20dc:	48 17       	cp	r20, r24
    20de:	59 07       	cpc	r21, r25
    20e0:	c8 f0       	brcs	.+50     	; 0x2114 <malloc+0x66>
    20e2:	84 17       	cp	r24, r20
    20e4:	95 07       	cpc	r25, r21
    20e6:	69 f4       	brne	.+26     	; 0x2102 <malloc+0x54>
    20e8:	10 97       	sbiw	r26, 0x00	; 0
    20ea:	31 f0       	breq	.+12     	; 0x20f8 <malloc+0x4a>
    20ec:	12 96       	adiw	r26, 0x02	; 2
    20ee:	0c 93       	st	X, r16
    20f0:	12 97       	sbiw	r26, 0x02	; 2
    20f2:	13 96       	adiw	r26, 0x03	; 3
    20f4:	1c 93       	st	X, r17
    20f6:	27 c0       	rjmp	.+78     	; 0x2146 <malloc+0x98>
    20f8:	00 93 e5 38 	sts	0x38E5, r16	; 0x8038e5 <__flp>
    20fc:	10 93 e6 38 	sts	0x38E6, r17	; 0x8038e6 <__flp+0x1>
    2100:	22 c0       	rjmp	.+68     	; 0x2146 <malloc+0x98>
    2102:	21 15       	cp	r18, r1
    2104:	31 05       	cpc	r19, r1
    2106:	19 f0       	breq	.+6      	; 0x210e <malloc+0x60>
    2108:	42 17       	cp	r20, r18
    210a:	53 07       	cpc	r21, r19
    210c:	18 f4       	brcc	.+6      	; 0x2114 <malloc+0x66>
    210e:	9a 01       	movw	r18, r20
    2110:	bd 01       	movw	r22, r26
    2112:	ef 01       	movw	r28, r30
    2114:	df 01       	movw	r26, r30
    2116:	f8 01       	movw	r30, r16
    2118:	db cf       	rjmp	.-74     	; 0x20d0 <malloc+0x22>
    211a:	21 15       	cp	r18, r1
    211c:	31 05       	cpc	r19, r1
    211e:	f9 f0       	breq	.+62     	; 0x215e <malloc+0xb0>
    2120:	28 1b       	sub	r18, r24
    2122:	39 0b       	sbc	r19, r25
    2124:	24 30       	cpi	r18, 0x04	; 4
    2126:	31 05       	cpc	r19, r1
    2128:	80 f4       	brcc	.+32     	; 0x214a <malloc+0x9c>
    212a:	8a 81       	ldd	r24, Y+2	; 0x02
    212c:	9b 81       	ldd	r25, Y+3	; 0x03
    212e:	61 15       	cp	r22, r1
    2130:	71 05       	cpc	r23, r1
    2132:	21 f0       	breq	.+8      	; 0x213c <malloc+0x8e>
    2134:	fb 01       	movw	r30, r22
    2136:	82 83       	std	Z+2, r24	; 0x02
    2138:	93 83       	std	Z+3, r25	; 0x03
    213a:	04 c0       	rjmp	.+8      	; 0x2144 <malloc+0x96>
    213c:	80 93 e5 38 	sts	0x38E5, r24	; 0x8038e5 <__flp>
    2140:	90 93 e6 38 	sts	0x38E6, r25	; 0x8038e6 <__flp+0x1>
    2144:	fe 01       	movw	r30, r28
    2146:	32 96       	adiw	r30, 0x02	; 2
    2148:	44 c0       	rjmp	.+136    	; 0x21d2 <malloc+0x124>
    214a:	fe 01       	movw	r30, r28
    214c:	e2 0f       	add	r30, r18
    214e:	f3 1f       	adc	r31, r19
    2150:	81 93       	st	Z+, r24
    2152:	91 93       	st	Z+, r25
    2154:	22 50       	subi	r18, 0x02	; 2
    2156:	31 09       	sbc	r19, r1
    2158:	28 83       	st	Y, r18
    215a:	39 83       	std	Y+1, r19	; 0x01
    215c:	3a c0       	rjmp	.+116    	; 0x21d2 <malloc+0x124>
    215e:	20 91 e3 38 	lds	r18, 0x38E3	; 0x8038e3 <__brkval>
    2162:	30 91 e4 38 	lds	r19, 0x38E4	; 0x8038e4 <__brkval+0x1>
    2166:	23 2b       	or	r18, r19
    2168:	41 f4       	brne	.+16     	; 0x217a <malloc+0xcc>
    216a:	20 91 02 38 	lds	r18, 0x3802	; 0x803802 <__malloc_heap_start>
    216e:	30 91 03 38 	lds	r19, 0x3803	; 0x803803 <__malloc_heap_start+0x1>
    2172:	20 93 e3 38 	sts	0x38E3, r18	; 0x8038e3 <__brkval>
    2176:	30 93 e4 38 	sts	0x38E4, r19	; 0x8038e4 <__brkval+0x1>
    217a:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__data_start>
    217e:	30 91 01 38 	lds	r19, 0x3801	; 0x803801 <__data_start+0x1>
    2182:	21 15       	cp	r18, r1
    2184:	31 05       	cpc	r19, r1
    2186:	41 f4       	brne	.+16     	; 0x2198 <malloc+0xea>
    2188:	2d b7       	in	r18, 0x3d	; 61
    218a:	3e b7       	in	r19, 0x3e	; 62
    218c:	40 91 04 38 	lds	r20, 0x3804	; 0x803804 <__malloc_margin>
    2190:	50 91 05 38 	lds	r21, 0x3805	; 0x803805 <__malloc_margin+0x1>
    2194:	24 1b       	sub	r18, r20
    2196:	35 0b       	sbc	r19, r21
    2198:	e0 91 e3 38 	lds	r30, 0x38E3	; 0x8038e3 <__brkval>
    219c:	f0 91 e4 38 	lds	r31, 0x38E4	; 0x8038e4 <__brkval+0x1>
    21a0:	e2 17       	cp	r30, r18
    21a2:	f3 07       	cpc	r31, r19
    21a4:	a0 f4       	brcc	.+40     	; 0x21ce <malloc+0x120>
    21a6:	2e 1b       	sub	r18, r30
    21a8:	3f 0b       	sbc	r19, r31
    21aa:	28 17       	cp	r18, r24
    21ac:	39 07       	cpc	r19, r25
    21ae:	78 f0       	brcs	.+30     	; 0x21ce <malloc+0x120>
    21b0:	ac 01       	movw	r20, r24
    21b2:	4e 5f       	subi	r20, 0xFE	; 254
    21b4:	5f 4f       	sbci	r21, 0xFF	; 255
    21b6:	24 17       	cp	r18, r20
    21b8:	35 07       	cpc	r19, r21
    21ba:	48 f0       	brcs	.+18     	; 0x21ce <malloc+0x120>
    21bc:	4e 0f       	add	r20, r30
    21be:	5f 1f       	adc	r21, r31
    21c0:	40 93 e3 38 	sts	0x38E3, r20	; 0x8038e3 <__brkval>
    21c4:	50 93 e4 38 	sts	0x38E4, r21	; 0x8038e4 <__brkval+0x1>
    21c8:	81 93       	st	Z+, r24
    21ca:	91 93       	st	Z+, r25
    21cc:	02 c0       	rjmp	.+4      	; 0x21d2 <malloc+0x124>
    21ce:	e0 e0       	ldi	r30, 0x00	; 0
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	cf 01       	movw	r24, r30
    21d4:	df 91       	pop	r29
    21d6:	cf 91       	pop	r28
    21d8:	1f 91       	pop	r17
    21da:	0f 91       	pop	r16
    21dc:	08 95       	ret

000021de <free>:
    21de:	cf 93       	push	r28
    21e0:	df 93       	push	r29
    21e2:	00 97       	sbiw	r24, 0x00	; 0
    21e4:	09 f4       	brne	.+2      	; 0x21e8 <free+0xa>
    21e6:	81 c0       	rjmp	.+258    	; 0x22ea <free+0x10c>
    21e8:	fc 01       	movw	r30, r24
    21ea:	32 97       	sbiw	r30, 0x02	; 2
    21ec:	12 82       	std	Z+2, r1	; 0x02
    21ee:	13 82       	std	Z+3, r1	; 0x03
    21f0:	a0 91 e5 38 	lds	r26, 0x38E5	; 0x8038e5 <__flp>
    21f4:	b0 91 e6 38 	lds	r27, 0x38E6	; 0x8038e6 <__flp+0x1>
    21f8:	10 97       	sbiw	r26, 0x00	; 0
    21fa:	81 f4       	brne	.+32     	; 0x221c <free+0x3e>
    21fc:	20 81       	ld	r18, Z
    21fe:	31 81       	ldd	r19, Z+1	; 0x01
    2200:	82 0f       	add	r24, r18
    2202:	93 1f       	adc	r25, r19
    2204:	20 91 e3 38 	lds	r18, 0x38E3	; 0x8038e3 <__brkval>
    2208:	30 91 e4 38 	lds	r19, 0x38E4	; 0x8038e4 <__brkval+0x1>
    220c:	28 17       	cp	r18, r24
    220e:	39 07       	cpc	r19, r25
    2210:	51 f5       	brne	.+84     	; 0x2266 <free+0x88>
    2212:	e0 93 e3 38 	sts	0x38E3, r30	; 0x8038e3 <__brkval>
    2216:	f0 93 e4 38 	sts	0x38E4, r31	; 0x8038e4 <__brkval+0x1>
    221a:	67 c0       	rjmp	.+206    	; 0x22ea <free+0x10c>
    221c:	ed 01       	movw	r28, r26
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	ce 17       	cp	r28, r30
    2224:	df 07       	cpc	r29, r31
    2226:	40 f4       	brcc	.+16     	; 0x2238 <free+0x5a>
    2228:	4a 81       	ldd	r20, Y+2	; 0x02
    222a:	5b 81       	ldd	r21, Y+3	; 0x03
    222c:	9e 01       	movw	r18, r28
    222e:	41 15       	cp	r20, r1
    2230:	51 05       	cpc	r21, r1
    2232:	f1 f0       	breq	.+60     	; 0x2270 <free+0x92>
    2234:	ea 01       	movw	r28, r20
    2236:	f5 cf       	rjmp	.-22     	; 0x2222 <free+0x44>
    2238:	c2 83       	std	Z+2, r28	; 0x02
    223a:	d3 83       	std	Z+3, r29	; 0x03
    223c:	40 81       	ld	r20, Z
    223e:	51 81       	ldd	r21, Z+1	; 0x01
    2240:	84 0f       	add	r24, r20
    2242:	95 1f       	adc	r25, r21
    2244:	c8 17       	cp	r28, r24
    2246:	d9 07       	cpc	r29, r25
    2248:	59 f4       	brne	.+22     	; 0x2260 <free+0x82>
    224a:	88 81       	ld	r24, Y
    224c:	99 81       	ldd	r25, Y+1	; 0x01
    224e:	84 0f       	add	r24, r20
    2250:	95 1f       	adc	r25, r21
    2252:	02 96       	adiw	r24, 0x02	; 2
    2254:	80 83       	st	Z, r24
    2256:	91 83       	std	Z+1, r25	; 0x01
    2258:	8a 81       	ldd	r24, Y+2	; 0x02
    225a:	9b 81       	ldd	r25, Y+3	; 0x03
    225c:	82 83       	std	Z+2, r24	; 0x02
    225e:	93 83       	std	Z+3, r25	; 0x03
    2260:	21 15       	cp	r18, r1
    2262:	31 05       	cpc	r19, r1
    2264:	29 f4       	brne	.+10     	; 0x2270 <free+0x92>
    2266:	e0 93 e5 38 	sts	0x38E5, r30	; 0x8038e5 <__flp>
    226a:	f0 93 e6 38 	sts	0x38E6, r31	; 0x8038e6 <__flp+0x1>
    226e:	3d c0       	rjmp	.+122    	; 0x22ea <free+0x10c>
    2270:	e9 01       	movw	r28, r18
    2272:	ea 83       	std	Y+2, r30	; 0x02
    2274:	fb 83       	std	Y+3, r31	; 0x03
    2276:	49 91       	ld	r20, Y+
    2278:	59 91       	ld	r21, Y+
    227a:	c4 0f       	add	r28, r20
    227c:	d5 1f       	adc	r29, r21
    227e:	ec 17       	cp	r30, r28
    2280:	fd 07       	cpc	r31, r29
    2282:	61 f4       	brne	.+24     	; 0x229c <free+0xbe>
    2284:	80 81       	ld	r24, Z
    2286:	91 81       	ldd	r25, Z+1	; 0x01
    2288:	84 0f       	add	r24, r20
    228a:	95 1f       	adc	r25, r21
    228c:	02 96       	adiw	r24, 0x02	; 2
    228e:	e9 01       	movw	r28, r18
    2290:	88 83       	st	Y, r24
    2292:	99 83       	std	Y+1, r25	; 0x01
    2294:	82 81       	ldd	r24, Z+2	; 0x02
    2296:	93 81       	ldd	r25, Z+3	; 0x03
    2298:	8a 83       	std	Y+2, r24	; 0x02
    229a:	9b 83       	std	Y+3, r25	; 0x03
    229c:	e0 e0       	ldi	r30, 0x00	; 0
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	12 96       	adiw	r26, 0x02	; 2
    22a2:	8d 91       	ld	r24, X+
    22a4:	9c 91       	ld	r25, X
    22a6:	13 97       	sbiw	r26, 0x03	; 3
    22a8:	00 97       	sbiw	r24, 0x00	; 0
    22aa:	19 f0       	breq	.+6      	; 0x22b2 <free+0xd4>
    22ac:	fd 01       	movw	r30, r26
    22ae:	dc 01       	movw	r26, r24
    22b0:	f7 cf       	rjmp	.-18     	; 0x22a0 <free+0xc2>
    22b2:	8d 91       	ld	r24, X+
    22b4:	9c 91       	ld	r25, X
    22b6:	11 97       	sbiw	r26, 0x01	; 1
    22b8:	9d 01       	movw	r18, r26
    22ba:	2e 5f       	subi	r18, 0xFE	; 254
    22bc:	3f 4f       	sbci	r19, 0xFF	; 255
    22be:	82 0f       	add	r24, r18
    22c0:	93 1f       	adc	r25, r19
    22c2:	20 91 e3 38 	lds	r18, 0x38E3	; 0x8038e3 <__brkval>
    22c6:	30 91 e4 38 	lds	r19, 0x38E4	; 0x8038e4 <__brkval+0x1>
    22ca:	28 17       	cp	r18, r24
    22cc:	39 07       	cpc	r19, r25
    22ce:	69 f4       	brne	.+26     	; 0x22ea <free+0x10c>
    22d0:	30 97       	sbiw	r30, 0x00	; 0
    22d2:	29 f4       	brne	.+10     	; 0x22de <free+0x100>
    22d4:	10 92 e5 38 	sts	0x38E5, r1	; 0x8038e5 <__flp>
    22d8:	10 92 e6 38 	sts	0x38E6, r1	; 0x8038e6 <__flp+0x1>
    22dc:	02 c0       	rjmp	.+4      	; 0x22e2 <free+0x104>
    22de:	12 82       	std	Z+2, r1	; 0x02
    22e0:	13 82       	std	Z+3, r1	; 0x03
    22e2:	a0 93 e3 38 	sts	0x38E3, r26	; 0x8038e3 <__brkval>
    22e6:	b0 93 e4 38 	sts	0x38E4, r27	; 0x8038e4 <__brkval+0x1>
    22ea:	df 91       	pop	r29
    22ec:	cf 91       	pop	r28
    22ee:	08 95       	ret

000022f0 <snprintf>:
    22f0:	ae e0       	ldi	r26, 0x0E	; 14
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	ee e7       	ldi	r30, 0x7E	; 126
    22f6:	f1 e1       	ldi	r31, 0x11	; 17
    22f8:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__prologue_saves__+0x1c>
    22fc:	0d 89       	ldd	r16, Y+21	; 0x15
    22fe:	1e 89       	ldd	r17, Y+22	; 0x16
    2300:	8f 89       	ldd	r24, Y+23	; 0x17
    2302:	98 8d       	ldd	r25, Y+24	; 0x18
    2304:	26 e0       	ldi	r18, 0x06	; 6
    2306:	2c 83       	std	Y+4, r18	; 0x04
    2308:	09 83       	std	Y+1, r16	; 0x01
    230a:	1a 83       	std	Y+2, r17	; 0x02
    230c:	97 ff       	sbrs	r25, 7
    230e:	02 c0       	rjmp	.+4      	; 0x2314 <snprintf+0x24>
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	90 e8       	ldi	r25, 0x80	; 128
    2314:	01 97       	sbiw	r24, 0x01	; 1
    2316:	8d 83       	std	Y+5, r24	; 0x05
    2318:	9e 83       	std	Y+6, r25	; 0x06
    231a:	ae 01       	movw	r20, r28
    231c:	45 5e       	subi	r20, 0xE5	; 229
    231e:	5f 4f       	sbci	r21, 0xFF	; 255
    2320:	69 8d       	ldd	r22, Y+25	; 0x19
    2322:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2324:	ce 01       	movw	r24, r28
    2326:	01 96       	adiw	r24, 0x01	; 1
    2328:	0e 94 a8 11 	call	0x2350	; 0x2350 <vfprintf>
    232c:	4d 81       	ldd	r20, Y+5	; 0x05
    232e:	5e 81       	ldd	r21, Y+6	; 0x06
    2330:	57 fd       	sbrc	r21, 7
    2332:	0a c0       	rjmp	.+20     	; 0x2348 <snprintf+0x58>
    2334:	2f 81       	ldd	r18, Y+7	; 0x07
    2336:	38 85       	ldd	r19, Y+8	; 0x08
    2338:	42 17       	cp	r20, r18
    233a:	53 07       	cpc	r21, r19
    233c:	0c f4       	brge	.+2      	; 0x2340 <snprintf+0x50>
    233e:	9a 01       	movw	r18, r20
    2340:	f8 01       	movw	r30, r16
    2342:	e2 0f       	add	r30, r18
    2344:	f3 1f       	adc	r31, r19
    2346:	10 82       	st	Z, r1
    2348:	2e 96       	adiw	r28, 0x0e	; 14
    234a:	e4 e0       	ldi	r30, 0x04	; 4
    234c:	0c 94 8d 14 	jmp	0x291a	; 0x291a <__epilogue_restores__+0x1c>

00002350 <vfprintf>:
    2350:	ab e0       	ldi	r26, 0x0B	; 11
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	ee ea       	ldi	r30, 0xAE	; 174
    2356:	f1 e1       	ldi	r31, 0x11	; 17
    2358:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__prologue_saves__>
    235c:	6c 01       	movw	r12, r24
    235e:	7b 01       	movw	r14, r22
    2360:	8a 01       	movw	r16, r20
    2362:	fc 01       	movw	r30, r24
    2364:	16 82       	std	Z+6, r1	; 0x06
    2366:	17 82       	std	Z+7, r1	; 0x07
    2368:	83 81       	ldd	r24, Z+3	; 0x03
    236a:	81 ff       	sbrs	r24, 1
    236c:	cc c1       	rjmp	.+920    	; 0x2706 <vfprintf+0x3b6>
    236e:	ce 01       	movw	r24, r28
    2370:	01 96       	adiw	r24, 0x01	; 1
    2372:	3c 01       	movw	r6, r24
    2374:	f6 01       	movw	r30, r12
    2376:	93 81       	ldd	r25, Z+3	; 0x03
    2378:	f7 01       	movw	r30, r14
    237a:	93 fd       	sbrc	r25, 3
    237c:	85 91       	lpm	r24, Z+
    237e:	93 ff       	sbrs	r25, 3
    2380:	81 91       	ld	r24, Z+
    2382:	7f 01       	movw	r14, r30
    2384:	88 23       	and	r24, r24
    2386:	09 f4       	brne	.+2      	; 0x238a <vfprintf+0x3a>
    2388:	ba c1       	rjmp	.+884    	; 0x26fe <vfprintf+0x3ae>
    238a:	85 32       	cpi	r24, 0x25	; 37
    238c:	39 f4       	brne	.+14     	; 0x239c <vfprintf+0x4c>
    238e:	93 fd       	sbrc	r25, 3
    2390:	85 91       	lpm	r24, Z+
    2392:	93 ff       	sbrs	r25, 3
    2394:	81 91       	ld	r24, Z+
    2396:	7f 01       	movw	r14, r30
    2398:	85 32       	cpi	r24, 0x25	; 37
    239a:	29 f4       	brne	.+10     	; 0x23a6 <vfprintf+0x56>
    239c:	b6 01       	movw	r22, r12
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	0e 94 9f 13 	call	0x273e	; 0x273e <fputc>
    23a4:	e7 cf       	rjmp	.-50     	; 0x2374 <vfprintf+0x24>
    23a6:	91 2c       	mov	r9, r1
    23a8:	21 2c       	mov	r2, r1
    23aa:	31 2c       	mov	r3, r1
    23ac:	ff e1       	ldi	r31, 0x1F	; 31
    23ae:	f3 15       	cp	r31, r3
    23b0:	d8 f0       	brcs	.+54     	; 0x23e8 <vfprintf+0x98>
    23b2:	8b 32       	cpi	r24, 0x2B	; 43
    23b4:	79 f0       	breq	.+30     	; 0x23d4 <vfprintf+0x84>
    23b6:	38 f4       	brcc	.+14     	; 0x23c6 <vfprintf+0x76>
    23b8:	80 32       	cpi	r24, 0x20	; 32
    23ba:	79 f0       	breq	.+30     	; 0x23da <vfprintf+0x8a>
    23bc:	83 32       	cpi	r24, 0x23	; 35
    23be:	a1 f4       	brne	.+40     	; 0x23e8 <vfprintf+0x98>
    23c0:	23 2d       	mov	r18, r3
    23c2:	20 61       	ori	r18, 0x10	; 16
    23c4:	1d c0       	rjmp	.+58     	; 0x2400 <vfprintf+0xb0>
    23c6:	8d 32       	cpi	r24, 0x2D	; 45
    23c8:	61 f0       	breq	.+24     	; 0x23e2 <vfprintf+0x92>
    23ca:	80 33       	cpi	r24, 0x30	; 48
    23cc:	69 f4       	brne	.+26     	; 0x23e8 <vfprintf+0x98>
    23ce:	23 2d       	mov	r18, r3
    23d0:	21 60       	ori	r18, 0x01	; 1
    23d2:	16 c0       	rjmp	.+44     	; 0x2400 <vfprintf+0xb0>
    23d4:	83 2d       	mov	r24, r3
    23d6:	82 60       	ori	r24, 0x02	; 2
    23d8:	38 2e       	mov	r3, r24
    23da:	e3 2d       	mov	r30, r3
    23dc:	e4 60       	ori	r30, 0x04	; 4
    23de:	3e 2e       	mov	r3, r30
    23e0:	2a c0       	rjmp	.+84     	; 0x2436 <vfprintf+0xe6>
    23e2:	f3 2d       	mov	r31, r3
    23e4:	f8 60       	ori	r31, 0x08	; 8
    23e6:	1d c0       	rjmp	.+58     	; 0x2422 <vfprintf+0xd2>
    23e8:	37 fc       	sbrc	r3, 7
    23ea:	2d c0       	rjmp	.+90     	; 0x2446 <vfprintf+0xf6>
    23ec:	20 ed       	ldi	r18, 0xD0	; 208
    23ee:	28 0f       	add	r18, r24
    23f0:	2a 30       	cpi	r18, 0x0A	; 10
    23f2:	40 f0       	brcs	.+16     	; 0x2404 <vfprintf+0xb4>
    23f4:	8e 32       	cpi	r24, 0x2E	; 46
    23f6:	b9 f4       	brne	.+46     	; 0x2426 <vfprintf+0xd6>
    23f8:	36 fc       	sbrc	r3, 6
    23fa:	81 c1       	rjmp	.+770    	; 0x26fe <vfprintf+0x3ae>
    23fc:	23 2d       	mov	r18, r3
    23fe:	20 64       	ori	r18, 0x40	; 64
    2400:	32 2e       	mov	r3, r18
    2402:	19 c0       	rjmp	.+50     	; 0x2436 <vfprintf+0xe6>
    2404:	36 fe       	sbrs	r3, 6
    2406:	06 c0       	rjmp	.+12     	; 0x2414 <vfprintf+0xc4>
    2408:	8a e0       	ldi	r24, 0x0A	; 10
    240a:	98 9e       	mul	r9, r24
    240c:	20 0d       	add	r18, r0
    240e:	11 24       	eor	r1, r1
    2410:	92 2e       	mov	r9, r18
    2412:	11 c0       	rjmp	.+34     	; 0x2436 <vfprintf+0xe6>
    2414:	ea e0       	ldi	r30, 0x0A	; 10
    2416:	2e 9e       	mul	r2, r30
    2418:	20 0d       	add	r18, r0
    241a:	11 24       	eor	r1, r1
    241c:	22 2e       	mov	r2, r18
    241e:	f3 2d       	mov	r31, r3
    2420:	f0 62       	ori	r31, 0x20	; 32
    2422:	3f 2e       	mov	r3, r31
    2424:	08 c0       	rjmp	.+16     	; 0x2436 <vfprintf+0xe6>
    2426:	8c 36       	cpi	r24, 0x6C	; 108
    2428:	21 f4       	brne	.+8      	; 0x2432 <vfprintf+0xe2>
    242a:	83 2d       	mov	r24, r3
    242c:	80 68       	ori	r24, 0x80	; 128
    242e:	38 2e       	mov	r3, r24
    2430:	02 c0       	rjmp	.+4      	; 0x2436 <vfprintf+0xe6>
    2432:	88 36       	cpi	r24, 0x68	; 104
    2434:	41 f4       	brne	.+16     	; 0x2446 <vfprintf+0xf6>
    2436:	f7 01       	movw	r30, r14
    2438:	93 fd       	sbrc	r25, 3
    243a:	85 91       	lpm	r24, Z+
    243c:	93 ff       	sbrs	r25, 3
    243e:	81 91       	ld	r24, Z+
    2440:	7f 01       	movw	r14, r30
    2442:	81 11       	cpse	r24, r1
    2444:	b3 cf       	rjmp	.-154    	; 0x23ac <vfprintf+0x5c>
    2446:	98 2f       	mov	r25, r24
    2448:	9f 7d       	andi	r25, 0xDF	; 223
    244a:	95 54       	subi	r25, 0x45	; 69
    244c:	93 30       	cpi	r25, 0x03	; 3
    244e:	28 f4       	brcc	.+10     	; 0x245a <vfprintf+0x10a>
    2450:	0c 5f       	subi	r16, 0xFC	; 252
    2452:	1f 4f       	sbci	r17, 0xFF	; 255
    2454:	9f e3       	ldi	r25, 0x3F	; 63
    2456:	99 83       	std	Y+1, r25	; 0x01
    2458:	0d c0       	rjmp	.+26     	; 0x2474 <vfprintf+0x124>
    245a:	83 36       	cpi	r24, 0x63	; 99
    245c:	31 f0       	breq	.+12     	; 0x246a <vfprintf+0x11a>
    245e:	83 37       	cpi	r24, 0x73	; 115
    2460:	71 f0       	breq	.+28     	; 0x247e <vfprintf+0x12e>
    2462:	83 35       	cpi	r24, 0x53	; 83
    2464:	09 f0       	breq	.+2      	; 0x2468 <vfprintf+0x118>
    2466:	59 c0       	rjmp	.+178    	; 0x251a <vfprintf+0x1ca>
    2468:	21 c0       	rjmp	.+66     	; 0x24ac <vfprintf+0x15c>
    246a:	f8 01       	movw	r30, r16
    246c:	80 81       	ld	r24, Z
    246e:	89 83       	std	Y+1, r24	; 0x01
    2470:	0e 5f       	subi	r16, 0xFE	; 254
    2472:	1f 4f       	sbci	r17, 0xFF	; 255
    2474:	88 24       	eor	r8, r8
    2476:	83 94       	inc	r8
    2478:	91 2c       	mov	r9, r1
    247a:	53 01       	movw	r10, r6
    247c:	13 c0       	rjmp	.+38     	; 0x24a4 <vfprintf+0x154>
    247e:	28 01       	movw	r4, r16
    2480:	f2 e0       	ldi	r31, 0x02	; 2
    2482:	4f 0e       	add	r4, r31
    2484:	51 1c       	adc	r5, r1
    2486:	f8 01       	movw	r30, r16
    2488:	a0 80       	ld	r10, Z
    248a:	b1 80       	ldd	r11, Z+1	; 0x01
    248c:	36 fe       	sbrs	r3, 6
    248e:	03 c0       	rjmp	.+6      	; 0x2496 <vfprintf+0x146>
    2490:	69 2d       	mov	r22, r9
    2492:	70 e0       	ldi	r23, 0x00	; 0
    2494:	02 c0       	rjmp	.+4      	; 0x249a <vfprintf+0x14a>
    2496:	6f ef       	ldi	r22, 0xFF	; 255
    2498:	7f ef       	ldi	r23, 0xFF	; 255
    249a:	c5 01       	movw	r24, r10
    249c:	0e 94 94 13 	call	0x2728	; 0x2728 <strnlen>
    24a0:	4c 01       	movw	r8, r24
    24a2:	82 01       	movw	r16, r4
    24a4:	f3 2d       	mov	r31, r3
    24a6:	ff 77       	andi	r31, 0x7F	; 127
    24a8:	3f 2e       	mov	r3, r31
    24aa:	16 c0       	rjmp	.+44     	; 0x24d8 <vfprintf+0x188>
    24ac:	28 01       	movw	r4, r16
    24ae:	22 e0       	ldi	r18, 0x02	; 2
    24b0:	42 0e       	add	r4, r18
    24b2:	51 1c       	adc	r5, r1
    24b4:	f8 01       	movw	r30, r16
    24b6:	a0 80       	ld	r10, Z
    24b8:	b1 80       	ldd	r11, Z+1	; 0x01
    24ba:	36 fe       	sbrs	r3, 6
    24bc:	03 c0       	rjmp	.+6      	; 0x24c4 <vfprintf+0x174>
    24be:	69 2d       	mov	r22, r9
    24c0:	70 e0       	ldi	r23, 0x00	; 0
    24c2:	02 c0       	rjmp	.+4      	; 0x24c8 <vfprintf+0x178>
    24c4:	6f ef       	ldi	r22, 0xFF	; 255
    24c6:	7f ef       	ldi	r23, 0xFF	; 255
    24c8:	c5 01       	movw	r24, r10
    24ca:	0e 94 89 13 	call	0x2712	; 0x2712 <strnlen_P>
    24ce:	4c 01       	movw	r8, r24
    24d0:	f3 2d       	mov	r31, r3
    24d2:	f0 68       	ori	r31, 0x80	; 128
    24d4:	3f 2e       	mov	r3, r31
    24d6:	82 01       	movw	r16, r4
    24d8:	33 fc       	sbrc	r3, 3
    24da:	1b c0       	rjmp	.+54     	; 0x2512 <vfprintf+0x1c2>
    24dc:	82 2d       	mov	r24, r2
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	88 16       	cp	r8, r24
    24e2:	99 06       	cpc	r9, r25
    24e4:	b0 f4       	brcc	.+44     	; 0x2512 <vfprintf+0x1c2>
    24e6:	b6 01       	movw	r22, r12
    24e8:	80 e2       	ldi	r24, 0x20	; 32
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	0e 94 9f 13 	call	0x273e	; 0x273e <fputc>
    24f0:	2a 94       	dec	r2
    24f2:	f4 cf       	rjmp	.-24     	; 0x24dc <vfprintf+0x18c>
    24f4:	f5 01       	movw	r30, r10
    24f6:	37 fc       	sbrc	r3, 7
    24f8:	85 91       	lpm	r24, Z+
    24fa:	37 fe       	sbrs	r3, 7
    24fc:	81 91       	ld	r24, Z+
    24fe:	5f 01       	movw	r10, r30
    2500:	b6 01       	movw	r22, r12
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	0e 94 9f 13 	call	0x273e	; 0x273e <fputc>
    2508:	21 10       	cpse	r2, r1
    250a:	2a 94       	dec	r2
    250c:	21 e0       	ldi	r18, 0x01	; 1
    250e:	82 1a       	sub	r8, r18
    2510:	91 08       	sbc	r9, r1
    2512:	81 14       	cp	r8, r1
    2514:	91 04       	cpc	r9, r1
    2516:	71 f7       	brne	.-36     	; 0x24f4 <vfprintf+0x1a4>
    2518:	e8 c0       	rjmp	.+464    	; 0x26ea <vfprintf+0x39a>
    251a:	84 36       	cpi	r24, 0x64	; 100
    251c:	11 f0       	breq	.+4      	; 0x2522 <vfprintf+0x1d2>
    251e:	89 36       	cpi	r24, 0x69	; 105
    2520:	41 f5       	brne	.+80     	; 0x2572 <vfprintf+0x222>
    2522:	f8 01       	movw	r30, r16
    2524:	37 fe       	sbrs	r3, 7
    2526:	07 c0       	rjmp	.+14     	; 0x2536 <vfprintf+0x1e6>
    2528:	60 81       	ld	r22, Z
    252a:	71 81       	ldd	r23, Z+1	; 0x01
    252c:	82 81       	ldd	r24, Z+2	; 0x02
    252e:	93 81       	ldd	r25, Z+3	; 0x03
    2530:	0c 5f       	subi	r16, 0xFC	; 252
    2532:	1f 4f       	sbci	r17, 0xFF	; 255
    2534:	08 c0       	rjmp	.+16     	; 0x2546 <vfprintf+0x1f6>
    2536:	60 81       	ld	r22, Z
    2538:	71 81       	ldd	r23, Z+1	; 0x01
    253a:	07 2e       	mov	r0, r23
    253c:	00 0c       	add	r0, r0
    253e:	88 0b       	sbc	r24, r24
    2540:	99 0b       	sbc	r25, r25
    2542:	0e 5f       	subi	r16, 0xFE	; 254
    2544:	1f 4f       	sbci	r17, 0xFF	; 255
    2546:	f3 2d       	mov	r31, r3
    2548:	ff 76       	andi	r31, 0x6F	; 111
    254a:	3f 2e       	mov	r3, r31
    254c:	97 ff       	sbrs	r25, 7
    254e:	09 c0       	rjmp	.+18     	; 0x2562 <vfprintf+0x212>
    2550:	90 95       	com	r25
    2552:	80 95       	com	r24
    2554:	70 95       	com	r23
    2556:	61 95       	neg	r22
    2558:	7f 4f       	sbci	r23, 0xFF	; 255
    255a:	8f 4f       	sbci	r24, 0xFF	; 255
    255c:	9f 4f       	sbci	r25, 0xFF	; 255
    255e:	f0 68       	ori	r31, 0x80	; 128
    2560:	3f 2e       	mov	r3, r31
    2562:	2a e0       	ldi	r18, 0x0A	; 10
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	a3 01       	movw	r20, r6
    2568:	0e 94 db 13 	call	0x27b6	; 0x27b6 <__ultoa_invert>
    256c:	88 2e       	mov	r8, r24
    256e:	86 18       	sub	r8, r6
    2570:	45 c0       	rjmp	.+138    	; 0x25fc <vfprintf+0x2ac>
    2572:	85 37       	cpi	r24, 0x75	; 117
    2574:	31 f4       	brne	.+12     	; 0x2582 <vfprintf+0x232>
    2576:	23 2d       	mov	r18, r3
    2578:	2f 7e       	andi	r18, 0xEF	; 239
    257a:	b2 2e       	mov	r11, r18
    257c:	2a e0       	ldi	r18, 0x0A	; 10
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	25 c0       	rjmp	.+74     	; 0x25cc <vfprintf+0x27c>
    2582:	93 2d       	mov	r25, r3
    2584:	99 7f       	andi	r25, 0xF9	; 249
    2586:	b9 2e       	mov	r11, r25
    2588:	8f 36       	cpi	r24, 0x6F	; 111
    258a:	c1 f0       	breq	.+48     	; 0x25bc <vfprintf+0x26c>
    258c:	18 f4       	brcc	.+6      	; 0x2594 <vfprintf+0x244>
    258e:	88 35       	cpi	r24, 0x58	; 88
    2590:	79 f0       	breq	.+30     	; 0x25b0 <vfprintf+0x260>
    2592:	b5 c0       	rjmp	.+362    	; 0x26fe <vfprintf+0x3ae>
    2594:	80 37       	cpi	r24, 0x70	; 112
    2596:	19 f0       	breq	.+6      	; 0x259e <vfprintf+0x24e>
    2598:	88 37       	cpi	r24, 0x78	; 120
    259a:	21 f0       	breq	.+8      	; 0x25a4 <vfprintf+0x254>
    259c:	b0 c0       	rjmp	.+352    	; 0x26fe <vfprintf+0x3ae>
    259e:	e9 2f       	mov	r30, r25
    25a0:	e0 61       	ori	r30, 0x10	; 16
    25a2:	be 2e       	mov	r11, r30
    25a4:	b4 fe       	sbrs	r11, 4
    25a6:	0d c0       	rjmp	.+26     	; 0x25c2 <vfprintf+0x272>
    25a8:	fb 2d       	mov	r31, r11
    25aa:	f4 60       	ori	r31, 0x04	; 4
    25ac:	bf 2e       	mov	r11, r31
    25ae:	09 c0       	rjmp	.+18     	; 0x25c2 <vfprintf+0x272>
    25b0:	34 fe       	sbrs	r3, 4
    25b2:	0a c0       	rjmp	.+20     	; 0x25c8 <vfprintf+0x278>
    25b4:	29 2f       	mov	r18, r25
    25b6:	26 60       	ori	r18, 0x06	; 6
    25b8:	b2 2e       	mov	r11, r18
    25ba:	06 c0       	rjmp	.+12     	; 0x25c8 <vfprintf+0x278>
    25bc:	28 e0       	ldi	r18, 0x08	; 8
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	05 c0       	rjmp	.+10     	; 0x25cc <vfprintf+0x27c>
    25c2:	20 e1       	ldi	r18, 0x10	; 16
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	02 c0       	rjmp	.+4      	; 0x25cc <vfprintf+0x27c>
    25c8:	20 e1       	ldi	r18, 0x10	; 16
    25ca:	32 e0       	ldi	r19, 0x02	; 2
    25cc:	f8 01       	movw	r30, r16
    25ce:	b7 fe       	sbrs	r11, 7
    25d0:	07 c0       	rjmp	.+14     	; 0x25e0 <vfprintf+0x290>
    25d2:	60 81       	ld	r22, Z
    25d4:	71 81       	ldd	r23, Z+1	; 0x01
    25d6:	82 81       	ldd	r24, Z+2	; 0x02
    25d8:	93 81       	ldd	r25, Z+3	; 0x03
    25da:	0c 5f       	subi	r16, 0xFC	; 252
    25dc:	1f 4f       	sbci	r17, 0xFF	; 255
    25de:	06 c0       	rjmp	.+12     	; 0x25ec <vfprintf+0x29c>
    25e0:	60 81       	ld	r22, Z
    25e2:	71 81       	ldd	r23, Z+1	; 0x01
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	0e 5f       	subi	r16, 0xFE	; 254
    25ea:	1f 4f       	sbci	r17, 0xFF	; 255
    25ec:	a3 01       	movw	r20, r6
    25ee:	0e 94 db 13 	call	0x27b6	; 0x27b6 <__ultoa_invert>
    25f2:	88 2e       	mov	r8, r24
    25f4:	86 18       	sub	r8, r6
    25f6:	fb 2d       	mov	r31, r11
    25f8:	ff 77       	andi	r31, 0x7F	; 127
    25fa:	3f 2e       	mov	r3, r31
    25fc:	36 fe       	sbrs	r3, 6
    25fe:	0d c0       	rjmp	.+26     	; 0x261a <vfprintf+0x2ca>
    2600:	23 2d       	mov	r18, r3
    2602:	2e 7f       	andi	r18, 0xFE	; 254
    2604:	a2 2e       	mov	r10, r18
    2606:	89 14       	cp	r8, r9
    2608:	58 f4       	brcc	.+22     	; 0x2620 <vfprintf+0x2d0>
    260a:	34 fe       	sbrs	r3, 4
    260c:	0b c0       	rjmp	.+22     	; 0x2624 <vfprintf+0x2d4>
    260e:	32 fc       	sbrc	r3, 2
    2610:	09 c0       	rjmp	.+18     	; 0x2624 <vfprintf+0x2d4>
    2612:	83 2d       	mov	r24, r3
    2614:	8e 7e       	andi	r24, 0xEE	; 238
    2616:	a8 2e       	mov	r10, r24
    2618:	05 c0       	rjmp	.+10     	; 0x2624 <vfprintf+0x2d4>
    261a:	b8 2c       	mov	r11, r8
    261c:	a3 2c       	mov	r10, r3
    261e:	03 c0       	rjmp	.+6      	; 0x2626 <vfprintf+0x2d6>
    2620:	b8 2c       	mov	r11, r8
    2622:	01 c0       	rjmp	.+2      	; 0x2626 <vfprintf+0x2d6>
    2624:	b9 2c       	mov	r11, r9
    2626:	a4 fe       	sbrs	r10, 4
    2628:	0f c0       	rjmp	.+30     	; 0x2648 <vfprintf+0x2f8>
    262a:	fe 01       	movw	r30, r28
    262c:	e8 0d       	add	r30, r8
    262e:	f1 1d       	adc	r31, r1
    2630:	80 81       	ld	r24, Z
    2632:	80 33       	cpi	r24, 0x30	; 48
    2634:	21 f4       	brne	.+8      	; 0x263e <vfprintf+0x2ee>
    2636:	9a 2d       	mov	r25, r10
    2638:	99 7e       	andi	r25, 0xE9	; 233
    263a:	a9 2e       	mov	r10, r25
    263c:	09 c0       	rjmp	.+18     	; 0x2650 <vfprintf+0x300>
    263e:	a2 fe       	sbrs	r10, 2
    2640:	06 c0       	rjmp	.+12     	; 0x264e <vfprintf+0x2fe>
    2642:	b3 94       	inc	r11
    2644:	b3 94       	inc	r11
    2646:	04 c0       	rjmp	.+8      	; 0x2650 <vfprintf+0x300>
    2648:	8a 2d       	mov	r24, r10
    264a:	86 78       	andi	r24, 0x86	; 134
    264c:	09 f0       	breq	.+2      	; 0x2650 <vfprintf+0x300>
    264e:	b3 94       	inc	r11
    2650:	a3 fc       	sbrc	r10, 3
    2652:	11 c0       	rjmp	.+34     	; 0x2676 <vfprintf+0x326>
    2654:	a0 fe       	sbrs	r10, 0
    2656:	06 c0       	rjmp	.+12     	; 0x2664 <vfprintf+0x314>
    2658:	b2 14       	cp	r11, r2
    265a:	88 f4       	brcc	.+34     	; 0x267e <vfprintf+0x32e>
    265c:	28 0c       	add	r2, r8
    265e:	92 2c       	mov	r9, r2
    2660:	9b 18       	sub	r9, r11
    2662:	0e c0       	rjmp	.+28     	; 0x2680 <vfprintf+0x330>
    2664:	b2 14       	cp	r11, r2
    2666:	60 f4       	brcc	.+24     	; 0x2680 <vfprintf+0x330>
    2668:	b6 01       	movw	r22, r12
    266a:	80 e2       	ldi	r24, 0x20	; 32
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	0e 94 9f 13 	call	0x273e	; 0x273e <fputc>
    2672:	b3 94       	inc	r11
    2674:	f7 cf       	rjmp	.-18     	; 0x2664 <vfprintf+0x314>
    2676:	b2 14       	cp	r11, r2
    2678:	18 f4       	brcc	.+6      	; 0x2680 <vfprintf+0x330>
    267a:	2b 18       	sub	r2, r11
    267c:	02 c0       	rjmp	.+4      	; 0x2682 <vfprintf+0x332>
    267e:	98 2c       	mov	r9, r8
    2680:	21 2c       	mov	r2, r1
    2682:	a4 fe       	sbrs	r10, 4
    2684:	10 c0       	rjmp	.+32     	; 0x26a6 <vfprintf+0x356>
    2686:	b6 01       	movw	r22, r12
    2688:	80 e3       	ldi	r24, 0x30	; 48
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	0e 94 9f 13 	call	0x273e	; 0x273e <fputc>
    2690:	a2 fe       	sbrs	r10, 2
    2692:	17 c0       	rjmp	.+46     	; 0x26c2 <vfprintf+0x372>
    2694:	a1 fc       	sbrc	r10, 1
    2696:	03 c0       	rjmp	.+6      	; 0x269e <vfprintf+0x34e>
    2698:	88 e7       	ldi	r24, 0x78	; 120
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	02 c0       	rjmp	.+4      	; 0x26a2 <vfprintf+0x352>
    269e:	88 e5       	ldi	r24, 0x58	; 88
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	b6 01       	movw	r22, r12
    26a4:	0c c0       	rjmp	.+24     	; 0x26be <vfprintf+0x36e>
    26a6:	8a 2d       	mov	r24, r10
    26a8:	86 78       	andi	r24, 0x86	; 134
    26aa:	59 f0       	breq	.+22     	; 0x26c2 <vfprintf+0x372>
    26ac:	a1 fe       	sbrs	r10, 1
    26ae:	02 c0       	rjmp	.+4      	; 0x26b4 <vfprintf+0x364>
    26b0:	8b e2       	ldi	r24, 0x2B	; 43
    26b2:	01 c0       	rjmp	.+2      	; 0x26b6 <vfprintf+0x366>
    26b4:	80 e2       	ldi	r24, 0x20	; 32
    26b6:	a7 fc       	sbrc	r10, 7
    26b8:	8d e2       	ldi	r24, 0x2D	; 45
    26ba:	b6 01       	movw	r22, r12
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	0e 94 9f 13 	call	0x273e	; 0x273e <fputc>
    26c2:	89 14       	cp	r8, r9
    26c4:	38 f4       	brcc	.+14     	; 0x26d4 <vfprintf+0x384>
    26c6:	b6 01       	movw	r22, r12
    26c8:	80 e3       	ldi	r24, 0x30	; 48
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	0e 94 9f 13 	call	0x273e	; 0x273e <fputc>
    26d0:	9a 94       	dec	r9
    26d2:	f7 cf       	rjmp	.-18     	; 0x26c2 <vfprintf+0x372>
    26d4:	8a 94       	dec	r8
    26d6:	f3 01       	movw	r30, r6
    26d8:	e8 0d       	add	r30, r8
    26da:	f1 1d       	adc	r31, r1
    26dc:	80 81       	ld	r24, Z
    26de:	b6 01       	movw	r22, r12
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	0e 94 9f 13 	call	0x273e	; 0x273e <fputc>
    26e6:	81 10       	cpse	r8, r1
    26e8:	f5 cf       	rjmp	.-22     	; 0x26d4 <vfprintf+0x384>
    26ea:	22 20       	and	r2, r2
    26ec:	09 f4       	brne	.+2      	; 0x26f0 <vfprintf+0x3a0>
    26ee:	42 ce       	rjmp	.-892    	; 0x2374 <vfprintf+0x24>
    26f0:	b6 01       	movw	r22, r12
    26f2:	80 e2       	ldi	r24, 0x20	; 32
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	0e 94 9f 13 	call	0x273e	; 0x273e <fputc>
    26fa:	2a 94       	dec	r2
    26fc:	f6 cf       	rjmp	.-20     	; 0x26ea <vfprintf+0x39a>
    26fe:	f6 01       	movw	r30, r12
    2700:	86 81       	ldd	r24, Z+6	; 0x06
    2702:	97 81       	ldd	r25, Z+7	; 0x07
    2704:	02 c0       	rjmp	.+4      	; 0x270a <vfprintf+0x3ba>
    2706:	8f ef       	ldi	r24, 0xFF	; 255
    2708:	9f ef       	ldi	r25, 0xFF	; 255
    270a:	2b 96       	adiw	r28, 0x0b	; 11
    270c:	e2 e1       	ldi	r30, 0x12	; 18
    270e:	0c 94 7f 14 	jmp	0x28fe	; 0x28fe <__epilogue_restores__>

00002712 <strnlen_P>:
    2712:	fc 01       	movw	r30, r24
    2714:	05 90       	lpm	r0, Z+
    2716:	61 50       	subi	r22, 0x01	; 1
    2718:	70 40       	sbci	r23, 0x00	; 0
    271a:	01 10       	cpse	r0, r1
    271c:	d8 f7       	brcc	.-10     	; 0x2714 <strnlen_P+0x2>
    271e:	80 95       	com	r24
    2720:	90 95       	com	r25
    2722:	8e 0f       	add	r24, r30
    2724:	9f 1f       	adc	r25, r31
    2726:	08 95       	ret

00002728 <strnlen>:
    2728:	fc 01       	movw	r30, r24
    272a:	61 50       	subi	r22, 0x01	; 1
    272c:	70 40       	sbci	r23, 0x00	; 0
    272e:	01 90       	ld	r0, Z+
    2730:	01 10       	cpse	r0, r1
    2732:	d8 f7       	brcc	.-10     	; 0x272a <strnlen+0x2>
    2734:	80 95       	com	r24
    2736:	90 95       	com	r25
    2738:	8e 0f       	add	r24, r30
    273a:	9f 1f       	adc	r25, r31
    273c:	08 95       	ret

0000273e <fputc>:
    273e:	0f 93       	push	r16
    2740:	1f 93       	push	r17
    2742:	cf 93       	push	r28
    2744:	df 93       	push	r29
    2746:	fb 01       	movw	r30, r22
    2748:	23 81       	ldd	r18, Z+3	; 0x03
    274a:	21 fd       	sbrc	r18, 1
    274c:	03 c0       	rjmp	.+6      	; 0x2754 <fputc+0x16>
    274e:	8f ef       	ldi	r24, 0xFF	; 255
    2750:	9f ef       	ldi	r25, 0xFF	; 255
    2752:	2c c0       	rjmp	.+88     	; 0x27ac <fputc+0x6e>
    2754:	22 ff       	sbrs	r18, 2
    2756:	16 c0       	rjmp	.+44     	; 0x2784 <fputc+0x46>
    2758:	46 81       	ldd	r20, Z+6	; 0x06
    275a:	57 81       	ldd	r21, Z+7	; 0x07
    275c:	24 81       	ldd	r18, Z+4	; 0x04
    275e:	35 81       	ldd	r19, Z+5	; 0x05
    2760:	42 17       	cp	r20, r18
    2762:	53 07       	cpc	r21, r19
    2764:	44 f4       	brge	.+16     	; 0x2776 <fputc+0x38>
    2766:	a0 81       	ld	r26, Z
    2768:	b1 81       	ldd	r27, Z+1	; 0x01
    276a:	9d 01       	movw	r18, r26
    276c:	2f 5f       	subi	r18, 0xFF	; 255
    276e:	3f 4f       	sbci	r19, 0xFF	; 255
    2770:	20 83       	st	Z, r18
    2772:	31 83       	std	Z+1, r19	; 0x01
    2774:	8c 93       	st	X, r24
    2776:	26 81       	ldd	r18, Z+6	; 0x06
    2778:	37 81       	ldd	r19, Z+7	; 0x07
    277a:	2f 5f       	subi	r18, 0xFF	; 255
    277c:	3f 4f       	sbci	r19, 0xFF	; 255
    277e:	26 83       	std	Z+6, r18	; 0x06
    2780:	37 83       	std	Z+7, r19	; 0x07
    2782:	14 c0       	rjmp	.+40     	; 0x27ac <fputc+0x6e>
    2784:	8b 01       	movw	r16, r22
    2786:	ec 01       	movw	r28, r24
    2788:	fb 01       	movw	r30, r22
    278a:	00 84       	ldd	r0, Z+8	; 0x08
    278c:	f1 85       	ldd	r31, Z+9	; 0x09
    278e:	e0 2d       	mov	r30, r0
    2790:	09 95       	icall
    2792:	89 2b       	or	r24, r25
    2794:	e1 f6       	brne	.-72     	; 0x274e <fputc+0x10>
    2796:	d8 01       	movw	r26, r16
    2798:	16 96       	adiw	r26, 0x06	; 6
    279a:	8d 91       	ld	r24, X+
    279c:	9c 91       	ld	r25, X
    279e:	17 97       	sbiw	r26, 0x07	; 7
    27a0:	01 96       	adiw	r24, 0x01	; 1
    27a2:	16 96       	adiw	r26, 0x06	; 6
    27a4:	8d 93       	st	X+, r24
    27a6:	9c 93       	st	X, r25
    27a8:	17 97       	sbiw	r26, 0x07	; 7
    27aa:	ce 01       	movw	r24, r28
    27ac:	df 91       	pop	r29
    27ae:	cf 91       	pop	r28
    27b0:	1f 91       	pop	r17
    27b2:	0f 91       	pop	r16
    27b4:	08 95       	ret

000027b6 <__ultoa_invert>:
    27b6:	fa 01       	movw	r30, r20
    27b8:	aa 27       	eor	r26, r26
    27ba:	28 30       	cpi	r18, 0x08	; 8
    27bc:	51 f1       	breq	.+84     	; 0x2812 <__ultoa_invert+0x5c>
    27be:	20 31       	cpi	r18, 0x10	; 16
    27c0:	81 f1       	breq	.+96     	; 0x2822 <__ultoa_invert+0x6c>
    27c2:	e8 94       	clt
    27c4:	6f 93       	push	r22
    27c6:	6e 7f       	andi	r22, 0xFE	; 254
    27c8:	6e 5f       	subi	r22, 0xFE	; 254
    27ca:	7f 4f       	sbci	r23, 0xFF	; 255
    27cc:	8f 4f       	sbci	r24, 0xFF	; 255
    27ce:	9f 4f       	sbci	r25, 0xFF	; 255
    27d0:	af 4f       	sbci	r26, 0xFF	; 255
    27d2:	b1 e0       	ldi	r27, 0x01	; 1
    27d4:	3e d0       	rcall	.+124    	; 0x2852 <__ultoa_invert+0x9c>
    27d6:	b4 e0       	ldi	r27, 0x04	; 4
    27d8:	3c d0       	rcall	.+120    	; 0x2852 <__ultoa_invert+0x9c>
    27da:	67 0f       	add	r22, r23
    27dc:	78 1f       	adc	r23, r24
    27de:	89 1f       	adc	r24, r25
    27e0:	9a 1f       	adc	r25, r26
    27e2:	a1 1d       	adc	r26, r1
    27e4:	68 0f       	add	r22, r24
    27e6:	79 1f       	adc	r23, r25
    27e8:	8a 1f       	adc	r24, r26
    27ea:	91 1d       	adc	r25, r1
    27ec:	a1 1d       	adc	r26, r1
    27ee:	6a 0f       	add	r22, r26
    27f0:	71 1d       	adc	r23, r1
    27f2:	81 1d       	adc	r24, r1
    27f4:	91 1d       	adc	r25, r1
    27f6:	a1 1d       	adc	r26, r1
    27f8:	20 d0       	rcall	.+64     	; 0x283a <__ultoa_invert+0x84>
    27fa:	09 f4       	brne	.+2      	; 0x27fe <__ultoa_invert+0x48>
    27fc:	68 94       	set
    27fe:	3f 91       	pop	r19
    2800:	2a e0       	ldi	r18, 0x0A	; 10
    2802:	26 9f       	mul	r18, r22
    2804:	11 24       	eor	r1, r1
    2806:	30 19       	sub	r19, r0
    2808:	30 5d       	subi	r19, 0xD0	; 208
    280a:	31 93       	st	Z+, r19
    280c:	de f6       	brtc	.-74     	; 0x27c4 <__ultoa_invert+0xe>
    280e:	cf 01       	movw	r24, r30
    2810:	08 95       	ret
    2812:	46 2f       	mov	r20, r22
    2814:	47 70       	andi	r20, 0x07	; 7
    2816:	40 5d       	subi	r20, 0xD0	; 208
    2818:	41 93       	st	Z+, r20
    281a:	b3 e0       	ldi	r27, 0x03	; 3
    281c:	0f d0       	rcall	.+30     	; 0x283c <__ultoa_invert+0x86>
    281e:	c9 f7       	brne	.-14     	; 0x2812 <__ultoa_invert+0x5c>
    2820:	f6 cf       	rjmp	.-20     	; 0x280e <__ultoa_invert+0x58>
    2822:	46 2f       	mov	r20, r22
    2824:	4f 70       	andi	r20, 0x0F	; 15
    2826:	40 5d       	subi	r20, 0xD0	; 208
    2828:	4a 33       	cpi	r20, 0x3A	; 58
    282a:	18 f0       	brcs	.+6      	; 0x2832 <__ultoa_invert+0x7c>
    282c:	49 5d       	subi	r20, 0xD9	; 217
    282e:	31 fd       	sbrc	r19, 1
    2830:	40 52       	subi	r20, 0x20	; 32
    2832:	41 93       	st	Z+, r20
    2834:	02 d0       	rcall	.+4      	; 0x283a <__ultoa_invert+0x84>
    2836:	a9 f7       	brne	.-22     	; 0x2822 <__ultoa_invert+0x6c>
    2838:	ea cf       	rjmp	.-44     	; 0x280e <__ultoa_invert+0x58>
    283a:	b4 e0       	ldi	r27, 0x04	; 4
    283c:	a6 95       	lsr	r26
    283e:	97 95       	ror	r25
    2840:	87 95       	ror	r24
    2842:	77 95       	ror	r23
    2844:	67 95       	ror	r22
    2846:	ba 95       	dec	r27
    2848:	c9 f7       	brne	.-14     	; 0x283c <__ultoa_invert+0x86>
    284a:	00 97       	sbiw	r24, 0x00	; 0
    284c:	61 05       	cpc	r22, r1
    284e:	71 05       	cpc	r23, r1
    2850:	08 95       	ret
    2852:	9b 01       	movw	r18, r22
    2854:	ac 01       	movw	r20, r24
    2856:	0a 2e       	mov	r0, r26
    2858:	06 94       	lsr	r0
    285a:	57 95       	ror	r21
    285c:	47 95       	ror	r20
    285e:	37 95       	ror	r19
    2860:	27 95       	ror	r18
    2862:	ba 95       	dec	r27
    2864:	c9 f7       	brne	.-14     	; 0x2858 <__ultoa_invert+0xa2>
    2866:	62 0f       	add	r22, r18
    2868:	73 1f       	adc	r23, r19
    286a:	84 1f       	adc	r24, r20
    286c:	95 1f       	adc	r25, r21
    286e:	a0 1d       	adc	r26, r0
    2870:	08 95       	ret

00002872 <eeprom_update_word>:
    2872:	01 96       	adiw	r24, 0x01	; 1
    2874:	27 2f       	mov	r18, r23
    2876:	0e 94 40 14 	call	0x2880	; 0x2880 <eeprom_update_r18>
    287a:	0c 94 3f 14 	jmp	0x287e	; 0x287e <eeprom_update_byte>

0000287e <eeprom_update_byte>:
    287e:	26 2f       	mov	r18, r22

00002880 <eeprom_update_r18>:
    2880:	0e 94 62 14 	call	0x28c4	; 0x28c4 <eeprom_mapen>
    2884:	00 80       	ld	r0, Z
    2886:	02 16       	cp	r0, r18
    2888:	19 f0       	breq	.+6      	; 0x2890 <eeprom_update_r18+0x10>
    288a:	0e 94 4b 14 	call	0x2896	; 0x2896 <eeprom_write_r18>
    288e:	01 97       	sbiw	r24, 0x01	; 1
    2890:	01 97       	sbiw	r24, 0x01	; 1
    2892:	08 95       	ret

00002894 <eeprom_write_byte>:
    2894:	26 2f       	mov	r18, r22

00002896 <eeprom_write_r18>:
    2896:	af 93       	push	r26
    2898:	bf 93       	push	r27
    289a:	e0 e0       	ldi	r30, 0x00	; 0
    289c:	f0 e1       	ldi	r31, 0x10	; 16
    289e:	32 81       	ldd	r19, Z+2	; 0x02
    28a0:	31 fd       	sbrc	r19, 1
    28a2:	fd cf       	rjmp	.-6      	; 0x289e <eeprom_write_r18+0x8>
    28a4:	dc 01       	movw	r26, r24
    28a6:	a0 50       	subi	r26, 0x00	; 0
    28a8:	bc 4e       	sbci	r27, 0xEC	; 236
    28aa:	2c 93       	st	X, r18
    28ac:	2d e9       	ldi	r18, 0x9D	; 157
    28ae:	24 bf       	out	0x34, r18	; 52
    28b0:	23 e0       	ldi	r18, 0x03	; 3
    28b2:	20 83       	st	Z, r18
    28b4:	01 96       	adiw	r24, 0x01	; 1
    28b6:	bf 91       	pop	r27
    28b8:	af 91       	pop	r26
    28ba:	08 95       	ret

000028bc <eeprom_read_byte>:
    28bc:	03 d0       	rcall	.+6      	; 0x28c4 <eeprom_mapen>
    28be:	80 81       	ld	r24, Z
    28c0:	99 27       	eor	r25, r25
    28c2:	08 95       	ret

000028c4 <eeprom_mapen>:
    28c4:	fc 01       	movw	r30, r24
    28c6:	e0 50       	subi	r30, 0x00	; 0
    28c8:	fc 4e       	sbci	r31, 0xEC	; 236
    28ca:	08 95       	ret

000028cc <__prologue_saves__>:
    28cc:	2f 92       	push	r2
    28ce:	3f 92       	push	r3
    28d0:	4f 92       	push	r4
    28d2:	5f 92       	push	r5
    28d4:	6f 92       	push	r6
    28d6:	7f 92       	push	r7
    28d8:	8f 92       	push	r8
    28da:	9f 92       	push	r9
    28dc:	af 92       	push	r10
    28de:	bf 92       	push	r11
    28e0:	cf 92       	push	r12
    28e2:	df 92       	push	r13
    28e4:	ef 92       	push	r14
    28e6:	ff 92       	push	r15
    28e8:	0f 93       	push	r16
    28ea:	1f 93       	push	r17
    28ec:	cf 93       	push	r28
    28ee:	df 93       	push	r29
    28f0:	cd b7       	in	r28, 0x3d	; 61
    28f2:	de b7       	in	r29, 0x3e	; 62
    28f4:	ca 1b       	sub	r28, r26
    28f6:	db 0b       	sbc	r29, r27
    28f8:	cd bf       	out	0x3d, r28	; 61
    28fa:	de bf       	out	0x3e, r29	; 62
    28fc:	09 94       	ijmp

000028fe <__epilogue_restores__>:
    28fe:	2a 88       	ldd	r2, Y+18	; 0x12
    2900:	39 88       	ldd	r3, Y+17	; 0x11
    2902:	48 88       	ldd	r4, Y+16	; 0x10
    2904:	5f 84       	ldd	r5, Y+15	; 0x0f
    2906:	6e 84       	ldd	r6, Y+14	; 0x0e
    2908:	7d 84       	ldd	r7, Y+13	; 0x0d
    290a:	8c 84       	ldd	r8, Y+12	; 0x0c
    290c:	9b 84       	ldd	r9, Y+11	; 0x0b
    290e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2910:	b9 84       	ldd	r11, Y+9	; 0x09
    2912:	c8 84       	ldd	r12, Y+8	; 0x08
    2914:	df 80       	ldd	r13, Y+7	; 0x07
    2916:	ee 80       	ldd	r14, Y+6	; 0x06
    2918:	fd 80       	ldd	r15, Y+5	; 0x05
    291a:	0c 81       	ldd	r16, Y+4	; 0x04
    291c:	1b 81       	ldd	r17, Y+3	; 0x03
    291e:	aa 81       	ldd	r26, Y+2	; 0x02
    2920:	b9 81       	ldd	r27, Y+1	; 0x01
    2922:	ce 0f       	add	r28, r30
    2924:	d1 1d       	adc	r29, r1
    2926:	cd bf       	out	0x3d, r28	; 61
    2928:	de bf       	out	0x3e, r29	; 62
    292a:	ed 01       	movw	r28, r26
    292c:	08 95       	ret

0000292e <_exit>:
    292e:	f8 94       	cli

00002930 <__stop_program>:
    2930:	ff cf       	rjmp	.-2      	; 0x2930 <__stop_program>
