
PCA-34.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00803800  00002994  00002a48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002952  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000042  0000a952  00002952  00002a06  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000df  00803808  00803808  00002a50  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00002a50  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002aac  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000238  00000000  00000000  00002af0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005a5c  00000000  00000000  00002d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000024e3  00000000  00000000  00008784  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001e88  00000000  00000000  0000ac67  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000608  00000000  00000000  0000caf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000018ee  00000000  00000000  0000d0f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000260f  00000000  00000000  0000e9e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000160  00000000  00000000  00010ff5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 9c 0c 	jmp	0x1938	; 0x1938 <__vector_6>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 76 0c 	jmp	0x18ec	; 0x18ec <__vector_25>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	cd bf       	out	0x3d, r28	; 61
      84:	df e3       	ldi	r29, 0x3F	; 63
      86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
      88:	18 e3       	ldi	r17, 0x38	; 56
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b8 e3       	ldi	r27, 0x38	; 56
      8e:	e4 e9       	ldi	r30, 0x94	; 148
      90:	f9 e2       	ldi	r31, 0x29	; 41
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a8 30       	cpi	r26, 0x08	; 8
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	28 e3       	ldi	r18, 0x38	; 56
      a0:	a8 e0       	ldi	r26, 0x08	; 8
      a2:	b8 e3       	ldi	r27, 0x38	; 56
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a7 3e       	cpi	r26, 0xE7	; 231
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 18 0b 	call	0x1630	; 0x1630 <main>
      b2:	0c 94 a7 14 	jmp	0x294e	; 0x294e <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <lcd_update>:
	
	lcd_update(TRUE);
}

void lcd_update(bool two_line)
{
      ba:	9f 92       	push	r9
      bc:	af 92       	push	r10
      be:	bf 92       	push	r11
      c0:	cf 92       	push	r12
      c2:	df 92       	push	r13
      c4:	ef 92       	push	r14
      c6:	ff 92       	push	r15
      c8:	0f 93       	push	r16
      ca:	1f 93       	push	r17
      cc:	cf 93       	push	r28
      ce:	df 93       	push	r29
	unsigned char n = two_line ? 2 : 1;
      d0:	81 11       	cpse	r24, r1
      d2:	2b c0       	rjmp	.+86     	; 0x12a <lcd_update+0x70>
      d4:	99 24       	eor	r9, r9
      d6:	93 94       	inc	r9
      d8:	2b c0       	rjmp	.+86     	; 0x130 <lcd_update+0x76>
	for (unsigned char i = 0; i < n; i++)
	{
		for (unsigned char j = 0; j < 20; j++)
		{
			if (lcd_screen[i][j] != lcd_screen_update[i][j])
      da:	f7 01       	movw	r30, r14
      dc:	20 81       	ld	r18, Z
      de:	31 81       	ldd	r19, Z+1	; 0x01
      e0:	88 81       	ld	r24, Y
      e2:	99 81       	ldd	r25, Y+1	; 0x01
      e4:	28 17       	cp	r18, r24
      e6:	39 07       	cpc	r19, r25
      e8:	61 f0       	breq	.+24     	; 0x102 <lcd_update+0x48>
			{
				setCursor(i, j);
      ea:	61 2f       	mov	r22, r17
      ec:	80 2f       	mov	r24, r16
      ee:	0e 94 06 0b 	call	0x160c	; 0x160c <setCursor>
				display_character(lcd_screen_update[i][j]);
      f2:	88 81       	ld	r24, Y
      f4:	0e 94 67 0a 	call	0x14ce	; 0x14ce <display_character>
				lcd_screen[i][j] = lcd_screen_update[i][j];
      f8:	88 81       	ld	r24, Y
      fa:	99 81       	ldd	r25, Y+1	; 0x01
      fc:	f7 01       	movw	r30, r14
      fe:	80 83       	st	Z, r24
     100:	91 83       	std	Z+1, r25	; 0x01
void lcd_update(bool two_line)
{
	unsigned char n = two_line ? 2 : 1;
	for (unsigned char i = 0; i < n; i++)
	{
		for (unsigned char j = 0; j < 20; j++)
     102:	1f 5f       	subi	r17, 0xFF	; 255
     104:	f2 e0       	ldi	r31, 0x02	; 2
     106:	ef 0e       	add	r14, r31
     108:	f1 1c       	adc	r15, r1
     10a:	22 96       	adiw	r28, 0x02	; 2
     10c:	14 31       	cpi	r17, 0x14	; 20
     10e:	29 f7       	brne	.-54     	; 0xda <lcd_update+0x20>
}

void lcd_update(bool two_line)
{
	unsigned char n = two_line ? 2 : 1;
	for (unsigned char i = 0; i < n; i++)
     110:	0f 5f       	subi	r16, 0xFF	; 255
     112:	88 e2       	ldi	r24, 0x28	; 40
     114:	a8 0e       	add	r10, r24
     116:	b1 1c       	adc	r11, r1
     118:	e8 e2       	ldi	r30, 0x28	; 40
     11a:	ce 0e       	add	r12, r30
     11c:	d1 1c       	adc	r13, r1
     11e:	09 15       	cp	r16, r9
     120:	a8 f4       	brcc	.+42     	; 0x14c <lcd_update+0x92>
	
	lcd_update(TRUE);
}

void lcd_update(bool two_line)
{
     122:	e6 01       	movw	r28, r12
     124:	75 01       	movw	r14, r10
     126:	10 e0       	ldi	r17, 0x00	; 0
     128:	d8 cf       	rjmp	.-80     	; 0xda <lcd_update+0x20>
	unsigned char n = two_line ? 2 : 1;
     12a:	68 94       	set
     12c:	99 24       	eor	r9, r9
     12e:	91 f8       	bld	r9, 1
     130:	0f 2e       	mov	r0, r31
     132:	fc e5       	ldi	r31, 0x5C	; 92
     134:	af 2e       	mov	r10, r31
     136:	f8 e3       	ldi	r31, 0x38	; 56
     138:	bf 2e       	mov	r11, r31
     13a:	f0 2d       	mov	r31, r0
     13c:	0f 2e       	mov	r0, r31
     13e:	f8 e0       	ldi	r31, 0x08	; 8
     140:	cf 2e       	mov	r12, r31
     142:	f8 e3       	ldi	r31, 0x38	; 56
     144:	df 2e       	mov	r13, r31
     146:	f0 2d       	mov	r31, r0
	
	lcd_update(TRUE);
}

void lcd_update(bool two_line)
{
     148:	00 e0       	ldi	r16, 0x00	; 0
     14a:	eb cf       	rjmp	.-42     	; 0x122 <lcd_update+0x68>
				display_character(lcd_screen_update[i][j]);
				lcd_screen[i][j] = lcd_screen_update[i][j];
			}
		}
	}
}
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	1f 91       	pop	r17
     152:	0f 91       	pop	r16
     154:	ff 90       	pop	r15
     156:	ef 90       	pop	r14
     158:	df 90       	pop	r13
     15a:	cf 90       	pop	r12
     15c:	bf 90       	pop	r11
     15e:	af 90       	pop	r10
     160:	9f 90       	pop	r9
     162:	08 95       	ret

00000164 <display_current_voltage>:
	
	desired_current_temp = desired_current;
}

void display_current_voltage(uint16_t current, uint16_t voltage)
{
     164:	3f 92       	push	r3
     166:	4f 92       	push	r4
     168:	5f 92       	push	r5
     16a:	6f 92       	push	r6
     16c:	7f 92       	push	r7
     16e:	8f 92       	push	r8
     170:	9f 92       	push	r9
     172:	af 92       	push	r10
     174:	bf 92       	push	r11
     176:	cf 92       	push	r12
     178:	df 92       	push	r13
     17a:	ef 92       	push	r14
     17c:	ff 92       	push	r15
     17e:	0f 93       	push	r16
     180:	1f 93       	push	r17
     182:	cf 93       	push	r28
     184:	df 93       	push	r29
     186:	00 d0       	rcall	.+0      	; 0x188 <display_current_voltage+0x24>
     188:	00 d0       	rcall	.+0      	; 0x18a <display_current_voltage+0x26>
     18a:	cd b7       	in	r28, 0x3d	; 61
     18c:	de b7       	in	r29, 0x3e	; 62
     18e:	2c 01       	movw	r4, r24
	uint16_t cur = current;
	uint16_t vol = voltage;
	
	lcd_col_counter = 0;
     190:	10 92 d0 38 	sts	0x38D0, r1	; 0x8038d0 <lcd_col_counter>
	lcd_row_counter = 0;
     194:	10 92 d7 38 	sts	0x38D7, r1	; 0x8038d7 <lcd_row_counter>
     198:	66 2e       	mov	r6, r22
     19a:	77 2e       	mov	r7, r23
     19c:	29 e5       	ldi	r18, 0x59	; 89
     19e:	62 16       	cp	r6, r18
     1a0:	2b e1       	ldi	r18, 0x1B	; 27
     1a2:	72 06       	cpc	r7, r18
     1a4:	30 f0       	brcs	.+12     	; 0x1b2 <display_current_voltage+0x4e>
     1a6:	0f 2e       	mov	r0, r31
     1a8:	f8 e5       	ldi	r31, 0x58	; 88
     1aa:	6f 2e       	mov	r6, r31
     1ac:	fb e1       	ldi	r31, 0x1B	; 27
     1ae:	7f 2e       	mov	r7, r31
     1b0:	f0 2d       	mov	r31, r0
	if (vol > 7000)
	{
		vol = 7000;
	}
	
	int length = snprintf(NULL, 0, "%02d.%dV ", vol / 100, vol / 10 % 10);
     1b2:	93 01       	movw	r18, r6
     1b4:	ad ec       	ldi	r26, 0xCD	; 205
     1b6:	bc ec       	ldi	r27, 0xCC	; 204
     1b8:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__umulhisi3>
     1bc:	ac 01       	movw	r20, r24
     1be:	56 95       	lsr	r21
     1c0:	47 95       	ror	r20
     1c2:	56 95       	lsr	r21
     1c4:	47 95       	ror	r20
     1c6:	56 95       	lsr	r21
     1c8:	47 95       	ror	r20
     1ca:	9a 01       	movw	r18, r20
     1cc:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__umulhisi3>
     1d0:	4c 01       	movw	r8, r24
     1d2:	96 94       	lsr	r9
     1d4:	87 94       	ror	r8
     1d6:	96 94       	lsr	r9
     1d8:	87 94       	ror	r8
     1da:	96 94       	lsr	r9
     1dc:	87 94       	ror	r8
     1de:	c4 01       	movw	r24, r8
     1e0:	88 0f       	add	r24, r24
     1e2:	99 1f       	adc	r25, r25
     1e4:	88 0c       	add	r8, r8
     1e6:	99 1c       	adc	r9, r9
     1e8:	88 0c       	add	r8, r8
     1ea:	99 1c       	adc	r9, r9
     1ec:	88 0c       	add	r8, r8
     1ee:	99 1c       	adc	r9, r9
     1f0:	88 0e       	add	r8, r24
     1f2:	99 1e       	adc	r9, r25
     1f4:	ca 01       	movw	r24, r20
     1f6:	88 19       	sub	r24, r8
     1f8:	99 09       	sbc	r25, r9
     1fa:	4c 01       	movw	r8, r24
     1fc:	93 01       	movw	r18, r6
     1fe:	36 95       	lsr	r19
     200:	27 95       	ror	r18
     202:	36 95       	lsr	r19
     204:	27 95       	ror	r18
     206:	ab e7       	ldi	r26, 0x7B	; 123
     208:	b4 e1       	ldi	r27, 0x14	; 20
     20a:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__umulhisi3>
     20e:	6c 01       	movw	r12, r24
     210:	d6 94       	lsr	r13
     212:	c7 94       	ror	r12
     214:	9f 92       	push	r9
     216:	8f 92       	push	r8
     218:	df 92       	push	r13
     21a:	cf 92       	push	r12
     21c:	0f 2e       	mov	r0, r31
     21e:	f2 e5       	ldi	r31, 0x52	; 82
     220:	ef 2e       	mov	r14, r31
     222:	f9 ea       	ldi	r31, 0xA9	; 169
     224:	ff 2e       	mov	r15, r31
     226:	f0 2d       	mov	r31, r0
     228:	ff 92       	push	r15
     22a:	ef 92       	push	r14
     22c:	1f 92       	push	r1
     22e:	1f 92       	push	r1
     230:	1f 92       	push	r1
     232:	1f 92       	push	r1
     234:	0e 94 83 11 	call	0x2306	; 0x2306 <snprintf>
     238:	8c 01       	movw	r16, r24
	char* str = malloc(length + 1);
     23a:	5c 01       	movw	r10, r24
     23c:	9f ef       	ldi	r25, 0xFF	; 255
     23e:	a9 1a       	sub	r10, r25
     240:	b9 0a       	sbc	r11, r25
     242:	c5 01       	movw	r24, r10
     244:	0e 94 62 10 	call	0x20c4	; 0x20c4 <malloc>
     248:	89 83       	std	Y+1, r24	; 0x01
     24a:	9a 83       	std	Y+2, r25	; 0x02
	snprintf(str, length + 1, "%02d.%dV ", vol / 100, vol / 10 % 10);
     24c:	9f 92       	push	r9
     24e:	8f 92       	push	r8
     250:	df 92       	push	r13
     252:	cf 92       	push	r12
     254:	ff 92       	push	r15
     256:	ef 92       	push	r14
     258:	bf 92       	push	r11
     25a:	af 92       	push	r10
     25c:	9f 93       	push	r25
     25e:	8f 93       	push	r24
     260:	0e 94 83 11 	call	0x2306	; 0x2306 <snprintf>
	
	for(unsigned char i = 0; i < length; i++)
     264:	cd bf       	out	0x3d, r28	; 61
     266:	de bf       	out	0x3e, r29	; 62
     268:	10 16       	cp	r1, r16
     26a:	11 06       	cpc	r1, r17
     26c:	0c f5       	brge	.+66     	; 0x2b0 <display_current_voltage+0x14c>
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = str[i];
     26e:	40 91 d7 38 	lds	r20, 0x38D7	; 0x8038d7 <lcd_row_counter>
     272:	90 91 d0 38 	lds	r25, 0x38D0	; 0x8038d0 <lcd_col_counter>
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	f4 e1       	ldi	r31, 0x14	; 20
     27a:	4f 9f       	mul	r20, r31
     27c:	a0 01       	movw	r20, r0
     27e:	11 24       	eor	r1, r1
     280:	fa 01       	movw	r30, r20
     282:	e9 0f       	add	r30, r25
     284:	f1 1d       	adc	r31, r1
     286:	ee 0f       	add	r30, r30
     288:	ff 1f       	adc	r31, r31
     28a:	e8 5f       	subi	r30, 0xF8	; 248
     28c:	f7 4c       	sbci	r31, 0xC7	; 199
     28e:	a9 81       	ldd	r26, Y+1	; 0x01
     290:	ba 81       	ldd	r27, Y+2	; 0x02
     292:	a8 0f       	add	r26, r24
     294:	b1 1d       	adc	r27, r1
     296:	2c 91       	ld	r18, X
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	20 83       	st	Z, r18
     29c:	31 83       	std	Z+1, r19	; 0x01
		lcd_col_counter++;
     29e:	9f 5f       	subi	r25, 0xFF	; 255
	
	int length = snprintf(NULL, 0, "%02d.%dV ", vol / 100, vol / 10 % 10);
	char* str = malloc(length + 1);
	snprintf(str, length + 1, "%02d.%dV ", vol / 100, vol / 10 % 10);
	
	for(unsigned char i = 0; i < length; i++)
     2a0:	8f 5f       	subi	r24, 0xFF	; 255
     2a2:	28 2f       	mov	r18, r24
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	20 17       	cp	r18, r16
     2a8:	31 07       	cpc	r19, r17
     2aa:	54 f3       	brlt	.-44     	; 0x280 <display_current_voltage+0x11c>
     2ac:	90 93 d0 38 	sts	0x38D0, r25	; 0x8038d0 <lcd_col_counter>
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = str[i];
		lcd_col_counter++;
	}
	
	free(str);
     2b0:	89 81       	ldd	r24, Y+1	; 0x01
     2b2:	9a 81       	ldd	r25, Y+2	; 0x02
     2b4:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <free>
	
	vol = (vol + 50) / 100; // round to nearest hundred and get hundreds
     2b8:	22 e3       	ldi	r18, 0x32	; 50
     2ba:	62 0e       	add	r6, r18
     2bc:	71 1c       	adc	r7, r1
     2be:	76 94       	lsr	r7
     2c0:	67 94       	ror	r6
     2c2:	76 94       	lsr	r7
     2c4:	67 94       	ror	r6
     2c6:	93 01       	movw	r18, r6
     2c8:	ab e7       	ldi	r26, 0x7B	; 123
     2ca:	b4 e1       	ldi	r27, 0x14	; 20
     2cc:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__umulhisi3>
     2d0:	96 95       	lsr	r25
     2d2:	87 95       	ror	r24
     2d4:	89 83       	std	Y+1, r24	; 0x01
     2d6:	9a 83       	std	Y+2, r25	; 0x02
	
	uint8_t full_bars = vol / 5;
	uint8_t last_bar  = vol % 5;
     2d8:	9c 01       	movw	r18, r24
     2da:	ad ec       	ldi	r26, 0xCD	; 205
     2dc:	bc ec       	ldi	r27, 0xCC	; 204
     2de:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__umulhisi3>
     2e2:	96 95       	lsr	r25
     2e4:	87 95       	ror	r24
     2e6:	96 95       	lsr	r25
     2e8:	87 95       	ror	r24
     2ea:	9c 01       	movw	r18, r24
     2ec:	22 0f       	add	r18, r18
     2ee:	33 1f       	adc	r19, r19
     2f0:	22 0f       	add	r18, r18
     2f2:	33 1f       	adc	r19, r19
     2f4:	82 0f       	add	r24, r18
     2f6:	93 1f       	adc	r25, r19
     2f8:	59 81       	ldd	r21, Y+1	; 0x01
     2fa:	58 1b       	sub	r21, r24
     2fc:	93 01       	movw	r18, r6
     2fe:	a5 ec       	ldi	r26, 0xC5	; 197
     300:	b0 e2       	ldi	r27, 0x20	; 32
     302:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__umulhisi3>
     306:	92 95       	swap	r25
     308:	82 95       	swap	r24
     30a:	8f 70       	andi	r24, 0x0F	; 15
     30c:	89 27       	eor	r24, r25
     30e:	9f 70       	andi	r25, 0x0F	; 15
     310:	89 27       	eor	r24, r25
	
	for(int i = 0; i < full_bars; i++)
     312:	99 27       	eor	r25, r25
     314:	18 16       	cp	r1, r24
     316:	19 06       	cpc	r1, r25
     318:	0c f0       	brlt	.+2      	; 0x31c <display_current_voltage+0x1b8>
     31a:	57 c0       	rjmp	.+174    	; 0x3ca <display_current_voltage+0x266>
	{
		if (i >= ((MAX_VOLTAGE + 50) / 100) / 5 - 1 && vol >= (MAX_VOLTAGE + 50) / 100)
		{
			lcd_screen_update[lcd_row_counter][lcd_col_counter] = 6;
     31c:	60 91 d7 38 	lds	r22, 0x38D7	; 0x8038d7 <lcd_row_counter>
     320:	40 91 d0 38 	lds	r20, 0x38D0	; 0x8038d0 <lcd_col_counter>
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	30 e0       	ldi	r19, 0x00	; 0
				lcd_screen_update[lcd_row_counter][lcd_col_counter] = 5;
				lcd_col_counter++;
			}
			else
			{
				lcd_screen_update[lcd_row_counter][lcd_col_counter] = 4;
     328:	e4 e1       	ldi	r30, 0x14	; 20
     32a:	6e 9f       	mul	r22, r30
     32c:	b0 01       	movw	r22, r0
     32e:	11 24       	eor	r1, r1
     330:	04 e0       	ldi	r16, 0x04	; 4
     332:	10 e0       	ldi	r17, 0x00	; 0
		}
		else
		{
			if ((i + 1) % 2 == 0)
			{
				lcd_screen_update[lcd_row_counter][lcd_col_counter] = 5;
     334:	a5 e0       	ldi	r26, 0x05	; 5
     336:	b0 e0       	ldi	r27, 0x00	; 0
	
	for(int i = 0; i < full_bars; i++)
	{
		if (i >= ((MAX_VOLTAGE + 50) / 100) / 5 - 1 && vol >= (MAX_VOLTAGE + 50) / 100)
		{
			lcd_screen_update[lcd_row_counter][lcd_col_counter] = 6;
     338:	0f 2e       	mov	r0, r31
     33a:	f6 e0       	ldi	r31, 0x06	; 6
     33c:	ef 2e       	mov	r14, r31
     33e:	f1 2c       	mov	r15, r1
     340:	f0 2d       	mov	r31, r0
	uint8_t full_bars = vol / 5;
	uint8_t last_bar  = vol % 5;
	
	for(int i = 0; i < full_bars; i++)
	{
		if (i >= ((MAX_VOLTAGE + 50) / 100) / 5 - 1 && vol >= (MAX_VOLTAGE + 50) / 100)
     342:	29 30       	cpi	r18, 0x09	; 9
     344:	31 05       	cpc	r19, r1
     346:	f4 f0       	brlt	.+60     	; 0x384 <display_current_voltage+0x220>
     348:	e9 81       	ldd	r30, Y+1	; 0x01
     34a:	fa 81       	ldd	r31, Y+2	; 0x02
     34c:	f2 97       	sbiw	r30, 0x32	; 50
     34e:	d0 f0       	brcs	.+52     	; 0x384 <display_current_voltage+0x220>
		{
			lcd_screen_update[lcd_row_counter][lcd_col_counter] = 6;
     350:	fb 01       	movw	r30, r22
     352:	e4 0f       	add	r30, r20
     354:	f1 1d       	adc	r31, r1
     356:	ee 0f       	add	r30, r30
     358:	ff 1f       	adc	r31, r31
     35a:	e8 5f       	subi	r30, 0xF8	; 248
     35c:	f7 4c       	sbci	r31, 0xC7	; 199
     35e:	e0 82       	st	Z, r14
     360:	f1 82       	std	Z+1, r15	; 0x01
			lcd_col_counter++;
     362:	e1 e0       	ldi	r30, 0x01	; 1
     364:	e4 0f       	add	r30, r20
			if (last_bar != 0)
     366:	55 23       	and	r21, r21
     368:	39 f1       	breq	.+78     	; 0x3b8 <display_current_voltage+0x254>
			{
				lcd_screen_update[lcd_row_counter][lcd_col_counter] = 6;
     36a:	6b 01       	movw	r12, r22
     36c:	ce 0e       	add	r12, r30
     36e:	d1 1c       	adc	r13, r1
     370:	f6 01       	movw	r30, r12
     372:	ee 0f       	add	r30, r30
     374:	ff 1f       	adc	r31, r31
     376:	e8 5f       	subi	r30, 0xF8	; 248
     378:	f7 4c       	sbci	r31, 0xC7	; 199
     37a:	e0 82       	st	Z, r14
     37c:	f1 82       	std	Z+1, r15	; 0x01
				lcd_col_counter++;
     37e:	4e 5f       	subi	r20, 0xFE	; 254
				last_bar = 0;
     380:	50 e0       	ldi	r21, 0x00	; 0
     382:	1b c0       	rjmp	.+54     	; 0x3ba <display_current_voltage+0x256>
			}
		}
		else
		{
			if ((i + 1) % 2 == 0)
     384:	f9 01       	movw	r30, r18
     386:	31 96       	adiw	r30, 0x01	; 1
     388:	e0 fd       	sbrc	r30, 0
     38a:	0b c0       	rjmp	.+22     	; 0x3a2 <display_current_voltage+0x23e>
			{
				lcd_screen_update[lcd_row_counter][lcd_col_counter] = 5;
     38c:	fb 01       	movw	r30, r22
     38e:	e4 0f       	add	r30, r20
     390:	f1 1d       	adc	r31, r1
     392:	ee 0f       	add	r30, r30
     394:	ff 1f       	adc	r31, r31
     396:	e8 5f       	subi	r30, 0xF8	; 248
     398:	f7 4c       	sbci	r31, 0xC7	; 199
     39a:	a0 83       	st	Z, r26
     39c:	b1 83       	std	Z+1, r27	; 0x01
				lcd_col_counter++;
     39e:	4f 5f       	subi	r20, 0xFF	; 255
     3a0:	0c c0       	rjmp	.+24     	; 0x3ba <display_current_voltage+0x256>
			}
			else
			{
				lcd_screen_update[lcd_row_counter][lcd_col_counter] = 4;
     3a2:	fb 01       	movw	r30, r22
     3a4:	e4 0f       	add	r30, r20
     3a6:	f1 1d       	adc	r31, r1
     3a8:	ee 0f       	add	r30, r30
     3aa:	ff 1f       	adc	r31, r31
     3ac:	e8 5f       	subi	r30, 0xF8	; 248
     3ae:	f7 4c       	sbci	r31, 0xC7	; 199
     3b0:	00 83       	st	Z, r16
     3b2:	11 83       	std	Z+1, r17	; 0x01
				lcd_col_counter++;
     3b4:	4f 5f       	subi	r20, 0xFF	; 255
     3b6:	01 c0       	rjmp	.+2      	; 0x3ba <display_current_voltage+0x256>
	for(int i = 0; i < full_bars; i++)
	{
		if (i >= ((MAX_VOLTAGE + 50) / 100) / 5 - 1 && vol >= (MAX_VOLTAGE + 50) / 100)
		{
			lcd_screen_update[lcd_row_counter][lcd_col_counter] = 6;
			lcd_col_counter++;
     3b8:	4e 2f       	mov	r20, r30
	vol = (vol + 50) / 100; // round to nearest hundred and get hundreds
	
	uint8_t full_bars = vol / 5;
	uint8_t last_bar  = vol % 5;
	
	for(int i = 0; i < full_bars; i++)
     3ba:	2f 5f       	subi	r18, 0xFF	; 255
     3bc:	3f 4f       	sbci	r19, 0xFF	; 255
     3be:	28 17       	cp	r18, r24
     3c0:	39 07       	cpc	r19, r25
     3c2:	09 f0       	breq	.+2      	; 0x3c6 <display_current_voltage+0x262>
     3c4:	be cf       	rjmp	.-132    	; 0x342 <display_current_voltage+0x1de>
     3c6:	40 93 d0 38 	sts	0x38D0, r20	; 0x8038d0 <lcd_col_counter>
				lcd_col_counter++;
			}
		}
	}
	
	if (last_bar != 0)
     3ca:	55 23       	and	r21, r21
     3cc:	b9 f0       	breq	.+46     	; 0x3fc <display_current_voltage+0x298>
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = last_bar - 1;
     3ce:	40 91 d0 38 	lds	r20, 0x38D0	; 0x8038d0 <lcd_col_counter>
     3d2:	e0 91 d7 38 	lds	r30, 0x38D7	; 0x8038d7 <lcd_row_counter>
     3d6:	24 e1       	ldi	r18, 0x14	; 20
     3d8:	e2 9f       	mul	r30, r18
     3da:	f0 01       	movw	r30, r0
     3dc:	11 24       	eor	r1, r1
     3de:	e4 0f       	add	r30, r20
     3e0:	f1 1d       	adc	r31, r1
     3e2:	ee 0f       	add	r30, r30
     3e4:	ff 1f       	adc	r31, r31
     3e6:	e8 5f       	subi	r30, 0xF8	; 248
     3e8:	f7 4c       	sbci	r31, 0xC7	; 199
     3ea:	25 2f       	mov	r18, r21
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	21 50       	subi	r18, 0x01	; 1
     3f0:	31 09       	sbc	r19, r1
     3f2:	20 83       	st	Z, r18
     3f4:	31 83       	std	Z+1, r19	; 0x01
		lcd_col_counter++;
     3f6:	4f 5f       	subi	r20, 0xFF	; 255
     3f8:	40 93 d0 38 	sts	0x38D0, r20	; 0x8038d0 <lcd_col_counter>
	}
	
	for (int i = full_bars; i < 20; i++)
     3fc:	84 31       	cpi	r24, 0x14	; 20
     3fe:	91 05       	cpc	r25, r1
     400:	c4 f4       	brge	.+48     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = ' ';
     402:	40 91 d7 38 	lds	r20, 0x38D7	; 0x8038d7 <lcd_row_counter>
     406:	20 91 d0 38 	lds	r18, 0x38D0	; 0x8038d0 <lcd_col_counter>
     40a:	34 e1       	ldi	r19, 0x14	; 20
     40c:	43 9f       	mul	r20, r19
     40e:	a0 01       	movw	r20, r0
     410:	11 24       	eor	r1, r1
     412:	60 e2       	ldi	r22, 0x20	; 32
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	fa 01       	movw	r30, r20
     418:	e2 0f       	add	r30, r18
     41a:	f1 1d       	adc	r31, r1
     41c:	ee 0f       	add	r30, r30
     41e:	ff 1f       	adc	r31, r31
     420:	e8 5f       	subi	r30, 0xF8	; 248
     422:	f7 4c       	sbci	r31, 0xC7	; 199
     424:	60 83       	st	Z, r22
     426:	71 83       	std	Z+1, r23	; 0x01
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = last_bar - 1;
		lcd_col_counter++;
	}
	
	for (int i = full_bars; i < 20; i++)
     428:	01 96       	adiw	r24, 0x01	; 1
     42a:	2f 5f       	subi	r18, 0xFF	; 255
     42c:	84 31       	cpi	r24, 0x14	; 20
     42e:	91 05       	cpc	r25, r1
     430:	91 f7       	brne	.-28     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = ' ';
		lcd_col_counter++;
	}
	// FINISH writing voltage number
	
	lcd_row_counter++;
     432:	80 91 d7 38 	lds	r24, 0x38D7	; 0x8038d7 <lcd_row_counter>
     436:	8f 5f       	subi	r24, 0xFF	; 255
     438:	80 93 d7 38 	sts	0x38D7, r24	; 0x8038d7 <lcd_row_counter>
	lcd_col_counter = 0;
     43c:	10 92 d0 38 	sts	0x38D0, r1	; 0x8038d0 <lcd_col_counter>
	
	// START writing current number in format %02d.%dA
	
	length = snprintf(NULL, 0, "%02d.%dA ", cur / 100, cur / 10 % 10);
     440:	92 01       	movw	r18, r4
     442:	ad ec       	ldi	r26, 0xCD	; 205
     444:	bc ec       	ldi	r27, 0xCC	; 204
     446:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__umulhisi3>
     44a:	ac 01       	movw	r20, r24
     44c:	56 95       	lsr	r21
     44e:	47 95       	ror	r20
     450:	56 95       	lsr	r21
     452:	47 95       	ror	r20
     454:	56 95       	lsr	r21
     456:	47 95       	ror	r20
     458:	9a 01       	movw	r18, r20
     45a:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__umulhisi3>
     45e:	4c 01       	movw	r8, r24
     460:	96 94       	lsr	r9
     462:	87 94       	ror	r8
     464:	96 94       	lsr	r9
     466:	87 94       	ror	r8
     468:	96 94       	lsr	r9
     46a:	87 94       	ror	r8
     46c:	c4 01       	movw	r24, r8
     46e:	88 0f       	add	r24, r24
     470:	99 1f       	adc	r25, r25
     472:	88 0c       	add	r8, r8
     474:	99 1c       	adc	r9, r9
     476:	88 0c       	add	r8, r8
     478:	99 1c       	adc	r9, r9
     47a:	88 0c       	add	r8, r8
     47c:	99 1c       	adc	r9, r9
     47e:	88 0e       	add	r8, r24
     480:	99 1e       	adc	r9, r25
     482:	ca 01       	movw	r24, r20
     484:	88 19       	sub	r24, r8
     486:	99 09       	sbc	r25, r9
     488:	4c 01       	movw	r8, r24
     48a:	92 01       	movw	r18, r4
     48c:	36 95       	lsr	r19
     48e:	27 95       	ror	r18
     490:	36 95       	lsr	r19
     492:	27 95       	ror	r18
     494:	ab e7       	ldi	r26, 0x7B	; 123
     496:	b4 e1       	ldi	r27, 0x14	; 20
     498:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__umulhisi3>
     49c:	6c 01       	movw	r12, r24
     49e:	d6 94       	lsr	r13
     4a0:	c7 94       	ror	r12
     4a2:	9f 92       	push	r9
     4a4:	8f 92       	push	r8
     4a6:	df 92       	push	r13
     4a8:	cf 92       	push	r12
     4aa:	0f 2e       	mov	r0, r31
     4ac:	fc e5       	ldi	r31, 0x5C	; 92
     4ae:	ef 2e       	mov	r14, r31
     4b0:	f9 ea       	ldi	r31, 0xA9	; 169
     4b2:	ff 2e       	mov	r15, r31
     4b4:	f0 2d       	mov	r31, r0
     4b6:	ff 92       	push	r15
     4b8:	ef 92       	push	r14
     4ba:	1f 92       	push	r1
     4bc:	1f 92       	push	r1
     4be:	1f 92       	push	r1
     4c0:	1f 92       	push	r1
     4c2:	0e 94 83 11 	call	0x2306	; 0x2306 <snprintf>
     4c6:	8c 01       	movw	r16, r24
	str = malloc(length + 1);
     4c8:	5c 01       	movw	r10, r24
     4ca:	9f ef       	ldi	r25, 0xFF	; 255
     4cc:	a9 1a       	sub	r10, r25
     4ce:	b9 0a       	sbc	r11, r25
     4d0:	c5 01       	movw	r24, r10
     4d2:	0e 94 62 10 	call	0x20c4	; 0x20c4 <malloc>
     4d6:	89 83       	std	Y+1, r24	; 0x01
     4d8:	9a 83       	std	Y+2, r25	; 0x02
	snprintf(str, length + 1, "%02d.%dA ", cur / 100, cur / 10 % 10);
     4da:	9f 92       	push	r9
     4dc:	8f 92       	push	r8
     4de:	df 92       	push	r13
     4e0:	cf 92       	push	r12
     4e2:	ff 92       	push	r15
     4e4:	ef 92       	push	r14
     4e6:	bf 92       	push	r11
     4e8:	af 92       	push	r10
     4ea:	9f 93       	push	r25
     4ec:	8f 93       	push	r24
     4ee:	0e 94 83 11 	call	0x2306	; 0x2306 <snprintf>
	
	for(unsigned char i = 0; i < length; i++)
     4f2:	cd bf       	out	0x3d, r28	; 61
     4f4:	de bf       	out	0x3e, r29	; 62
     4f6:	10 16       	cp	r1, r16
     4f8:	11 06       	cpc	r1, r17
     4fa:	0c f5       	brge	.+66     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = str[i];
     4fc:	40 91 d7 38 	lds	r20, 0x38D7	; 0x8038d7 <lcd_row_counter>
     500:	90 91 d0 38 	lds	r25, 0x38D0	; 0x8038d0 <lcd_col_counter>
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	f4 e1       	ldi	r31, 0x14	; 20
     508:	4f 9f       	mul	r20, r31
     50a:	a0 01       	movw	r20, r0
     50c:	11 24       	eor	r1, r1
     50e:	fa 01       	movw	r30, r20
     510:	e9 0f       	add	r30, r25
     512:	f1 1d       	adc	r31, r1
     514:	ee 0f       	add	r30, r30
     516:	ff 1f       	adc	r31, r31
     518:	e8 5f       	subi	r30, 0xF8	; 248
     51a:	f7 4c       	sbci	r31, 0xC7	; 199
     51c:	a9 81       	ldd	r26, Y+1	; 0x01
     51e:	ba 81       	ldd	r27, Y+2	; 0x02
     520:	a8 0f       	add	r26, r24
     522:	b1 1d       	adc	r27, r1
     524:	2c 91       	ld	r18, X
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	20 83       	st	Z, r18
     52a:	31 83       	std	Z+1, r19	; 0x01
		lcd_col_counter++;
     52c:	9f 5f       	subi	r25, 0xFF	; 255
	
	length = snprintf(NULL, 0, "%02d.%dA ", cur / 100, cur / 10 % 10);
	str = malloc(length + 1);
	snprintf(str, length + 1, "%02d.%dA ", cur / 100, cur / 10 % 10);
	
	for(unsigned char i = 0; i < length; i++)
     52e:	8f 5f       	subi	r24, 0xFF	; 255
     530:	28 2f       	mov	r18, r24
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	20 17       	cp	r18, r16
     536:	31 07       	cpc	r19, r17
     538:	54 f3       	brlt	.-44     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
     53a:	90 93 d0 38 	sts	0x38D0, r25	; 0x8038d0 <lcd_col_counter>
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = str[i];
		lcd_col_counter++;
	}
	
	free(str);
     53e:	89 81       	ldd	r24, Y+1	; 0x01
     540:	9a 81       	ldd	r25, Y+2	; 0x02
     542:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <free>
	// FINISH writing current number
	
	// START writing current bars
	cur = (cur + 5) / 10; // round to nearest tenth and get tenth
     546:	25 e0       	ldi	r18, 0x05	; 5
     548:	42 0e       	add	r4, r18
     54a:	51 1c       	adc	r5, r1
     54c:	92 01       	movw	r18, r4
     54e:	ad ec       	ldi	r26, 0xCD	; 205
     550:	bc ec       	ldi	r27, 0xCC	; 204
     552:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__umulhisi3>
     556:	96 95       	lsr	r25
     558:	87 95       	ror	r24
     55a:	96 95       	lsr	r25
     55c:	87 95       	ror	r24
     55e:	96 95       	lsr	r25
     560:	87 95       	ror	r24
     562:	8b 83       	std	Y+3, r24	; 0x03
     564:	9c 83       	std	Y+4, r25	; 0x04
	
	full_bars = cur / 25;
     566:	36 95       	lsr	r19
     568:	27 95       	ror	r18
     56a:	a3 e1       	ldi	r26, 0x13	; 19
     56c:	b3 e8       	ldi	r27, 0x83	; 131
     56e:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__umulhisi3>
     572:	00 24       	eor	r0, r0
     574:	88 0f       	add	r24, r24
     576:	99 1f       	adc	r25, r25
     578:	00 1c       	adc	r0, r0
     57a:	88 0f       	add	r24, r24
     57c:	99 1f       	adc	r25, r25
     57e:	00 1c       	adc	r0, r0
     580:	89 2f       	mov	r24, r25
     582:	90 2d       	mov	r25, r0
     584:	89 83       	std	Y+1, r24	; 0x01
     586:	9a 83       	std	Y+2, r25	; 0x02
     588:	39 80       	ldd	r3, Y+1	; 0x01
	last_bar  = (cur % 25) / 5;
     58a:	2b 81       	ldd	r18, Y+3	; 0x03
     58c:	3c 81       	ldd	r19, Y+4	; 0x04
     58e:	af ea       	ldi	r26, 0xAF	; 175
     590:	b7 e4       	ldi	r27, 0x47	; 71
     592:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__umulhisi3>
     596:	28 1b       	sub	r18, r24
     598:	39 0b       	sbc	r19, r25
     59a:	36 95       	lsr	r19
     59c:	27 95       	ror	r18
     59e:	82 0f       	add	r24, r18
     5a0:	93 1f       	adc	r25, r19
     5a2:	92 95       	swap	r25
     5a4:	82 95       	swap	r24
     5a6:	8f 70       	andi	r24, 0x0F	; 15
     5a8:	89 27       	eor	r24, r25
     5aa:	9f 70       	andi	r25, 0x0F	; 15
     5ac:	89 27       	eor	r24, r25
     5ae:	49 e1       	ldi	r20, 0x19	; 25
     5b0:	48 9f       	mul	r20, r24
     5b2:	90 01       	movw	r18, r0
     5b4:	49 9f       	mul	r20, r25
     5b6:	30 0d       	add	r19, r0
     5b8:	11 24       	eor	r1, r1
     5ba:	eb 81       	ldd	r30, Y+3	; 0x03
     5bc:	fc 81       	ldd	r31, Y+4	; 0x04
     5be:	e2 1b       	sub	r30, r18
     5c0:	f3 0b       	sbc	r31, r19
     5c2:	9f 01       	movw	r18, r30
     5c4:	ad ec       	ldi	r26, 0xCD	; 205
     5c6:	bc ec       	ldi	r27, 0xCC	; 204
     5c8:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__umulhisi3>
     5cc:	4c 01       	movw	r8, r24
     5ce:	96 94       	lsr	r9
     5d0:	87 94       	ror	r8
     5d2:	96 94       	lsr	r9
     5d4:	87 94       	ror	r8
     5d6:	58 2c       	mov	r5, r8
     5d8:	a9 80       	ldd	r10, Y+1	; 0x01
     5da:	ba 80       	ldd	r11, Y+2	; 0x02
     5dc:	bb 24       	eor	r11, r11
	
	for(int i = 0; i < full_bars; i++)
     5de:	b5 01       	movw	r22, r10
     5e0:	1a 14       	cp	r1, r10
     5e2:	1b 04       	cpc	r1, r11
     5e4:	0c f0       	brlt	.+2      	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
     5e6:	56 c0       	rjmp	.+172    	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
	{
		if (i == full_bars - 1 && cur == (MAX_CURRENT + 5) / 10)
		{
			lcd_screen_update[lcd_row_counter][lcd_col_counter] = 6;
     5e8:	40 91 d7 38 	lds	r20, 0x38D7	; 0x8038d7 <lcd_row_counter>
     5ec:	c0 90 d0 38 	lds	r12, 0x38D0	; 0x8038d0 <lcd_col_counter>
     5f0:	c3 94       	inc	r12
     5f2:	dc 2c       	mov	r13, r12
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
	full_bars = cur / 25;
	last_bar  = (cur % 25) / 5;
	
	for(int i = 0; i < full_bars; i++)
	{
		if (i == full_bars - 1 && cur == (MAX_CURRENT + 5) / 10)
     5f8:	d5 01       	movw	r26, r10
     5fa:	11 97       	sbiw	r26, 0x01	; 1
				lcd_screen_update[lcd_row_counter][lcd_col_counter] = 5;
				lcd_col_counter++;
			}
			else
			{
				lcd_screen_update[lcd_row_counter][lcd_col_counter] = 4;
     5fc:	f4 e1       	ldi	r31, 0x14	; 20
     5fe:	4f 9f       	mul	r20, r31
     600:	a0 01       	movw	r20, r0
     602:	11 24       	eor	r1, r1
     604:	68 94       	set
     606:	ee 24       	eor	r14, r14
     608:	e2 f8       	bld	r14, 2
     60a:	f1 2c       	mov	r15, r1
		}
		else
		{
			if ((i + 1) % 4 == 0)
			{
				lcd_screen_update[lcd_row_counter][lcd_col_counter] = 5;
     60c:	05 e0       	ldi	r16, 0x05	; 5
     60e:	10 e0       	ldi	r17, 0x00	; 0
	
	for(int i = 0; i < full_bars; i++)
	{
		if (i == full_bars - 1 && cur == (MAX_CURRENT + 5) / 10)
		{
			lcd_screen_update[lcd_row_counter][lcd_col_counter] = 6;
     610:	0f 2e       	mov	r0, r31
     612:	f6 e0       	ldi	r31, 0x06	; 6
     614:	6f 2e       	mov	r6, r31
     616:	71 2c       	mov	r7, r1
     618:	f0 2d       	mov	r31, r0
     61a:	44 24       	eor	r4, r4
     61c:	4a 94       	dec	r4
     61e:	4d 0c       	add	r4, r13
	full_bars = cur / 25;
	last_bar  = (cur % 25) / 5;
	
	for(int i = 0; i < full_bars; i++)
	{
		if (i == full_bars - 1 && cur == (MAX_CURRENT + 5) / 10)
     620:	a8 17       	cp	r26, r24
     622:	b9 07       	cpc	r27, r25
     624:	81 f4       	brne	.+32     	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
     626:	eb 81       	ldd	r30, Y+3	; 0x03
     628:	fc 81       	ldd	r31, Y+4	; 0x04
     62a:	ea 3f       	cpi	r30, 0xFA	; 250
     62c:	f1 05       	cpc	r31, r1
     62e:	59 f4       	brne	.+22     	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
		{
			lcd_screen_update[lcd_row_counter][lcd_col_counter] = 6;
     630:	9a 01       	movw	r18, r20
     632:	24 0d       	add	r18, r4
     634:	31 1d       	adc	r19, r1
     636:	22 0f       	add	r18, r18
     638:	33 1f       	adc	r19, r19
     63a:	28 5f       	subi	r18, 0xF8	; 248
     63c:	37 4c       	sbci	r19, 0xC7	; 199
     63e:	f9 01       	movw	r30, r18
     640:	60 82       	st	Z, r6
     642:	71 82       	std	Z+1, r7	; 0x01
			lcd_col_counter++;
     644:	1c c0       	rjmp	.+56     	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
		}
		else
		{
			if ((i + 1) % 4 == 0)
     646:	9c 01       	movw	r18, r24
     648:	2f 5f       	subi	r18, 0xFF	; 255
     64a:	3f 4f       	sbci	r19, 0xFF	; 255
     64c:	23 70       	andi	r18, 0x03	; 3
     64e:	33 27       	eor	r19, r19
     650:	23 2b       	or	r18, r19
     652:	59 f4       	brne	.+22     	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
			{
				lcd_screen_update[lcd_row_counter][lcd_col_counter] = 5;
     654:	9a 01       	movw	r18, r20
     656:	24 0d       	add	r18, r4
     658:	31 1d       	adc	r19, r1
     65a:	22 0f       	add	r18, r18
     65c:	33 1f       	adc	r19, r19
     65e:	28 5f       	subi	r18, 0xF8	; 248
     660:	37 4c       	sbci	r19, 0xC7	; 199
     662:	f9 01       	movw	r30, r18
     664:	00 83       	st	Z, r16
     666:	11 83       	std	Z+1, r17	; 0x01
     668:	0a c0       	rjmp	.+20     	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
				lcd_col_counter++;
			}
			else
			{
				lcd_screen_update[lcd_row_counter][lcd_col_counter] = 4;
     66a:	9a 01       	movw	r18, r20
     66c:	24 0d       	add	r18, r4
     66e:	31 1d       	adc	r19, r1
     670:	22 0f       	add	r18, r18
     672:	33 1f       	adc	r19, r19
     674:	28 5f       	subi	r18, 0xF8	; 248
     676:	37 4c       	sbci	r19, 0xC7	; 199
     678:	f9 01       	movw	r30, r18
     67a:	e0 82       	st	Z, r14
     67c:	f1 82       	std	Z+1, r15	; 0x01
	cur = (cur + 5) / 10; // round to nearest tenth and get tenth
	
	full_bars = cur / 25;
	last_bar  = (cur % 25) / 5;
	
	for(int i = 0; i < full_bars; i++)
     67e:	01 96       	adiw	r24, 0x01	; 1
     680:	d3 94       	inc	r13
     682:	86 17       	cp	r24, r22
     684:	97 07       	cpc	r25, r23
     686:	49 f6       	brne	.-110    	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
     688:	f1 e0       	ldi	r31, 0x01	; 1
     68a:	af 1a       	sub	r10, r31
     68c:	b1 08       	sbc	r11, r1
     68e:	ac 0c       	add	r10, r12
     690:	a0 92 d0 38 	sts	0x38D0, r10	; 0x8038d0 <lcd_col_counter>
				lcd_col_counter++;
			}
		}
	}
	
	if (last_bar != 0)
     694:	55 20       	and	r5, r5
     696:	b9 f0       	breq	.+46     	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = last_bar - 1;
     698:	80 91 d0 38 	lds	r24, 0x38D0	; 0x8038d0 <lcd_col_counter>
     69c:	e0 91 d7 38 	lds	r30, 0x38D7	; 0x8038d7 <lcd_row_counter>
     6a0:	24 e1       	ldi	r18, 0x14	; 20
     6a2:	e2 9f       	mul	r30, r18
     6a4:	f0 01       	movw	r30, r0
     6a6:	11 24       	eor	r1, r1
     6a8:	e8 0f       	add	r30, r24
     6aa:	f1 1d       	adc	r31, r1
     6ac:	ee 0f       	add	r30, r30
     6ae:	ff 1f       	adc	r31, r31
     6b0:	e8 5f       	subi	r30, 0xF8	; 248
     6b2:	f7 4c       	sbci	r31, 0xC7	; 199
     6b4:	99 24       	eor	r9, r9
     6b6:	31 e0       	ldi	r19, 0x01	; 1
     6b8:	83 1a       	sub	r8, r19
     6ba:	91 08       	sbc	r9, r1
     6bc:	80 82       	st	Z, r8
     6be:	91 82       	std	Z+1, r9	; 0x01
		lcd_col_counter++;
     6c0:	8f 5f       	subi	r24, 0xFF	; 255
     6c2:	80 93 d0 38 	sts	0x38D0, r24	; 0x8038d0 <lcd_col_counter>
	}
	
	for (unsigned char i = full_bars; i < 14; i++)
     6c6:	4d e0       	ldi	r20, 0x0D	; 13
     6c8:	43 15       	cp	r20, r3
     6ca:	e0 f0       	brcs	.+56     	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = ' ';
     6cc:	20 91 d7 38 	lds	r18, 0x38D7	; 0x8038d7 <lcd_row_counter>
     6d0:	80 91 d0 38 	lds	r24, 0x38D0	; 0x8038d0 <lcd_col_counter>
     6d4:	9e e0       	ldi	r25, 0x0E	; 14
     6d6:	98 0f       	add	r25, r24
     6d8:	e9 81       	ldd	r30, Y+1	; 0x01
     6da:	9e 1b       	sub	r25, r30
     6dc:	f4 e1       	ldi	r31, 0x14	; 20
     6de:	2f 9f       	mul	r18, r31
     6e0:	90 01       	movw	r18, r0
     6e2:	11 24       	eor	r1, r1
     6e4:	40 e2       	ldi	r20, 0x20	; 32
     6e6:	50 e0       	ldi	r21, 0x00	; 0
     6e8:	f9 01       	movw	r30, r18
     6ea:	e8 0f       	add	r30, r24
     6ec:	f1 1d       	adc	r31, r1
     6ee:	ee 0f       	add	r30, r30
     6f0:	ff 1f       	adc	r31, r31
     6f2:	e8 5f       	subi	r30, 0xF8	; 248
     6f4:	f7 4c       	sbci	r31, 0xC7	; 199
     6f6:	40 83       	st	Z, r20
     6f8:	51 83       	std	Z+1, r21	; 0x01
     6fa:	8f 5f       	subi	r24, 0xFF	; 255
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = last_bar - 1;
		lcd_col_counter++;
	}
	
	for (unsigned char i = full_bars; i < 14; i++)
     6fc:	98 13       	cpse	r25, r24
     6fe:	f4 cf       	rjmp	.-24     	; 0x6e8 <__LOCK_REGION_LENGTH__+0x2e8>
     700:	90 93 d0 38 	sts	0x38D0, r25	; 0x8038d0 <lcd_col_counter>
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = ' ';
		lcd_col_counter++;
	}
	// FINISH writing current bars
	
	lcd_update(TRUE);
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	0e 94 5d 00 	call	0xba	; 0xba <lcd_update>
}
     70a:	24 96       	adiw	r28, 0x04	; 4
     70c:	cd bf       	out	0x3d, r28	; 61
     70e:	de bf       	out	0x3e, r29	; 62
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	1f 91       	pop	r17
     716:	0f 91       	pop	r16
     718:	ff 90       	pop	r15
     71a:	ef 90       	pop	r14
     71c:	df 90       	pop	r13
     71e:	cf 90       	pop	r12
     720:	bf 90       	pop	r11
     722:	af 90       	pop	r10
     724:	9f 90       	pop	r9
     726:	8f 90       	pop	r8
     728:	7f 90       	pop	r7
     72a:	6f 90       	pop	r6
     72c:	5f 90       	pop	r5
     72e:	4f 90       	pop	r4
     730:	3f 90       	pop	r3
     732:	08 95       	ret

00000734 <display_set_current>:
		}
	}
}

void display_set_current()
{
     734:	cf 92       	push	r12
     736:	df 92       	push	r13
     738:	ef 92       	push	r14
     73a:	ff 92       	push	r15
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
	// START writing current number in format %02d.%dA
	int length = snprintf(NULL, 0, "SET CUR");
     744:	0f 2e       	mov	r0, r31
     746:	f6 e6       	ldi	r31, 0x66	; 102
     748:	ef 2e       	mov	r14, r31
     74a:	f9 ea       	ldi	r31, 0xA9	; 169
     74c:	ff 2e       	mov	r15, r31
     74e:	f0 2d       	mov	r31, r0
     750:	ff 92       	push	r15
     752:	ef 92       	push	r14
     754:	1f 92       	push	r1
     756:	1f 92       	push	r1
     758:	1f 92       	push	r1
     75a:	1f 92       	push	r1
     75c:	0e 94 83 11 	call	0x2306	; 0x2306 <snprintf>
     760:	8c 01       	movw	r16, r24
	char* str = malloc(length + 1);
     762:	6c 01       	movw	r12, r24
     764:	2f ef       	ldi	r18, 0xFF	; 255
     766:	c2 1a       	sub	r12, r18
     768:	d2 0a       	sbc	r13, r18
     76a:	c6 01       	movw	r24, r12
     76c:	0e 94 62 10 	call	0x20c4	; 0x20c4 <malloc>
     770:	ec 01       	movw	r28, r24
	snprintf(str, length + 1, "SET CUR");
     772:	ff 92       	push	r15
     774:	ef 92       	push	r14
     776:	df 92       	push	r13
     778:	cf 92       	push	r12
     77a:	df 93       	push	r29
     77c:	cf 93       	push	r28
     77e:	0e 94 83 11 	call	0x2306	; 0x2306 <snprintf>
	
	for(unsigned char i = 0; i < length; i++)
     782:	8d b7       	in	r24, 0x3d	; 61
     784:	9e b7       	in	r25, 0x3e	; 62
     786:	0c 96       	adiw	r24, 0x0c	; 12
     788:	8d bf       	out	0x3d, r24	; 61
     78a:	9e bf       	out	0x3e, r25	; 62
     78c:	10 16       	cp	r1, r16
     78e:	11 06       	cpc	r1, r17
     790:	04 f5       	brge	.+64     	; 0x7d2 <display_set_current+0x9e>
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = str[i];
     792:	40 91 d7 38 	lds	r20, 0x38D7	; 0x8038d7 <lcd_row_counter>
     796:	90 91 d0 38 	lds	r25, 0x38D0	; 0x8038d0 <lcd_col_counter>
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	24 e1       	ldi	r18, 0x14	; 20
     79e:	42 9f       	mul	r20, r18
     7a0:	a0 01       	movw	r20, r0
     7a2:	11 24       	eor	r1, r1
     7a4:	fa 01       	movw	r30, r20
     7a6:	e9 0f       	add	r30, r25
     7a8:	f1 1d       	adc	r31, r1
     7aa:	ee 0f       	add	r30, r30
     7ac:	ff 1f       	adc	r31, r31
     7ae:	e8 5f       	subi	r30, 0xF8	; 248
     7b0:	f7 4c       	sbci	r31, 0xC7	; 199
     7b2:	de 01       	movw	r26, r28
     7b4:	a8 0f       	add	r26, r24
     7b6:	b1 1d       	adc	r27, r1
     7b8:	2c 91       	ld	r18, X
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	20 83       	st	Z, r18
     7be:	31 83       	std	Z+1, r19	; 0x01
		lcd_col_counter++;
     7c0:	9f 5f       	subi	r25, 0xFF	; 255
	// START writing current number in format %02d.%dA
	int length = snprintf(NULL, 0, "SET CUR");
	char* str = malloc(length + 1);
	snprintf(str, length + 1, "SET CUR");
	
	for(unsigned char i = 0; i < length; i++)
     7c2:	8f 5f       	subi	r24, 0xFF	; 255
     7c4:	28 2f       	mov	r18, r24
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	20 17       	cp	r18, r16
     7ca:	31 07       	cpc	r19, r17
     7cc:	5c f3       	brlt	.-42     	; 0x7a4 <display_set_current+0x70>
     7ce:	90 93 d0 38 	sts	0x38D0, r25	; 0x8038d0 <lcd_col_counter>
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = str[i];
		lcd_col_counter++;
	}
	
	free(str);
     7d2:	ce 01       	movw	r24, r28
     7d4:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <free>
	
	length = snprintf(NULL, 0, "RENT: ");
     7d8:	0f 2e       	mov	r0, r31
     7da:	fe e6       	ldi	r31, 0x6E	; 110
     7dc:	ef 2e       	mov	r14, r31
     7de:	f9 ea       	ldi	r31, 0xA9	; 169
     7e0:	ff 2e       	mov	r15, r31
     7e2:	f0 2d       	mov	r31, r0
     7e4:	ff 92       	push	r15
     7e6:	ef 92       	push	r14
     7e8:	1f 92       	push	r1
     7ea:	1f 92       	push	r1
     7ec:	1f 92       	push	r1
     7ee:	1f 92       	push	r1
     7f0:	0e 94 83 11 	call	0x2306	; 0x2306 <snprintf>
     7f4:	8c 01       	movw	r16, r24
	str = malloc(length + 1);
     7f6:	6c 01       	movw	r12, r24
     7f8:	8f ef       	ldi	r24, 0xFF	; 255
     7fa:	c8 1a       	sub	r12, r24
     7fc:	d8 0a       	sbc	r13, r24
     7fe:	c6 01       	movw	r24, r12
     800:	0e 94 62 10 	call	0x20c4	; 0x20c4 <malloc>
     804:	ec 01       	movw	r28, r24
	snprintf(str, length + 1, "RENT: ");
     806:	ff 92       	push	r15
     808:	ef 92       	push	r14
     80a:	df 92       	push	r13
     80c:	cf 92       	push	r12
     80e:	df 93       	push	r29
     810:	cf 93       	push	r28
     812:	0e 94 83 11 	call	0x2306	; 0x2306 <snprintf>
	
	for(unsigned char i = 0; i < length; i++)
     816:	8d b7       	in	r24, 0x3d	; 61
     818:	9e b7       	in	r25, 0x3e	; 62
     81a:	0c 96       	adiw	r24, 0x0c	; 12
     81c:	8d bf       	out	0x3d, r24	; 61
     81e:	9e bf       	out	0x3e, r25	; 62
     820:	10 16       	cp	r1, r16
     822:	11 06       	cpc	r1, r17
     824:	04 f5       	brge	.+64     	; 0x866 <display_set_current+0x132>
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = str[i];
     826:	40 91 d7 38 	lds	r20, 0x38D7	; 0x8038d7 <lcd_row_counter>
     82a:	90 91 d0 38 	lds	r25, 0x38D0	; 0x8038d0 <lcd_col_counter>
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	24 e1       	ldi	r18, 0x14	; 20
     832:	42 9f       	mul	r20, r18
     834:	a0 01       	movw	r20, r0
     836:	11 24       	eor	r1, r1
     838:	fa 01       	movw	r30, r20
     83a:	e9 0f       	add	r30, r25
     83c:	f1 1d       	adc	r31, r1
     83e:	ee 0f       	add	r30, r30
     840:	ff 1f       	adc	r31, r31
     842:	e8 5f       	subi	r30, 0xF8	; 248
     844:	f7 4c       	sbci	r31, 0xC7	; 199
     846:	de 01       	movw	r26, r28
     848:	a8 0f       	add	r26, r24
     84a:	b1 1d       	adc	r27, r1
     84c:	2c 91       	ld	r18, X
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	20 83       	st	Z, r18
     852:	31 83       	std	Z+1, r19	; 0x01
		lcd_col_counter++;
     854:	9f 5f       	subi	r25, 0xFF	; 255
	
	length = snprintf(NULL, 0, "RENT: ");
	str = malloc(length + 1);
	snprintf(str, length + 1, "RENT: ");
	
	for(unsigned char i = 0; i < length; i++)
     856:	8f 5f       	subi	r24, 0xFF	; 255
     858:	28 2f       	mov	r18, r24
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	20 17       	cp	r18, r16
     85e:	31 07       	cpc	r19, r17
     860:	5c f3       	brlt	.-42     	; 0x838 <display_set_current+0x104>
     862:	90 93 d0 38 	sts	0x38D0, r25	; 0x8038d0 <lcd_col_counter>
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = str[i];
		lcd_col_counter++;
	}
	
	free(str);
     866:	ce 01       	movw	r24, r28
     868:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <free>
	
	length = snprintf(NULL, 0, "%02d.%dA", desired_current / 100, desired_current / 10 % 10);
     86c:	20 91 5a 38 	lds	r18, 0x385A	; 0x80385a <desired_current>
     870:	30 91 5b 38 	lds	r19, 0x385B	; 0x80385b <desired_current+0x1>
     874:	e0 91 5a 38 	lds	r30, 0x385A	; 0x80385a <desired_current>
     878:	f0 91 5b 38 	lds	r31, 0x385B	; 0x80385b <desired_current+0x1>
     87c:	ad ec       	ldi	r26, 0xCD	; 205
     87e:	bc ec       	ldi	r27, 0xCC	; 204
     880:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__umulhisi3>
     884:	ac 01       	movw	r20, r24
     886:	56 95       	lsr	r21
     888:	47 95       	ror	r20
     88a:	56 95       	lsr	r21
     88c:	47 95       	ror	r20
     88e:	56 95       	lsr	r21
     890:	47 95       	ror	r20
     892:	9a 01       	movw	r18, r20
     894:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__umulhisi3>
     898:	96 95       	lsr	r25
     89a:	87 95       	ror	r24
     89c:	96 95       	lsr	r25
     89e:	87 95       	ror	r24
     8a0:	96 95       	lsr	r25
     8a2:	87 95       	ror	r24
     8a4:	9c 01       	movw	r18, r24
     8a6:	22 0f       	add	r18, r18
     8a8:	33 1f       	adc	r19, r19
     8aa:	88 0f       	add	r24, r24
     8ac:	99 1f       	adc	r25, r25
     8ae:	88 0f       	add	r24, r24
     8b0:	99 1f       	adc	r25, r25
     8b2:	88 0f       	add	r24, r24
     8b4:	99 1f       	adc	r25, r25
     8b6:	82 0f       	add	r24, r18
     8b8:	93 1f       	adc	r25, r19
     8ba:	48 1b       	sub	r20, r24
     8bc:	59 0b       	sbc	r21, r25
     8be:	5f 93       	push	r21
     8c0:	4f 93       	push	r20
     8c2:	9f 01       	movw	r18, r30
     8c4:	36 95       	lsr	r19
     8c6:	27 95       	ror	r18
     8c8:	36 95       	lsr	r19
     8ca:	27 95       	ror	r18
     8cc:	ab e7       	ldi	r26, 0x7B	; 123
     8ce:	b4 e1       	ldi	r27, 0x14	; 20
     8d0:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__umulhisi3>
     8d4:	96 95       	lsr	r25
     8d6:	87 95       	ror	r24
     8d8:	9f 93       	push	r25
     8da:	8f 93       	push	r24
     8dc:	0f 2e       	mov	r0, r31
     8de:	f5 e7       	ldi	r31, 0x75	; 117
     8e0:	ef 2e       	mov	r14, r31
     8e2:	f9 ea       	ldi	r31, 0xA9	; 169
     8e4:	ff 2e       	mov	r15, r31
     8e6:	f0 2d       	mov	r31, r0
     8e8:	ff 92       	push	r15
     8ea:	ef 92       	push	r14
     8ec:	1f 92       	push	r1
     8ee:	1f 92       	push	r1
     8f0:	1f 92       	push	r1
     8f2:	1f 92       	push	r1
     8f4:	0e 94 83 11 	call	0x2306	; 0x2306 <snprintf>
     8f8:	8c 01       	movw	r16, r24
	str = malloc(length + 1);
     8fa:	6c 01       	movw	r12, r24
     8fc:	8f ef       	ldi	r24, 0xFF	; 255
     8fe:	c8 1a       	sub	r12, r24
     900:	d8 0a       	sbc	r13, r24
     902:	c6 01       	movw	r24, r12
     904:	0e 94 62 10 	call	0x20c4	; 0x20c4 <malloc>
     908:	ec 01       	movw	r28, r24
	snprintf(str, length + 1, "%02d.%dA", desired_current / 100, desired_current / 10 % 10);
     90a:	20 91 5a 38 	lds	r18, 0x385A	; 0x80385a <desired_current>
     90e:	30 91 5b 38 	lds	r19, 0x385B	; 0x80385b <desired_current+0x1>
     912:	e0 91 5a 38 	lds	r30, 0x385A	; 0x80385a <desired_current>
     916:	f0 91 5b 38 	lds	r31, 0x385B	; 0x80385b <desired_current+0x1>
     91a:	ad ec       	ldi	r26, 0xCD	; 205
     91c:	bc ec       	ldi	r27, 0xCC	; 204
     91e:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__umulhisi3>
     922:	ac 01       	movw	r20, r24
     924:	56 95       	lsr	r21
     926:	47 95       	ror	r20
     928:	56 95       	lsr	r21
     92a:	47 95       	ror	r20
     92c:	56 95       	lsr	r21
     92e:	47 95       	ror	r20
     930:	9a 01       	movw	r18, r20
     932:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__umulhisi3>
     936:	96 95       	lsr	r25
     938:	87 95       	ror	r24
     93a:	96 95       	lsr	r25
     93c:	87 95       	ror	r24
     93e:	96 95       	lsr	r25
     940:	87 95       	ror	r24
     942:	9c 01       	movw	r18, r24
     944:	22 0f       	add	r18, r18
     946:	33 1f       	adc	r19, r19
     948:	88 0f       	add	r24, r24
     94a:	99 1f       	adc	r25, r25
     94c:	88 0f       	add	r24, r24
     94e:	99 1f       	adc	r25, r25
     950:	88 0f       	add	r24, r24
     952:	99 1f       	adc	r25, r25
     954:	82 0f       	add	r24, r18
     956:	93 1f       	adc	r25, r19
     958:	48 1b       	sub	r20, r24
     95a:	59 0b       	sbc	r21, r25
     95c:	5f 93       	push	r21
     95e:	4f 93       	push	r20
     960:	9f 01       	movw	r18, r30
     962:	36 95       	lsr	r19
     964:	27 95       	ror	r18
     966:	36 95       	lsr	r19
     968:	27 95       	ror	r18
     96a:	ab e7       	ldi	r26, 0x7B	; 123
     96c:	b4 e1       	ldi	r27, 0x14	; 20
     96e:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__umulhisi3>
     972:	96 95       	lsr	r25
     974:	87 95       	ror	r24
     976:	9f 93       	push	r25
     978:	8f 93       	push	r24
     97a:	ff 92       	push	r15
     97c:	ef 92       	push	r14
     97e:	df 92       	push	r13
     980:	cf 92       	push	r12
     982:	df 93       	push	r29
     984:	cf 93       	push	r28
     986:	0e 94 83 11 	call	0x2306	; 0x2306 <snprintf>
	
	for(unsigned char i = 0; i < length; i++)
     98a:	8d b7       	in	r24, 0x3d	; 61
     98c:	9e b7       	in	r25, 0x3e	; 62
     98e:	44 96       	adiw	r24, 0x14	; 20
     990:	8d bf       	out	0x3d, r24	; 61
     992:	9e bf       	out	0x3e, r25	; 62
     994:	10 16       	cp	r1, r16
     996:	11 06       	cpc	r1, r17
     998:	f4 f4       	brge	.+60     	; 0x9d6 <display_set_current+0x2a2>
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = str[i];
     99a:	40 91 d7 38 	lds	r20, 0x38D7	; 0x8038d7 <lcd_row_counter>
     99e:	90 91 d0 38 	lds	r25, 0x38D0	; 0x8038d0 <lcd_col_counter>
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	24 e1       	ldi	r18, 0x14	; 20
     9a6:	42 9f       	mul	r20, r18
     9a8:	a0 01       	movw	r20, r0
     9aa:	11 24       	eor	r1, r1
     9ac:	fa 01       	movw	r30, r20
     9ae:	e9 0f       	add	r30, r25
     9b0:	f1 1d       	adc	r31, r1
     9b2:	ee 0f       	add	r30, r30
     9b4:	ff 1f       	adc	r31, r31
     9b6:	e8 5f       	subi	r30, 0xF8	; 248
     9b8:	f7 4c       	sbci	r31, 0xC7	; 199
     9ba:	de 01       	movw	r26, r28
     9bc:	a8 0f       	add	r26, r24
     9be:	b1 1d       	adc	r27, r1
     9c0:	2c 91       	ld	r18, X
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	20 83       	st	Z, r18
     9c6:	31 83       	std	Z+1, r19	; 0x01
		lcd_col_counter++;
     9c8:	9f 5f       	subi	r25, 0xFF	; 255
	
	length = snprintf(NULL, 0, "%02d.%dA", desired_current / 100, desired_current / 10 % 10);
	str = malloc(length + 1);
	snprintf(str, length + 1, "%02d.%dA", desired_current / 100, desired_current / 10 % 10);
	
	for(unsigned char i = 0; i < length; i++)
     9ca:	8f 5f       	subi	r24, 0xFF	; 255
     9cc:	28 2f       	mov	r18, r24
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	20 17       	cp	r18, r16
     9d2:	31 07       	cpc	r19, r17
     9d4:	5c f3       	brlt	.-42     	; 0x9ac <display_set_current+0x278>
	{
		lcd_screen_update[lcd_row_counter][lcd_col_counter] = str[i];
		lcd_col_counter++;
	}
	
	free(str);
     9d6:	ce 01       	movw	r24, r28
     9d8:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <free>
	// FINISH writing current number
	
	lcd_col_counter = 0;
     9dc:	10 92 d0 38 	sts	0x38D0, r1	; 0x8038d0 <lcd_col_counter>
	lcd_row_counter = 0;
     9e0:	10 92 d7 38 	sts	0x38D7, r1	; 0x8038d7 <lcd_row_counter>
	
	lcd_update(FALSE);
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	0e 94 5d 00 	call	0xba	; 0xba <lcd_update>
}
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	1f 91       	pop	r17
     9f0:	0f 91       	pop	r16
     9f2:	ff 90       	pop	r15
     9f4:	ef 90       	pop	r14
     9f6:	df 90       	pop	r13
     9f8:	cf 90       	pop	r12
     9fa:	08 95       	ret

000009fc <display_danger>:

void display_danger()
{
	lcd_command(CLEAR_DISPLAY);
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(FUNCTION_SET | 0b0000111100);
     a04:	8c e3       	ldi	r24, 0x3C	; 60
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_write(" OVER ");
     a0c:	8e e7       	ldi	r24, 0x7E	; 126
     a0e:	99 ea       	ldi	r25, 0xA9	; 169
     a10:	0e 94 08 0a 	call	0x1410	; 0x1410 <lcd_write>
	lcd_write("VOLTAGE");
     a14:	85 e8       	ldi	r24, 0x85	; 133
     a16:	99 ea       	ldi	r25, 0xA9	; 169
     a18:	0e 94 08 0a 	call	0x1410	; 0x1410 <lcd_write>
	lcd_write(" ! ! !");
     a1c:	8d e8       	ldi	r24, 0x8D	; 141
     a1e:	99 ea       	ldi	r25, 0xA9	; 169
     a20:	0e 94 08 0a 	call	0x1410	; 0x1410 <lcd_write>
     a24:	08 95       	ret

00000a26 <debounce>:
/*          6 times more than @precisionUs)                             */
/* @return - whether the function debounced pin correctly (If running   */
/*           time of the function reached @maxUs returns false(0))      */
/************************************************************************/
uint8_t debounce(volatile unsigned char *port, uint8_t pin, uint8_t precisionUs, uint8_t maxUs)
{
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	ec 01       	movw	r28, r24
	uint8_t counter = 0;
	uint8_t counterUs = 0;
	uint8_t isHigh = FALSE;
	
	while(counter != precisionUs && counterUs != maxUs)
     a2c:	44 23       	and	r20, r20
     a2e:	39 f1       	breq	.+78     	; 0xa7e <debounce+0x58>
     a30:	22 23       	and	r18, r18
     a32:	39 f1       	breq	.+78     	; 0xa82 <debounce+0x5c>
     a34:	a1 e0       	ldi	r26, 0x01	; 1
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <debounce+0x18>
     a3a:	aa 0f       	add	r26, r26
     a3c:	bb 1f       	adc	r27, r27
     a3e:	6a 95       	dec	r22
     a40:	e2 f7       	brpl	.-8      	; 0xa3a <debounce+0x14>
	{
		// *(volatile uint8_t *)(port) - is a dereference of a port's address, therefore, we read directly from memory
		if(*(volatile uint8_t *)(port) & (1 << pin))
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	e0 e0       	ldi	r30, 0x00	; 0
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	01 c0       	rjmp	.+2      	; 0xa4c <debounce+0x26>
     a4a:	95 2f       	mov	r25, r21
     a4c:	68 81       	ld	r22, Y
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	6a 23       	and	r22, r26
     a52:	7b 23       	and	r23, r27
     a54:	67 2b       	or	r22, r23
     a56:	29 f0       	breq	.+10     	; 0xa62 <debounce+0x3c>
		{
			counter = isHigh ? counter + 1 : 0;
     a58:	ee 23       	and	r30, r30
     a5a:	c9 f0       	breq	.+50     	; 0xa8e <debounce+0x68>
     a5c:	3f 5f       	subi	r19, 0xFF	; 255
			isHigh = TRUE;
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	03 c0       	rjmp	.+6      	; 0xa68 <debounce+0x42>
		}
		else
		{
			counter = isHigh ? 0 : counter + 1;
     a62:	e1 11       	cpse	r30, r1
     a64:	16 c0       	rjmp	.+44     	; 0xa92 <debounce+0x6c>
     a66:	3f 5f       	subi	r19, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a68:	86 e0       	ldi	r24, 0x06	; 6
     a6a:	8a 95       	dec	r24
     a6c:	f1 f7       	brne	.-4      	; 0xa6a <debounce+0x44>
     a6e:	00 c0       	rjmp	.+0      	; 0xa70 <debounce+0x4a>
{
	uint8_t counter = 0;
	uint8_t counterUs = 0;
	uint8_t isHigh = FALSE;
	
	while(counter != precisionUs && counterUs != maxUs)
     a70:	34 17       	cp	r19, r20
     a72:	41 f0       	breq	.+16     	; 0xa84 <debounce+0x5e>
     a74:	51 e0       	ldi	r21, 0x01	; 1
     a76:	59 0f       	add	r21, r25
     a78:	29 13       	cpse	r18, r25
     a7a:	e7 cf       	rjmp	.-50     	; 0xa4a <debounce+0x24>
     a7c:	03 c0       	rjmp	.+6      	; 0xa84 <debounce+0x5e>
/*           time of the function reached @maxUs returns false(0))      */
/************************************************************************/
uint8_t debounce(volatile unsigned char *port, uint8_t pin, uint8_t precisionUs, uint8_t maxUs)
{
	uint8_t counter = 0;
	uint8_t counterUs = 0;
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	01 c0       	rjmp	.+2      	; 0xa84 <debounce+0x5e>
     a82:	90 e0       	ldi	r25, 0x00	; 0
		}
		_delay_us(1);
		counterUs++;
	}
	
	return counterUs != maxUs;
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	29 13       	cpse	r18, r25
     a88:	0b c0       	rjmp	.+22     	; 0xaa0 <debounce+0x7a>
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	09 c0       	rjmp	.+18     	; 0xaa0 <debounce+0x7a>
	{
		// *(volatile uint8_t *)(port) - is a dereference of a port's address, therefore, we read directly from memory
		if(*(volatile uint8_t *)(port) & (1 << pin))
		{
			counter = isHigh ? counter + 1 : 0;
			isHigh = TRUE;
     a8e:	e1 e0       	ldi	r30, 0x01	; 1
     a90:	01 c0       	rjmp	.+2      	; 0xa94 <debounce+0x6e>
		}
		else
		{
			counter = isHigh ? 0 : counter + 1;
			isHigh = FALSE;
     a92:	e0 e0       	ldi	r30, 0x00	; 0
     a94:	86 e0       	ldi	r24, 0x06	; 6
     a96:	8a 95       	dec	r24
     a98:	f1 f7       	brne	.-4      	; 0xa96 <debounce+0x70>
     a9a:	00 c0       	rjmp	.+0      	; 0xa9c <debounce+0x76>
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	ea cf       	rjmp	.-44     	; 0xa74 <debounce+0x4e>
		_delay_us(1);
		counterUs++;
	}
	
	return counterUs != maxUs;
}
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	08 95       	ret

00000aa6 <read_gray_code_from_encoder>:

uint8_t read_gray_code_from_encoder()
{
     aa6:	1f 93       	push	r17
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
	uint8_t val=0;
	
	bool is_debounce_successful = TRUE;
	is_debounce_successful &= debounce(&PORTA_IN, ENCDR_A, 10, 60);
     aac:	2c e3       	ldi	r18, 0x3C	; 60
     aae:	4a e0       	ldi	r20, 0x0A	; 10
     ab0:	66 e0       	ldi	r22, 0x06	; 6
     ab2:	88 e0       	ldi	r24, 0x08	; 8
     ab4:	94 e0       	ldi	r25, 0x04	; 4
     ab6:	0e 94 13 05 	call	0xa26	; 0xa26 <debounce>
     aba:	18 2f       	mov	r17, r24
	is_debounce_successful &= debounce(&PORTA_IN, ENCDR_B, 10, 60);
     abc:	2c e3       	ldi	r18, 0x3C	; 60
     abe:	4a e0       	ldi	r20, 0x0A	; 10
     ac0:	65 e0       	ldi	r22, 0x05	; 5
     ac2:	88 e0       	ldi	r24, 0x08	; 8
     ac4:	94 e0       	ldi	r25, 0x04	; 4
     ac6:	0e 94 13 05 	call	0xa26	; 0xa26 <debounce>
	
	if (is_debounce_successful)
     aca:	11 70       	andi	r17, 0x01	; 1
     acc:	c1 2f       	mov	r28, r17
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	d9 2f       	mov	r29, r25
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	8c 23       	and	r24, r28
     ad6:	9d 23       	and	r25, r29
     ad8:	89 2b       	or	r24, r25
     ada:	69 f0       	breq	.+26     	; 0xaf6 <read_gray_code_from_encoder+0x50>
	{
		if(!(PORTA_IN & (1 << ENCDR_A)))
     adc:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     ae0:	86 fd       	sbrc	r24, 6
     ae2:	02 c0       	rjmp	.+4      	; 0xae8 <read_gray_code_from_encoder+0x42>
		{
			val |= (1 << 1);
     ae4:	82 e0       	ldi	r24, 0x02	; 2
     ae6:	01 c0       	rjmp	.+2      	; 0xaea <read_gray_code_from_encoder+0x44>
	return counterUs != maxUs;
}

uint8_t read_gray_code_from_encoder()
{
	uint8_t val=0;
     ae8:	80 e0       	ldi	r24, 0x00	; 0
		if(!(PORTA_IN & (1 << ENCDR_A)))
		{
			val |= (1 << 1);
		}

		if(!(PORTA_IN & (1 << ENCDR_B)))
     aea:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     aee:	95 fd       	sbrc	r25, 5
     af0:	03 c0       	rjmp	.+6      	; 0xaf8 <read_gray_code_from_encoder+0x52>
		{
			val |= (1<<0);
     af2:	81 60       	ori	r24, 0x01	; 1
     af4:	01 c0       	rjmp	.+2      	; 0xaf8 <read_gray_code_from_encoder+0x52>
	return counterUs != maxUs;
}

uint8_t read_gray_code_from_encoder()
{
	uint8_t val=0;
     af6:	80 e0       	ldi	r24, 0x00	; 0
			val |= (1<<0);
		}
	}

	return val;
}
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	1f 91       	pop	r17
     afe:	08 95       	ret

00000b00 <initialize>:
#include "board.h"

void initialize()
{
     b00:	cf 93       	push	r28
	CPU_CCP = 0xD8; //temporarily remove protection for protected I/O registers (Cannot change clock prescaler without doing this first)
     b02:	88 ed       	ldi	r24, 0xD8	; 216
     b04:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLB = (0 << 0); // disable prescaler (There's a default prescaler of 6)
     b06:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b0a:	87 ea       	ldi	r24, 0xA7	; 167
     b0c:	91 e6       	ldi	r25, 0x61	; 97
     b0e:	01 97       	sbiw	r24, 0x01	; 1
     b10:	f1 f7       	brne	.-4      	; 0xb0e <initialize+0xe>
     b12:	00 c0       	rjmp	.+0      	; 0xb14 <initialize+0x14>
     b14:	00 00       	nop
	_delay_ms(5);
	CLKCTRL_MCLKCTRLA |= (1 << 7); // System clock is output to CLKOUT pin (20 MHz)
     b16:	e0 e6       	ldi	r30, 0x60	; 96
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	80 81       	ld	r24, Z
     b1c:	80 68       	ori	r24, 0x80	; 128
     b1e:	80 83       	st	Z, r24
	PA4 - SW_Encoder - Input/Pull-up
	PA5 - B_Encoder - Input/Pull-up - Interrupt both edges
	PA6 - A_Encoder - Input/Pull-up - Interrupt both edges
	PA7 - Display LED (Backlight) - Output/Low
	*/
	PORTA_DIR = 0b10001111;
     b20:	8f e8       	ldi	r24, 0x8F	; 143
     b22:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
	PORTA_PIN4CTRL = (1 << PORT_PULLUPEN_bp);
     b26:	88 e0       	ldi	r24, 0x08	; 8
     b28:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <__TEXT_REGION_LENGTH__+0x700414>
	PORTA_PIN5CTRL = (1 << PORT_PULLUPEN_bp);
     b2c:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <__TEXT_REGION_LENGTH__+0x700415>
	PORTA_PIN6CTRL = (1 << PORT_PULLUPEN_bp);
     b30:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <__TEXT_REGION_LENGTH__+0x700416>
	PB4 - D4_LCD - Output/Low
	PB5 - D5_LCD - Output/Low
	PB6 - D6_LCD - Output/Low
	PB7 - D7_LCD - Output/Low
	*/
	PORTB_DIR = 0b11110101;
     b34:	95 ef       	ldi	r25, 0xF5	; 245
     b36:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
	PORTB_OUTSET = (1 << PIN0_bp);
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <__TEXT_REGION_LENGTH__+0x700425>
	PORTB_PIN1CTRL = (1 << PORT_PULLUPEN_bp);
     b40:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>
	//PORTB_PIN3CTRL = (1 << PORT_PULLUPEN_bp);
	PORTB_PIN3CTRL |= (0x1); //interrupt on both edges
     b44:	e3 e3       	ldi	r30, 0x33	; 51
     b46:	f4 e0       	ldi	r31, 0x04	; 4
     b48:	90 81       	ld	r25, Z
     b4a:	91 60       	ori	r25, 0x01	; 1
     b4c:	90 83       	st	Z, r25
	CPUINT.LVL1VEC = 0x08; //Set PORTB interrupt to be LEVEL1
     b4e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <__TEXT_REGION_LENGTH__+0x700113>
	PC2 - D2_LCD - Output/Low
	PC3 - D3_LCD - Output/Low
	PC4 - R/W (0:RD, 1:WR) - Output/Low
	PC5 - RS (Reg Sel) (0:CMD, 1:DATA) - Output/Low
	*/
	PORTC_DIR = 0b00111111;
     b52:	8f e3       	ldi	r24, 0x3F	; 63
     b54:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>
	
	//RTC initialization
	while (RTC.STATUS > 0) {} // Wait for all register to be synchronized
     b58:	e0 e4       	ldi	r30, 0x40	; 64
     b5a:	f1 e0       	ldi	r31, 0x01	; 1
     b5c:	81 81       	ldd	r24, Z+1	; 0x01
     b5e:	81 11       	cpse	r24, r1
     b60:	fd cf       	rjmp	.-6      	; 0xb5c <initialize+0x5c>

	RTC.PER = 1;
     b62:	e0 e4       	ldi	r30, 0x40	; 64
     b64:	f1 e0       	ldi	r31, 0x01	; 1
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	82 87       	std	Z+10, r24	; 0x0a
     b6c:	93 87       	std	Z+11, r25	; 0x0b
	RTC.INTCTRL = 0 << RTC_CMP_bp
     b6e:	c1 e0       	ldi	r28, 0x01	; 1
     b70:	c2 83       	std	Z+2, r28	; 0x02
	| 1 << RTC_OVF_bp; //Overflow interrupt.
	
	RTC.CTRLA = RTC_PRESCALER_DIV1_gc	//NO Prescaler
     b72:	81 e8       	ldi	r24, 0x81	; 129
     b74:	80 83       	st	Z, r24
	| 1 << RTC_RTCEN_bp       	//Enable RTC
	| 1 << RTC_RUNSTDBY_bp;   	//Run in standby

	RTC.CLKSEL = RTC_CLKSEL_INT1K_gc; // 32KHz divided by 32, i.e run at 1.024kHz
     b76:	c7 83       	std	Z+7, r28	; 0x07
	
	encoder_val = read_gray_code_from_encoder();
     b78:	0e 94 53 05 	call	0xaa6	; 0xaa6 <read_gray_code_from_encoder>
     b7c:	80 93 e2 38 	sts	0x38E2, r24	; 0x8038e2 <encoder_val>
	encoder_val_tmp = 0;
     b80:	10 92 cd 38 	sts	0x38CD, r1	; 0x8038cd <encoder_val_tmp>
	
	current              = 0;
     b84:	10 92 ce 38 	sts	0x38CE, r1	; 0x8038ce <current>
     b88:	10 92 cf 38 	sts	0x38CF, r1	; 0x8038cf <current+0x1>
	temp_current         = 0;
     b8c:	10 92 cb 38 	sts	0x38CB, r1	; 0x8038cb <temp_current>
     b90:	10 92 cc 38 	sts	0x38CC, r1	; 0x8038cc <temp_current+0x1>
	voltage              = 0;
     b94:	10 92 ac 38 	sts	0x38AC, r1	; 0x8038ac <voltage>
     b98:	10 92 ad 38 	sts	0x38AD, r1	; 0x8038ad <voltage+0x1>
	temp_voltage         = 0;
     b9c:	10 92 d8 38 	sts	0x38D8, r1	; 0x8038d8 <temp_voltage>
     ba0:	10 92 d9 38 	sts	0x38D9, r1	; 0x8038d9 <temp_voltage+0x1>
	update               = TRUE;
     ba4:	c0 93 e1 38 	sts	0x38E1, r28	; 0x8038e1 <update>
	set_current_mode     = FALSE;
     ba8:	10 92 dc 38 	sts	0x38DC, r1	; 0x8038dc <set_current_mode>
	set_current_mode_on  = 0;
     bac:	10 92 d2 38 	sts	0x38D2, r1	; 0x8038d2 <set_current_mode_on>
	rtc_idle_counter     = 0;
     bb0:	10 92 dd 38 	sts	0x38DD, r1	; 0x8038dd <rtc_idle_counter>
     bb4:	10 92 de 38 	sts	0x38DE, r1	; 0x8038de <rtc_idle_counter+0x1>
     bb8:	10 92 df 38 	sts	0x38DF, r1	; 0x8038df <rtc_idle_counter+0x2>
     bbc:	10 92 e0 38 	sts	0x38E0, r1	; 0x8038e0 <rtc_idle_counter+0x3>
	rtc_counter          = 0;
     bc0:	10 92 ae 38 	sts	0x38AE, r1	; 0x8038ae <rtc_counter>
     bc4:	10 92 af 38 	sts	0x38AF, r1	; 0x8038af <rtc_counter+0x1>
     bc8:	10 92 b0 38 	sts	0x38B0, r1	; 0x8038b0 <rtc_counter+0x2>
     bcc:	10 92 b1 38 	sts	0x38B1, r1	; 0x8038b1 <rtc_counter+0x3>
	rtc_counter_1_4      = FALSE;
     bd0:	10 92 d1 38 	sts	0x38D1, r1	; 0x8038d1 <rtc_counter_1_4>
	rtc_counter_1_2      = FALSE;
     bd4:	10 92 db 38 	sts	0x38DB, r1	; 0x8038db <rtc_counter_1_2>
	rtc_counter_prev     = 0;
     bd8:	10 92 d3 38 	sts	0x38D3, r1	; 0x8038d3 <rtc_counter_prev>
     bdc:	10 92 d4 38 	sts	0x38D4, r1	; 0x8038d4 <rtc_counter_prev+0x1>
     be0:	10 92 d5 38 	sts	0x38D5, r1	; 0x8038d5 <rtc_counter_prev+0x2>
     be4:	10 92 d6 38 	sts	0x38D6, r1	; 0x8038d6 <rtc_counter_prev+0x3>
	encoder_sw_was_low   = FALSE;
     be8:	10 92 da 38 	sts	0x38DA, r1	; 0x8038da <encoder_sw_was_low>
	
	desired_current = eeprom_read_word((uint16_t*) 0x00);
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	0e 94 44 14 	call	0x2888	; 0x2888 <eeprom_read_word>
     bf4:	80 93 5a 38 	sts	0x385A, r24	; 0x80385a <desired_current>
     bf8:	90 93 5b 38 	sts	0x385B, r25	; 0x80385b <desired_current+0x1>
	
	if (desired_current < 0 || desired_current > MAX_CURRENT)
     bfc:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
     c00:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
     c04:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
     c08:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
     c0c:	85 3c       	cpi	r24, 0xC5	; 197
     c0e:	99 40       	sbci	r25, 0x09	; 9
     c10:	60 f0       	brcs	.+24     	; 0xc2a <initialize+0x12a>
	{
		desired_current = 0;
     c12:	10 92 5a 38 	sts	0x385A, r1	; 0x80385a <desired_current>
     c16:	10 92 5b 38 	sts	0x385B, r1	; 0x80385b <desired_current+0x1>
		eeprom_update_word((uint16_t*) 0x00, desired_current);
     c1a:	60 91 5a 38 	lds	r22, 0x385A	; 0x80385a <desired_current>
     c1e:	70 91 5b 38 	lds	r23, 0x385B	; 0x80385b <desired_current+0x1>
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	0e 94 49 14 	call	0x2892	; 0x2892 <eeprom_update_word>
	}
	
	desired_current_temp = desired_current;
     c2a:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
     c2e:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
     c32:	80 93 58 38 	sts	0x3858, r24	; 0x803858 <desired_current_temp>
     c36:	90 93 59 38 	sts	0x3859, r25	; 0x803859 <desired_current_temp+0x1>
}
     c3a:	cf 91       	pop	r28
     c3c:	08 95       	ret

00000c3e <handle_encoder>:
	return val;
}

void handle_encoder()
{
	encoder_val_tmp = read_gray_code_from_encoder();
     c3e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <read_gray_code_from_encoder>
     c42:	80 93 cd 38 	sts	0x38CD, r24	; 0x8038cd <encoder_val_tmp>
	
	desired_current = (desired_current / 10) * 10;
     c46:	20 91 5a 38 	lds	r18, 0x385A	; 0x80385a <desired_current>
     c4a:	30 91 5b 38 	lds	r19, 0x385B	; 0x80385b <desired_current+0x1>
     c4e:	ad ec       	ldi	r26, 0xCD	; 205
     c50:	bc ec       	ldi	r27, 0xCC	; 204
     c52:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__umulhisi3>
     c56:	96 95       	lsr	r25
     c58:	87 95       	ror	r24
     c5a:	96 95       	lsr	r25
     c5c:	87 95       	ror	r24
     c5e:	96 95       	lsr	r25
     c60:	87 95       	ror	r24
     c62:	9c 01       	movw	r18, r24
     c64:	22 0f       	add	r18, r18
     c66:	33 1f       	adc	r19, r19
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	82 0f       	add	r24, r18
     c76:	93 1f       	adc	r25, r19
     c78:	80 93 5a 38 	sts	0x385A, r24	; 0x80385a <desired_current>
     c7c:	90 93 5b 38 	sts	0x385B, r25	; 0x80385b <desired_current+0x1>

	if(encoder_val != encoder_val_tmp)
     c80:	90 91 e2 38 	lds	r25, 0x38E2	; 0x8038e2 <encoder_val>
     c84:	80 91 cd 38 	lds	r24, 0x38CD	; 0x8038cd <encoder_val_tmp>
     c88:	98 17       	cp	r25, r24
     c8a:	09 f4       	brne	.+2      	; 0xc8e <handle_encoder+0x50>
     c8c:	c3 c0       	rjmp	.+390    	; 0xe14 <handle_encoder+0x1d6>
	{
		if((encoder_val == 0 && encoder_val_tmp == 2))
     c8e:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <encoder_val>
     c92:	81 11       	cpse	r24, r1
     c94:	54 c0       	rjmp	.+168    	; 0xd3e <handle_encoder+0x100>
     c96:	80 91 cd 38 	lds	r24, 0x38CD	; 0x8038cd <encoder_val_tmp>
     c9a:	82 30       	cpi	r24, 0x02	; 2
     c9c:	09 f0       	breq	.+2      	; 0xca0 <handle_encoder+0x62>
     c9e:	4f c0       	rjmp	.+158    	; 0xd3e <handle_encoder+0x100>
		{
			if (desired_current <= MAX_CURRENT - 10)
     ca0:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
     ca4:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
     ca8:	8b 3b       	cpi	r24, 0xBB	; 187
     caa:	99 40       	sbci	r25, 0x09	; 9
     cac:	08 f0       	brcs	.+2      	; 0xcb0 <handle_encoder+0x72>
     cae:	9e c0       	rjmp	.+316    	; 0xdec <handle_encoder+0x1ae>
			{
				if (rtc_counter - rtc_counter_prev < 2)
     cb0:	80 91 ae 38 	lds	r24, 0x38AE	; 0x8038ae <rtc_counter>
     cb4:	90 91 af 38 	lds	r25, 0x38AF	; 0x8038af <rtc_counter+0x1>
     cb8:	a0 91 b0 38 	lds	r26, 0x38B0	; 0x8038b0 <rtc_counter+0x2>
     cbc:	b0 91 b1 38 	lds	r27, 0x38B1	; 0x8038b1 <rtc_counter+0x3>
     cc0:	40 91 d3 38 	lds	r20, 0x38D3	; 0x8038d3 <rtc_counter_prev>
     cc4:	50 91 d4 38 	lds	r21, 0x38D4	; 0x8038d4 <rtc_counter_prev+0x1>
     cc8:	60 91 d5 38 	lds	r22, 0x38D5	; 0x8038d5 <rtc_counter_prev+0x2>
     ccc:	70 91 d6 38 	lds	r23, 0x38D6	; 0x8038d6 <rtc_counter_prev+0x3>
     cd0:	84 1b       	sub	r24, r20
     cd2:	95 0b       	sbc	r25, r21
     cd4:	a6 0b       	sbc	r26, r22
     cd6:	b7 0b       	sbc	r27, r23
     cd8:	02 97       	sbiw	r24, 0x02	; 2
     cda:	a1 05       	cpc	r26, r1
     cdc:	b1 05       	cpc	r27, r1
     cde:	10 f5       	brcc	.+68     	; 0xd24 <handle_encoder+0xe6>
				{
					if (desired_current <= MAX_CURRENT - 100)
     ce0:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
     ce4:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
     ce8:	81 36       	cpi	r24, 0x61	; 97
     cea:	99 40       	sbci	r25, 0x09	; 9
     cec:	70 f4       	brcc	.+28     	; 0xd0a <handle_encoder+0xcc>
					{
						desired_current += 100;
     cee:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
     cf2:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
     cf6:	8c 59       	subi	r24, 0x9C	; 156
     cf8:	9f 4f       	sbci	r25, 0xFF	; 255
     cfa:	80 93 5a 38 	sts	0x385A, r24	; 0x80385a <desired_current>
     cfe:	90 93 5b 38 	sts	0x385B, r25	; 0x80385b <desired_current+0x1>
						update = TRUE;
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	80 93 e1 38 	sts	0x38E1, r24	; 0x8038e1 <update>
     d08:	71 c0       	rjmp	.+226    	; 0xdec <handle_encoder+0x1ae>
					}
					else
					{
						desired_current += 10;
     d0a:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
     d0e:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
     d12:	0a 96       	adiw	r24, 0x0a	; 10
     d14:	80 93 5a 38 	sts	0x385A, r24	; 0x80385a <desired_current>
     d18:	90 93 5b 38 	sts	0x385B, r25	; 0x80385b <desired_current+0x1>
						update = TRUE;
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	80 93 e1 38 	sts	0x38E1, r24	; 0x8038e1 <update>
     d22:	64 c0       	rjmp	.+200    	; 0xdec <handle_encoder+0x1ae>
					}
				}
				else
				{
					desired_current += 10;
     d24:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
     d28:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
     d2c:	0a 96       	adiw	r24, 0x0a	; 10
     d2e:	80 93 5a 38 	sts	0x385A, r24	; 0x80385a <desired_current>
     d32:	90 93 5b 38 	sts	0x385B, r25	; 0x80385b <desired_current+0x1>
					update = TRUE;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	80 93 e1 38 	sts	0x38E1, r24	; 0x8038e1 <update>
     d3c:	57 c0       	rjmp	.+174    	; 0xdec <handle_encoder+0x1ae>
				}
			}
		}
		else if((encoder_val == 1 && encoder_val_tmp == 3))
     d3e:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <encoder_val>
     d42:	81 30       	cpi	r24, 0x01	; 1
     d44:	09 f0       	breq	.+2      	; 0xd48 <handle_encoder+0x10a>
     d46:	52 c0       	rjmp	.+164    	; 0xdec <handle_encoder+0x1ae>
     d48:	80 91 cd 38 	lds	r24, 0x38CD	; 0x8038cd <encoder_val_tmp>
     d4c:	83 30       	cpi	r24, 0x03	; 3
     d4e:	09 f0       	breq	.+2      	; 0xd52 <handle_encoder+0x114>
     d50:	4d c0       	rjmp	.+154    	; 0xdec <handle_encoder+0x1ae>
		{
			if (desired_current >= 10)
     d52:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
     d56:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
     d5a:	0a 97       	sbiw	r24, 0x0a	; 10
     d5c:	08 f4       	brcc	.+2      	; 0xd60 <handle_encoder+0x122>
     d5e:	46 c0       	rjmp	.+140    	; 0xdec <handle_encoder+0x1ae>
			{
				if (rtc_counter - rtc_counter_prev < 2)
     d60:	80 91 ae 38 	lds	r24, 0x38AE	; 0x8038ae <rtc_counter>
     d64:	90 91 af 38 	lds	r25, 0x38AF	; 0x8038af <rtc_counter+0x1>
     d68:	a0 91 b0 38 	lds	r26, 0x38B0	; 0x8038b0 <rtc_counter+0x2>
     d6c:	b0 91 b1 38 	lds	r27, 0x38B1	; 0x8038b1 <rtc_counter+0x3>
     d70:	40 91 d3 38 	lds	r20, 0x38D3	; 0x8038d3 <rtc_counter_prev>
     d74:	50 91 d4 38 	lds	r21, 0x38D4	; 0x8038d4 <rtc_counter_prev+0x1>
     d78:	60 91 d5 38 	lds	r22, 0x38D5	; 0x8038d5 <rtc_counter_prev+0x2>
     d7c:	70 91 d6 38 	lds	r23, 0x38D6	; 0x8038d6 <rtc_counter_prev+0x3>
     d80:	84 1b       	sub	r24, r20
     d82:	95 0b       	sbc	r25, r21
     d84:	a6 0b       	sbc	r26, r22
     d86:	b7 0b       	sbc	r27, r23
     d88:	02 97       	sbiw	r24, 0x02	; 2
     d8a:	a1 05       	cpc	r26, r1
     d8c:	b1 05       	cpc	r27, r1
     d8e:	10 f5       	brcc	.+68     	; 0xdd4 <handle_encoder+0x196>
				{
					if (desired_current >= 100)
     d90:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
     d94:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
     d98:	84 36       	cpi	r24, 0x64	; 100
     d9a:	91 05       	cpc	r25, r1
     d9c:	70 f0       	brcs	.+28     	; 0xdba <handle_encoder+0x17c>
					{
						desired_current -= 100;
     d9e:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
     da2:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
     da6:	84 56       	subi	r24, 0x64	; 100
     da8:	91 09       	sbc	r25, r1
     daa:	80 93 5a 38 	sts	0x385A, r24	; 0x80385a <desired_current>
     dae:	90 93 5b 38 	sts	0x385B, r25	; 0x80385b <desired_current+0x1>
						update = TRUE;
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	80 93 e1 38 	sts	0x38E1, r24	; 0x8038e1 <update>
     db8:	19 c0       	rjmp	.+50     	; 0xdec <handle_encoder+0x1ae>
					}
					else
					{
						desired_current -= 10;
     dba:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
     dbe:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
     dc2:	0a 97       	sbiw	r24, 0x0a	; 10
     dc4:	80 93 5a 38 	sts	0x385A, r24	; 0x80385a <desired_current>
     dc8:	90 93 5b 38 	sts	0x385B, r25	; 0x80385b <desired_current+0x1>
						update = TRUE;
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	80 93 e1 38 	sts	0x38E1, r24	; 0x8038e1 <update>
     dd2:	0c c0       	rjmp	.+24     	; 0xdec <handle_encoder+0x1ae>
					}
				}
				else
				{
					desired_current -= 10;
     dd4:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
     dd8:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
     ddc:	0a 97       	sbiw	r24, 0x0a	; 10
     dde:	80 93 5a 38 	sts	0x385A, r24	; 0x80385a <desired_current>
     de2:	90 93 5b 38 	sts	0x385B, r25	; 0x80385b <desired_current+0x1>
					update = TRUE;
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	80 93 e1 38 	sts	0x38E1, r24	; 0x8038e1 <update>
				}
			}
		}

		encoder_val = encoder_val_tmp;
     dec:	80 91 cd 38 	lds	r24, 0x38CD	; 0x8038cd <encoder_val_tmp>
     df0:	80 93 e2 38 	sts	0x38E2, r24	; 0x8038e2 <encoder_val>
		rtc_counter_prev = rtc_counter;
     df4:	80 91 ae 38 	lds	r24, 0x38AE	; 0x8038ae <rtc_counter>
     df8:	90 91 af 38 	lds	r25, 0x38AF	; 0x8038af <rtc_counter+0x1>
     dfc:	a0 91 b0 38 	lds	r26, 0x38B0	; 0x8038b0 <rtc_counter+0x2>
     e00:	b0 91 b1 38 	lds	r27, 0x38B1	; 0x8038b1 <rtc_counter+0x3>
     e04:	80 93 d3 38 	sts	0x38D3, r24	; 0x8038d3 <rtc_counter_prev>
     e08:	90 93 d4 38 	sts	0x38D4, r25	; 0x8038d4 <rtc_counter_prev+0x1>
     e0c:	a0 93 d5 38 	sts	0x38D5, r26	; 0x8038d5 <rtc_counter_prev+0x2>
     e10:	b0 93 d6 38 	sts	0x38D6, r27	; 0x8038d6 <rtc_counter_prev+0x3>
     e14:	08 95       	ret

00000e16 <INA_Read_Short>:
	//INA_Write(twi, 0x00, 0x48, 0x07, ina226_addr);
	//If no communication for too long then do long delay to triger a watch dog counter
	INA_Write(twi, 0x00, 0x45, 0xFF, ina226_addr);
	
	_delay_ms(20);
}
     e16:	ef 92       	push	r14
     e18:	ff 92       	push	r15
     e1a:	0f 93       	push	r16
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	28 97       	sbiw	r28, 0x08	; 8
     e26:	cd bf       	out	0x3d, r28	; 61
     e28:	de bf       	out	0x3e, r29	; 62
     e2a:	7c 01       	movw	r14, r24
     e2c:	84 2f       	mov	r24, r20
     e2e:	69 83       	std	Y+1, r22	; 0x01
     e30:	02 e0       	ldi	r16, 0x02	; 2
     e32:	21 e0       	ldi	r18, 0x01	; 1
     e34:	ae 01       	movw	r20, r28
     e36:	4f 5f       	subi	r20, 0xFF	; 255
     e38:	5f 4f       	sbci	r21, 0xFF	; 255
     e3a:	68 2f       	mov	r22, r24
     e3c:	c7 01       	movw	r24, r14
     e3e:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <TWI_MasterWriteRead>
     e42:	8f e0       	ldi	r24, 0x0F	; 15
     e44:	97 e2       	ldi	r25, 0x27	; 39
     e46:	01 97       	sbiw	r24, 0x01	; 1
     e48:	f1 f7       	brne	.-4      	; 0xe46 <INA_Read_Short+0x30>
     e4a:	00 c0       	rjmp	.+0      	; 0xe4c <INA_Read_Short+0x36>
     e4c:	00 00       	nop
     e4e:	c7 01       	movw	r24, r14
     e50:	0b 96       	adiw	r24, 0x0b	; 11
     e52:	28 96       	adiw	r28, 0x08	; 8
     e54:	cd bf       	out	0x3d, r28	; 61
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	0f 91       	pop	r16
     e5e:	ff 90       	pop	r15
     e60:	ef 90       	pop	r14
     e62:	08 95       	ret

00000e64 <INA_Read_Long>:
     e64:	ef 92       	push	r14
     e66:	ff 92       	push	r15
     e68:	0f 93       	push	r16
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	28 97       	sbiw	r28, 0x08	; 8
     e74:	cd bf       	out	0x3d, r28	; 61
     e76:	de bf       	out	0x3e, r29	; 62
     e78:	7c 01       	movw	r14, r24
     e7a:	84 2f       	mov	r24, r20
     e7c:	69 83       	std	Y+1, r22	; 0x01
     e7e:	02 e0       	ldi	r16, 0x02	; 2
     e80:	21 e0       	ldi	r18, 0x01	; 1
     e82:	ae 01       	movw	r20, r28
     e84:	4f 5f       	subi	r20, 0xFF	; 255
     e86:	5f 4f       	sbci	r21, 0xFF	; 255
     e88:	68 2f       	mov	r22, r24
     e8a:	c7 01       	movw	r24, r14
     e8c:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <TWI_MasterWriteRead>
     e90:	8f e0       	ldi	r24, 0x0F	; 15
     e92:	97 e2       	ldi	r25, 0x27	; 39
     e94:	01 97       	sbiw	r24, 0x01	; 1
     e96:	f1 f7       	brne	.-4      	; 0xe94 <INA_Read_Long+0x30>
     e98:	00 c0       	rjmp	.+0      	; 0xe9a <INA_Read_Long+0x36>
     e9a:	00 00       	nop
     e9c:	c7 01       	movw	r24, r14
     e9e:	0b 96       	adiw	r24, 0x0b	; 11
     ea0:	28 96       	adiw	r28, 0x08	; 8
     ea2:	cd bf       	out	0x3d, r28	; 61
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	0f 91       	pop	r16
     eac:	ff 90       	pop	r15
     eae:	ef 90       	pop	r14
     eb0:	08 95       	ret

00000eb2 <get_voltage>:

uint16_t get_voltage(TWI_Master_t *twi, bool averaged, uint8_t ina226_addr)
{
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
	register8_t* read_val;
	if(averaged)
     eb6:	66 23       	and	r22, r22
     eb8:	29 f0       	breq	.+10     	; 0xec4 <get_voltage+0x12>
	{
		read_val = INA_Read_Long(twi, 0x02, ina226_addr);
     eba:	62 e0       	ldi	r22, 0x02	; 2
     ebc:	0e 94 32 07 	call	0xe64	; 0xe64 <INA_Read_Long>
     ec0:	ec 01       	movw	r28, r24
     ec2:	04 c0       	rjmp	.+8      	; 0xecc <get_voltage+0x1a>
	}
	else
	{
		read_val = INA_Read_Short(twi, 0x02, ina226_addr);
     ec4:	62 e0       	ldi	r22, 0x02	; 2
     ec6:	0e 94 0b 07 	call	0xe16	; 0xe16 <INA_Read_Short>
     eca:	ec 01       	movw	r28, r24
     ecc:	8f e0       	ldi	r24, 0x0F	; 15
     ece:	97 e2       	ldi	r25, 0x27	; 39
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	f1 f7       	brne	.-4      	; 0xed0 <get_voltage+0x1e>
     ed4:	00 c0       	rjmp	.+0      	; 0xed6 <get_voltage+0x24>
     ed6:	00 00       	nop
	}
	_delay_ms(20);
	int voltage_bits = ((read_val[0] << 8) + (read_val[1]));
     ed8:	68 81       	ld	r22, Y
     eda:	89 81       	ldd	r24, Y+1	; 0x01
	float voltage = voltage_bits * 0.00125 * 2.00; //; // 1.25 mV/bit
	int voltage_int = voltage * 100;
     edc:	70 e0       	ldi	r23, 0x00	; 0
     ede:	76 2f       	mov	r23, r22
     ee0:	66 27       	eor	r22, r22
     ee2:	68 0f       	add	r22, r24
     ee4:	71 1d       	adc	r23, r1
     ee6:	07 2e       	mov	r0, r23
     ee8:	00 0c       	add	r0, r0
     eea:	88 0b       	sbc	r24, r24
     eec:	99 0b       	sbc	r25, r25
     eee:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__floatsisf>
     ef2:	2a e0       	ldi	r18, 0x0A	; 10
     ef4:	37 ed       	ldi	r19, 0xD7	; 215
     ef6:	43 ea       	ldi	r20, 0xA3	; 163
     ef8:	5a e3       	ldi	r21, 0x3A	; 58
     efa:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__mulsf3>
     efe:	9b 01       	movw	r18, r22
     f00:	ac 01       	movw	r20, r24
     f02:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <__addsf3>
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	48 ec       	ldi	r20, 0xC8	; 200
     f0c:	52 e4       	ldi	r21, 0x42	; 66
     f0e:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__mulsf3>
     f12:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <__fixsfsi>
     f16:	cb 01       	movw	r24, r22
	
	if(voltage_int > 8000 || voltage_int < 0)//if negative or thinks greater than 80V
     f18:	61 34       	cpi	r22, 0x41	; 65
     f1a:	7f 41       	sbci	r23, 0x1F	; 31
     f1c:	10 f0       	brcs	.+4      	; 0xf22 <get_voltage+0x70>
	{ 
		voltage_int = 0;
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	if (read_val == 0xFFFFFFFF)
     f22:	21 96       	adiw	r28, 0x01	; 1
     f24:	11 f4       	brne	.+4      	; 0xf2a <get_voltage+0x78>
	{
		voltage_int = -1;
     f26:	8f ef       	ldi	r24, 0xFF	; 255
     f28:	9f ef       	ldi	r25, 0xFF	; 255
	}
		
	return voltage_int;
}
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	08 95       	ret

00000f30 <get_current>:

uint16_t get_current(TWI_Master_t *twi, bool averaged, uint8_t ina226_addr)
{
     f30:	0f 93       	push	r16
     f32:	1f 93       	push	r17
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
     f38:	00 d0       	rcall	.+0      	; 0xf3a <get_current+0xa>
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
	register8_t* read_val;
	if(averaged)
     f3e:	66 23       	and	r22, r22
     f40:	29 f0       	breq	.+10     	; 0xf4c <get_current+0x1c>
	{
		read_val = INA_Read_Long(twi, 0x01, ina226_addr);
     f42:	61 e0       	ldi	r22, 0x01	; 1
     f44:	0e 94 32 07 	call	0xe64	; 0xe64 <INA_Read_Long>
     f48:	8c 01       	movw	r16, r24
     f4a:	04 c0       	rjmp	.+8      	; 0xf54 <get_current+0x24>
	}
	else
	{
		read_val = INA_Read_Short(twi, 0x01, ina226_addr);
     f4c:	61 e0       	ldi	r22, 0x01	; 1
     f4e:	0e 94 0b 07 	call	0xe16	; 0xe16 <INA_Read_Short>
     f52:	8c 01       	movw	r16, r24
     f54:	8f e0       	ldi	r24, 0x0F	; 15
     f56:	97 e2       	ldi	r25, 0x27	; 39
     f58:	01 97       	sbiw	r24, 0x01	; 1
     f5a:	f1 f7       	brne	.-4      	; 0xf58 <get_current+0x28>
     f5c:	00 c0       	rjmp	.+0      	; 0xf5e <get_current+0x2e>
     f5e:	00 00       	nop
	}
	_delay_ms(20);
	int shunt_voltage_bits = ((read_val[0] << 8) + (read_val[1]));
     f60:	f8 01       	movw	r30, r16
     f62:	60 81       	ld	r22, Z
     f64:	81 81       	ldd	r24, Z+1	; 0x01
	float current = shunt_voltage_bits * 0.0000025 / 0.002; // * 2.5 uV / 2 milli Ohm
	int volatile current_int = current * 100;
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	76 2f       	mov	r23, r22
     f6a:	66 27       	eor	r22, r22
     f6c:	68 0f       	add	r22, r24
     f6e:	71 1d       	adc	r23, r1
     f70:	07 2e       	mov	r0, r23
     f72:	00 0c       	add	r0, r0
     f74:	88 0b       	sbc	r24, r24
     f76:	99 0b       	sbc	r25, r25
     f78:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__floatsisf>
     f7c:	2c ea       	ldi	r18, 0xAC	; 172
     f7e:	35 ec       	ldi	r19, 0xC5	; 197
     f80:	47 e2       	ldi	r20, 0x27	; 39
     f82:	56 e3       	ldi	r21, 0x36	; 54
     f84:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__mulsf3>
     f88:	2f e6       	ldi	r18, 0x6F	; 111
     f8a:	32 e1       	ldi	r19, 0x12	; 18
     f8c:	43 e0       	ldi	r20, 0x03	; 3
     f8e:	5b e3       	ldi	r21, 0x3B	; 59
     f90:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__divsf3>
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	48 ec       	ldi	r20, 0xC8	; 200
     f9a:	52 e4       	ldi	r21, 0x42	; 66
     f9c:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__mulsf3>
     fa0:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <__fixsfsi>
     fa4:	69 83       	std	Y+1, r22	; 0x01
     fa6:	7a 83       	std	Y+2, r23	; 0x02
	
	if(current_int > 8000 || current_int < 0)//if negative or thinks greater than 80A
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	9a 81       	ldd	r25, Y+2	; 0x02
     fac:	81 34       	cpi	r24, 0x41	; 65
     fae:	9f 41       	sbci	r25, 0x1F	; 31
     fb0:	24 f4       	brge	.+8      	; 0xfba <get_current+0x8a>
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	9a 81       	ldd	r25, Y+2	; 0x02
     fb6:	99 23       	and	r25, r25
     fb8:	14 f4       	brge	.+4      	; 0xfbe <get_current+0x8e>
	{ 
		current_int = 0;
     fba:	19 82       	std	Y+1, r1	; 0x01
     fbc:	1a 82       	std	Y+2, r1	; 0x02
	}

	if (read_val == 0xFFFFFFFF)
     fbe:	0f 3f       	cpi	r16, 0xFF	; 255
     fc0:	1f 4f       	sbci	r17, 0xFF	; 255
     fc2:	21 f4       	brne	.+8      	; 0xfcc <get_current+0x9c>
	{
		current_int = -1;
     fc4:	8f ef       	ldi	r24, 0xFF	; 255
     fc6:	9f ef       	ldi	r25, 0xFF	; 255
     fc8:	89 83       	std	Y+1, r24	; 0x01
     fca:	9a 83       	std	Y+2, r25	; 0x02
	}
	
	return current_int;
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	9a 81       	ldd	r25, Y+2	; 0x02
}
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	1f 91       	pop	r17
     fda:	0f 91       	pop	r16
     fdc:	08 95       	ret

00000fde <clear_lcd_update>:
		lcd_command(FUNCTION_SET | 0b0000111100);
	}
}

void clear_lcd_update()
{
     fde:	ac e5       	ldi	r26, 0x5C	; 92
     fe0:	b8 e3       	ldi	r27, 0x38	; 56
     fe2:	e4 e8       	ldi	r30, 0x84	; 132
     fe4:	f8 e3       	ldi	r31, 0x38	; 56
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 20; j++)
		{
			lcd_screen[i][j] = ' ';
     fe6:	80 e2       	ldi	r24, 0x20	; 32
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	8d 93       	st	X+, r24
     fec:	9d 93       	st	X+, r25

void clear_lcd_update()
{
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 20; j++)
     fee:	ae 17       	cp	r26, r30
     ff0:	bf 07       	cpc	r27, r31
     ff2:	d9 f7       	brne	.-10     	; 0xfea <clear_lcd_update+0xc>
     ff4:	2c ea       	ldi	r18, 0xAC	; 172
     ff6:	38 e3       	ldi	r19, 0x38	; 56
		{
			lcd_screen[i][j] = ' ';
     ff8:	80 e2       	ldi	r24, 0x20	; 32
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	81 93       	st	Z+, r24
     ffe:	91 93       	st	Z+, r25

void clear_lcd_update()
{
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 20; j++)
    1000:	e2 17       	cp	r30, r18
    1002:	f3 07       	cpc	r31, r19
    1004:	d9 f7       	brne	.-10     	; 0xffc <clear_lcd_update+0x1e>
    1006:	a8 e0       	ldi	r26, 0x08	; 8
    1008:	b8 e3       	ldi	r27, 0x38	; 56
    100a:	e0 e3       	ldi	r30, 0x30	; 48
    100c:	f8 e3       	ldi	r31, 0x38	; 56
	
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 20; j++)
		{
			lcd_screen_update[i][j] = ' ';
    100e:	80 e2       	ldi	r24, 0x20	; 32
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	8d 93       	st	X+, r24
    1014:	9d 93       	st	X+, r25
		}
	}
	
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 20; j++)
    1016:	ae 17       	cp	r26, r30
    1018:	bf 07       	cpc	r27, r31
    101a:	d9 f7       	brne	.-10     	; 0x1012 <clear_lcd_update+0x34>
    101c:	28 e5       	ldi	r18, 0x58	; 88
    101e:	38 e3       	ldi	r19, 0x38	; 56
		{
			lcd_screen_update[i][j] = ' ';
    1020:	80 e2       	ldi	r24, 0x20	; 32
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	81 93       	st	Z+, r24
    1026:	91 93       	st	Z+, r25
		}
	}
	
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 20; j++)
    1028:	2e 17       	cp	r18, r30
    102a:	3f 07       	cpc	r19, r31
    102c:	d9 f7       	brne	.-10     	; 0x1024 <clear_lcd_update+0x46>
		{
			lcd_screen_update[i][j] = ' ';
		}
	}
	
	lcd_row_counter = 0;
    102e:	10 92 d7 38 	sts	0x38D7, r1	; 0x8038d7 <lcd_row_counter>
	lcd_col_counter = 0;
    1032:	10 92 d0 38 	sts	0x38D0, r1	; 0x8038d0 <lcd_col_counter>
    1036:	08 95       	ret

00001038 <load_custom_characters>:
		two_line_mode = true;
	}
}

void load_custom_characters()
{
    1038:	0f 93       	push	r16
    103a:	1f 93       	push	r17
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	00 d0       	rcall	.+0      	; 0x1042 <load_custom_characters+0xa>
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
	
	unsigned char message[2];
	message[0] = (0x00);							//Control bit with continuous data stream
    1046:	19 82       	std	Y+1, r1	; 0x01
	message[1] = (0x38);							//Function Set (8-bit data, 1 Line 5x8 character mode, Normal Instruction Table Chosen)
    1048:	88 e3       	ldi	r24, 0x38	; 56
    104a:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
    104c:	22 e0       	ldi	r18, 0x02	; 2
    104e:	ae 01       	movw	r20, r28
    1050:	4f 5f       	subi	r20, 0xFF	; 255
    1052:	5f 4f       	sbci	r21, 0xFF	; 255
    1054:	6c e3       	ldi	r22, 0x3C	; 60
    1056:	82 eb       	ldi	r24, 0xB2	; 178
    1058:	98 e3       	ldi	r25, 0x38	; 56
    105a:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <TWI_MasterWrite>
	while(twiMaster.status == 1);
    105e:	e2 eb       	ldi	r30, 0xB2	; 178
    1060:	f8 e3       	ldi	r31, 0x38	; 56
    1062:	87 89       	ldd	r24, Z+23	; 0x17
    1064:	81 30       	cpi	r24, 0x01	; 1
    1066:	e9 f3       	breq	.-6      	; 0x1062 <load_custom_characters+0x2a>
    1068:	87 e8       	ldi	r24, 0x87	; 135
    106a:	93 e1       	ldi	r25, 0x13	; 19
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	f1 f7       	brne	.-4      	; 0x106c <load_custom_characters+0x34>
    1070:	00 c0       	rjmp	.+0      	; 0x1072 <load_custom_characters+0x3a>
    1072:	00 00       	nop
	_delay_ms(10);
	while (twiMaster.result != TWIM_RESULT_OK)
    1074:	80 91 ca 38 	lds	r24, 0x38CA	; 0x8038ca <twiMaster+0x18>
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	c9 f0       	breq	.+50     	; 0x10ae <load_custom_characters+0x76>
	{
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
    107c:	02 eb       	ldi	r16, 0xB2	; 178
    107e:	18 e3       	ldi	r17, 0x38	; 56
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
	while(twiMaster.status == 1);
	_delay_ms(10);
	while (twiMaster.result != TWIM_RESULT_OK)
	{
		initialize_Screen();
    1080:	0e 94 46 09 	call	0x128c	; 0x128c <initialize_Screen>
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
    1084:	22 e0       	ldi	r18, 0x02	; 2
    1086:	ae 01       	movw	r20, r28
    1088:	4f 5f       	subi	r20, 0xFF	; 255
    108a:	5f 4f       	sbci	r21, 0xFF	; 255
    108c:	6c e3       	ldi	r22, 0x3C	; 60
    108e:	c8 01       	movw	r24, r16
    1090:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <TWI_MasterWrite>
		while(twiMaster.status == 1);
    1094:	f8 01       	movw	r30, r16
    1096:	87 89       	ldd	r24, Z+23	; 0x17
    1098:	81 30       	cpi	r24, 0x01	; 1
    109a:	e1 f3       	breq	.-8      	; 0x1094 <load_custom_characters+0x5c>
    109c:	87 e8       	ldi	r24, 0x87	; 135
    109e:	93 e1       	ldi	r25, 0x13	; 19
    10a0:	01 97       	sbiw	r24, 0x01	; 1
    10a2:	f1 f7       	brne	.-4      	; 0x10a0 <load_custom_characters+0x68>
    10a4:	00 c0       	rjmp	.+0      	; 0x10a6 <load_custom_characters+0x6e>
    10a6:	00 00       	nop
	message[0] = (0x00);							//Control bit with continuous data stream
	message[1] = (0x38);							//Function Set (8-bit data, 1 Line 5x8 character mode, Normal Instruction Table Chosen)
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
	while(twiMaster.status == 1);
	_delay_ms(10);
	while (twiMaster.result != TWIM_RESULT_OK)
    10a8:	80 8d       	ldd	r24, Z+24	; 0x18
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	49 f7       	brne	.-46     	; 0x1080 <load_custom_characters+0x48>
		while(twiMaster.status == 1);
		_delay_ms(10);
	}
	
	// 1 bar
	lcd_command(SET_CGRAM_ADDRESS);
    10ae:	80 e4       	ldi	r24, 0x40	; 64
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	91 e0       	ldi	r25, 0x01	; 1
    10ba:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	91 e0       	ldi	r25, 0x01	; 1
    10c2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000010000);
    10c6:	80 e1       	ldi	r24, 0x10	; 16
    10c8:	91 e0       	ldi	r25, 0x01	; 1
    10ca:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000010000);
    10ce:	80 e1       	ldi	r24, 0x10	; 16
    10d0:	91 e0       	ldi	r25, 0x01	; 1
    10d2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000010000);
    10d6:	80 e1       	ldi	r24, 0x10	; 16
    10d8:	91 e0       	ldi	r25, 0x01	; 1
    10da:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000010000);
    10de:	80 e1       	ldi	r24, 0x10	; 16
    10e0:	91 e0       	ldi	r25, 0x01	; 1
    10e2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	91 e0       	ldi	r25, 0x01	; 1
    10ea:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	91 e0       	ldi	r25, 0x01	; 1
    10f2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	//2 bar
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	91 e0       	ldi	r25, 0x01	; 1
    10fa:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	91 e0       	ldi	r25, 0x01	; 1
    1102:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011000);
    1106:	88 e1       	ldi	r24, 0x18	; 24
    1108:	91 e0       	ldi	r25, 0x01	; 1
    110a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011000);
    110e:	88 e1       	ldi	r24, 0x18	; 24
    1110:	91 e0       	ldi	r25, 0x01	; 1
    1112:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011000);
    1116:	88 e1       	ldi	r24, 0x18	; 24
    1118:	91 e0       	ldi	r25, 0x01	; 1
    111a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011000);
    111e:	88 e1       	ldi	r24, 0x18	; 24
    1120:	91 e0       	ldi	r25, 0x01	; 1
    1122:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	91 e0       	ldi	r25, 0x01	; 1
    112a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	91 e0       	ldi	r25, 0x01	; 1
    1132:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	//3 bar
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	91 e0       	ldi	r25, 0x01	; 1
    113a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	91 e0       	ldi	r25, 0x01	; 1
    1142:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011100);
    1146:	8c e1       	ldi	r24, 0x1C	; 28
    1148:	91 e0       	ldi	r25, 0x01	; 1
    114a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011100);
    114e:	8c e1       	ldi	r24, 0x1C	; 28
    1150:	91 e0       	ldi	r25, 0x01	; 1
    1152:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011100);
    1156:	8c e1       	ldi	r24, 0x1C	; 28
    1158:	91 e0       	ldi	r25, 0x01	; 1
    115a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011100);
    115e:	8c e1       	ldi	r24, 0x1C	; 28
    1160:	91 e0       	ldi	r25, 0x01	; 1
    1162:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	91 e0       	ldi	r25, 0x01	; 1
    116a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	91 e0       	ldi	r25, 0x01	; 1
    1172:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	//4 bar
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	91 e0       	ldi	r25, 0x01	; 1
    117a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	91 e0       	ldi	r25, 0x01	; 1
    1182:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011110);
    1186:	8e e1       	ldi	r24, 0x1E	; 30
    1188:	91 e0       	ldi	r25, 0x01	; 1
    118a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011110);
    118e:	8e e1       	ldi	r24, 0x1E	; 30
    1190:	91 e0       	ldi	r25, 0x01	; 1
    1192:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011110);
    1196:	8e e1       	ldi	r24, 0x1E	; 30
    1198:	91 e0       	ldi	r25, 0x01	; 1
    119a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011110);
    119e:	8e e1       	ldi	r24, 0x1E	; 30
    11a0:	91 e0       	ldi	r25, 0x01	; 1
    11a2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	91 e0       	ldi	r25, 0x01	; 1
    11aa:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	91 e0       	ldi	r25, 0x01	; 1
    11b2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	//5 bar
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	91 e0       	ldi	r25, 0x01	; 1
    11ba:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	91 e0       	ldi	r25, 0x01	; 1
    11c2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    11c6:	8f e1       	ldi	r24, 0x1F	; 31
    11c8:	91 e0       	ldi	r25, 0x01	; 1
    11ca:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    11ce:	8f e1       	ldi	r24, 0x1F	; 31
    11d0:	91 e0       	ldi	r25, 0x01	; 1
    11d2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    11d6:	8f e1       	ldi	r24, 0x1F	; 31
    11d8:	91 e0       	ldi	r25, 0x01	; 1
    11da:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    11de:	8f e1       	ldi	r24, 0x1F	; 31
    11e0:	91 e0       	ldi	r25, 0x01	; 1
    11e2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	91 e0       	ldi	r25, 0x01	; 1
    11ea:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	91 e0       	ldi	r25, 0x01	; 1
    11f2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	//10th bar
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	91 e0       	ldi	r25, 0x01	; 1
    11fa:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000001);
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	91 e0       	ldi	r25, 0x01	; 1
    1202:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    1206:	8f e1       	ldi	r24, 0x1F	; 31
    1208:	91 e0       	ldi	r25, 0x01	; 1
    120a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    120e:	8f e1       	ldi	r24, 0x1F	; 31
    1210:	91 e0       	ldi	r25, 0x01	; 1
    1212:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    1216:	8f e1       	ldi	r24, 0x1F	; 31
    1218:	91 e0       	ldi	r25, 0x01	; 1
    121a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    121e:	8f e1       	ldi	r24, 0x1F	; 31
    1220:	91 e0       	ldi	r25, 0x01	; 1
    1222:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000001);
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	91 e0       	ldi	r25, 0x01	; 1
    122a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000000000);
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	91 e0       	ldi	r25, 0x01	; 1
    1232:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	//lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
	//lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
	//lcd_command(WRITE_DATA_TO_RAM | 0b0000000001);
	//lcd_command(WRITE_DATA_TO_RAM | 0b0000000001);
	//max current bar
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    1236:	8f e1       	ldi	r24, 0x1F	; 31
    1238:	91 e0       	ldi	r25, 0x01	; 1
    123a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    123e:	8f e1       	ldi	r24, 0x1F	; 31
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    1246:	8f e1       	ldi	r24, 0x1F	; 31
    1248:	91 e0       	ldi	r25, 0x01	; 1
    124a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    124e:	8f e1       	ldi	r24, 0x1F	; 31
    1250:	91 e0       	ldi	r25, 0x01	; 1
    1252:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    1256:	8f e1       	ldi	r24, 0x1F	; 31
    1258:	91 e0       	ldi	r25, 0x01	; 1
    125a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    125e:	8f e1       	ldi	r24, 0x1F	; 31
    1260:	91 e0       	ldi	r25, 0x01	; 1
    1262:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    1266:	8f e1       	ldi	r24, 0x1F	; 31
    1268:	91 e0       	ldi	r25, 0x01	; 1
    126a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(WRITE_DATA_TO_RAM | 0b0000011111);
    126e:	8f e1       	ldi	r24, 0x1F	; 31
    1270:	91 e0       	ldi	r25, 0x01	; 1
    1272:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	lcd_command(SET_DDRAM_ADDRESS);
    1276:	80 e8       	ldi	r24, 0x80	; 128
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	1f 91       	pop	r17
    1288:	0f 91       	pop	r16
    128a:	08 95       	ret

0000128c <initialize_Screen>:
#include "lcd_screen.h"

volatile bool two_line_mode = true;

void initialize_Screen()
{
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	2a 97       	sbiw	r28, 0x0a	; 10
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	87 ea       	ldi	r24, 0xA7	; 167
    129c:	91 e6       	ldi	r25, 0x61	; 97
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	f1 f7       	brne	.-4      	; 0x129e <initialize_Screen+0x12>
    12a2:	00 c0       	rjmp	.+0      	; 0x12a4 <initialize_Screen+0x18>
    12a4:	00 00       	nop
	_delay_ms(50);
	unsigned char message[10];
	
	message[0] = (0x00);							//Control bit with continuous data stream
    12a6:	19 82       	std	Y+1, r1	; 0x01
	message[1] = (0x38);							//Function Set (8-bit data, 1 Line 5x8 character mode, Normal Instruction Table Chosen)
    12a8:	88 e3       	ldi	r24, 0x38	; 56
    12aa:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
    12ac:	22 e0       	ldi	r18, 0x02	; 2
    12ae:	ae 01       	movw	r20, r28
    12b0:	4f 5f       	subi	r20, 0xFF	; 255
    12b2:	5f 4f       	sbci	r21, 0xFF	; 255
    12b4:	6c e3       	ldi	r22, 0x3C	; 60
    12b6:	82 eb       	ldi	r24, 0xB2	; 178
    12b8:	98 e3       	ldi	r25, 0x38	; 56
    12ba:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <TWI_MasterWrite>
	while(twiMaster.status == 1);
    12be:	e2 eb       	ldi	r30, 0xB2	; 178
    12c0:	f8 e3       	ldi	r31, 0x38	; 56
    12c2:	87 89       	ldd	r24, Z+23	; 0x17
    12c4:	81 30       	cpi	r24, 0x01	; 1
    12c6:	e9 f3       	breq	.-6      	; 0x12c2 <initialize_Screen+0x36>
    12c8:	87 e8       	ldi	r24, 0x87	; 135
    12ca:	93 e1       	ldi	r25, 0x13	; 19
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	f1 f7       	brne	.-4      	; 0x12cc <initialize_Screen+0x40>
    12d0:	00 c0       	rjmp	.+0      	; 0x12d2 <initialize_Screen+0x46>
    12d2:	00 00       	nop
	_delay_ms(10);
	while (twiMaster.result != TWIM_RESULT_OK)
    12d4:	80 91 ca 38 	lds	r24, 0x38CA	; 0x8038ca <twiMaster+0x18>
    12d8:	81 30       	cpi	r24, 0x01	; 1
    12da:	19 f0       	breq	.+6      	; 0x12e2 <initialize_Screen+0x56>
	{
		initialize_Screen();
    12dc:	0e 94 46 09 	call	0x128c	; 0x128c <initialize_Screen>
		return;
    12e0:	91 c0       	rjmp	.+290    	; 0x1404 <initialize_Screen+0x178>
	}
	
	message[0] = (0x00);
    12e2:	19 82       	std	Y+1, r1	; 0x01
	message[1] = (0x39);							//Function Set (8-bit data, 1 Line 5x8 character mode, Extension Instruction Table Chosen)
    12e4:	89 e3       	ldi	r24, 0x39	; 57
    12e6:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 2);
    12e8:	22 e0       	ldi	r18, 0x02	; 2
    12ea:	ae 01       	movw	r20, r28
    12ec:	4f 5f       	subi	r20, 0xFF	; 255
    12ee:	5f 4f       	sbci	r21, 0xFF	; 255
    12f0:	6c e3       	ldi	r22, 0x3C	; 60
    12f2:	82 eb       	ldi	r24, 0xB2	; 178
    12f4:	98 e3       	ldi	r25, 0x38	; 56
    12f6:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <TWI_MasterWrite>
	while(twiMaster.status == 1);
    12fa:	e2 eb       	ldi	r30, 0xB2	; 178
    12fc:	f8 e3       	ldi	r31, 0x38	; 56
    12fe:	87 89       	ldd	r24, Z+23	; 0x17
    1300:	81 30       	cpi	r24, 0x01	; 1
    1302:	e9 f3       	breq	.-6      	; 0x12fe <initialize_Screen+0x72>
    1304:	87 e8       	ldi	r24, 0x87	; 135
    1306:	93 e1       	ldi	r25, 0x13	; 19
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	f1 f7       	brne	.-4      	; 0x1308 <initialize_Screen+0x7c>
    130c:	00 c0       	rjmp	.+0      	; 0x130e <initialize_Screen+0x82>
    130e:	00 00       	nop
	_delay_ms(10);
	while (twiMaster.result != TWIM_RESULT_OK)
    1310:	80 91 ca 38 	lds	r24, 0x38CA	; 0x8038ca <twiMaster+0x18>
    1314:	81 30       	cpi	r24, 0x01	; 1
    1316:	19 f0       	breq	.+6      	; 0x131e <initialize_Screen+0x92>
	{
		initialize_Screen();
    1318:	0e 94 46 09 	call	0x128c	; 0x128c <initialize_Screen>
		return;
    131c:	73 c0       	rjmp	.+230    	; 0x1404 <initialize_Screen+0x178>
	}
	
	message[0] = (0x00);
    131e:	19 82       	std	Y+1, r1	; 0x01
	message[1] = (0x14);							//Set frame frequency to 192 Hz and Voltage Bias to 1/5
    1320:	84 e1       	ldi	r24, 0x14	; 20
    1322:	8a 83       	std	Y+2, r24	; 0x02
	message[2] = (0x78);							//Set contrast bits C3:0 to 8 (C5:0 - 0x28 *C5:4 is part of next data byte)
    1324:	88 e7       	ldi	r24, 0x78	; 120
    1326:	8b 83       	std	Y+3, r24	; 0x03
	message[3] = (0x5E);							//Turn on Icon Display and Booster Circuit and set C5:4 to 2 for contrast setting
    1328:	8e e5       	ldi	r24, 0x5E	; 94
    132a:	8c 83       	std	Y+4, r24	; 0x04
	message[4] = (0x6D);							//Turn on internal follower circuit and adjust V0 generator amplified ratio (Rab2:0 - 2)
    132c:	8d e6       	ldi	r24, 0x6D	; 109
    132e:	8d 83       	std	Y+5, r24	; 0x05
	message[5] = (0x0C);
    1330:	8c e0       	ldi	r24, 0x0C	; 12
    1332:	8e 83       	std	Y+6, r24	; 0x06
	message[6] = (0x01);
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	8f 83       	std	Y+7, r24	; 0x07
	message[7] = (0x06);
    1338:	86 e0       	ldi	r24, 0x06	; 6
    133a:	88 87       	std	Y+8, r24	; 0x08
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, message, 8);
    133c:	28 e0       	ldi	r18, 0x08	; 8
    133e:	ae 01       	movw	r20, r28
    1340:	4f 5f       	subi	r20, 0xFF	; 255
    1342:	5f 4f       	sbci	r21, 0xFF	; 255
    1344:	6c e3       	ldi	r22, 0x3C	; 60
    1346:	82 eb       	ldi	r24, 0xB2	; 178
    1348:	98 e3       	ldi	r25, 0x38	; 56
    134a:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <TWI_MasterWrite>
	while(twiMaster.status == 1);
    134e:	e2 eb       	ldi	r30, 0xB2	; 178
    1350:	f8 e3       	ldi	r31, 0x38	; 56
    1352:	87 89       	ldd	r24, Z+23	; 0x17
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	e9 f3       	breq	.-6      	; 0x1352 <initialize_Screen+0xc6>
    1358:	8f e4       	ldi	r24, 0x4F	; 79
    135a:	93 ec       	ldi	r25, 0xC3	; 195
    135c:	01 97       	sbiw	r24, 0x01	; 1
    135e:	f1 f7       	brne	.-4      	; 0x135c <initialize_Screen+0xd0>
    1360:	00 c0       	rjmp	.+0      	; 0x1362 <initialize_Screen+0xd6>
    1362:	00 00       	nop
	_delay_ms(100);
	while (twiMaster.result != TWIM_RESULT_OK)
    1364:	80 91 ca 38 	lds	r24, 0x38CA	; 0x8038ca <twiMaster+0x18>
    1368:	81 30       	cpi	r24, 0x01	; 1
    136a:	19 f0       	breq	.+6      	; 0x1372 <initialize_Screen+0xe6>
	{
		initialize_Screen();
    136c:	0e 94 46 09 	call	0x128c	; 0x128c <initialize_Screen>
		return;
    1370:	49 c0       	rjmp	.+146    	; 0x1404 <initialize_Screen+0x178>
    1372:	87 ea       	ldi	r24, 0xA7	; 167
    1374:	91 e6       	ldi	r25, 0x61	; 97
    1376:	01 97       	sbiw	r24, 0x01	; 1
    1378:	f1 f7       	brne	.-4      	; 0x1376 <initialize_Screen+0xea>
    137a:	00 c0       	rjmp	.+0      	; 0x137c <initialize_Screen+0xf0>
    137c:	00 00       	nop
	}
	
	_delay_ms(50);
	load_custom_characters();
    137e:	0e 94 1c 08 	call	0x1038	; 0x1038 <load_custom_characters>
    1382:	ac e5       	ldi	r26, 0x5C	; 92
    1384:	b8 e3       	ldi	r27, 0x38	; 56
    1386:	e4 e8       	ldi	r30, 0x84	; 132
    1388:	f8 e3       	ldi	r31, 0x38	; 56
	
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 20; j++)
		{
			lcd_screen[i][j] = ' ';
    138a:	80 e2       	ldi	r24, 0x20	; 32
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	8d 93       	st	X+, r24
    1390:	9d 93       	st	X+, r25
	_delay_ms(50);
	load_custom_characters();
	
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 20; j++)
    1392:	ae 17       	cp	r26, r30
    1394:	bf 07       	cpc	r27, r31
    1396:	d9 f7       	brne	.-10     	; 0x138e <initialize_Screen+0x102>
    1398:	2c ea       	ldi	r18, 0xAC	; 172
    139a:	38 e3       	ldi	r19, 0x38	; 56
		{
			lcd_screen[i][j] = ' ';
    139c:	80 e2       	ldi	r24, 0x20	; 32
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	81 93       	st	Z+, r24
    13a2:	91 93       	st	Z+, r25
	_delay_ms(50);
	load_custom_characters();
	
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 20; j++)
    13a4:	e2 17       	cp	r30, r18
    13a6:	f3 07       	cpc	r31, r19
    13a8:	d9 f7       	brne	.-10     	; 0x13a0 <initialize_Screen+0x114>
    13aa:	a8 e0       	ldi	r26, 0x08	; 8
    13ac:	b8 e3       	ldi	r27, 0x38	; 56
    13ae:	e0 e3       	ldi	r30, 0x30	; 48
    13b0:	f8 e3       	ldi	r31, 0x38	; 56
	
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 20; j++)
		{
			lcd_screen_update[i][j] = ' ';
    13b2:	80 e2       	ldi	r24, 0x20	; 32
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	8d 93       	st	X+, r24
    13b8:	9d 93       	st	X+, r25
		}
	}
	
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 20; j++)
    13ba:	ae 17       	cp	r26, r30
    13bc:	bf 07       	cpc	r27, r31
    13be:	d9 f7       	brne	.-10     	; 0x13b6 <initialize_Screen+0x12a>
    13c0:	28 e5       	ldi	r18, 0x58	; 88
    13c2:	38 e3       	ldi	r19, 0x38	; 56
		{
			lcd_screen_update[i][j] = ' ';
    13c4:	80 e2       	ldi	r24, 0x20	; 32
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	81 93       	st	Z+, r24
    13ca:	91 93       	st	Z+, r25
		}
	}
	
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 20; j++)
    13cc:	2e 17       	cp	r18, r30
    13ce:	3f 07       	cpc	r19, r31
    13d0:	d9 f7       	brne	.-10     	; 0x13c8 <initialize_Screen+0x13c>
		{
			lcd_screen_update[i][j] = ' ';
		}
	}
	
	lcd_row_counter = 0;
    13d2:	10 92 d7 38 	sts	0x38D7, r1	; 0x8038d7 <lcd_row_counter>
	lcd_col_counter = 0;
    13d6:	10 92 d0 38 	sts	0x38D0, r1	; 0x8038d0 <lcd_col_counter>
	
	if (two_line_mode)
    13da:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <two_line_mode>
    13de:	88 23       	and	r24, r24
    13e0:	49 f0       	breq	.+18     	; 0x13f4 <initialize_Screen+0x168>
	{
		lcd_command(CLEAR_DISPLAY);
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
		lcd_command(FUNCTION_SET | 0b0000111000);
    13ea:	88 e3       	ldi	r24, 0x38	; 56
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
    13f2:	08 c0       	rjmp	.+16     	; 0x1404 <initialize_Screen+0x178>
	}
	else
	{
		lcd_command(CLEAR_DISPLAY);
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
		lcd_command(FUNCTION_SET | 0b0000111100);
    13fc:	8c e3       	ldi	r24, 0x3C	; 60
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
	}
}
    1404:	2a 96       	adiw	r28, 0x0a	; 10
    1406:	cd bf       	out	0x3d, r28	; 61
    1408:	de bf       	out	0x3e, r29	; 62
    140a:	df 91       	pop	r29
    140c:	cf 91       	pop	r28
    140e:	08 95       	ret

00001410 <lcd_write>:
		lcd_command(SET_DDRAM_ADDRESS | (0b0001000000 + x));
	}
}

void lcd_write(char *message)
{
    1410:	cf 92       	push	r12
    1412:	df 92       	push	r13
    1414:	ef 92       	push	r14
    1416:	ff 92       	push	r15
    1418:	0f 93       	push	r16
    141a:	1f 93       	push	r17
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	8c 01       	movw	r16, r24
	while (twiMaster.result != TWIM_RESULT_OK)
	{
		initialize_Screen();
		lcd_write(message);
	}
}
    1426:	ed b6       	in	r14, 0x3d	; 61
    1428:	fe b6       	in	r15, 0x3e	; 62
	}
}

void lcd_write(char *message)
{
	char size = strlen(message);
    142a:	fc 01       	movw	r30, r24
    142c:	01 90       	ld	r0, Z+
    142e:	00 20       	and	r0, r0
    1430:	e9 f7       	brne	.-6      	; 0x142c <lcd_write+0x1c>
    1432:	31 97       	sbiw	r30, 0x01	; 1
    1434:	bf 01       	movw	r22, r30
    1436:	68 1b       	sub	r22, r24
    1438:	79 0b       	sbc	r23, r25
    143a:	36 2f       	mov	r19, r22
	unsigned char complete_message[size + 1];
    143c:	cb 01       	movw	r24, r22
    143e:	99 27       	eor	r25, r25
    1440:	01 96       	adiw	r24, 0x01	; 1
    1442:	4d b7       	in	r20, 0x3d	; 61
    1444:	5e b7       	in	r21, 0x3e	; 62
    1446:	48 1b       	sub	r20, r24
    1448:	59 0b       	sbc	r21, r25
    144a:	4d bf       	out	0x3d, r20	; 61
    144c:	5e bf       	out	0x3e, r21	; 62
    144e:	4f 5f       	subi	r20, 0xFF	; 255
    1450:	5f 4f       	sbci	r21, 0xFF	; 255
	
	complete_message[0] = (0x40);			//Control bit with R/S set high and continuous bytes
    1452:	80 e4       	ldi	r24, 0x40	; 64
    1454:	ed b7       	in	r30, 0x3d	; 61
    1456:	fe b7       	in	r31, 0x3e	; 62
    1458:	81 83       	std	Z+1, r24	; 0x01
	
	for(unsigned char i = 0; i < size; i++)
    145a:	66 23       	and	r22, r22
    145c:	41 f0       	breq	.+16     	; 0x146e <lcd_write+0x5e>
    145e:	d8 01       	movw	r26, r16
    1460:	32 96       	adiw	r30, 0x02	; 2
    1462:	80 e0       	ldi	r24, 0x00	; 0
	{
		complete_message[i + 1] = message[i];
    1464:	9d 91       	ld	r25, X+
    1466:	91 93       	st	Z+, r25
	char size = strlen(message);
	unsigned char complete_message[size + 1];
	
	complete_message[0] = (0x40);			//Control bit with R/S set high and continuous bytes
	
	for(unsigned char i = 0; i < size; i++)
    1468:	8f 5f       	subi	r24, 0xFF	; 255
    146a:	38 13       	cpse	r19, r24
    146c:	fb cf       	rjmp	.-10     	; 0x1464 <lcd_write+0x54>
	{
		complete_message[i + 1] = message[i];
	}

	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, size + 1);
    146e:	21 e0       	ldi	r18, 0x01	; 1
    1470:	26 0f       	add	r18, r22
    1472:	6c e3       	ldi	r22, 0x3C	; 60
    1474:	82 eb       	ldi	r24, 0xB2	; 178
    1476:	98 e3       	ldi	r25, 0x38	; 56
    1478:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <TWI_MasterWrite>
	while(twiMaster.status == 1);
    147c:	e2 eb       	ldi	r30, 0xB2	; 178
    147e:	f8 e3       	ldi	r31, 0x38	; 56
    1480:	87 89       	ldd	r24, Z+23	; 0x17
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	e9 f3       	breq	.-6      	; 0x1480 <lcd_write+0x70>
    1486:	87 e8       	ldi	r24, 0x87	; 135
    1488:	93 e1       	ldi	r25, 0x13	; 19
    148a:	01 97       	sbiw	r24, 0x01	; 1
    148c:	f1 f7       	brne	.-4      	; 0x148a <lcd_write+0x7a>
    148e:	00 c0       	rjmp	.+0      	; 0x1490 <lcd_write+0x80>
    1490:	00 00       	nop
	_delay_ms(10);
	
	while (twiMaster.result != TWIM_RESULT_OK)
    1492:	80 91 ca 38 	lds	r24, 0x38CA	; 0x8038ca <twiMaster+0x18>
    1496:	81 30       	cpi	r24, 0x01	; 1
    1498:	79 f0       	breq	.+30     	; 0x14b8 <lcd_write+0xa8>
    149a:	0f 2e       	mov	r0, r31
    149c:	f2 eb       	ldi	r31, 0xB2	; 178
    149e:	cf 2e       	mov	r12, r31
    14a0:	f8 e3       	ldi	r31, 0x38	; 56
    14a2:	df 2e       	mov	r13, r31
    14a4:	f0 2d       	mov	r31, r0
	{
		initialize_Screen();
    14a6:	0e 94 46 09 	call	0x128c	; 0x128c <initialize_Screen>
		lcd_write(message);
    14aa:	c8 01       	movw	r24, r16
    14ac:	0e 94 08 0a 	call	0x1410	; 0x1410 <lcd_write>

	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, size + 1);
	while(twiMaster.status == 1);
	_delay_ms(10);
	
	while (twiMaster.result != TWIM_RESULT_OK)
    14b0:	f6 01       	movw	r30, r12
    14b2:	80 8d       	ldd	r24, Z+24	; 0x18
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	b9 f7       	brne	.-18     	; 0x14a6 <lcd_write+0x96>
	{
		initialize_Screen();
		lcd_write(message);
	}
}
    14b8:	ed be       	out	0x3d, r14	; 61
    14ba:	fe be       	out	0x3e, r15	; 62
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	1f 91       	pop	r17
    14c2:	0f 91       	pop	r16
    14c4:	ff 90       	pop	r15
    14c6:	ef 90       	pop	r14
    14c8:	df 90       	pop	r13
    14ca:	cf 90       	pop	r12
    14cc:	08 95       	ret

000014ce <display_character>:


void display_character(uint8_t car_num)
{
    14ce:	0f 93       	push	r16
    14d0:	1f 93       	push	r17
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <display_character+0xa>
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
	unsigned char complete_message[2];
	complete_message[0] = (0x40);			//Control bit with R/S set high and continuous bytes
    14dc:	90 e4       	ldi	r25, 0x40	; 64
    14de:	99 83       	std	Y+1, r25	; 0x01
	complete_message[1] = (car_num);
    14e0:	8a 83       	std	Y+2, r24	; 0x02
	
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
    14e2:	22 e0       	ldi	r18, 0x02	; 2
    14e4:	ae 01       	movw	r20, r28
    14e6:	4f 5f       	subi	r20, 0xFF	; 255
    14e8:	5f 4f       	sbci	r21, 0xFF	; 255
    14ea:	6c e3       	ldi	r22, 0x3C	; 60
    14ec:	82 eb       	ldi	r24, 0xB2	; 178
    14ee:	98 e3       	ldi	r25, 0x38	; 56
    14f0:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <TWI_MasterWrite>
	while(twiMaster.status == 1);
    14f4:	e2 eb       	ldi	r30, 0xB2	; 178
    14f6:	f8 e3       	ldi	r31, 0x38	; 56
    14f8:	87 89       	ldd	r24, Z+23	; 0x17
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	e9 f3       	breq	.-6      	; 0x14f8 <display_character+0x2a>
    14fe:	87 e8       	ldi	r24, 0x87	; 135
    1500:	93 e1       	ldi	r25, 0x13	; 19
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	f1 f7       	brne	.-4      	; 0x1502 <display_character+0x34>
    1506:	00 c0       	rjmp	.+0      	; 0x1508 <display_character+0x3a>
    1508:	00 00       	nop
	_delay_ms(10);
	
	while (twiMaster.result != TWIM_RESULT_OK)
    150a:	80 91 ca 38 	lds	r24, 0x38CA	; 0x8038ca <twiMaster+0x18>
    150e:	81 30       	cpi	r24, 0x01	; 1
    1510:	c9 f0       	breq	.+50     	; 0x1544 <display_character+0x76>
	{
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
    1512:	02 eb       	ldi	r16, 0xB2	; 178
    1514:	18 e3       	ldi	r17, 0x38	; 56
	while(twiMaster.status == 1);
	_delay_ms(10);
	
	while (twiMaster.result != TWIM_RESULT_OK)
	{
		initialize_Screen();
    1516:	0e 94 46 09 	call	0x128c	; 0x128c <initialize_Screen>
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
    151a:	22 e0       	ldi	r18, 0x02	; 2
    151c:	ae 01       	movw	r20, r28
    151e:	4f 5f       	subi	r20, 0xFF	; 255
    1520:	5f 4f       	sbci	r21, 0xFF	; 255
    1522:	6c e3       	ldi	r22, 0x3C	; 60
    1524:	c8 01       	movw	r24, r16
    1526:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <TWI_MasterWrite>
		while(twiMaster.status == 1);
    152a:	f8 01       	movw	r30, r16
    152c:	87 89       	ldd	r24, Z+23	; 0x17
    152e:	81 30       	cpi	r24, 0x01	; 1
    1530:	e1 f3       	breq	.-8      	; 0x152a <display_character+0x5c>
    1532:	87 e8       	ldi	r24, 0x87	; 135
    1534:	93 e1       	ldi	r25, 0x13	; 19
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	f1 f7       	brne	.-4      	; 0x1536 <display_character+0x68>
    153a:	00 c0       	rjmp	.+0      	; 0x153c <display_character+0x6e>
    153c:	00 00       	nop
	
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
	while(twiMaster.status == 1);
	_delay_ms(10);
	
	while (twiMaster.result != TWIM_RESULT_OK)
    153e:	80 8d       	ldd	r24, Z+24	; 0x18
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	49 f7       	brne	.-46     	; 0x1516 <display_character+0x48>
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
		while(twiMaster.status == 1);
		_delay_ms(10);
	}
}
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	1f 91       	pop	r17
    154e:	0f 91       	pop	r16
    1550:	08 95       	ret

00001552 <lcd_command>:

received
commands. Only the addressed slave makes the acknowledgement after each byte.
*/
void lcd_command(uint16_t command)
{
    1552:	ef 92       	push	r14
    1554:	ff 92       	push	r15
    1556:	0f 93       	push	r16
    1558:	1f 93       	push	r17
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	00 d0       	rcall	.+0      	; 0x1560 <lcd_command+0xe>
    1560:	1f 92       	push	r1
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	7c 01       	movw	r14, r24
	unsigned char complete_message[2];
	uint8_t volatile comm;
	comm = (uint8_t)(command >> 2);
    1568:	96 95       	lsr	r25
    156a:	87 95       	ror	r24
    156c:	96 95       	lsr	r25
    156e:	87 95       	ror	r24
    1570:	8b 83       	std	Y+3, r24	; 0x03
	complete_message[0] = comm & 0b11000000;                      // Control byte
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	80 7c       	andi	r24, 0xC0	; 192
    1576:	89 83       	std	Y+1, r24	; 0x01
	complete_message[1] = (uint8_t)(command);                     // Data byte
    1578:	ea 82       	std	Y+2, r14	; 0x02
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
    157a:	22 e0       	ldi	r18, 0x02	; 2
    157c:	ae 01       	movw	r20, r28
    157e:	4f 5f       	subi	r20, 0xFF	; 255
    1580:	5f 4f       	sbci	r21, 0xFF	; 255
    1582:	6c e3       	ldi	r22, 0x3C	; 60
    1584:	82 eb       	ldi	r24, 0xB2	; 178
    1586:	98 e3       	ldi	r25, 0x38	; 56
    1588:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <TWI_MasterWrite>
	while(twiMaster.status == 1);
    158c:	e2 eb       	ldi	r30, 0xB2	; 178
    158e:	f8 e3       	ldi	r31, 0x38	; 56
    1590:	87 89       	ldd	r24, Z+23	; 0x17
    1592:	81 30       	cpi	r24, 0x01	; 1
    1594:	e9 f3       	breq	.-6      	; 0x1590 <lcd_command+0x3e>
    1596:	87 e8       	ldi	r24, 0x87	; 135
    1598:	93 e1       	ldi	r25, 0x13	; 19
    159a:	01 97       	sbiw	r24, 0x01	; 1
    159c:	f1 f7       	brne	.-4      	; 0x159a <lcd_command+0x48>
    159e:	00 c0       	rjmp	.+0      	; 0x15a0 <lcd_command+0x4e>
    15a0:	00 00       	nop
	_delay_ms(10);
	
	while (twiMaster.result != TWIM_RESULT_OK)
    15a2:	80 91 ca 38 	lds	r24, 0x38CA	; 0x8038ca <twiMaster+0x18>
    15a6:	81 30       	cpi	r24, 0x01	; 1
    15a8:	c9 f0       	breq	.+50     	; 0x15dc <lcd_command+0x8a>
	{
		initialize_Screen();
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
    15aa:	02 eb       	ldi	r16, 0xB2	; 178
    15ac:	18 e3       	ldi	r17, 0x38	; 56
	while(twiMaster.status == 1);
	_delay_ms(10);
	
	while (twiMaster.result != TWIM_RESULT_OK)
	{
		initialize_Screen();
    15ae:	0e 94 46 09 	call	0x128c	; 0x128c <initialize_Screen>
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
    15b2:	22 e0       	ldi	r18, 0x02	; 2
    15b4:	ae 01       	movw	r20, r28
    15b6:	4f 5f       	subi	r20, 0xFF	; 255
    15b8:	5f 4f       	sbci	r21, 0xFF	; 255
    15ba:	6c e3       	ldi	r22, 0x3C	; 60
    15bc:	c8 01       	movw	r24, r16
    15be:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <TWI_MasterWrite>
		while(twiMaster.status == 1);
    15c2:	f8 01       	movw	r30, r16
    15c4:	87 89       	ldd	r24, Z+23	; 0x17
    15c6:	81 30       	cpi	r24, 0x01	; 1
    15c8:	e1 f3       	breq	.-8      	; 0x15c2 <lcd_command+0x70>
    15ca:	87 e8       	ldi	r24, 0x87	; 135
    15cc:	93 e1       	ldi	r25, 0x13	; 19
    15ce:	01 97       	sbiw	r24, 0x01	; 1
    15d0:	f1 f7       	brne	.-4      	; 0x15ce <lcd_command+0x7c>
    15d2:	00 c0       	rjmp	.+0      	; 0x15d4 <lcd_command+0x82>
    15d4:	00 00       	nop
	complete_message[1] = (uint8_t)(command);                     // Data byte
	TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
	while(twiMaster.status == 1);
	_delay_ms(10);
	
	while (twiMaster.result != TWIM_RESULT_OK)
    15d6:	80 8d       	ldd	r24, Z+24	; 0x18
    15d8:	81 30       	cpi	r24, 0x01	; 1
    15da:	49 f7       	brne	.-46     	; 0x15ae <lcd_command+0x5c>
		TWI_MasterWrite(&twiMaster, LCD_SLAVE_ADDRESS, complete_message, 2);
		while(twiMaster.status == 1);
		_delay_ms(10);
	}
	
	if (command == (FUNCTION_SET | 0b0000111100))
    15dc:	fc e3       	ldi	r31, 0x3C	; 60
    15de:	ef 16       	cp	r14, r31
    15e0:	f1 04       	cpc	r15, r1
    15e2:	19 f4       	brne	.+6      	; 0x15ea <lcd_command+0x98>
	{
		two_line_mode = false;
    15e4:	10 92 06 38 	sts	0x3806, r1	; 0x803806 <two_line_mode>
    15e8:	07 c0       	rjmp	.+14     	; 0x15f8 <lcd_command+0xa6>
	}
	else if (command == (FUNCTION_SET | 0b0000111000))
    15ea:	88 e3       	ldi	r24, 0x38	; 56
    15ec:	e8 16       	cp	r14, r24
    15ee:	f1 04       	cpc	r15, r1
    15f0:	19 f4       	brne	.+6      	; 0x15f8 <lcd_command+0xa6>
	{
		two_line_mode = true;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <two_line_mode>
	}
}
    15f8:	23 96       	adiw	r28, 0x03	; 3
    15fa:	cd bf       	out	0x3d, r28	; 61
    15fc:	de bf       	out	0x3e, r29	; 62
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	1f 91       	pop	r17
    1604:	0f 91       	pop	r16
    1606:	ff 90       	pop	r15
    1608:	ef 90       	pop	r14
    160a:	08 95       	ret

0000160c <setCursor>:
	lcd_col_counter = 0;
}

void setCursor(uint8_t line_num, uint8_t x)
{
	if (line_num == 0)
    160c:	81 11       	cpse	r24, r1
    160e:	06 c0       	rjmp	.+12     	; 0x161c <setCursor+0x10>
	{
		lcd_command(SET_DDRAM_ADDRESS | (0b0000000000 + x));
    1610:	86 2f       	mov	r24, r22
    1612:	80 68       	ori	r24, 0x80	; 128
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
    161a:	08 95       	ret
	}
	else if (line_num == 1)
    161c:	81 30       	cpi	r24, 0x01	; 1
    161e:	39 f4       	brne	.+14     	; 0x162e <setCursor+0x22>
	{
		lcd_command(SET_DDRAM_ADDRESS | (0b0001000000 + x));
    1620:	86 2f       	mov	r24, r22
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	80 5c       	subi	r24, 0xC0	; 192
    1626:	9f 4f       	sbci	r25, 0xFF	; 255
    1628:	80 68       	ori	r24, 0x80	; 128
    162a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
    162e:	08 95       	ret

00001630 <main>:
#include "board.h"

int main()
{
    1630:	cf 93       	push	r28
    1632:	df 93       	push	r29
    1634:	1f 92       	push	r1
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
	//Pin/Settings initialization
    initialize();
    163a:	0e 94 80 05 	call	0xb00	; 0xb00 <initialize>
    sei();
    163e:	78 94       	sei
	
	//I2C Setup
	TWI_MasterInit(&twiMaster, &TWI0, TWI_BAUDSETTING);
    1640:	4e e5       	ldi	r20, 0x5E	; 94
    1642:	60 e1       	ldi	r22, 0x10	; 16
    1644:	78 e0       	ldi	r23, 0x08	; 8
    1646:	82 eb       	ldi	r24, 0xB2	; 178
    1648:	98 e3       	ldi	r25, 0x38	; 56
    164a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <TWI_MasterInit>
    164e:	2f e7       	ldi	r18, 0x7F	; 127
    1650:	84 e8       	ldi	r24, 0x84	; 132
    1652:	9e e1       	ldi	r25, 0x1E	; 30
    1654:	21 50       	subi	r18, 0x01	; 1
    1656:	80 40       	sbci	r24, 0x00	; 0
    1658:	90 40       	sbci	r25, 0x00	; 0
    165a:	e1 f7       	brne	.-8      	; 0x1654 <main+0x24>
    165c:	00 c0       	rjmp	.+0      	; 0x165e <main+0x2e>
    165e:	00 00       	nop
	//LCD screen initialization
	_delay_ms(500);
	initialize_Screen();
    1660:	0e 94 46 09 	call	0x128c	; 0x128c <initialize_Screen>
    1664:	2f e7       	ldi	r18, 0x7F	; 127
    1666:	84 e8       	ldi	r24, 0x84	; 132
    1668:	9e e1       	ldi	r25, 0x1E	; 30
    166a:	21 50       	subi	r18, 0x01	; 1
    166c:	80 40       	sbci	r24, 0x00	; 0
    166e:	90 40       	sbci	r25, 0x00	; 0
    1670:	e1 f7       	brne	.-8      	; 0x166a <main+0x3a>
    1672:	00 c0       	rjmp	.+0      	; 0x1674 <main+0x44>
    1674:	00 00       	nop
	_delay_ms(500);	
	
	volatile bool set_current_blink_temp = TRUE;
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	89 83       	std	Y+1, r24	; 0x01
					
						temp_current = get_current(&twiMaster, FALSE, INA_ADDRESS);
						if (abs(temp_current - current) > 5)
						{
							current = temp_current;
							update = TRUE;
    167a:	11 e0       	ldi	r17, 0x01	; 1
	_delay_ms(500);	
	
	volatile bool set_current_blink_temp = TRUE;
    while (1)
    {
		if (voltage > 200 && rtc_counter_1_2)
    167c:	80 91 ac 38 	lds	r24, 0x38AC	; 0x8038ac <voltage>
    1680:	90 91 ad 38 	lds	r25, 0x38AD	; 0x8038ad <voltage+0x1>
    1684:	89 3c       	cpi	r24, 0xC9	; 201
    1686:	91 05       	cpc	r25, r1
    1688:	d8 f0       	brcs	.+54     	; 0x16c0 <main+0x90>
    168a:	80 91 db 38 	lds	r24, 0x38DB	; 0x8038db <rtc_counter_1_2>
    168e:	88 23       	and	r24, r24
    1690:	b9 f0       	breq	.+46     	; 0x16c0 <main+0x90>
	    {
		    set_current_mode_on = set_current_mode ? 1 : 2;
    1692:	80 91 dc 38 	lds	r24, 0x38DC	; 0x8038dc <set_current_mode>
    1696:	81 11       	cpse	r24, r1
    1698:	02 c0       	rjmp	.+4      	; 0x169e <main+0x6e>
    169a:	82 e0       	ldi	r24, 0x02	; 2
    169c:	01 c0       	rjmp	.+2      	; 0x16a0 <main+0x70>
    169e:	81 2f       	mov	r24, r17
    16a0:	80 93 d2 38 	sts	0x38D2, r24	; 0x8038d2 <set_current_mode_on>
		    display_danger();
    16a4:	0e 94 fe 04 	call	0x9fc	; 0x9fc <display_danger>
    16a8:	2f e7       	ldi	r18, 0x7F	; 127
    16aa:	84 e8       	ldi	r24, 0x84	; 132
    16ac:	9e e1       	ldi	r25, 0x1E	; 30
    16ae:	21 50       	subi	r18, 0x01	; 1
    16b0:	80 40       	sbci	r24, 0x00	; 0
    16b2:	90 40       	sbci	r25, 0x00	; 0
    16b4:	e1 f7       	brne	.-8      	; 0x16ae <main+0x7e>
    16b6:	00 c0       	rjmp	.+0      	; 0x16b8 <main+0x88>
    16b8:	00 00       	nop
		    _delay_ms(500);
			rtc_counter_1_2 = FALSE;
    16ba:	10 92 db 38 	sts	0x38DB, r1	; 0x8038db <rtc_counter_1_2>
    16be:	de cf       	rjmp	.-68     	; 0x167c <main+0x4c>
	    }
		else
		{
			if (set_current_mode_on == 1)
    16c0:	80 91 d2 38 	lds	r24, 0x38D2	; 0x8038d2 <set_current_mode_on>
    16c4:	81 30       	cpi	r24, 0x01	; 1
    16c6:	79 f4       	brne	.+30     	; 0x16e6 <main+0xb6>
			{
				lcd_command(CLEAR_DISPLAY);
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
				lcd_command(FUNCTION_SET | 0b0000111100);
    16d0:	8c e3       	ldi	r24, 0x3C	; 60
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
				clear_lcd_update();
    16d8:	0e 94 ef 07 	call	0xfde	; 0xfde <clear_lcd_update>
				display_set_current();
    16dc:	0e 94 9a 03 	call	0x734	; 0x734 <display_set_current>
				set_current_mode_on = 0;
    16e0:	10 92 d2 38 	sts	0x38D2, r1	; 0x8038d2 <set_current_mode_on>
    16e4:	cb cf       	rjmp	.-106    	; 0x167c <main+0x4c>
			}
			else if (set_current_mode_on == 2)
    16e6:	80 91 d2 38 	lds	r24, 0x38D2	; 0x8038d2 <set_current_mode_on>
    16ea:	82 30       	cpi	r24, 0x02	; 2
    16ec:	39 f5       	brne	.+78     	; 0x173c <main+0x10c>
			{
				lcd_command(CLEAR_DISPLAY);
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
				lcd_command(FUNCTION_SET | 0b0000111000);
    16f6:	88 e3       	ldi	r24, 0x38	; 56
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	0e 94 a9 0a 	call	0x1552	; 0x1552 <lcd_command>
				clear_lcd_update();
    16fe:	0e 94 ef 07 	call	0xfde	; 0xfde <clear_lcd_update>
				display_current_voltage(current, voltage);
    1702:	60 91 ac 38 	lds	r22, 0x38AC	; 0x8038ac <voltage>
    1706:	70 91 ad 38 	lds	r23, 0x38AD	; 0x8038ad <voltage+0x1>
    170a:	80 91 ce 38 	lds	r24, 0x38CE	; 0x8038ce <current>
    170e:	90 91 cf 38 	lds	r25, 0x38CF	; 0x8038cf <current+0x1>
    1712:	0e 94 b2 00 	call	0x164	; 0x164 <display_current_voltage>
				// TODO - set DAC to the desired current
				eeprom_update_word((uint16_t*) 0x00, desired_current);
    1716:	60 91 5a 38 	lds	r22, 0x385A	; 0x80385a <desired_current>
    171a:	70 91 5b 38 	lds	r23, 0x385B	; 0x80385b <desired_current+0x1>
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	0e 94 49 14 	call	0x2892	; 0x2892 <eeprom_update_word>
				desired_current_temp = desired_current;
    1726:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
    172a:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
    172e:	80 93 58 38 	sts	0x3858, r24	; 0x803858 <desired_current_temp>
    1732:	90 93 59 38 	sts	0x3859, r25	; 0x803859 <desired_current_temp+0x1>
				
				set_current_mode_on = 0;
    1736:	10 92 d2 38 	sts	0x38D2, r1	; 0x8038d2 <set_current_mode_on>
    173a:	a0 cf       	rjmp	.-192    	; 0x167c <main+0x4c>
			}
			else
			{
				if (set_current_mode)
    173c:	80 91 dc 38 	lds	r24, 0x38DC	; 0x8038dc <set_current_mode>
    1740:	88 23       	and	r24, r24
    1742:	09 f4       	brne	.+2      	; 0x1746 <main+0x116>
    1744:	6c c0       	rjmp	.+216    	; 0x181e <main+0x1ee>
				{
					if (rtc_counter_1_4)
    1746:	80 91 d1 38 	lds	r24, 0x38D1	; 0x8038d1 <rtc_counter_1_4>
    174a:	88 23       	and	r24, r24
    174c:	09 f4       	brne	.+2      	; 0x1750 <main+0x120>
    174e:	50 c0       	rjmp	.+160    	; 0x17f0 <main+0x1c0>
					{
						temp_voltage = get_voltage(&twiMaster, FALSE, INA_ADDRESS);
    1750:	41 e4       	ldi	r20, 0x41	; 65
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	82 eb       	ldi	r24, 0xB2	; 178
    1756:	98 e3       	ldi	r25, 0x38	; 56
    1758:	0e 94 59 07 	call	0xeb2	; 0xeb2 <get_voltage>
    175c:	80 93 d8 38 	sts	0x38D8, r24	; 0x8038d8 <temp_voltage>
    1760:	90 93 d9 38 	sts	0x38D9, r25	; 0x8038d9 <temp_voltage+0x1>
						if (abs(temp_voltage - voltage) > 5)
    1764:	80 91 d8 38 	lds	r24, 0x38D8	; 0x8038d8 <temp_voltage>
    1768:	90 91 d9 38 	lds	r25, 0x38D9	; 0x8038d9 <temp_voltage+0x1>
    176c:	20 91 ac 38 	lds	r18, 0x38AC	; 0x8038ac <voltage>
    1770:	30 91 ad 38 	lds	r19, 0x38AD	; 0x8038ad <voltage+0x1>
    1774:	82 1b       	sub	r24, r18
    1776:	93 0b       	sbc	r25, r19
    1778:	9c 01       	movw	r18, r24
    177a:	22 f4       	brpl	.+8      	; 0x1784 <main+0x154>
    177c:	22 27       	eor	r18, r18
    177e:	33 27       	eor	r19, r19
    1780:	28 1b       	sub	r18, r24
    1782:	39 0b       	sbc	r19, r25
    1784:	26 30       	cpi	r18, 0x06	; 6
    1786:	31 05       	cpc	r19, r1
    1788:	54 f0       	brlt	.+20     	; 0x179e <main+0x16e>
						{
							voltage = temp_voltage;
    178a:	80 91 d8 38 	lds	r24, 0x38D8	; 0x8038d8 <temp_voltage>
    178e:	90 91 d9 38 	lds	r25, 0x38D9	; 0x8038d9 <temp_voltage+0x1>
    1792:	80 93 ac 38 	sts	0x38AC, r24	; 0x8038ac <voltage>
    1796:	90 93 ad 38 	sts	0x38AD, r25	; 0x8038ad <voltage+0x1>
							update = TRUE;
    179a:	10 93 e1 38 	sts	0x38E1, r17	; 0x8038e1 <update>
						}
						
						temp_current = get_current(&twiMaster, FALSE, INA_ADDRESS);
    179e:	41 e4       	ldi	r20, 0x41	; 65
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	82 eb       	ldi	r24, 0xB2	; 178
    17a4:	98 e3       	ldi	r25, 0x38	; 56
    17a6:	0e 94 98 07 	call	0xf30	; 0xf30 <get_current>
    17aa:	80 93 cb 38 	sts	0x38CB, r24	; 0x8038cb <temp_current>
    17ae:	90 93 cc 38 	sts	0x38CC, r25	; 0x8038cc <temp_current+0x1>
						if (abs(temp_current - current) > 5)
    17b2:	80 91 cb 38 	lds	r24, 0x38CB	; 0x8038cb <temp_current>
    17b6:	90 91 cc 38 	lds	r25, 0x38CC	; 0x8038cc <temp_current+0x1>
    17ba:	20 91 ce 38 	lds	r18, 0x38CE	; 0x8038ce <current>
    17be:	30 91 cf 38 	lds	r19, 0x38CF	; 0x8038cf <current+0x1>
    17c2:	82 1b       	sub	r24, r18
    17c4:	93 0b       	sbc	r25, r19
    17c6:	9c 01       	movw	r18, r24
    17c8:	22 f4       	brpl	.+8      	; 0x17d2 <main+0x1a2>
    17ca:	22 27       	eor	r18, r18
    17cc:	33 27       	eor	r19, r19
    17ce:	28 1b       	sub	r18, r24
    17d0:	39 0b       	sbc	r19, r25
    17d2:	26 30       	cpi	r18, 0x06	; 6
    17d4:	31 05       	cpc	r19, r1
    17d6:	54 f0       	brlt	.+20     	; 0x17ec <main+0x1bc>
						{
							current = temp_current;
    17d8:	80 91 cb 38 	lds	r24, 0x38CB	; 0x8038cb <temp_current>
    17dc:	90 91 cc 38 	lds	r25, 0x38CC	; 0x8038cc <temp_current+0x1>
    17e0:	80 93 ce 38 	sts	0x38CE, r24	; 0x8038ce <current>
    17e4:	90 93 cf 38 	sts	0x38CF, r25	; 0x8038cf <current+0x1>
							update = TRUE;
    17e8:	10 93 e1 38 	sts	0x38E1, r17	; 0x8038e1 <update>
						}
						
						rtc_counter_1_4 = FALSE;
    17ec:	10 92 d1 38 	sts	0x38D1, r1	; 0x8038d1 <rtc_counter_1_4>
					}
					
					if (desired_current_temp != desired_current)
    17f0:	20 91 58 38 	lds	r18, 0x3858	; 0x803858 <desired_current_temp>
    17f4:	30 91 59 38 	lds	r19, 0x3859	; 0x803859 <desired_current_temp+0x1>
    17f8:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
    17fc:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
    1800:	28 17       	cp	r18, r24
    1802:	39 07       	cpc	r19, r25
    1804:	09 f4       	brne	.+2      	; 0x1808 <main+0x1d8>
    1806:	3a cf       	rjmp	.-396    	; 0x167c <main+0x4c>
					{
						desired_current_temp = desired_current;
    1808:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <desired_current>
    180c:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <desired_current+0x1>
    1810:	80 93 58 38 	sts	0x3858, r24	; 0x803858 <desired_current_temp>
    1814:	90 93 59 38 	sts	0x3859, r25	; 0x803859 <desired_current_temp+0x1>
						display_set_current();
    1818:	0e 94 9a 03 	call	0x734	; 0x734 <display_set_current>
    181c:	2f cf       	rjmp	.-418    	; 0x167c <main+0x4c>
					}
				}
				else
				{
					if (rtc_counter_1_4)
    181e:	80 91 d1 38 	lds	r24, 0x38D1	; 0x8038d1 <rtc_counter_1_4>
    1822:	88 23       	and	r24, r24
    1824:	09 f4       	brne	.+2      	; 0x1828 <main+0x1f8>
    1826:	50 c0       	rjmp	.+160    	; 0x18c8 <main+0x298>
					{
						temp_voltage = get_voltage(&twiMaster, FALSE, INA_ADDRESS);
    1828:	41 e4       	ldi	r20, 0x41	; 65
    182a:	60 e0       	ldi	r22, 0x00	; 0
    182c:	82 eb       	ldi	r24, 0xB2	; 178
    182e:	98 e3       	ldi	r25, 0x38	; 56
    1830:	0e 94 59 07 	call	0xeb2	; 0xeb2 <get_voltage>
    1834:	80 93 d8 38 	sts	0x38D8, r24	; 0x8038d8 <temp_voltage>
    1838:	90 93 d9 38 	sts	0x38D9, r25	; 0x8038d9 <temp_voltage+0x1>
						if (abs(temp_voltage - voltage) > 5)
    183c:	80 91 d8 38 	lds	r24, 0x38D8	; 0x8038d8 <temp_voltage>
    1840:	90 91 d9 38 	lds	r25, 0x38D9	; 0x8038d9 <temp_voltage+0x1>
    1844:	20 91 ac 38 	lds	r18, 0x38AC	; 0x8038ac <voltage>
    1848:	30 91 ad 38 	lds	r19, 0x38AD	; 0x8038ad <voltage+0x1>
    184c:	82 1b       	sub	r24, r18
    184e:	93 0b       	sbc	r25, r19
    1850:	9c 01       	movw	r18, r24
    1852:	22 f4       	brpl	.+8      	; 0x185c <main+0x22c>
    1854:	22 27       	eor	r18, r18
    1856:	33 27       	eor	r19, r19
    1858:	28 1b       	sub	r18, r24
    185a:	39 0b       	sbc	r19, r25
    185c:	26 30       	cpi	r18, 0x06	; 6
    185e:	31 05       	cpc	r19, r1
    1860:	54 f0       	brlt	.+20     	; 0x1876 <main+0x246>
						{
							voltage = temp_voltage;
    1862:	80 91 d8 38 	lds	r24, 0x38D8	; 0x8038d8 <temp_voltage>
    1866:	90 91 d9 38 	lds	r25, 0x38D9	; 0x8038d9 <temp_voltage+0x1>
    186a:	80 93 ac 38 	sts	0x38AC, r24	; 0x8038ac <voltage>
    186e:	90 93 ad 38 	sts	0x38AD, r25	; 0x8038ad <voltage+0x1>
							update = TRUE;
    1872:	10 93 e1 38 	sts	0x38E1, r17	; 0x8038e1 <update>
						}
					
						temp_current = get_current(&twiMaster, FALSE, INA_ADDRESS);
    1876:	41 e4       	ldi	r20, 0x41	; 65
    1878:	60 e0       	ldi	r22, 0x00	; 0
    187a:	82 eb       	ldi	r24, 0xB2	; 178
    187c:	98 e3       	ldi	r25, 0x38	; 56
    187e:	0e 94 98 07 	call	0xf30	; 0xf30 <get_current>
    1882:	80 93 cb 38 	sts	0x38CB, r24	; 0x8038cb <temp_current>
    1886:	90 93 cc 38 	sts	0x38CC, r25	; 0x8038cc <temp_current+0x1>
						if (abs(temp_current - current) > 5)
    188a:	80 91 cb 38 	lds	r24, 0x38CB	; 0x8038cb <temp_current>
    188e:	90 91 cc 38 	lds	r25, 0x38CC	; 0x8038cc <temp_current+0x1>
    1892:	20 91 ce 38 	lds	r18, 0x38CE	; 0x8038ce <current>
    1896:	30 91 cf 38 	lds	r19, 0x38CF	; 0x8038cf <current+0x1>
    189a:	82 1b       	sub	r24, r18
    189c:	93 0b       	sbc	r25, r19
    189e:	9c 01       	movw	r18, r24
    18a0:	22 f4       	brpl	.+8      	; 0x18aa <main+0x27a>
    18a2:	22 27       	eor	r18, r18
    18a4:	33 27       	eor	r19, r19
    18a6:	28 1b       	sub	r18, r24
    18a8:	39 0b       	sbc	r19, r25
    18aa:	26 30       	cpi	r18, 0x06	; 6
    18ac:	31 05       	cpc	r19, r1
    18ae:	54 f0       	brlt	.+20     	; 0x18c4 <main+0x294>
						{
							current = temp_current;
    18b0:	80 91 cb 38 	lds	r24, 0x38CB	; 0x8038cb <temp_current>
    18b4:	90 91 cc 38 	lds	r25, 0x38CC	; 0x8038cc <temp_current+0x1>
    18b8:	80 93 ce 38 	sts	0x38CE, r24	; 0x8038ce <current>
    18bc:	90 93 cf 38 	sts	0x38CF, r25	; 0x8038cf <current+0x1>
							update = TRUE;
    18c0:	10 93 e1 38 	sts	0x38E1, r17	; 0x8038e1 <update>
						}
					
						rtc_counter_1_4 = FALSE;
    18c4:	10 92 d1 38 	sts	0x38D1, r1	; 0x8038d1 <rtc_counter_1_4>
					}
				
					if (update)
    18c8:	80 91 e1 38 	lds	r24, 0x38E1	; 0x8038e1 <update>
    18cc:	88 23       	and	r24, r24
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <main+0x2a2>
    18d0:	d5 ce       	rjmp	.-598    	; 0x167c <main+0x4c>
					{
						display_current_voltage(current, voltage);
    18d2:	60 91 ac 38 	lds	r22, 0x38AC	; 0x8038ac <voltage>
    18d6:	70 91 ad 38 	lds	r23, 0x38AD	; 0x8038ad <voltage+0x1>
    18da:	80 91 ce 38 	lds	r24, 0x38CE	; 0x8038ce <current>
    18de:	90 91 cf 38 	lds	r25, 0x38CF	; 0x8038cf <current+0x1>
    18e2:	0e 94 b2 00 	call	0x164	; 0x164 <display_current_voltage>
						update = FALSE;
    18e6:	10 92 e1 38 	sts	0x38E1, r1	; 0x8038e1 <update>
    18ea:	c8 ce       	rjmp	.-624    	; 0x167c <main+0x4c>

000018ec <__vector_25>:
		}
    }
}

ISR(TWI0_TWIM_vect)
{
    18ec:	1f 92       	push	r1
    18ee:	0f 92       	push	r0
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	0f 92       	push	r0
    18f4:	11 24       	eor	r1, r1
    18f6:	2f 93       	push	r18
    18f8:	3f 93       	push	r19
    18fa:	4f 93       	push	r20
    18fc:	5f 93       	push	r21
    18fe:	6f 93       	push	r22
    1900:	7f 93       	push	r23
    1902:	8f 93       	push	r24
    1904:	9f 93       	push	r25
    1906:	af 93       	push	r26
    1908:	bf 93       	push	r27
    190a:	ef 93       	push	r30
    190c:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twiMaster);
    190e:	82 eb       	ldi	r24, 0xB2	; 178
    1910:	98 e3       	ldi	r25, 0x38	; 56
    1912:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <TWI_MasterInterruptHandler>
}
    1916:	ff 91       	pop	r31
    1918:	ef 91       	pop	r30
    191a:	bf 91       	pop	r27
    191c:	af 91       	pop	r26
    191e:	9f 91       	pop	r25
    1920:	8f 91       	pop	r24
    1922:	7f 91       	pop	r23
    1924:	6f 91       	pop	r22
    1926:	5f 91       	pop	r21
    1928:	4f 91       	pop	r20
    192a:	3f 91       	pop	r19
    192c:	2f 91       	pop	r18
    192e:	0f 90       	pop	r0
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	0f 90       	pop	r0
    1934:	1f 90       	pop	r1
    1936:	18 95       	reti

00001938 <__vector_6>:

// WARNING - DISPLAY COMMANDS WILL NOT BE EXECUTED IN THIS INTERRUPT 
//(since commands need to use i2c interrupt, which is impossible if 
//the program is in this interrupt)
ISR(RTC_CNT_vect)
{
    1938:	1f 92       	push	r1
    193a:	0f 92       	push	r0
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	0f 92       	push	r0
    1940:	11 24       	eor	r1, r1
    1942:	2f 93       	push	r18
    1944:	3f 93       	push	r19
    1946:	4f 93       	push	r20
    1948:	5f 93       	push	r21
    194a:	6f 93       	push	r22
    194c:	7f 93       	push	r23
    194e:	8f 93       	push	r24
    1950:	9f 93       	push	r25
    1952:	af 93       	push	r26
    1954:	bf 93       	push	r27
    1956:	ef 93       	push	r30
    1958:	ff 93       	push	r31
	bool is_debounce_successful = TRUE;
	is_debounce_successful &= debounce(&PORTA_IN, ENCDR_SW, 10, 60);
    195a:	2c e3       	ldi	r18, 0x3C	; 60
    195c:	4a e0       	ldi	r20, 0x0A	; 10
    195e:	64 e0       	ldi	r22, 0x04	; 4
    1960:	88 e0       	ldi	r24, 0x08	; 8
    1962:	94 e0       	ldi	r25, 0x04	; 4
    1964:	0e 94 13 05 	call	0xa26	; 0xa26 <debounce>
	
	if (is_debounce_successful)
    1968:	80 ff       	sbrs	r24, 0
    196a:	30 c0       	rjmp	.+96     	; 0x19cc <__vector_6+0x94>
	{
		if(!(PORTA_IN & (1 << ENCDR_SW)))//if switch pin is low
    196c:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    1970:	84 fd       	sbrc	r24, 4
    1972:	03 c0       	rjmp	.+6      	; 0x197a <__vector_6+0x42>
		{
			encoder_sw_was_low = TRUE;
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	80 93 da 38 	sts	0x38DA, r24	; 0x8038da <encoder_sw_was_low>
		}
		
		if((PORTA_IN & (1 << ENCDR_SW)) && encoder_sw_was_low)//if switch pin is high and was low
    197a:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
    197e:	84 ff       	sbrs	r24, 4
    1980:	25 c0       	rjmp	.+74     	; 0x19cc <__vector_6+0x94>
    1982:	80 91 da 38 	lds	r24, 0x38DA	; 0x8038da <encoder_sw_was_low>
    1986:	88 23       	and	r24, r24
    1988:	09 f1       	breq	.+66     	; 0x19cc <__vector_6+0x94>
		{
			set_current_mode = !set_current_mode;
    198a:	90 91 dc 38 	lds	r25, 0x38DC	; 0x8038dc <set_current_mode>
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	89 27       	eor	r24, r25
    1992:	80 93 dc 38 	sts	0x38DC, r24	; 0x8038dc <set_current_mode>
			set_current_mode_on = set_current_mode ? 1 : 2;
    1996:	80 91 dc 38 	lds	r24, 0x38DC	; 0x8038dc <set_current_mode>
    199a:	81 11       	cpse	r24, r1
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <__vector_6+0x6a>
    199e:	82 e0       	ldi	r24, 0x02	; 2
    19a0:	01 c0       	rjmp	.+2      	; 0x19a4 <__vector_6+0x6c>
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	80 93 d2 38 	sts	0x38D2, r24	; 0x8038d2 <set_current_mode_on>
			rtc_idle_counter = rtc_counter;
    19a8:	80 91 ae 38 	lds	r24, 0x38AE	; 0x8038ae <rtc_counter>
    19ac:	90 91 af 38 	lds	r25, 0x38AF	; 0x8038af <rtc_counter+0x1>
    19b0:	a0 91 b0 38 	lds	r26, 0x38B0	; 0x8038b0 <rtc_counter+0x2>
    19b4:	b0 91 b1 38 	lds	r27, 0x38B1	; 0x8038b1 <rtc_counter+0x3>
    19b8:	80 93 dd 38 	sts	0x38DD, r24	; 0x8038dd <rtc_idle_counter>
    19bc:	90 93 de 38 	sts	0x38DE, r25	; 0x8038de <rtc_idle_counter+0x1>
    19c0:	a0 93 df 38 	sts	0x38DF, r26	; 0x8038df <rtc_idle_counter+0x2>
    19c4:	b0 93 e0 38 	sts	0x38E0, r27	; 0x8038e0 <rtc_idle_counter+0x3>
			
			encoder_sw_was_low = FALSE;
    19c8:	10 92 da 38 	sts	0x38DA, r1	; 0x8038da <encoder_sw_was_low>
		}
	}
	
	if (set_current_mode)
    19cc:	80 91 dc 38 	lds	r24, 0x38DC	; 0x8038dc <set_current_mode>
    19d0:	81 11       	cpse	r24, r1
	{
		handle_encoder();
    19d2:	0e 94 1f 06 	call	0xc3e	; 0xc3e <handle_encoder>
	}
	if (rtc_counter % 250 == 0)
    19d6:	60 91 ae 38 	lds	r22, 0x38AE	; 0x8038ae <rtc_counter>
    19da:	70 91 af 38 	lds	r23, 0x38AF	; 0x8038af <rtc_counter+0x1>
    19de:	80 91 b0 38 	lds	r24, 0x38B0	; 0x8038b0 <rtc_counter+0x2>
    19e2:	90 91 b1 38 	lds	r25, 0x38B1	; 0x8038b1 <rtc_counter+0x3>
    19e6:	2a ef       	ldi	r18, 0xFA	; 250
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	40 e0       	ldi	r20, 0x00	; 0
    19ec:	50 e0       	ldi	r21, 0x00	; 0
    19ee:	0e 94 31 10 	call	0x2062	; 0x2062 <__udivmodsi4>
    19f2:	67 2b       	or	r22, r23
    19f4:	68 2b       	or	r22, r24
    19f6:	69 2b       	or	r22, r25
    19f8:	19 f4       	brne	.+6      	; 0x1a00 <__vector_6+0xc8>
	{
		rtc_counter_1_4 = TRUE;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	80 93 d1 38 	sts	0x38D1, r24	; 0x8038d1 <rtc_counter_1_4>
	}
	if (rtc_counter % 500 == 0)
    1a00:	60 91 ae 38 	lds	r22, 0x38AE	; 0x8038ae <rtc_counter>
    1a04:	70 91 af 38 	lds	r23, 0x38AF	; 0x8038af <rtc_counter+0x1>
    1a08:	80 91 b0 38 	lds	r24, 0x38B0	; 0x8038b0 <rtc_counter+0x2>
    1a0c:	90 91 b1 38 	lds	r25, 0x38B1	; 0x8038b1 <rtc_counter+0x3>
    1a10:	24 ef       	ldi	r18, 0xF4	; 244
    1a12:	31 e0       	ldi	r19, 0x01	; 1
    1a14:	40 e0       	ldi	r20, 0x00	; 0
    1a16:	50 e0       	ldi	r21, 0x00	; 0
    1a18:	0e 94 31 10 	call	0x2062	; 0x2062 <__udivmodsi4>
    1a1c:	67 2b       	or	r22, r23
    1a1e:	68 2b       	or	r22, r24
    1a20:	69 2b       	or	r22, r25
    1a22:	19 f4       	brne	.+6      	; 0x1a2a <__vector_6+0xf2>
	{
		rtc_counter_1_2 = TRUE;
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	80 93 db 38 	sts	0x38DB, r24	; 0x8038db <rtc_counter_1_2>
	}
	rtc_counter++;
    1a2a:	80 91 ae 38 	lds	r24, 0x38AE	; 0x8038ae <rtc_counter>
    1a2e:	90 91 af 38 	lds	r25, 0x38AF	; 0x8038af <rtc_counter+0x1>
    1a32:	a0 91 b0 38 	lds	r26, 0x38B0	; 0x8038b0 <rtc_counter+0x2>
    1a36:	b0 91 b1 38 	lds	r27, 0x38B1	; 0x8038b1 <rtc_counter+0x3>
    1a3a:	01 96       	adiw	r24, 0x01	; 1
    1a3c:	a1 1d       	adc	r26, r1
    1a3e:	b1 1d       	adc	r27, r1
    1a40:	80 93 ae 38 	sts	0x38AE, r24	; 0x8038ae <rtc_counter>
    1a44:	90 93 af 38 	sts	0x38AF, r25	; 0x8038af <rtc_counter+0x1>
    1a48:	a0 93 b0 38 	sts	0x38B0, r26	; 0x8038b0 <rtc_counter+0x2>
    1a4c:	b0 93 b1 38 	sts	0x38B1, r27	; 0x8038b1 <rtc_counter+0x3>
	RTC.INTFLAGS = RTC_OVF_bm;
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    1a56:	ff 91       	pop	r31
    1a58:	ef 91       	pop	r30
    1a5a:	bf 91       	pop	r27
    1a5c:	af 91       	pop	r26
    1a5e:	9f 91       	pop	r25
    1a60:	8f 91       	pop	r24
    1a62:	7f 91       	pop	r23
    1a64:	6f 91       	pop	r22
    1a66:	5f 91       	pop	r21
    1a68:	4f 91       	pop	r20
    1a6a:	3f 91       	pop	r19
    1a6c:	2f 91       	pop	r18
    1a6e:	0f 90       	pop	r0
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	0f 90       	pop	r0
    1a74:	1f 90       	pop	r1
    1a76:	18 95       	reti

00001a78 <TWI_MasterInit>:
                    uint8_t bytesToRead)
{
	//PORTB_OUTTGL = (1 << 4);
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
	return twi_status;
}
    1a78:	fc 01       	movw	r30, r24
    1a7a:	60 83       	st	Z, r22
    1a7c:	71 83       	std	Z+1, r23	; 0x01
    1a7e:	81 ec       	ldi	r24, 0xC1	; 193
    1a80:	db 01       	movw	r26, r22
    1a82:	13 96       	adiw	r26, 0x03	; 3
    1a84:	8c 93       	st	X, r24
    1a86:	a0 81       	ld	r26, Z
    1a88:	b1 81       	ldd	r27, Z+1	; 0x01
    1a8a:	16 96       	adiw	r26, 0x06	; 6
    1a8c:	4c 93       	st	X, r20
    1a8e:	01 90       	ld	r0, Z+
    1a90:	f0 81       	ld	r31, Z
    1a92:	e0 2d       	mov	r30, r0
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	85 83       	std	Z+5, r24	; 0x05
    1a98:	08 95       	ret

00001a9a <TWI_MasterWriteRead>:
    1a9a:	0f 93       	push	r16
    1a9c:	cf 93       	push	r28
    1a9e:	df 93       	push	r29
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	29 30       	cpi	r18, 0x09	; 9
    1aa4:	98 f5       	brcc	.+102    	; 0x1b0c <TWI_MasterWriteRead+0x72>
    1aa6:	09 30       	cpi	r16, 0x09	; 9
    1aa8:	98 f5       	brcc	.+102    	; 0x1b10 <TWI_MasterWriteRead+0x76>
    1aaa:	87 89       	ldd	r24, Z+23	; 0x17
    1aac:	81 11       	cpse	r24, r1
    1aae:	32 c0       	rjmp	.+100    	; 0x1b14 <TWI_MasterWriteRead+0x7a>
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	87 8b       	std	Z+23, r24	; 0x17
    1ab4:	10 8e       	std	Z+24, r1	; 0x18
    1ab6:	66 0f       	add	r22, r22
    1ab8:	62 83       	std	Z+2, r22	; 0x02
    1aba:	22 23       	and	r18, r18
    1abc:	69 f0       	breq	.+26     	; 0x1ad8 <TWI_MasterWriteRead+0x3e>
    1abe:	a4 2f       	mov	r26, r20
    1ac0:	b5 2f       	mov	r27, r21
    1ac2:	40 e0       	ldi	r20, 0x00	; 0
    1ac4:	50 e0       	ldi	r21, 0x00	; 0
    1ac6:	8d 91       	ld	r24, X+
    1ac8:	ef 01       	movw	r28, r30
    1aca:	c4 0f       	add	r28, r20
    1acc:	d5 1f       	adc	r29, r21
    1ace:	8b 83       	std	Y+3, r24	; 0x03
    1ad0:	4f 5f       	subi	r20, 0xFF	; 255
    1ad2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad4:	42 17       	cp	r20, r18
    1ad6:	b8 f3       	brcs	.-18     	; 0x1ac6 <TWI_MasterWriteRead+0x2c>
    1ad8:	23 8b       	std	Z+19, r18	; 0x13
    1ada:	04 8b       	std	Z+20, r16	; 0x14
    1adc:	15 8a       	std	Z+21, r1	; 0x15
    1ade:	16 8a       	std	Z+22, r1	; 0x16
    1ae0:	83 89       	ldd	r24, Z+19	; 0x13
    1ae2:	88 23       	and	r24, r24
    1ae4:	41 f0       	breq	.+16     	; 0x1af6 <TWI_MasterWriteRead+0x5c>
    1ae6:	82 81       	ldd	r24, Z+2	; 0x02
    1ae8:	8e 7f       	andi	r24, 0xFE	; 254
    1aea:	01 90       	ld	r0, Z+
    1aec:	f0 81       	ld	r31, Z
    1aee:	e0 2d       	mov	r30, r0
    1af0:	87 83       	std	Z+7, r24	; 0x07
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	12 c0       	rjmp	.+36     	; 0x1b1a <TWI_MasterWriteRead+0x80>
    1af6:	84 89       	ldd	r24, Z+20	; 0x14
    1af8:	88 23       	and	r24, r24
    1afa:	71 f0       	breq	.+28     	; 0x1b18 <TWI_MasterWriteRead+0x7e>
    1afc:	82 81       	ldd	r24, Z+2	; 0x02
    1afe:	81 60       	ori	r24, 0x01	; 1
    1b00:	01 90       	ld	r0, Z+
    1b02:	f0 81       	ld	r31, Z
    1b04:	e0 2d       	mov	r30, r0
    1b06:	87 83       	std	Z+7, r24	; 0x07
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	07 c0       	rjmp	.+14     	; 0x1b1a <TWI_MasterWriteRead+0x80>
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	05 c0       	rjmp	.+10     	; 0x1b1a <TWI_MasterWriteRead+0x80>
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	03 c0       	rjmp	.+6      	; 0x1b1a <TWI_MasterWriteRead+0x80>
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	01 c0       	rjmp	.+2      	; 0x1b1a <TWI_MasterWriteRead+0x80>
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	df 91       	pop	r29
    1b1c:	cf 91       	pop	r28
    1b1e:	0f 91       	pop	r16
    1b20:	08 95       	ret

00001b22 <TWI_MasterWrite>:
    1b22:	0f 93       	push	r16
    1b24:	00 e0       	ldi	r16, 0x00	; 0
    1b26:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <TWI_MasterWriteRead>
    1b2a:	0f 91       	pop	r16
    1b2c:	08 95       	ret

00001b2e <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi) //--done
{
    1b2e:	fc 01       	movw	r30, r24
	uint8_t currentStatus = twi->interface->MSTATUS;
    1b30:	a0 81       	ld	r26, Z
    1b32:	b1 81       	ldd	r27, Z+1	; 0x01
    1b34:	15 96       	adiw	r26, 0x05	; 5
    1b36:	9c 91       	ld	r25, X
    1b38:	15 97       	sbiw	r26, 0x05	; 5

	/* If bus error. */
	if (currentStatus & TWI_BUSERR_bm) {
    1b3a:	92 ff       	sbrs	r25, 2
    1b3c:	03 c0       	rjmp	.+6      	; 0x1b44 <TWI_MasterArbitrationLostBusErrorHandler+0x16>
		twi->result = TWIM_RESULT_BUS_ERROR;
    1b3e:	84 e0       	ldi	r24, 0x04	; 4
    1b40:	80 8f       	std	Z+24, r24	; 0x18
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <TWI_MasterArbitrationLostBusErrorHandler+0x1a>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
    1b44:	83 e0       	ldi	r24, 0x03	; 3
    1b46:	80 8f       	std	Z+24, r24	; 0x18
	}

	/* Clear interrupt flag. */
	twi->interface->MSTATUS = currentStatus | TWI_ARBLOST_bm;
    1b48:	98 60       	ori	r25, 0x08	; 8
    1b4a:	15 96       	adiw	r26, 0x05	; 5
    1b4c:	9c 93       	st	X, r25

	twi->status = TWIM_STATUS_READY;
    1b4e:	17 8a       	std	Z+23, r1	; 0x17
    1b50:	08 95       	ret

00001b52 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi) //--done
{
    1b52:	cf 93       	push	r28
    1b54:	df 93       	push	r29
    1b56:	fc 01       	movw	r30, r24
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
    1b58:	93 89       	ldd	r25, Z+19	; 0x13
	uint8_t bytesToRead   = twi->bytesToRead;
    1b5a:	24 89       	ldd	r18, Z+20	; 0x14

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MSTATUS & TWI_RXACK_bm) {
    1b5c:	a0 81       	ld	r26, Z
    1b5e:	b1 81       	ldd	r27, Z+1	; 0x01
    1b60:	15 96       	adiw	r26, 0x05	; 5
    1b62:	8c 91       	ld	r24, X
    1b64:	15 97       	sbiw	r26, 0x05	; 5
    1b66:	84 ff       	sbrs	r24, 4
    1b68:	07 c0       	rjmp	.+14     	; 0x1b78 <TWI_MasterWriteHandler+0x26>
		twi->interface->MCTRLB = TWI_MCMD_STOP_gc;
    1b6a:	83 e0       	ldi	r24, 0x03	; 3
    1b6c:	14 96       	adiw	r26, 0x04	; 4
    1b6e:	8c 93       	st	X, r24
		twi->result = TWIM_RESULT_NACK_RECEIVED;
    1b70:	85 e0       	ldi	r24, 0x05	; 5
    1b72:	80 8f       	std	Z+24, r24	; 0x18
		twi->status = TWIM_STATUS_READY;
    1b74:	17 8a       	std	Z+23, r1	; 0x17
    1b76:	1c c0       	rjmp	.+56     	; 0x1bb0 <TWI_MasterWriteHandler+0x5e>
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    1b78:	85 89       	ldd	r24, Z+21	; 0x15
    1b7a:	89 17       	cp	r24, r25
    1b7c:	58 f4       	brcc	.+22     	; 0x1b94 <TWI_MasterWriteHandler+0x42>
		uint8_t data = twi->writeData[twi->bytesWritten];
    1b7e:	85 89       	ldd	r24, Z+21	; 0x15
    1b80:	ef 01       	movw	r28, r30
    1b82:	c8 0f       	add	r28, r24
    1b84:	d1 1d       	adc	r29, r1
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MDATA = data;
    1b88:	18 96       	adiw	r26, 0x08	; 8
    1b8a:	8c 93       	st	X, r24
		++twi->bytesWritten;
    1b8c:	85 89       	ldd	r24, Z+21	; 0x15
    1b8e:	8f 5f       	subi	r24, 0xFF	; 255
    1b90:	85 8b       	std	Z+21, r24	; 0x15
    1b92:	0e c0       	rjmp	.+28     	; 0x1bb0 <TWI_MasterWriteHandler+0x5e>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
    1b94:	86 89       	ldd	r24, Z+22	; 0x16
    1b96:	82 17       	cp	r24, r18
    1b98:	28 f4       	brcc	.+10     	; 0x1ba4 <TWI_MasterWriteHandler+0x52>
		uint8_t readAddress = twi->address | 0x01;
    1b9a:	82 81       	ldd	r24, Z+2	; 0x02
    1b9c:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MADDR = readAddress;
    1b9e:	17 96       	adiw	r26, 0x07	; 7
    1ba0:	8c 93       	st	X, r24
    1ba2:	06 c0       	rjmp	.+12     	; 0x1bb0 <TWI_MasterWriteHandler+0x5e>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MCTRLB = TWI_MCMD_STOP_gc;
    1ba4:	83 e0       	ldi	r24, 0x03	; 3
    1ba6:	14 96       	adiw	r26, 0x04	; 4
    1ba8:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result) //--done
{
	twi->result = result;
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    1bae:	17 8a       	std	Z+23, r1	; 0x17
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MCTRLB = TWI_MCMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	08 95       	ret

00001bb6 <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi) //--done
{
    1bb6:	fc 01       	movw	r30, r24
	//PORTB_OUTTGL = (1 << 4);
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
    1bb8:	86 89       	ldd	r24, Z+22	; 0x16
    1bba:	88 30       	cpi	r24, 0x08	; 8
    1bbc:	70 f4       	brcc	.+28     	; 0x1bda <TWI_MasterReadHandler+0x24>
		uint8_t data = twi->interface->MDATA;
    1bbe:	a0 81       	ld	r26, Z
    1bc0:	b1 81       	ldd	r27, Z+1	; 0x01
    1bc2:	18 96       	adiw	r26, 0x08	; 8
    1bc4:	8c 91       	ld	r24, X
		twi->readData[twi->bytesRead] = data; //--!
    1bc6:	96 89       	ldd	r25, Z+22	; 0x16
    1bc8:	df 01       	movw	r26, r30
    1bca:	a9 0f       	add	r26, r25
    1bcc:	b1 1d       	adc	r27, r1
    1bce:	1b 96       	adiw	r26, 0x0b	; 11
    1bd0:	8c 93       	st	X, r24
		twi->bytesRead++;
    1bd2:	86 89       	ldd	r24, Z+22	; 0x16
    1bd4:	8f 5f       	subi	r24, 0xFF	; 255
    1bd6:	86 8b       	std	Z+22, r24	; 0x16
    1bd8:	08 c0       	rjmp	.+16     	; 0x1bea <TWI_MasterReadHandler+0x34>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MCTRLB = TWI_MCMD_STOP_gc;
    1bda:	a0 81       	ld	r26, Z
    1bdc:	b1 81       	ldd	r27, Z+1	; 0x01
    1bde:	83 e0       	ldi	r24, 0x03	; 3
    1be0:	14 96       	adiw	r26, 0x04	; 4
    1be2:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result) //--done
{
	twi->result = result;
    1be4:	82 e0       	ldi	r24, 0x02	; 2
    1be6:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    1be8:	17 8a       	std	Z+23, r1	; 0x17
		twi->interface->MCTRLB = TWI_MCMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
    1bea:	94 89       	ldd	r25, Z+20	; 0x14

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
    1bec:	86 89       	ldd	r24, Z+22	; 0x16
    1bee:	89 17       	cp	r24, r25
    1bf0:	30 f4       	brcc	.+12     	; 0x1bfe <TWI_MasterReadHandler+0x48>
		twi->interface->MCTRLB = TWI_MCMD_RECVTRANS_gc;
    1bf2:	01 90       	ld	r0, Z+
    1bf4:	f0 81       	ld	r31, Z
    1bf6:	e0 2d       	mov	r30, r0
    1bf8:	82 e0       	ldi	r24, 0x02	; 2
    1bfa:	84 83       	std	Z+4, r24	; 0x04
    1bfc:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MCTRLB = TWI_ACKACT_bm |
    1bfe:	a0 81       	ld	r26, Z
    1c00:	b1 81       	ldd	r27, Z+1	; 0x01
    1c02:	87 e0       	ldi	r24, 0x07	; 7
    1c04:	14 96       	adiw	r26, 0x04	; 4
    1c06:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result) //--done
{
	twi->result = result;
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    1c0c:	17 8a       	std	Z+23, r1	; 0x17
    1c0e:	08 95       	ret

00001c10 <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi) //--done
{
	uint8_t currentStatus = twi->interface->MSTATUS;
    1c10:	dc 01       	movw	r26, r24
    1c12:	ed 91       	ld	r30, X+
    1c14:	fc 91       	ld	r31, X
    1c16:	25 81       	ldd	r18, Z+5	; 0x05

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_ARBLOST_bm) ||
    1c18:	32 2f       	mov	r19, r18
    1c1a:	3c 70       	andi	r19, 0x0C	; 12
    1c1c:	19 f0       	breq	.+6      	; 0x1c24 <TWI_MasterInterruptHandler+0x14>
	    (currentStatus & TWI_BUSERR_bm)) {
		TWI_MasterArbitrationLostBusErrorHandler(twi);
    1c1e:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <TWI_MasterArbitrationLostBusErrorHandler>
    1c22:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_WIF_bm) {
    1c24:	26 ff       	sbrs	r18, 6
    1c26:	03 c0       	rjmp	.+6      	; 0x1c2e <TWI_MasterInterruptHandler+0x1e>
		TWI_MasterWriteHandler(twi);
    1c28:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <TWI_MasterWriteHandler>
    1c2c:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_RIF_bm) {
    1c2e:	22 23       	and	r18, r18
    1c30:	1c f4       	brge	.+6      	; 0x1c38 <TWI_MasterInterruptHandler+0x28>
		TWI_MasterReadHandler(twi);
    1c32:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <TWI_MasterReadHandler>
    1c36:	08 95       	ret
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result) //--done
{
	twi->result = result;
    1c38:	26 e0       	ldi	r18, 0x06	; 6
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	20 8f       	std	Z+24, r18	; 0x18
	twi->status = TWIM_STATUS_READY;
    1c3e:	17 8a       	std	Z+23, r1	; 0x17
    1c40:	08 95       	ret

00001c42 <__subsf3>:
    1c42:	50 58       	subi	r21, 0x80	; 128

00001c44 <__addsf3>:
    1c44:	bb 27       	eor	r27, r27
    1c46:	aa 27       	eor	r26, r26
    1c48:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <__addsf3x>
    1c4c:	0c 94 8a 0f 	jmp	0x1f14	; 0x1f14 <__fp_round>
    1c50:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__fp_pscA>
    1c54:	38 f0       	brcs	.+14     	; 0x1c64 <__addsf3+0x20>
    1c56:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__fp_pscB>
    1c5a:	20 f0       	brcs	.+8      	; 0x1c64 <__addsf3+0x20>
    1c5c:	39 f4       	brne	.+14     	; 0x1c6c <__addsf3+0x28>
    1c5e:	9f 3f       	cpi	r25, 0xFF	; 255
    1c60:	19 f4       	brne	.+6      	; 0x1c68 <__addsf3+0x24>
    1c62:	26 f4       	brtc	.+8      	; 0x1c6c <__addsf3+0x28>
    1c64:	0c 94 79 0f 	jmp	0x1ef2	; 0x1ef2 <__fp_nan>
    1c68:	0e f4       	brtc	.+2      	; 0x1c6c <__addsf3+0x28>
    1c6a:	e0 95       	com	r30
    1c6c:	e7 fb       	bst	r30, 7
    1c6e:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__fp_inf>

00001c72 <__addsf3x>:
    1c72:	e9 2f       	mov	r30, r25
    1c74:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <__fp_split3>
    1c78:	58 f3       	brcs	.-42     	; 0x1c50 <__addsf3+0xc>
    1c7a:	ba 17       	cp	r27, r26
    1c7c:	62 07       	cpc	r22, r18
    1c7e:	73 07       	cpc	r23, r19
    1c80:	84 07       	cpc	r24, r20
    1c82:	95 07       	cpc	r25, r21
    1c84:	20 f0       	brcs	.+8      	; 0x1c8e <__addsf3x+0x1c>
    1c86:	79 f4       	brne	.+30     	; 0x1ca6 <__addsf3x+0x34>
    1c88:	a6 f5       	brtc	.+104    	; 0x1cf2 <__addsf3x+0x80>
    1c8a:	0c 94 bd 0f 	jmp	0x1f7a	; 0x1f7a <__fp_zero>
    1c8e:	0e f4       	brtc	.+2      	; 0x1c92 <__addsf3x+0x20>
    1c90:	e0 95       	com	r30
    1c92:	0b 2e       	mov	r0, r27
    1c94:	ba 2f       	mov	r27, r26
    1c96:	a0 2d       	mov	r26, r0
    1c98:	0b 01       	movw	r0, r22
    1c9a:	b9 01       	movw	r22, r18
    1c9c:	90 01       	movw	r18, r0
    1c9e:	0c 01       	movw	r0, r24
    1ca0:	ca 01       	movw	r24, r20
    1ca2:	a0 01       	movw	r20, r0
    1ca4:	11 24       	eor	r1, r1
    1ca6:	ff 27       	eor	r31, r31
    1ca8:	59 1b       	sub	r21, r25
    1caa:	99 f0       	breq	.+38     	; 0x1cd2 <__addsf3x+0x60>
    1cac:	59 3f       	cpi	r21, 0xF9	; 249
    1cae:	50 f4       	brcc	.+20     	; 0x1cc4 <__addsf3x+0x52>
    1cb0:	50 3e       	cpi	r21, 0xE0	; 224
    1cb2:	68 f1       	brcs	.+90     	; 0x1d0e <__addsf3x+0x9c>
    1cb4:	1a 16       	cp	r1, r26
    1cb6:	f0 40       	sbci	r31, 0x00	; 0
    1cb8:	a2 2f       	mov	r26, r18
    1cba:	23 2f       	mov	r18, r19
    1cbc:	34 2f       	mov	r19, r20
    1cbe:	44 27       	eor	r20, r20
    1cc0:	58 5f       	subi	r21, 0xF8	; 248
    1cc2:	f3 cf       	rjmp	.-26     	; 0x1caa <__addsf3x+0x38>
    1cc4:	46 95       	lsr	r20
    1cc6:	37 95       	ror	r19
    1cc8:	27 95       	ror	r18
    1cca:	a7 95       	ror	r26
    1ccc:	f0 40       	sbci	r31, 0x00	; 0
    1cce:	53 95       	inc	r21
    1cd0:	c9 f7       	brne	.-14     	; 0x1cc4 <__addsf3x+0x52>
    1cd2:	7e f4       	brtc	.+30     	; 0x1cf2 <__addsf3x+0x80>
    1cd4:	1f 16       	cp	r1, r31
    1cd6:	ba 0b       	sbc	r27, r26
    1cd8:	62 0b       	sbc	r22, r18
    1cda:	73 0b       	sbc	r23, r19
    1cdc:	84 0b       	sbc	r24, r20
    1cde:	ba f0       	brmi	.+46     	; 0x1d0e <__addsf3x+0x9c>
    1ce0:	91 50       	subi	r25, 0x01	; 1
    1ce2:	a1 f0       	breq	.+40     	; 0x1d0c <__addsf3x+0x9a>
    1ce4:	ff 0f       	add	r31, r31
    1ce6:	bb 1f       	adc	r27, r27
    1ce8:	66 1f       	adc	r22, r22
    1cea:	77 1f       	adc	r23, r23
    1cec:	88 1f       	adc	r24, r24
    1cee:	c2 f7       	brpl	.-16     	; 0x1ce0 <__addsf3x+0x6e>
    1cf0:	0e c0       	rjmp	.+28     	; 0x1d0e <__addsf3x+0x9c>
    1cf2:	ba 0f       	add	r27, r26
    1cf4:	62 1f       	adc	r22, r18
    1cf6:	73 1f       	adc	r23, r19
    1cf8:	84 1f       	adc	r24, r20
    1cfa:	48 f4       	brcc	.+18     	; 0x1d0e <__addsf3x+0x9c>
    1cfc:	87 95       	ror	r24
    1cfe:	77 95       	ror	r23
    1d00:	67 95       	ror	r22
    1d02:	b7 95       	ror	r27
    1d04:	f7 95       	ror	r31
    1d06:	9e 3f       	cpi	r25, 0xFE	; 254
    1d08:	08 f0       	brcs	.+2      	; 0x1d0c <__addsf3x+0x9a>
    1d0a:	b0 cf       	rjmp	.-160    	; 0x1c6c <__addsf3+0x28>
    1d0c:	93 95       	inc	r25
    1d0e:	88 0f       	add	r24, r24
    1d10:	08 f0       	brcs	.+2      	; 0x1d14 <__addsf3x+0xa2>
    1d12:	99 27       	eor	r25, r25
    1d14:	ee 0f       	add	r30, r30
    1d16:	97 95       	ror	r25
    1d18:	87 95       	ror	r24
    1d1a:	08 95       	ret

00001d1c <__divsf3>:
    1d1c:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__divsf3x>
    1d20:	0c 94 8a 0f 	jmp	0x1f14	; 0x1f14 <__fp_round>
    1d24:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__fp_pscB>
    1d28:	58 f0       	brcs	.+22     	; 0x1d40 <__divsf3+0x24>
    1d2a:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__fp_pscA>
    1d2e:	40 f0       	brcs	.+16     	; 0x1d40 <__divsf3+0x24>
    1d30:	29 f4       	brne	.+10     	; 0x1d3c <__divsf3+0x20>
    1d32:	5f 3f       	cpi	r21, 0xFF	; 255
    1d34:	29 f0       	breq	.+10     	; 0x1d40 <__divsf3+0x24>
    1d36:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__fp_inf>
    1d3a:	51 11       	cpse	r21, r1
    1d3c:	0c 94 be 0f 	jmp	0x1f7c	; 0x1f7c <__fp_szero>
    1d40:	0c 94 79 0f 	jmp	0x1ef2	; 0x1ef2 <__fp_nan>

00001d44 <__divsf3x>:
    1d44:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <__fp_split3>
    1d48:	68 f3       	brcs	.-38     	; 0x1d24 <__divsf3+0x8>

00001d4a <__divsf3_pse>:
    1d4a:	99 23       	and	r25, r25
    1d4c:	b1 f3       	breq	.-20     	; 0x1d3a <__divsf3+0x1e>
    1d4e:	55 23       	and	r21, r21
    1d50:	91 f3       	breq	.-28     	; 0x1d36 <__divsf3+0x1a>
    1d52:	95 1b       	sub	r25, r21
    1d54:	55 0b       	sbc	r21, r21
    1d56:	bb 27       	eor	r27, r27
    1d58:	aa 27       	eor	r26, r26
    1d5a:	62 17       	cp	r22, r18
    1d5c:	73 07       	cpc	r23, r19
    1d5e:	84 07       	cpc	r24, r20
    1d60:	38 f0       	brcs	.+14     	; 0x1d70 <__divsf3_pse+0x26>
    1d62:	9f 5f       	subi	r25, 0xFF	; 255
    1d64:	5f 4f       	sbci	r21, 0xFF	; 255
    1d66:	22 0f       	add	r18, r18
    1d68:	33 1f       	adc	r19, r19
    1d6a:	44 1f       	adc	r20, r20
    1d6c:	aa 1f       	adc	r26, r26
    1d6e:	a9 f3       	breq	.-22     	; 0x1d5a <__divsf3_pse+0x10>
    1d70:	35 d0       	rcall	.+106    	; 0x1ddc <__divsf3_pse+0x92>
    1d72:	0e 2e       	mov	r0, r30
    1d74:	3a f0       	brmi	.+14     	; 0x1d84 <__divsf3_pse+0x3a>
    1d76:	e0 e8       	ldi	r30, 0x80	; 128
    1d78:	32 d0       	rcall	.+100    	; 0x1dde <__divsf3_pse+0x94>
    1d7a:	91 50       	subi	r25, 0x01	; 1
    1d7c:	50 40       	sbci	r21, 0x00	; 0
    1d7e:	e6 95       	lsr	r30
    1d80:	00 1c       	adc	r0, r0
    1d82:	ca f7       	brpl	.-14     	; 0x1d76 <__divsf3_pse+0x2c>
    1d84:	2b d0       	rcall	.+86     	; 0x1ddc <__divsf3_pse+0x92>
    1d86:	fe 2f       	mov	r31, r30
    1d88:	29 d0       	rcall	.+82     	; 0x1ddc <__divsf3_pse+0x92>
    1d8a:	66 0f       	add	r22, r22
    1d8c:	77 1f       	adc	r23, r23
    1d8e:	88 1f       	adc	r24, r24
    1d90:	bb 1f       	adc	r27, r27
    1d92:	26 17       	cp	r18, r22
    1d94:	37 07       	cpc	r19, r23
    1d96:	48 07       	cpc	r20, r24
    1d98:	ab 07       	cpc	r26, r27
    1d9a:	b0 e8       	ldi	r27, 0x80	; 128
    1d9c:	09 f0       	breq	.+2      	; 0x1da0 <__divsf3_pse+0x56>
    1d9e:	bb 0b       	sbc	r27, r27
    1da0:	80 2d       	mov	r24, r0
    1da2:	bf 01       	movw	r22, r30
    1da4:	ff 27       	eor	r31, r31
    1da6:	93 58       	subi	r25, 0x83	; 131
    1da8:	5f 4f       	sbci	r21, 0xFF	; 255
    1daa:	3a f0       	brmi	.+14     	; 0x1dba <__divsf3_pse+0x70>
    1dac:	9e 3f       	cpi	r25, 0xFE	; 254
    1dae:	51 05       	cpc	r21, r1
    1db0:	78 f0       	brcs	.+30     	; 0x1dd0 <__divsf3_pse+0x86>
    1db2:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__fp_inf>
    1db6:	0c 94 be 0f 	jmp	0x1f7c	; 0x1f7c <__fp_szero>
    1dba:	5f 3f       	cpi	r21, 0xFF	; 255
    1dbc:	e4 f3       	brlt	.-8      	; 0x1db6 <__divsf3_pse+0x6c>
    1dbe:	98 3e       	cpi	r25, 0xE8	; 232
    1dc0:	d4 f3       	brlt	.-12     	; 0x1db6 <__divsf3_pse+0x6c>
    1dc2:	86 95       	lsr	r24
    1dc4:	77 95       	ror	r23
    1dc6:	67 95       	ror	r22
    1dc8:	b7 95       	ror	r27
    1dca:	f7 95       	ror	r31
    1dcc:	9f 5f       	subi	r25, 0xFF	; 255
    1dce:	c9 f7       	brne	.-14     	; 0x1dc2 <__divsf3_pse+0x78>
    1dd0:	88 0f       	add	r24, r24
    1dd2:	91 1d       	adc	r25, r1
    1dd4:	96 95       	lsr	r25
    1dd6:	87 95       	ror	r24
    1dd8:	97 f9       	bld	r25, 7
    1dda:	08 95       	ret
    1ddc:	e1 e0       	ldi	r30, 0x01	; 1
    1dde:	66 0f       	add	r22, r22
    1de0:	77 1f       	adc	r23, r23
    1de2:	88 1f       	adc	r24, r24
    1de4:	bb 1f       	adc	r27, r27
    1de6:	62 17       	cp	r22, r18
    1de8:	73 07       	cpc	r23, r19
    1dea:	84 07       	cpc	r24, r20
    1dec:	ba 07       	cpc	r27, r26
    1dee:	20 f0       	brcs	.+8      	; 0x1df8 <__divsf3_pse+0xae>
    1df0:	62 1b       	sub	r22, r18
    1df2:	73 0b       	sbc	r23, r19
    1df4:	84 0b       	sbc	r24, r20
    1df6:	ba 0b       	sbc	r27, r26
    1df8:	ee 1f       	adc	r30, r30
    1dfa:	88 f7       	brcc	.-30     	; 0x1dde <__divsf3_pse+0x94>
    1dfc:	e0 95       	com	r30
    1dfe:	08 95       	ret

00001e00 <__fixsfsi>:
    1e00:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__fixunssfsi>
    1e04:	68 94       	set
    1e06:	b1 11       	cpse	r27, r1
    1e08:	0c 94 be 0f 	jmp	0x1f7c	; 0x1f7c <__fp_szero>
    1e0c:	08 95       	ret

00001e0e <__fixunssfsi>:
    1e0e:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__fp_splitA>
    1e12:	88 f0       	brcs	.+34     	; 0x1e36 <__fixunssfsi+0x28>
    1e14:	9f 57       	subi	r25, 0x7F	; 127
    1e16:	98 f0       	brcs	.+38     	; 0x1e3e <__fixunssfsi+0x30>
    1e18:	b9 2f       	mov	r27, r25
    1e1a:	99 27       	eor	r25, r25
    1e1c:	b7 51       	subi	r27, 0x17	; 23
    1e1e:	b0 f0       	brcs	.+44     	; 0x1e4c <__fixunssfsi+0x3e>
    1e20:	e1 f0       	breq	.+56     	; 0x1e5a <__fixunssfsi+0x4c>
    1e22:	66 0f       	add	r22, r22
    1e24:	77 1f       	adc	r23, r23
    1e26:	88 1f       	adc	r24, r24
    1e28:	99 1f       	adc	r25, r25
    1e2a:	1a f0       	brmi	.+6      	; 0x1e32 <__fixunssfsi+0x24>
    1e2c:	ba 95       	dec	r27
    1e2e:	c9 f7       	brne	.-14     	; 0x1e22 <__fixunssfsi+0x14>
    1e30:	14 c0       	rjmp	.+40     	; 0x1e5a <__fixunssfsi+0x4c>
    1e32:	b1 30       	cpi	r27, 0x01	; 1
    1e34:	91 f0       	breq	.+36     	; 0x1e5a <__fixunssfsi+0x4c>
    1e36:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <__fp_zero>
    1e3a:	b1 e0       	ldi	r27, 0x01	; 1
    1e3c:	08 95       	ret
    1e3e:	0c 94 bd 0f 	jmp	0x1f7a	; 0x1f7a <__fp_zero>
    1e42:	67 2f       	mov	r22, r23
    1e44:	78 2f       	mov	r23, r24
    1e46:	88 27       	eor	r24, r24
    1e48:	b8 5f       	subi	r27, 0xF8	; 248
    1e4a:	39 f0       	breq	.+14     	; 0x1e5a <__fixunssfsi+0x4c>
    1e4c:	b9 3f       	cpi	r27, 0xF9	; 249
    1e4e:	cc f3       	brlt	.-14     	; 0x1e42 <__fixunssfsi+0x34>
    1e50:	86 95       	lsr	r24
    1e52:	77 95       	ror	r23
    1e54:	67 95       	ror	r22
    1e56:	b3 95       	inc	r27
    1e58:	d9 f7       	brne	.-10     	; 0x1e50 <__fixunssfsi+0x42>
    1e5a:	3e f4       	brtc	.+14     	; 0x1e6a <__fixunssfsi+0x5c>
    1e5c:	90 95       	com	r25
    1e5e:	80 95       	com	r24
    1e60:	70 95       	com	r23
    1e62:	61 95       	neg	r22
    1e64:	7f 4f       	sbci	r23, 0xFF	; 255
    1e66:	8f 4f       	sbci	r24, 0xFF	; 255
    1e68:	9f 4f       	sbci	r25, 0xFF	; 255
    1e6a:	08 95       	ret

00001e6c <__floatunsisf>:
    1e6c:	e8 94       	clt
    1e6e:	09 c0       	rjmp	.+18     	; 0x1e82 <__floatsisf+0x12>

00001e70 <__floatsisf>:
    1e70:	97 fb       	bst	r25, 7
    1e72:	3e f4       	brtc	.+14     	; 0x1e82 <__floatsisf+0x12>
    1e74:	90 95       	com	r25
    1e76:	80 95       	com	r24
    1e78:	70 95       	com	r23
    1e7a:	61 95       	neg	r22
    1e7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e80:	9f 4f       	sbci	r25, 0xFF	; 255
    1e82:	99 23       	and	r25, r25
    1e84:	a9 f0       	breq	.+42     	; 0x1eb0 <__floatsisf+0x40>
    1e86:	f9 2f       	mov	r31, r25
    1e88:	96 e9       	ldi	r25, 0x96	; 150
    1e8a:	bb 27       	eor	r27, r27
    1e8c:	93 95       	inc	r25
    1e8e:	f6 95       	lsr	r31
    1e90:	87 95       	ror	r24
    1e92:	77 95       	ror	r23
    1e94:	67 95       	ror	r22
    1e96:	b7 95       	ror	r27
    1e98:	f1 11       	cpse	r31, r1
    1e9a:	f8 cf       	rjmp	.-16     	; 0x1e8c <__floatsisf+0x1c>
    1e9c:	fa f4       	brpl	.+62     	; 0x1edc <__floatsisf+0x6c>
    1e9e:	bb 0f       	add	r27, r27
    1ea0:	11 f4       	brne	.+4      	; 0x1ea6 <__floatsisf+0x36>
    1ea2:	60 ff       	sbrs	r22, 0
    1ea4:	1b c0       	rjmp	.+54     	; 0x1edc <__floatsisf+0x6c>
    1ea6:	6f 5f       	subi	r22, 0xFF	; 255
    1ea8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eaa:	8f 4f       	sbci	r24, 0xFF	; 255
    1eac:	9f 4f       	sbci	r25, 0xFF	; 255
    1eae:	16 c0       	rjmp	.+44     	; 0x1edc <__floatsisf+0x6c>
    1eb0:	88 23       	and	r24, r24
    1eb2:	11 f0       	breq	.+4      	; 0x1eb8 <__floatsisf+0x48>
    1eb4:	96 e9       	ldi	r25, 0x96	; 150
    1eb6:	11 c0       	rjmp	.+34     	; 0x1eda <__floatsisf+0x6a>
    1eb8:	77 23       	and	r23, r23
    1eba:	21 f0       	breq	.+8      	; 0x1ec4 <__floatsisf+0x54>
    1ebc:	9e e8       	ldi	r25, 0x8E	; 142
    1ebe:	87 2f       	mov	r24, r23
    1ec0:	76 2f       	mov	r23, r22
    1ec2:	05 c0       	rjmp	.+10     	; 0x1ece <__floatsisf+0x5e>
    1ec4:	66 23       	and	r22, r22
    1ec6:	71 f0       	breq	.+28     	; 0x1ee4 <__floatsisf+0x74>
    1ec8:	96 e8       	ldi	r25, 0x86	; 134
    1eca:	86 2f       	mov	r24, r22
    1ecc:	70 e0       	ldi	r23, 0x00	; 0
    1ece:	60 e0       	ldi	r22, 0x00	; 0
    1ed0:	2a f0       	brmi	.+10     	; 0x1edc <__floatsisf+0x6c>
    1ed2:	9a 95       	dec	r25
    1ed4:	66 0f       	add	r22, r22
    1ed6:	77 1f       	adc	r23, r23
    1ed8:	88 1f       	adc	r24, r24
    1eda:	da f7       	brpl	.-10     	; 0x1ed2 <__floatsisf+0x62>
    1edc:	88 0f       	add	r24, r24
    1ede:	96 95       	lsr	r25
    1ee0:	87 95       	ror	r24
    1ee2:	97 f9       	bld	r25, 7
    1ee4:	08 95       	ret

00001ee6 <__fp_inf>:
    1ee6:	97 f9       	bld	r25, 7
    1ee8:	9f 67       	ori	r25, 0x7F	; 127
    1eea:	80 e8       	ldi	r24, 0x80	; 128
    1eec:	70 e0       	ldi	r23, 0x00	; 0
    1eee:	60 e0       	ldi	r22, 0x00	; 0
    1ef0:	08 95       	ret

00001ef2 <__fp_nan>:
    1ef2:	9f ef       	ldi	r25, 0xFF	; 255
    1ef4:	80 ec       	ldi	r24, 0xC0	; 192
    1ef6:	08 95       	ret

00001ef8 <__fp_pscA>:
    1ef8:	00 24       	eor	r0, r0
    1efa:	0a 94       	dec	r0
    1efc:	16 16       	cp	r1, r22
    1efe:	17 06       	cpc	r1, r23
    1f00:	18 06       	cpc	r1, r24
    1f02:	09 06       	cpc	r0, r25
    1f04:	08 95       	ret

00001f06 <__fp_pscB>:
    1f06:	00 24       	eor	r0, r0
    1f08:	0a 94       	dec	r0
    1f0a:	12 16       	cp	r1, r18
    1f0c:	13 06       	cpc	r1, r19
    1f0e:	14 06       	cpc	r1, r20
    1f10:	05 06       	cpc	r0, r21
    1f12:	08 95       	ret

00001f14 <__fp_round>:
    1f14:	09 2e       	mov	r0, r25
    1f16:	03 94       	inc	r0
    1f18:	00 0c       	add	r0, r0
    1f1a:	11 f4       	brne	.+4      	; 0x1f20 <__fp_round+0xc>
    1f1c:	88 23       	and	r24, r24
    1f1e:	52 f0       	brmi	.+20     	; 0x1f34 <__fp_round+0x20>
    1f20:	bb 0f       	add	r27, r27
    1f22:	40 f4       	brcc	.+16     	; 0x1f34 <__fp_round+0x20>
    1f24:	bf 2b       	or	r27, r31
    1f26:	11 f4       	brne	.+4      	; 0x1f2c <__fp_round+0x18>
    1f28:	60 ff       	sbrs	r22, 0
    1f2a:	04 c0       	rjmp	.+8      	; 0x1f34 <__fp_round+0x20>
    1f2c:	6f 5f       	subi	r22, 0xFF	; 255
    1f2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f30:	8f 4f       	sbci	r24, 0xFF	; 255
    1f32:	9f 4f       	sbci	r25, 0xFF	; 255
    1f34:	08 95       	ret

00001f36 <__fp_split3>:
    1f36:	57 fd       	sbrc	r21, 7
    1f38:	90 58       	subi	r25, 0x80	; 128
    1f3a:	44 0f       	add	r20, r20
    1f3c:	55 1f       	adc	r21, r21
    1f3e:	59 f0       	breq	.+22     	; 0x1f56 <__fp_splitA+0x10>
    1f40:	5f 3f       	cpi	r21, 0xFF	; 255
    1f42:	71 f0       	breq	.+28     	; 0x1f60 <__fp_splitA+0x1a>
    1f44:	47 95       	ror	r20

00001f46 <__fp_splitA>:
    1f46:	88 0f       	add	r24, r24
    1f48:	97 fb       	bst	r25, 7
    1f4a:	99 1f       	adc	r25, r25
    1f4c:	61 f0       	breq	.+24     	; 0x1f66 <__fp_splitA+0x20>
    1f4e:	9f 3f       	cpi	r25, 0xFF	; 255
    1f50:	79 f0       	breq	.+30     	; 0x1f70 <__fp_splitA+0x2a>
    1f52:	87 95       	ror	r24
    1f54:	08 95       	ret
    1f56:	12 16       	cp	r1, r18
    1f58:	13 06       	cpc	r1, r19
    1f5a:	14 06       	cpc	r1, r20
    1f5c:	55 1f       	adc	r21, r21
    1f5e:	f2 cf       	rjmp	.-28     	; 0x1f44 <__fp_split3+0xe>
    1f60:	46 95       	lsr	r20
    1f62:	f1 df       	rcall	.-30     	; 0x1f46 <__fp_splitA>
    1f64:	08 c0       	rjmp	.+16     	; 0x1f76 <__fp_splitA+0x30>
    1f66:	16 16       	cp	r1, r22
    1f68:	17 06       	cpc	r1, r23
    1f6a:	18 06       	cpc	r1, r24
    1f6c:	99 1f       	adc	r25, r25
    1f6e:	f1 cf       	rjmp	.-30     	; 0x1f52 <__fp_splitA+0xc>
    1f70:	86 95       	lsr	r24
    1f72:	71 05       	cpc	r23, r1
    1f74:	61 05       	cpc	r22, r1
    1f76:	08 94       	sec
    1f78:	08 95       	ret

00001f7a <__fp_zero>:
    1f7a:	e8 94       	clt

00001f7c <__fp_szero>:
    1f7c:	bb 27       	eor	r27, r27
    1f7e:	66 27       	eor	r22, r22
    1f80:	77 27       	eor	r23, r23
    1f82:	cb 01       	movw	r24, r22
    1f84:	97 f9       	bld	r25, 7
    1f86:	08 95       	ret

00001f88 <__mulsf3>:
    1f88:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <__mulsf3x>
    1f8c:	0c 94 8a 0f 	jmp	0x1f14	; 0x1f14 <__fp_round>
    1f90:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__fp_pscA>
    1f94:	38 f0       	brcs	.+14     	; 0x1fa4 <__mulsf3+0x1c>
    1f96:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__fp_pscB>
    1f9a:	20 f0       	brcs	.+8      	; 0x1fa4 <__mulsf3+0x1c>
    1f9c:	95 23       	and	r25, r21
    1f9e:	11 f0       	breq	.+4      	; 0x1fa4 <__mulsf3+0x1c>
    1fa0:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__fp_inf>
    1fa4:	0c 94 79 0f 	jmp	0x1ef2	; 0x1ef2 <__fp_nan>
    1fa8:	11 24       	eor	r1, r1
    1faa:	0c 94 be 0f 	jmp	0x1f7c	; 0x1f7c <__fp_szero>

00001fae <__mulsf3x>:
    1fae:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <__fp_split3>
    1fb2:	70 f3       	brcs	.-36     	; 0x1f90 <__mulsf3+0x8>

00001fb4 <__mulsf3_pse>:
    1fb4:	95 9f       	mul	r25, r21
    1fb6:	c1 f3       	breq	.-16     	; 0x1fa8 <__mulsf3+0x20>
    1fb8:	95 0f       	add	r25, r21
    1fba:	50 e0       	ldi	r21, 0x00	; 0
    1fbc:	55 1f       	adc	r21, r21
    1fbe:	62 9f       	mul	r22, r18
    1fc0:	f0 01       	movw	r30, r0
    1fc2:	72 9f       	mul	r23, r18
    1fc4:	bb 27       	eor	r27, r27
    1fc6:	f0 0d       	add	r31, r0
    1fc8:	b1 1d       	adc	r27, r1
    1fca:	63 9f       	mul	r22, r19
    1fcc:	aa 27       	eor	r26, r26
    1fce:	f0 0d       	add	r31, r0
    1fd0:	b1 1d       	adc	r27, r1
    1fd2:	aa 1f       	adc	r26, r26
    1fd4:	64 9f       	mul	r22, r20
    1fd6:	66 27       	eor	r22, r22
    1fd8:	b0 0d       	add	r27, r0
    1fda:	a1 1d       	adc	r26, r1
    1fdc:	66 1f       	adc	r22, r22
    1fde:	82 9f       	mul	r24, r18
    1fe0:	22 27       	eor	r18, r18
    1fe2:	b0 0d       	add	r27, r0
    1fe4:	a1 1d       	adc	r26, r1
    1fe6:	62 1f       	adc	r22, r18
    1fe8:	73 9f       	mul	r23, r19
    1fea:	b0 0d       	add	r27, r0
    1fec:	a1 1d       	adc	r26, r1
    1fee:	62 1f       	adc	r22, r18
    1ff0:	83 9f       	mul	r24, r19
    1ff2:	a0 0d       	add	r26, r0
    1ff4:	61 1d       	adc	r22, r1
    1ff6:	22 1f       	adc	r18, r18
    1ff8:	74 9f       	mul	r23, r20
    1ffa:	33 27       	eor	r19, r19
    1ffc:	a0 0d       	add	r26, r0
    1ffe:	61 1d       	adc	r22, r1
    2000:	23 1f       	adc	r18, r19
    2002:	84 9f       	mul	r24, r20
    2004:	60 0d       	add	r22, r0
    2006:	21 1d       	adc	r18, r1
    2008:	82 2f       	mov	r24, r18
    200a:	76 2f       	mov	r23, r22
    200c:	6a 2f       	mov	r22, r26
    200e:	11 24       	eor	r1, r1
    2010:	9f 57       	subi	r25, 0x7F	; 127
    2012:	50 40       	sbci	r21, 0x00	; 0
    2014:	9a f0       	brmi	.+38     	; 0x203c <__mulsf3_pse+0x88>
    2016:	f1 f0       	breq	.+60     	; 0x2054 <__mulsf3_pse+0xa0>
    2018:	88 23       	and	r24, r24
    201a:	4a f0       	brmi	.+18     	; 0x202e <__mulsf3_pse+0x7a>
    201c:	ee 0f       	add	r30, r30
    201e:	ff 1f       	adc	r31, r31
    2020:	bb 1f       	adc	r27, r27
    2022:	66 1f       	adc	r22, r22
    2024:	77 1f       	adc	r23, r23
    2026:	88 1f       	adc	r24, r24
    2028:	91 50       	subi	r25, 0x01	; 1
    202a:	50 40       	sbci	r21, 0x00	; 0
    202c:	a9 f7       	brne	.-22     	; 0x2018 <__mulsf3_pse+0x64>
    202e:	9e 3f       	cpi	r25, 0xFE	; 254
    2030:	51 05       	cpc	r21, r1
    2032:	80 f0       	brcs	.+32     	; 0x2054 <__mulsf3_pse+0xa0>
    2034:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__fp_inf>
    2038:	0c 94 be 0f 	jmp	0x1f7c	; 0x1f7c <__fp_szero>
    203c:	5f 3f       	cpi	r21, 0xFF	; 255
    203e:	e4 f3       	brlt	.-8      	; 0x2038 <__mulsf3_pse+0x84>
    2040:	98 3e       	cpi	r25, 0xE8	; 232
    2042:	d4 f3       	brlt	.-12     	; 0x2038 <__mulsf3_pse+0x84>
    2044:	86 95       	lsr	r24
    2046:	77 95       	ror	r23
    2048:	67 95       	ror	r22
    204a:	b7 95       	ror	r27
    204c:	f7 95       	ror	r31
    204e:	e7 95       	ror	r30
    2050:	9f 5f       	subi	r25, 0xFF	; 255
    2052:	c1 f7       	brne	.-16     	; 0x2044 <__mulsf3_pse+0x90>
    2054:	fe 2b       	or	r31, r30
    2056:	88 0f       	add	r24, r24
    2058:	91 1d       	adc	r25, r1
    205a:	96 95       	lsr	r25
    205c:	87 95       	ror	r24
    205e:	97 f9       	bld	r25, 7
    2060:	08 95       	ret

00002062 <__udivmodsi4>:
    2062:	a1 e2       	ldi	r26, 0x21	; 33
    2064:	1a 2e       	mov	r1, r26
    2066:	aa 1b       	sub	r26, r26
    2068:	bb 1b       	sub	r27, r27
    206a:	fd 01       	movw	r30, r26
    206c:	0d c0       	rjmp	.+26     	; 0x2088 <__udivmodsi4_ep>

0000206e <__udivmodsi4_loop>:
    206e:	aa 1f       	adc	r26, r26
    2070:	bb 1f       	adc	r27, r27
    2072:	ee 1f       	adc	r30, r30
    2074:	ff 1f       	adc	r31, r31
    2076:	a2 17       	cp	r26, r18
    2078:	b3 07       	cpc	r27, r19
    207a:	e4 07       	cpc	r30, r20
    207c:	f5 07       	cpc	r31, r21
    207e:	20 f0       	brcs	.+8      	; 0x2088 <__udivmodsi4_ep>
    2080:	a2 1b       	sub	r26, r18
    2082:	b3 0b       	sbc	r27, r19
    2084:	e4 0b       	sbc	r30, r20
    2086:	f5 0b       	sbc	r31, r21

00002088 <__udivmodsi4_ep>:
    2088:	66 1f       	adc	r22, r22
    208a:	77 1f       	adc	r23, r23
    208c:	88 1f       	adc	r24, r24
    208e:	99 1f       	adc	r25, r25
    2090:	1a 94       	dec	r1
    2092:	69 f7       	brne	.-38     	; 0x206e <__udivmodsi4_loop>
    2094:	60 95       	com	r22
    2096:	70 95       	com	r23
    2098:	80 95       	com	r24
    209a:	90 95       	com	r25
    209c:	9b 01       	movw	r18, r22
    209e:	ac 01       	movw	r20, r24
    20a0:	bd 01       	movw	r22, r26
    20a2:	cf 01       	movw	r24, r30
    20a4:	08 95       	ret

000020a6 <__umulhisi3>:
    20a6:	a2 9f       	mul	r26, r18
    20a8:	b0 01       	movw	r22, r0
    20aa:	b3 9f       	mul	r27, r19
    20ac:	c0 01       	movw	r24, r0
    20ae:	a3 9f       	mul	r26, r19
    20b0:	70 0d       	add	r23, r0
    20b2:	81 1d       	adc	r24, r1
    20b4:	11 24       	eor	r1, r1
    20b6:	91 1d       	adc	r25, r1
    20b8:	b2 9f       	mul	r27, r18
    20ba:	70 0d       	add	r23, r0
    20bc:	81 1d       	adc	r24, r1
    20be:	11 24       	eor	r1, r1
    20c0:	91 1d       	adc	r25, r1
    20c2:	08 95       	ret

000020c4 <malloc>:
    20c4:	0f 93       	push	r16
    20c6:	1f 93       	push	r17
    20c8:	cf 93       	push	r28
    20ca:	df 93       	push	r29
    20cc:	82 30       	cpi	r24, 0x02	; 2
    20ce:	91 05       	cpc	r25, r1
    20d0:	10 f4       	brcc	.+4      	; 0x20d6 <malloc+0x12>
    20d2:	82 e0       	ldi	r24, 0x02	; 2
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	e0 91 e5 38 	lds	r30, 0x38E5	; 0x8038e5 <__flp>
    20da:	f0 91 e6 38 	lds	r31, 0x38E6	; 0x8038e6 <__flp+0x1>
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	a0 e0       	ldi	r26, 0x00	; 0
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	30 97       	sbiw	r30, 0x00	; 0
    20e8:	19 f1       	breq	.+70     	; 0x2130 <malloc+0x6c>
    20ea:	40 81       	ld	r20, Z
    20ec:	51 81       	ldd	r21, Z+1	; 0x01
    20ee:	02 81       	ldd	r16, Z+2	; 0x02
    20f0:	13 81       	ldd	r17, Z+3	; 0x03
    20f2:	48 17       	cp	r20, r24
    20f4:	59 07       	cpc	r21, r25
    20f6:	c8 f0       	brcs	.+50     	; 0x212a <malloc+0x66>
    20f8:	84 17       	cp	r24, r20
    20fa:	95 07       	cpc	r25, r21
    20fc:	69 f4       	brne	.+26     	; 0x2118 <malloc+0x54>
    20fe:	10 97       	sbiw	r26, 0x00	; 0
    2100:	31 f0       	breq	.+12     	; 0x210e <malloc+0x4a>
    2102:	12 96       	adiw	r26, 0x02	; 2
    2104:	0c 93       	st	X, r16
    2106:	12 97       	sbiw	r26, 0x02	; 2
    2108:	13 96       	adiw	r26, 0x03	; 3
    210a:	1c 93       	st	X, r17
    210c:	27 c0       	rjmp	.+78     	; 0x215c <malloc+0x98>
    210e:	00 93 e5 38 	sts	0x38E5, r16	; 0x8038e5 <__flp>
    2112:	10 93 e6 38 	sts	0x38E6, r17	; 0x8038e6 <__flp+0x1>
    2116:	22 c0       	rjmp	.+68     	; 0x215c <malloc+0x98>
    2118:	21 15       	cp	r18, r1
    211a:	31 05       	cpc	r19, r1
    211c:	19 f0       	breq	.+6      	; 0x2124 <malloc+0x60>
    211e:	42 17       	cp	r20, r18
    2120:	53 07       	cpc	r21, r19
    2122:	18 f4       	brcc	.+6      	; 0x212a <malloc+0x66>
    2124:	9a 01       	movw	r18, r20
    2126:	bd 01       	movw	r22, r26
    2128:	ef 01       	movw	r28, r30
    212a:	df 01       	movw	r26, r30
    212c:	f8 01       	movw	r30, r16
    212e:	db cf       	rjmp	.-74     	; 0x20e6 <malloc+0x22>
    2130:	21 15       	cp	r18, r1
    2132:	31 05       	cpc	r19, r1
    2134:	f9 f0       	breq	.+62     	; 0x2174 <malloc+0xb0>
    2136:	28 1b       	sub	r18, r24
    2138:	39 0b       	sbc	r19, r25
    213a:	24 30       	cpi	r18, 0x04	; 4
    213c:	31 05       	cpc	r19, r1
    213e:	80 f4       	brcc	.+32     	; 0x2160 <malloc+0x9c>
    2140:	8a 81       	ldd	r24, Y+2	; 0x02
    2142:	9b 81       	ldd	r25, Y+3	; 0x03
    2144:	61 15       	cp	r22, r1
    2146:	71 05       	cpc	r23, r1
    2148:	21 f0       	breq	.+8      	; 0x2152 <malloc+0x8e>
    214a:	fb 01       	movw	r30, r22
    214c:	82 83       	std	Z+2, r24	; 0x02
    214e:	93 83       	std	Z+3, r25	; 0x03
    2150:	04 c0       	rjmp	.+8      	; 0x215a <malloc+0x96>
    2152:	80 93 e5 38 	sts	0x38E5, r24	; 0x8038e5 <__flp>
    2156:	90 93 e6 38 	sts	0x38E6, r25	; 0x8038e6 <__flp+0x1>
    215a:	fe 01       	movw	r30, r28
    215c:	32 96       	adiw	r30, 0x02	; 2
    215e:	44 c0       	rjmp	.+136    	; 0x21e8 <malloc+0x124>
    2160:	fe 01       	movw	r30, r28
    2162:	e2 0f       	add	r30, r18
    2164:	f3 1f       	adc	r31, r19
    2166:	81 93       	st	Z+, r24
    2168:	91 93       	st	Z+, r25
    216a:	22 50       	subi	r18, 0x02	; 2
    216c:	31 09       	sbc	r19, r1
    216e:	28 83       	st	Y, r18
    2170:	39 83       	std	Y+1, r19	; 0x01
    2172:	3a c0       	rjmp	.+116    	; 0x21e8 <malloc+0x124>
    2174:	20 91 e3 38 	lds	r18, 0x38E3	; 0x8038e3 <__brkval>
    2178:	30 91 e4 38 	lds	r19, 0x38E4	; 0x8038e4 <__brkval+0x1>
    217c:	23 2b       	or	r18, r19
    217e:	41 f4       	brne	.+16     	; 0x2190 <malloc+0xcc>
    2180:	20 91 02 38 	lds	r18, 0x3802	; 0x803802 <__malloc_heap_start>
    2184:	30 91 03 38 	lds	r19, 0x3803	; 0x803803 <__malloc_heap_start+0x1>
    2188:	20 93 e3 38 	sts	0x38E3, r18	; 0x8038e3 <__brkval>
    218c:	30 93 e4 38 	sts	0x38E4, r19	; 0x8038e4 <__brkval+0x1>
    2190:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__data_start>
    2194:	30 91 01 38 	lds	r19, 0x3801	; 0x803801 <__data_start+0x1>
    2198:	21 15       	cp	r18, r1
    219a:	31 05       	cpc	r19, r1
    219c:	41 f4       	brne	.+16     	; 0x21ae <malloc+0xea>
    219e:	2d b7       	in	r18, 0x3d	; 61
    21a0:	3e b7       	in	r19, 0x3e	; 62
    21a2:	40 91 04 38 	lds	r20, 0x3804	; 0x803804 <__malloc_margin>
    21a6:	50 91 05 38 	lds	r21, 0x3805	; 0x803805 <__malloc_margin+0x1>
    21aa:	24 1b       	sub	r18, r20
    21ac:	35 0b       	sbc	r19, r21
    21ae:	e0 91 e3 38 	lds	r30, 0x38E3	; 0x8038e3 <__brkval>
    21b2:	f0 91 e4 38 	lds	r31, 0x38E4	; 0x8038e4 <__brkval+0x1>
    21b6:	e2 17       	cp	r30, r18
    21b8:	f3 07       	cpc	r31, r19
    21ba:	a0 f4       	brcc	.+40     	; 0x21e4 <malloc+0x120>
    21bc:	2e 1b       	sub	r18, r30
    21be:	3f 0b       	sbc	r19, r31
    21c0:	28 17       	cp	r18, r24
    21c2:	39 07       	cpc	r19, r25
    21c4:	78 f0       	brcs	.+30     	; 0x21e4 <malloc+0x120>
    21c6:	ac 01       	movw	r20, r24
    21c8:	4e 5f       	subi	r20, 0xFE	; 254
    21ca:	5f 4f       	sbci	r21, 0xFF	; 255
    21cc:	24 17       	cp	r18, r20
    21ce:	35 07       	cpc	r19, r21
    21d0:	48 f0       	brcs	.+18     	; 0x21e4 <malloc+0x120>
    21d2:	4e 0f       	add	r20, r30
    21d4:	5f 1f       	adc	r21, r31
    21d6:	40 93 e3 38 	sts	0x38E3, r20	; 0x8038e3 <__brkval>
    21da:	50 93 e4 38 	sts	0x38E4, r21	; 0x8038e4 <__brkval+0x1>
    21de:	81 93       	st	Z+, r24
    21e0:	91 93       	st	Z+, r25
    21e2:	02 c0       	rjmp	.+4      	; 0x21e8 <malloc+0x124>
    21e4:	e0 e0       	ldi	r30, 0x00	; 0
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	cf 01       	movw	r24, r30
    21ea:	df 91       	pop	r29
    21ec:	cf 91       	pop	r28
    21ee:	1f 91       	pop	r17
    21f0:	0f 91       	pop	r16
    21f2:	08 95       	ret

000021f4 <free>:
    21f4:	cf 93       	push	r28
    21f6:	df 93       	push	r29
    21f8:	00 97       	sbiw	r24, 0x00	; 0
    21fa:	09 f4       	brne	.+2      	; 0x21fe <free+0xa>
    21fc:	81 c0       	rjmp	.+258    	; 0x2300 <free+0x10c>
    21fe:	fc 01       	movw	r30, r24
    2200:	32 97       	sbiw	r30, 0x02	; 2
    2202:	12 82       	std	Z+2, r1	; 0x02
    2204:	13 82       	std	Z+3, r1	; 0x03
    2206:	a0 91 e5 38 	lds	r26, 0x38E5	; 0x8038e5 <__flp>
    220a:	b0 91 e6 38 	lds	r27, 0x38E6	; 0x8038e6 <__flp+0x1>
    220e:	10 97       	sbiw	r26, 0x00	; 0
    2210:	81 f4       	brne	.+32     	; 0x2232 <free+0x3e>
    2212:	20 81       	ld	r18, Z
    2214:	31 81       	ldd	r19, Z+1	; 0x01
    2216:	82 0f       	add	r24, r18
    2218:	93 1f       	adc	r25, r19
    221a:	20 91 e3 38 	lds	r18, 0x38E3	; 0x8038e3 <__brkval>
    221e:	30 91 e4 38 	lds	r19, 0x38E4	; 0x8038e4 <__brkval+0x1>
    2222:	28 17       	cp	r18, r24
    2224:	39 07       	cpc	r19, r25
    2226:	51 f5       	brne	.+84     	; 0x227c <free+0x88>
    2228:	e0 93 e3 38 	sts	0x38E3, r30	; 0x8038e3 <__brkval>
    222c:	f0 93 e4 38 	sts	0x38E4, r31	; 0x8038e4 <__brkval+0x1>
    2230:	67 c0       	rjmp	.+206    	; 0x2300 <free+0x10c>
    2232:	ed 01       	movw	r28, r26
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	ce 17       	cp	r28, r30
    223a:	df 07       	cpc	r29, r31
    223c:	40 f4       	brcc	.+16     	; 0x224e <free+0x5a>
    223e:	4a 81       	ldd	r20, Y+2	; 0x02
    2240:	5b 81       	ldd	r21, Y+3	; 0x03
    2242:	9e 01       	movw	r18, r28
    2244:	41 15       	cp	r20, r1
    2246:	51 05       	cpc	r21, r1
    2248:	f1 f0       	breq	.+60     	; 0x2286 <free+0x92>
    224a:	ea 01       	movw	r28, r20
    224c:	f5 cf       	rjmp	.-22     	; 0x2238 <free+0x44>
    224e:	c2 83       	std	Z+2, r28	; 0x02
    2250:	d3 83       	std	Z+3, r29	; 0x03
    2252:	40 81       	ld	r20, Z
    2254:	51 81       	ldd	r21, Z+1	; 0x01
    2256:	84 0f       	add	r24, r20
    2258:	95 1f       	adc	r25, r21
    225a:	c8 17       	cp	r28, r24
    225c:	d9 07       	cpc	r29, r25
    225e:	59 f4       	brne	.+22     	; 0x2276 <free+0x82>
    2260:	88 81       	ld	r24, Y
    2262:	99 81       	ldd	r25, Y+1	; 0x01
    2264:	84 0f       	add	r24, r20
    2266:	95 1f       	adc	r25, r21
    2268:	02 96       	adiw	r24, 0x02	; 2
    226a:	80 83       	st	Z, r24
    226c:	91 83       	std	Z+1, r25	; 0x01
    226e:	8a 81       	ldd	r24, Y+2	; 0x02
    2270:	9b 81       	ldd	r25, Y+3	; 0x03
    2272:	82 83       	std	Z+2, r24	; 0x02
    2274:	93 83       	std	Z+3, r25	; 0x03
    2276:	21 15       	cp	r18, r1
    2278:	31 05       	cpc	r19, r1
    227a:	29 f4       	brne	.+10     	; 0x2286 <free+0x92>
    227c:	e0 93 e5 38 	sts	0x38E5, r30	; 0x8038e5 <__flp>
    2280:	f0 93 e6 38 	sts	0x38E6, r31	; 0x8038e6 <__flp+0x1>
    2284:	3d c0       	rjmp	.+122    	; 0x2300 <free+0x10c>
    2286:	e9 01       	movw	r28, r18
    2288:	ea 83       	std	Y+2, r30	; 0x02
    228a:	fb 83       	std	Y+3, r31	; 0x03
    228c:	49 91       	ld	r20, Y+
    228e:	59 91       	ld	r21, Y+
    2290:	c4 0f       	add	r28, r20
    2292:	d5 1f       	adc	r29, r21
    2294:	ec 17       	cp	r30, r28
    2296:	fd 07       	cpc	r31, r29
    2298:	61 f4       	brne	.+24     	; 0x22b2 <free+0xbe>
    229a:	80 81       	ld	r24, Z
    229c:	91 81       	ldd	r25, Z+1	; 0x01
    229e:	84 0f       	add	r24, r20
    22a0:	95 1f       	adc	r25, r21
    22a2:	02 96       	adiw	r24, 0x02	; 2
    22a4:	e9 01       	movw	r28, r18
    22a6:	88 83       	st	Y, r24
    22a8:	99 83       	std	Y+1, r25	; 0x01
    22aa:	82 81       	ldd	r24, Z+2	; 0x02
    22ac:	93 81       	ldd	r25, Z+3	; 0x03
    22ae:	8a 83       	std	Y+2, r24	; 0x02
    22b0:	9b 83       	std	Y+3, r25	; 0x03
    22b2:	e0 e0       	ldi	r30, 0x00	; 0
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	12 96       	adiw	r26, 0x02	; 2
    22b8:	8d 91       	ld	r24, X+
    22ba:	9c 91       	ld	r25, X
    22bc:	13 97       	sbiw	r26, 0x03	; 3
    22be:	00 97       	sbiw	r24, 0x00	; 0
    22c0:	19 f0       	breq	.+6      	; 0x22c8 <free+0xd4>
    22c2:	fd 01       	movw	r30, r26
    22c4:	dc 01       	movw	r26, r24
    22c6:	f7 cf       	rjmp	.-18     	; 0x22b6 <free+0xc2>
    22c8:	8d 91       	ld	r24, X+
    22ca:	9c 91       	ld	r25, X
    22cc:	11 97       	sbiw	r26, 0x01	; 1
    22ce:	9d 01       	movw	r18, r26
    22d0:	2e 5f       	subi	r18, 0xFE	; 254
    22d2:	3f 4f       	sbci	r19, 0xFF	; 255
    22d4:	82 0f       	add	r24, r18
    22d6:	93 1f       	adc	r25, r19
    22d8:	20 91 e3 38 	lds	r18, 0x38E3	; 0x8038e3 <__brkval>
    22dc:	30 91 e4 38 	lds	r19, 0x38E4	; 0x8038e4 <__brkval+0x1>
    22e0:	28 17       	cp	r18, r24
    22e2:	39 07       	cpc	r19, r25
    22e4:	69 f4       	brne	.+26     	; 0x2300 <free+0x10c>
    22e6:	30 97       	sbiw	r30, 0x00	; 0
    22e8:	29 f4       	brne	.+10     	; 0x22f4 <free+0x100>
    22ea:	10 92 e5 38 	sts	0x38E5, r1	; 0x8038e5 <__flp>
    22ee:	10 92 e6 38 	sts	0x38E6, r1	; 0x8038e6 <__flp+0x1>
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <free+0x104>
    22f4:	12 82       	std	Z+2, r1	; 0x02
    22f6:	13 82       	std	Z+3, r1	; 0x03
    22f8:	a0 93 e3 38 	sts	0x38E3, r26	; 0x8038e3 <__brkval>
    22fc:	b0 93 e4 38 	sts	0x38E4, r27	; 0x8038e4 <__brkval+0x1>
    2300:	df 91       	pop	r29
    2302:	cf 91       	pop	r28
    2304:	08 95       	ret

00002306 <snprintf>:
    2306:	ae e0       	ldi	r26, 0x0E	; 14
    2308:	b0 e0       	ldi	r27, 0x00	; 0
    230a:	e9 e8       	ldi	r30, 0x89	; 137
    230c:	f1 e1       	ldi	r31, 0x11	; 17
    230e:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__prologue_saves__+0x1c>
    2312:	0d 89       	ldd	r16, Y+21	; 0x15
    2314:	1e 89       	ldd	r17, Y+22	; 0x16
    2316:	8f 89       	ldd	r24, Y+23	; 0x17
    2318:	98 8d       	ldd	r25, Y+24	; 0x18
    231a:	26 e0       	ldi	r18, 0x06	; 6
    231c:	2c 83       	std	Y+4, r18	; 0x04
    231e:	09 83       	std	Y+1, r16	; 0x01
    2320:	1a 83       	std	Y+2, r17	; 0x02
    2322:	97 ff       	sbrs	r25, 7
    2324:	02 c0       	rjmp	.+4      	; 0x232a <snprintf+0x24>
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	90 e8       	ldi	r25, 0x80	; 128
    232a:	01 97       	sbiw	r24, 0x01	; 1
    232c:	8d 83       	std	Y+5, r24	; 0x05
    232e:	9e 83       	std	Y+6, r25	; 0x06
    2330:	ae 01       	movw	r20, r28
    2332:	45 5e       	subi	r20, 0xE5	; 229
    2334:	5f 4f       	sbci	r21, 0xFF	; 255
    2336:	69 8d       	ldd	r22, Y+25	; 0x19
    2338:	7a 8d       	ldd	r23, Y+26	; 0x1a
    233a:	ce 01       	movw	r24, r28
    233c:	01 96       	adiw	r24, 0x01	; 1
    233e:	0e 94 b3 11 	call	0x2366	; 0x2366 <vfprintf>
    2342:	4d 81       	ldd	r20, Y+5	; 0x05
    2344:	5e 81       	ldd	r21, Y+6	; 0x06
    2346:	57 fd       	sbrc	r21, 7
    2348:	0a c0       	rjmp	.+20     	; 0x235e <snprintf+0x58>
    234a:	2f 81       	ldd	r18, Y+7	; 0x07
    234c:	38 85       	ldd	r19, Y+8	; 0x08
    234e:	42 17       	cp	r20, r18
    2350:	53 07       	cpc	r21, r19
    2352:	0c f4       	brge	.+2      	; 0x2356 <snprintf+0x50>
    2354:	9a 01       	movw	r18, r20
    2356:	f8 01       	movw	r30, r16
    2358:	e2 0f       	add	r30, r18
    235a:	f3 1f       	adc	r31, r19
    235c:	10 82       	st	Z, r1
    235e:	2e 96       	adiw	r28, 0x0e	; 14
    2360:	e4 e0       	ldi	r30, 0x04	; 4
    2362:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__epilogue_restores__+0x1c>

00002366 <vfprintf>:
    2366:	ab e0       	ldi	r26, 0x0B	; 11
    2368:	b0 e0       	ldi	r27, 0x00	; 0
    236a:	e9 eb       	ldi	r30, 0xB9	; 185
    236c:	f1 e1       	ldi	r31, 0x11	; 17
    236e:	0c 94 76 14 	jmp	0x28ec	; 0x28ec <__prologue_saves__>
    2372:	6c 01       	movw	r12, r24
    2374:	7b 01       	movw	r14, r22
    2376:	8a 01       	movw	r16, r20
    2378:	fc 01       	movw	r30, r24
    237a:	16 82       	std	Z+6, r1	; 0x06
    237c:	17 82       	std	Z+7, r1	; 0x07
    237e:	83 81       	ldd	r24, Z+3	; 0x03
    2380:	81 ff       	sbrs	r24, 1
    2382:	cc c1       	rjmp	.+920    	; 0x271c <vfprintf+0x3b6>
    2384:	ce 01       	movw	r24, r28
    2386:	01 96       	adiw	r24, 0x01	; 1
    2388:	3c 01       	movw	r6, r24
    238a:	f6 01       	movw	r30, r12
    238c:	93 81       	ldd	r25, Z+3	; 0x03
    238e:	f7 01       	movw	r30, r14
    2390:	93 fd       	sbrc	r25, 3
    2392:	85 91       	lpm	r24, Z+
    2394:	93 ff       	sbrs	r25, 3
    2396:	81 91       	ld	r24, Z+
    2398:	7f 01       	movw	r14, r30
    239a:	88 23       	and	r24, r24
    239c:	09 f4       	brne	.+2      	; 0x23a0 <vfprintf+0x3a>
    239e:	ba c1       	rjmp	.+884    	; 0x2714 <vfprintf+0x3ae>
    23a0:	85 32       	cpi	r24, 0x25	; 37
    23a2:	39 f4       	brne	.+14     	; 0x23b2 <vfprintf+0x4c>
    23a4:	93 fd       	sbrc	r25, 3
    23a6:	85 91       	lpm	r24, Z+
    23a8:	93 ff       	sbrs	r25, 3
    23aa:	81 91       	ld	r24, Z+
    23ac:	7f 01       	movw	r14, r30
    23ae:	85 32       	cpi	r24, 0x25	; 37
    23b0:	29 f4       	brne	.+10     	; 0x23bc <vfprintf+0x56>
    23b2:	b6 01       	movw	r22, r12
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	0e 94 aa 13 	call	0x2754	; 0x2754 <fputc>
    23ba:	e7 cf       	rjmp	.-50     	; 0x238a <vfprintf+0x24>
    23bc:	91 2c       	mov	r9, r1
    23be:	21 2c       	mov	r2, r1
    23c0:	31 2c       	mov	r3, r1
    23c2:	ff e1       	ldi	r31, 0x1F	; 31
    23c4:	f3 15       	cp	r31, r3
    23c6:	d8 f0       	brcs	.+54     	; 0x23fe <vfprintf+0x98>
    23c8:	8b 32       	cpi	r24, 0x2B	; 43
    23ca:	79 f0       	breq	.+30     	; 0x23ea <vfprintf+0x84>
    23cc:	38 f4       	brcc	.+14     	; 0x23dc <vfprintf+0x76>
    23ce:	80 32       	cpi	r24, 0x20	; 32
    23d0:	79 f0       	breq	.+30     	; 0x23f0 <vfprintf+0x8a>
    23d2:	83 32       	cpi	r24, 0x23	; 35
    23d4:	a1 f4       	brne	.+40     	; 0x23fe <vfprintf+0x98>
    23d6:	23 2d       	mov	r18, r3
    23d8:	20 61       	ori	r18, 0x10	; 16
    23da:	1d c0       	rjmp	.+58     	; 0x2416 <vfprintf+0xb0>
    23dc:	8d 32       	cpi	r24, 0x2D	; 45
    23de:	61 f0       	breq	.+24     	; 0x23f8 <vfprintf+0x92>
    23e0:	80 33       	cpi	r24, 0x30	; 48
    23e2:	69 f4       	brne	.+26     	; 0x23fe <vfprintf+0x98>
    23e4:	23 2d       	mov	r18, r3
    23e6:	21 60       	ori	r18, 0x01	; 1
    23e8:	16 c0       	rjmp	.+44     	; 0x2416 <vfprintf+0xb0>
    23ea:	83 2d       	mov	r24, r3
    23ec:	82 60       	ori	r24, 0x02	; 2
    23ee:	38 2e       	mov	r3, r24
    23f0:	e3 2d       	mov	r30, r3
    23f2:	e4 60       	ori	r30, 0x04	; 4
    23f4:	3e 2e       	mov	r3, r30
    23f6:	2a c0       	rjmp	.+84     	; 0x244c <vfprintf+0xe6>
    23f8:	f3 2d       	mov	r31, r3
    23fa:	f8 60       	ori	r31, 0x08	; 8
    23fc:	1d c0       	rjmp	.+58     	; 0x2438 <vfprintf+0xd2>
    23fe:	37 fc       	sbrc	r3, 7
    2400:	2d c0       	rjmp	.+90     	; 0x245c <vfprintf+0xf6>
    2402:	20 ed       	ldi	r18, 0xD0	; 208
    2404:	28 0f       	add	r18, r24
    2406:	2a 30       	cpi	r18, 0x0A	; 10
    2408:	40 f0       	brcs	.+16     	; 0x241a <vfprintf+0xb4>
    240a:	8e 32       	cpi	r24, 0x2E	; 46
    240c:	b9 f4       	brne	.+46     	; 0x243c <vfprintf+0xd6>
    240e:	36 fc       	sbrc	r3, 6
    2410:	81 c1       	rjmp	.+770    	; 0x2714 <vfprintf+0x3ae>
    2412:	23 2d       	mov	r18, r3
    2414:	20 64       	ori	r18, 0x40	; 64
    2416:	32 2e       	mov	r3, r18
    2418:	19 c0       	rjmp	.+50     	; 0x244c <vfprintf+0xe6>
    241a:	36 fe       	sbrs	r3, 6
    241c:	06 c0       	rjmp	.+12     	; 0x242a <vfprintf+0xc4>
    241e:	8a e0       	ldi	r24, 0x0A	; 10
    2420:	98 9e       	mul	r9, r24
    2422:	20 0d       	add	r18, r0
    2424:	11 24       	eor	r1, r1
    2426:	92 2e       	mov	r9, r18
    2428:	11 c0       	rjmp	.+34     	; 0x244c <vfprintf+0xe6>
    242a:	ea e0       	ldi	r30, 0x0A	; 10
    242c:	2e 9e       	mul	r2, r30
    242e:	20 0d       	add	r18, r0
    2430:	11 24       	eor	r1, r1
    2432:	22 2e       	mov	r2, r18
    2434:	f3 2d       	mov	r31, r3
    2436:	f0 62       	ori	r31, 0x20	; 32
    2438:	3f 2e       	mov	r3, r31
    243a:	08 c0       	rjmp	.+16     	; 0x244c <vfprintf+0xe6>
    243c:	8c 36       	cpi	r24, 0x6C	; 108
    243e:	21 f4       	brne	.+8      	; 0x2448 <vfprintf+0xe2>
    2440:	83 2d       	mov	r24, r3
    2442:	80 68       	ori	r24, 0x80	; 128
    2444:	38 2e       	mov	r3, r24
    2446:	02 c0       	rjmp	.+4      	; 0x244c <vfprintf+0xe6>
    2448:	88 36       	cpi	r24, 0x68	; 104
    244a:	41 f4       	brne	.+16     	; 0x245c <vfprintf+0xf6>
    244c:	f7 01       	movw	r30, r14
    244e:	93 fd       	sbrc	r25, 3
    2450:	85 91       	lpm	r24, Z+
    2452:	93 ff       	sbrs	r25, 3
    2454:	81 91       	ld	r24, Z+
    2456:	7f 01       	movw	r14, r30
    2458:	81 11       	cpse	r24, r1
    245a:	b3 cf       	rjmp	.-154    	; 0x23c2 <vfprintf+0x5c>
    245c:	98 2f       	mov	r25, r24
    245e:	9f 7d       	andi	r25, 0xDF	; 223
    2460:	95 54       	subi	r25, 0x45	; 69
    2462:	93 30       	cpi	r25, 0x03	; 3
    2464:	28 f4       	brcc	.+10     	; 0x2470 <vfprintf+0x10a>
    2466:	0c 5f       	subi	r16, 0xFC	; 252
    2468:	1f 4f       	sbci	r17, 0xFF	; 255
    246a:	9f e3       	ldi	r25, 0x3F	; 63
    246c:	99 83       	std	Y+1, r25	; 0x01
    246e:	0d c0       	rjmp	.+26     	; 0x248a <vfprintf+0x124>
    2470:	83 36       	cpi	r24, 0x63	; 99
    2472:	31 f0       	breq	.+12     	; 0x2480 <vfprintf+0x11a>
    2474:	83 37       	cpi	r24, 0x73	; 115
    2476:	71 f0       	breq	.+28     	; 0x2494 <vfprintf+0x12e>
    2478:	83 35       	cpi	r24, 0x53	; 83
    247a:	09 f0       	breq	.+2      	; 0x247e <vfprintf+0x118>
    247c:	59 c0       	rjmp	.+178    	; 0x2530 <vfprintf+0x1ca>
    247e:	21 c0       	rjmp	.+66     	; 0x24c2 <vfprintf+0x15c>
    2480:	f8 01       	movw	r30, r16
    2482:	80 81       	ld	r24, Z
    2484:	89 83       	std	Y+1, r24	; 0x01
    2486:	0e 5f       	subi	r16, 0xFE	; 254
    2488:	1f 4f       	sbci	r17, 0xFF	; 255
    248a:	88 24       	eor	r8, r8
    248c:	83 94       	inc	r8
    248e:	91 2c       	mov	r9, r1
    2490:	53 01       	movw	r10, r6
    2492:	13 c0       	rjmp	.+38     	; 0x24ba <vfprintf+0x154>
    2494:	28 01       	movw	r4, r16
    2496:	f2 e0       	ldi	r31, 0x02	; 2
    2498:	4f 0e       	add	r4, r31
    249a:	51 1c       	adc	r5, r1
    249c:	f8 01       	movw	r30, r16
    249e:	a0 80       	ld	r10, Z
    24a0:	b1 80       	ldd	r11, Z+1	; 0x01
    24a2:	36 fe       	sbrs	r3, 6
    24a4:	03 c0       	rjmp	.+6      	; 0x24ac <vfprintf+0x146>
    24a6:	69 2d       	mov	r22, r9
    24a8:	70 e0       	ldi	r23, 0x00	; 0
    24aa:	02 c0       	rjmp	.+4      	; 0x24b0 <vfprintf+0x14a>
    24ac:	6f ef       	ldi	r22, 0xFF	; 255
    24ae:	7f ef       	ldi	r23, 0xFF	; 255
    24b0:	c5 01       	movw	r24, r10
    24b2:	0e 94 9f 13 	call	0x273e	; 0x273e <strnlen>
    24b6:	4c 01       	movw	r8, r24
    24b8:	82 01       	movw	r16, r4
    24ba:	f3 2d       	mov	r31, r3
    24bc:	ff 77       	andi	r31, 0x7F	; 127
    24be:	3f 2e       	mov	r3, r31
    24c0:	16 c0       	rjmp	.+44     	; 0x24ee <vfprintf+0x188>
    24c2:	28 01       	movw	r4, r16
    24c4:	22 e0       	ldi	r18, 0x02	; 2
    24c6:	42 0e       	add	r4, r18
    24c8:	51 1c       	adc	r5, r1
    24ca:	f8 01       	movw	r30, r16
    24cc:	a0 80       	ld	r10, Z
    24ce:	b1 80       	ldd	r11, Z+1	; 0x01
    24d0:	36 fe       	sbrs	r3, 6
    24d2:	03 c0       	rjmp	.+6      	; 0x24da <vfprintf+0x174>
    24d4:	69 2d       	mov	r22, r9
    24d6:	70 e0       	ldi	r23, 0x00	; 0
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <vfprintf+0x178>
    24da:	6f ef       	ldi	r22, 0xFF	; 255
    24dc:	7f ef       	ldi	r23, 0xFF	; 255
    24de:	c5 01       	movw	r24, r10
    24e0:	0e 94 94 13 	call	0x2728	; 0x2728 <strnlen_P>
    24e4:	4c 01       	movw	r8, r24
    24e6:	f3 2d       	mov	r31, r3
    24e8:	f0 68       	ori	r31, 0x80	; 128
    24ea:	3f 2e       	mov	r3, r31
    24ec:	82 01       	movw	r16, r4
    24ee:	33 fc       	sbrc	r3, 3
    24f0:	1b c0       	rjmp	.+54     	; 0x2528 <vfprintf+0x1c2>
    24f2:	82 2d       	mov	r24, r2
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	88 16       	cp	r8, r24
    24f8:	99 06       	cpc	r9, r25
    24fa:	b0 f4       	brcc	.+44     	; 0x2528 <vfprintf+0x1c2>
    24fc:	b6 01       	movw	r22, r12
    24fe:	80 e2       	ldi	r24, 0x20	; 32
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	0e 94 aa 13 	call	0x2754	; 0x2754 <fputc>
    2506:	2a 94       	dec	r2
    2508:	f4 cf       	rjmp	.-24     	; 0x24f2 <vfprintf+0x18c>
    250a:	f5 01       	movw	r30, r10
    250c:	37 fc       	sbrc	r3, 7
    250e:	85 91       	lpm	r24, Z+
    2510:	37 fe       	sbrs	r3, 7
    2512:	81 91       	ld	r24, Z+
    2514:	5f 01       	movw	r10, r30
    2516:	b6 01       	movw	r22, r12
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	0e 94 aa 13 	call	0x2754	; 0x2754 <fputc>
    251e:	21 10       	cpse	r2, r1
    2520:	2a 94       	dec	r2
    2522:	21 e0       	ldi	r18, 0x01	; 1
    2524:	82 1a       	sub	r8, r18
    2526:	91 08       	sbc	r9, r1
    2528:	81 14       	cp	r8, r1
    252a:	91 04       	cpc	r9, r1
    252c:	71 f7       	brne	.-36     	; 0x250a <vfprintf+0x1a4>
    252e:	e8 c0       	rjmp	.+464    	; 0x2700 <vfprintf+0x39a>
    2530:	84 36       	cpi	r24, 0x64	; 100
    2532:	11 f0       	breq	.+4      	; 0x2538 <vfprintf+0x1d2>
    2534:	89 36       	cpi	r24, 0x69	; 105
    2536:	41 f5       	brne	.+80     	; 0x2588 <vfprintf+0x222>
    2538:	f8 01       	movw	r30, r16
    253a:	37 fe       	sbrs	r3, 7
    253c:	07 c0       	rjmp	.+14     	; 0x254c <vfprintf+0x1e6>
    253e:	60 81       	ld	r22, Z
    2540:	71 81       	ldd	r23, Z+1	; 0x01
    2542:	82 81       	ldd	r24, Z+2	; 0x02
    2544:	93 81       	ldd	r25, Z+3	; 0x03
    2546:	0c 5f       	subi	r16, 0xFC	; 252
    2548:	1f 4f       	sbci	r17, 0xFF	; 255
    254a:	08 c0       	rjmp	.+16     	; 0x255c <vfprintf+0x1f6>
    254c:	60 81       	ld	r22, Z
    254e:	71 81       	ldd	r23, Z+1	; 0x01
    2550:	07 2e       	mov	r0, r23
    2552:	00 0c       	add	r0, r0
    2554:	88 0b       	sbc	r24, r24
    2556:	99 0b       	sbc	r25, r25
    2558:	0e 5f       	subi	r16, 0xFE	; 254
    255a:	1f 4f       	sbci	r17, 0xFF	; 255
    255c:	f3 2d       	mov	r31, r3
    255e:	ff 76       	andi	r31, 0x6F	; 111
    2560:	3f 2e       	mov	r3, r31
    2562:	97 ff       	sbrs	r25, 7
    2564:	09 c0       	rjmp	.+18     	; 0x2578 <vfprintf+0x212>
    2566:	90 95       	com	r25
    2568:	80 95       	com	r24
    256a:	70 95       	com	r23
    256c:	61 95       	neg	r22
    256e:	7f 4f       	sbci	r23, 0xFF	; 255
    2570:	8f 4f       	sbci	r24, 0xFF	; 255
    2572:	9f 4f       	sbci	r25, 0xFF	; 255
    2574:	f0 68       	ori	r31, 0x80	; 128
    2576:	3f 2e       	mov	r3, r31
    2578:	2a e0       	ldi	r18, 0x0A	; 10
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	a3 01       	movw	r20, r6
    257e:	0e 94 e6 13 	call	0x27cc	; 0x27cc <__ultoa_invert>
    2582:	88 2e       	mov	r8, r24
    2584:	86 18       	sub	r8, r6
    2586:	45 c0       	rjmp	.+138    	; 0x2612 <vfprintf+0x2ac>
    2588:	85 37       	cpi	r24, 0x75	; 117
    258a:	31 f4       	brne	.+12     	; 0x2598 <vfprintf+0x232>
    258c:	23 2d       	mov	r18, r3
    258e:	2f 7e       	andi	r18, 0xEF	; 239
    2590:	b2 2e       	mov	r11, r18
    2592:	2a e0       	ldi	r18, 0x0A	; 10
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	25 c0       	rjmp	.+74     	; 0x25e2 <vfprintf+0x27c>
    2598:	93 2d       	mov	r25, r3
    259a:	99 7f       	andi	r25, 0xF9	; 249
    259c:	b9 2e       	mov	r11, r25
    259e:	8f 36       	cpi	r24, 0x6F	; 111
    25a0:	c1 f0       	breq	.+48     	; 0x25d2 <vfprintf+0x26c>
    25a2:	18 f4       	brcc	.+6      	; 0x25aa <vfprintf+0x244>
    25a4:	88 35       	cpi	r24, 0x58	; 88
    25a6:	79 f0       	breq	.+30     	; 0x25c6 <vfprintf+0x260>
    25a8:	b5 c0       	rjmp	.+362    	; 0x2714 <vfprintf+0x3ae>
    25aa:	80 37       	cpi	r24, 0x70	; 112
    25ac:	19 f0       	breq	.+6      	; 0x25b4 <vfprintf+0x24e>
    25ae:	88 37       	cpi	r24, 0x78	; 120
    25b0:	21 f0       	breq	.+8      	; 0x25ba <vfprintf+0x254>
    25b2:	b0 c0       	rjmp	.+352    	; 0x2714 <vfprintf+0x3ae>
    25b4:	e9 2f       	mov	r30, r25
    25b6:	e0 61       	ori	r30, 0x10	; 16
    25b8:	be 2e       	mov	r11, r30
    25ba:	b4 fe       	sbrs	r11, 4
    25bc:	0d c0       	rjmp	.+26     	; 0x25d8 <vfprintf+0x272>
    25be:	fb 2d       	mov	r31, r11
    25c0:	f4 60       	ori	r31, 0x04	; 4
    25c2:	bf 2e       	mov	r11, r31
    25c4:	09 c0       	rjmp	.+18     	; 0x25d8 <vfprintf+0x272>
    25c6:	34 fe       	sbrs	r3, 4
    25c8:	0a c0       	rjmp	.+20     	; 0x25de <vfprintf+0x278>
    25ca:	29 2f       	mov	r18, r25
    25cc:	26 60       	ori	r18, 0x06	; 6
    25ce:	b2 2e       	mov	r11, r18
    25d0:	06 c0       	rjmp	.+12     	; 0x25de <vfprintf+0x278>
    25d2:	28 e0       	ldi	r18, 0x08	; 8
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	05 c0       	rjmp	.+10     	; 0x25e2 <vfprintf+0x27c>
    25d8:	20 e1       	ldi	r18, 0x10	; 16
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	02 c0       	rjmp	.+4      	; 0x25e2 <vfprintf+0x27c>
    25de:	20 e1       	ldi	r18, 0x10	; 16
    25e0:	32 e0       	ldi	r19, 0x02	; 2
    25e2:	f8 01       	movw	r30, r16
    25e4:	b7 fe       	sbrs	r11, 7
    25e6:	07 c0       	rjmp	.+14     	; 0x25f6 <vfprintf+0x290>
    25e8:	60 81       	ld	r22, Z
    25ea:	71 81       	ldd	r23, Z+1	; 0x01
    25ec:	82 81       	ldd	r24, Z+2	; 0x02
    25ee:	93 81       	ldd	r25, Z+3	; 0x03
    25f0:	0c 5f       	subi	r16, 0xFC	; 252
    25f2:	1f 4f       	sbci	r17, 0xFF	; 255
    25f4:	06 c0       	rjmp	.+12     	; 0x2602 <vfprintf+0x29c>
    25f6:	60 81       	ld	r22, Z
    25f8:	71 81       	ldd	r23, Z+1	; 0x01
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	0e 5f       	subi	r16, 0xFE	; 254
    2600:	1f 4f       	sbci	r17, 0xFF	; 255
    2602:	a3 01       	movw	r20, r6
    2604:	0e 94 e6 13 	call	0x27cc	; 0x27cc <__ultoa_invert>
    2608:	88 2e       	mov	r8, r24
    260a:	86 18       	sub	r8, r6
    260c:	fb 2d       	mov	r31, r11
    260e:	ff 77       	andi	r31, 0x7F	; 127
    2610:	3f 2e       	mov	r3, r31
    2612:	36 fe       	sbrs	r3, 6
    2614:	0d c0       	rjmp	.+26     	; 0x2630 <vfprintf+0x2ca>
    2616:	23 2d       	mov	r18, r3
    2618:	2e 7f       	andi	r18, 0xFE	; 254
    261a:	a2 2e       	mov	r10, r18
    261c:	89 14       	cp	r8, r9
    261e:	58 f4       	brcc	.+22     	; 0x2636 <vfprintf+0x2d0>
    2620:	34 fe       	sbrs	r3, 4
    2622:	0b c0       	rjmp	.+22     	; 0x263a <vfprintf+0x2d4>
    2624:	32 fc       	sbrc	r3, 2
    2626:	09 c0       	rjmp	.+18     	; 0x263a <vfprintf+0x2d4>
    2628:	83 2d       	mov	r24, r3
    262a:	8e 7e       	andi	r24, 0xEE	; 238
    262c:	a8 2e       	mov	r10, r24
    262e:	05 c0       	rjmp	.+10     	; 0x263a <vfprintf+0x2d4>
    2630:	b8 2c       	mov	r11, r8
    2632:	a3 2c       	mov	r10, r3
    2634:	03 c0       	rjmp	.+6      	; 0x263c <vfprintf+0x2d6>
    2636:	b8 2c       	mov	r11, r8
    2638:	01 c0       	rjmp	.+2      	; 0x263c <vfprintf+0x2d6>
    263a:	b9 2c       	mov	r11, r9
    263c:	a4 fe       	sbrs	r10, 4
    263e:	0f c0       	rjmp	.+30     	; 0x265e <vfprintf+0x2f8>
    2640:	fe 01       	movw	r30, r28
    2642:	e8 0d       	add	r30, r8
    2644:	f1 1d       	adc	r31, r1
    2646:	80 81       	ld	r24, Z
    2648:	80 33       	cpi	r24, 0x30	; 48
    264a:	21 f4       	brne	.+8      	; 0x2654 <vfprintf+0x2ee>
    264c:	9a 2d       	mov	r25, r10
    264e:	99 7e       	andi	r25, 0xE9	; 233
    2650:	a9 2e       	mov	r10, r25
    2652:	09 c0       	rjmp	.+18     	; 0x2666 <vfprintf+0x300>
    2654:	a2 fe       	sbrs	r10, 2
    2656:	06 c0       	rjmp	.+12     	; 0x2664 <vfprintf+0x2fe>
    2658:	b3 94       	inc	r11
    265a:	b3 94       	inc	r11
    265c:	04 c0       	rjmp	.+8      	; 0x2666 <vfprintf+0x300>
    265e:	8a 2d       	mov	r24, r10
    2660:	86 78       	andi	r24, 0x86	; 134
    2662:	09 f0       	breq	.+2      	; 0x2666 <vfprintf+0x300>
    2664:	b3 94       	inc	r11
    2666:	a3 fc       	sbrc	r10, 3
    2668:	11 c0       	rjmp	.+34     	; 0x268c <vfprintf+0x326>
    266a:	a0 fe       	sbrs	r10, 0
    266c:	06 c0       	rjmp	.+12     	; 0x267a <vfprintf+0x314>
    266e:	b2 14       	cp	r11, r2
    2670:	88 f4       	brcc	.+34     	; 0x2694 <vfprintf+0x32e>
    2672:	28 0c       	add	r2, r8
    2674:	92 2c       	mov	r9, r2
    2676:	9b 18       	sub	r9, r11
    2678:	0e c0       	rjmp	.+28     	; 0x2696 <vfprintf+0x330>
    267a:	b2 14       	cp	r11, r2
    267c:	60 f4       	brcc	.+24     	; 0x2696 <vfprintf+0x330>
    267e:	b6 01       	movw	r22, r12
    2680:	80 e2       	ldi	r24, 0x20	; 32
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	0e 94 aa 13 	call	0x2754	; 0x2754 <fputc>
    2688:	b3 94       	inc	r11
    268a:	f7 cf       	rjmp	.-18     	; 0x267a <vfprintf+0x314>
    268c:	b2 14       	cp	r11, r2
    268e:	18 f4       	brcc	.+6      	; 0x2696 <vfprintf+0x330>
    2690:	2b 18       	sub	r2, r11
    2692:	02 c0       	rjmp	.+4      	; 0x2698 <vfprintf+0x332>
    2694:	98 2c       	mov	r9, r8
    2696:	21 2c       	mov	r2, r1
    2698:	a4 fe       	sbrs	r10, 4
    269a:	10 c0       	rjmp	.+32     	; 0x26bc <vfprintf+0x356>
    269c:	b6 01       	movw	r22, r12
    269e:	80 e3       	ldi	r24, 0x30	; 48
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	0e 94 aa 13 	call	0x2754	; 0x2754 <fputc>
    26a6:	a2 fe       	sbrs	r10, 2
    26a8:	17 c0       	rjmp	.+46     	; 0x26d8 <vfprintf+0x372>
    26aa:	a1 fc       	sbrc	r10, 1
    26ac:	03 c0       	rjmp	.+6      	; 0x26b4 <vfprintf+0x34e>
    26ae:	88 e7       	ldi	r24, 0x78	; 120
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	02 c0       	rjmp	.+4      	; 0x26b8 <vfprintf+0x352>
    26b4:	88 e5       	ldi	r24, 0x58	; 88
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	b6 01       	movw	r22, r12
    26ba:	0c c0       	rjmp	.+24     	; 0x26d4 <vfprintf+0x36e>
    26bc:	8a 2d       	mov	r24, r10
    26be:	86 78       	andi	r24, 0x86	; 134
    26c0:	59 f0       	breq	.+22     	; 0x26d8 <vfprintf+0x372>
    26c2:	a1 fe       	sbrs	r10, 1
    26c4:	02 c0       	rjmp	.+4      	; 0x26ca <vfprintf+0x364>
    26c6:	8b e2       	ldi	r24, 0x2B	; 43
    26c8:	01 c0       	rjmp	.+2      	; 0x26cc <vfprintf+0x366>
    26ca:	80 e2       	ldi	r24, 0x20	; 32
    26cc:	a7 fc       	sbrc	r10, 7
    26ce:	8d e2       	ldi	r24, 0x2D	; 45
    26d0:	b6 01       	movw	r22, r12
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	0e 94 aa 13 	call	0x2754	; 0x2754 <fputc>
    26d8:	89 14       	cp	r8, r9
    26da:	38 f4       	brcc	.+14     	; 0x26ea <vfprintf+0x384>
    26dc:	b6 01       	movw	r22, r12
    26de:	80 e3       	ldi	r24, 0x30	; 48
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	0e 94 aa 13 	call	0x2754	; 0x2754 <fputc>
    26e6:	9a 94       	dec	r9
    26e8:	f7 cf       	rjmp	.-18     	; 0x26d8 <vfprintf+0x372>
    26ea:	8a 94       	dec	r8
    26ec:	f3 01       	movw	r30, r6
    26ee:	e8 0d       	add	r30, r8
    26f0:	f1 1d       	adc	r31, r1
    26f2:	80 81       	ld	r24, Z
    26f4:	b6 01       	movw	r22, r12
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	0e 94 aa 13 	call	0x2754	; 0x2754 <fputc>
    26fc:	81 10       	cpse	r8, r1
    26fe:	f5 cf       	rjmp	.-22     	; 0x26ea <vfprintf+0x384>
    2700:	22 20       	and	r2, r2
    2702:	09 f4       	brne	.+2      	; 0x2706 <vfprintf+0x3a0>
    2704:	42 ce       	rjmp	.-892    	; 0x238a <vfprintf+0x24>
    2706:	b6 01       	movw	r22, r12
    2708:	80 e2       	ldi	r24, 0x20	; 32
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	0e 94 aa 13 	call	0x2754	; 0x2754 <fputc>
    2710:	2a 94       	dec	r2
    2712:	f6 cf       	rjmp	.-20     	; 0x2700 <vfprintf+0x39a>
    2714:	f6 01       	movw	r30, r12
    2716:	86 81       	ldd	r24, Z+6	; 0x06
    2718:	97 81       	ldd	r25, Z+7	; 0x07
    271a:	02 c0       	rjmp	.+4      	; 0x2720 <vfprintf+0x3ba>
    271c:	8f ef       	ldi	r24, 0xFF	; 255
    271e:	9f ef       	ldi	r25, 0xFF	; 255
    2720:	2b 96       	adiw	r28, 0x0b	; 11
    2722:	e2 e1       	ldi	r30, 0x12	; 18
    2724:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__epilogue_restores__>

00002728 <strnlen_P>:
    2728:	fc 01       	movw	r30, r24
    272a:	05 90       	lpm	r0, Z+
    272c:	61 50       	subi	r22, 0x01	; 1
    272e:	70 40       	sbci	r23, 0x00	; 0
    2730:	01 10       	cpse	r0, r1
    2732:	d8 f7       	brcc	.-10     	; 0x272a <strnlen_P+0x2>
    2734:	80 95       	com	r24
    2736:	90 95       	com	r25
    2738:	8e 0f       	add	r24, r30
    273a:	9f 1f       	adc	r25, r31
    273c:	08 95       	ret

0000273e <strnlen>:
    273e:	fc 01       	movw	r30, r24
    2740:	61 50       	subi	r22, 0x01	; 1
    2742:	70 40       	sbci	r23, 0x00	; 0
    2744:	01 90       	ld	r0, Z+
    2746:	01 10       	cpse	r0, r1
    2748:	d8 f7       	brcc	.-10     	; 0x2740 <strnlen+0x2>
    274a:	80 95       	com	r24
    274c:	90 95       	com	r25
    274e:	8e 0f       	add	r24, r30
    2750:	9f 1f       	adc	r25, r31
    2752:	08 95       	ret

00002754 <fputc>:
    2754:	0f 93       	push	r16
    2756:	1f 93       	push	r17
    2758:	cf 93       	push	r28
    275a:	df 93       	push	r29
    275c:	fb 01       	movw	r30, r22
    275e:	23 81       	ldd	r18, Z+3	; 0x03
    2760:	21 fd       	sbrc	r18, 1
    2762:	03 c0       	rjmp	.+6      	; 0x276a <fputc+0x16>
    2764:	8f ef       	ldi	r24, 0xFF	; 255
    2766:	9f ef       	ldi	r25, 0xFF	; 255
    2768:	2c c0       	rjmp	.+88     	; 0x27c2 <fputc+0x6e>
    276a:	22 ff       	sbrs	r18, 2
    276c:	16 c0       	rjmp	.+44     	; 0x279a <fputc+0x46>
    276e:	46 81       	ldd	r20, Z+6	; 0x06
    2770:	57 81       	ldd	r21, Z+7	; 0x07
    2772:	24 81       	ldd	r18, Z+4	; 0x04
    2774:	35 81       	ldd	r19, Z+5	; 0x05
    2776:	42 17       	cp	r20, r18
    2778:	53 07       	cpc	r21, r19
    277a:	44 f4       	brge	.+16     	; 0x278c <fputc+0x38>
    277c:	a0 81       	ld	r26, Z
    277e:	b1 81       	ldd	r27, Z+1	; 0x01
    2780:	9d 01       	movw	r18, r26
    2782:	2f 5f       	subi	r18, 0xFF	; 255
    2784:	3f 4f       	sbci	r19, 0xFF	; 255
    2786:	20 83       	st	Z, r18
    2788:	31 83       	std	Z+1, r19	; 0x01
    278a:	8c 93       	st	X, r24
    278c:	26 81       	ldd	r18, Z+6	; 0x06
    278e:	37 81       	ldd	r19, Z+7	; 0x07
    2790:	2f 5f       	subi	r18, 0xFF	; 255
    2792:	3f 4f       	sbci	r19, 0xFF	; 255
    2794:	26 83       	std	Z+6, r18	; 0x06
    2796:	37 83       	std	Z+7, r19	; 0x07
    2798:	14 c0       	rjmp	.+40     	; 0x27c2 <fputc+0x6e>
    279a:	8b 01       	movw	r16, r22
    279c:	ec 01       	movw	r28, r24
    279e:	fb 01       	movw	r30, r22
    27a0:	00 84       	ldd	r0, Z+8	; 0x08
    27a2:	f1 85       	ldd	r31, Z+9	; 0x09
    27a4:	e0 2d       	mov	r30, r0
    27a6:	09 95       	icall
    27a8:	89 2b       	or	r24, r25
    27aa:	e1 f6       	brne	.-72     	; 0x2764 <fputc+0x10>
    27ac:	d8 01       	movw	r26, r16
    27ae:	16 96       	adiw	r26, 0x06	; 6
    27b0:	8d 91       	ld	r24, X+
    27b2:	9c 91       	ld	r25, X
    27b4:	17 97       	sbiw	r26, 0x07	; 7
    27b6:	01 96       	adiw	r24, 0x01	; 1
    27b8:	16 96       	adiw	r26, 0x06	; 6
    27ba:	8d 93       	st	X+, r24
    27bc:	9c 93       	st	X, r25
    27be:	17 97       	sbiw	r26, 0x07	; 7
    27c0:	ce 01       	movw	r24, r28
    27c2:	df 91       	pop	r29
    27c4:	cf 91       	pop	r28
    27c6:	1f 91       	pop	r17
    27c8:	0f 91       	pop	r16
    27ca:	08 95       	ret

000027cc <__ultoa_invert>:
    27cc:	fa 01       	movw	r30, r20
    27ce:	aa 27       	eor	r26, r26
    27d0:	28 30       	cpi	r18, 0x08	; 8
    27d2:	51 f1       	breq	.+84     	; 0x2828 <__ultoa_invert+0x5c>
    27d4:	20 31       	cpi	r18, 0x10	; 16
    27d6:	81 f1       	breq	.+96     	; 0x2838 <__ultoa_invert+0x6c>
    27d8:	e8 94       	clt
    27da:	6f 93       	push	r22
    27dc:	6e 7f       	andi	r22, 0xFE	; 254
    27de:	6e 5f       	subi	r22, 0xFE	; 254
    27e0:	7f 4f       	sbci	r23, 0xFF	; 255
    27e2:	8f 4f       	sbci	r24, 0xFF	; 255
    27e4:	9f 4f       	sbci	r25, 0xFF	; 255
    27e6:	af 4f       	sbci	r26, 0xFF	; 255
    27e8:	b1 e0       	ldi	r27, 0x01	; 1
    27ea:	3e d0       	rcall	.+124    	; 0x2868 <__ultoa_invert+0x9c>
    27ec:	b4 e0       	ldi	r27, 0x04	; 4
    27ee:	3c d0       	rcall	.+120    	; 0x2868 <__ultoa_invert+0x9c>
    27f0:	67 0f       	add	r22, r23
    27f2:	78 1f       	adc	r23, r24
    27f4:	89 1f       	adc	r24, r25
    27f6:	9a 1f       	adc	r25, r26
    27f8:	a1 1d       	adc	r26, r1
    27fa:	68 0f       	add	r22, r24
    27fc:	79 1f       	adc	r23, r25
    27fe:	8a 1f       	adc	r24, r26
    2800:	91 1d       	adc	r25, r1
    2802:	a1 1d       	adc	r26, r1
    2804:	6a 0f       	add	r22, r26
    2806:	71 1d       	adc	r23, r1
    2808:	81 1d       	adc	r24, r1
    280a:	91 1d       	adc	r25, r1
    280c:	a1 1d       	adc	r26, r1
    280e:	20 d0       	rcall	.+64     	; 0x2850 <__ultoa_invert+0x84>
    2810:	09 f4       	brne	.+2      	; 0x2814 <__ultoa_invert+0x48>
    2812:	68 94       	set
    2814:	3f 91       	pop	r19
    2816:	2a e0       	ldi	r18, 0x0A	; 10
    2818:	26 9f       	mul	r18, r22
    281a:	11 24       	eor	r1, r1
    281c:	30 19       	sub	r19, r0
    281e:	30 5d       	subi	r19, 0xD0	; 208
    2820:	31 93       	st	Z+, r19
    2822:	de f6       	brtc	.-74     	; 0x27da <__ultoa_invert+0xe>
    2824:	cf 01       	movw	r24, r30
    2826:	08 95       	ret
    2828:	46 2f       	mov	r20, r22
    282a:	47 70       	andi	r20, 0x07	; 7
    282c:	40 5d       	subi	r20, 0xD0	; 208
    282e:	41 93       	st	Z+, r20
    2830:	b3 e0       	ldi	r27, 0x03	; 3
    2832:	0f d0       	rcall	.+30     	; 0x2852 <__ultoa_invert+0x86>
    2834:	c9 f7       	brne	.-14     	; 0x2828 <__ultoa_invert+0x5c>
    2836:	f6 cf       	rjmp	.-20     	; 0x2824 <__ultoa_invert+0x58>
    2838:	46 2f       	mov	r20, r22
    283a:	4f 70       	andi	r20, 0x0F	; 15
    283c:	40 5d       	subi	r20, 0xD0	; 208
    283e:	4a 33       	cpi	r20, 0x3A	; 58
    2840:	18 f0       	brcs	.+6      	; 0x2848 <__ultoa_invert+0x7c>
    2842:	49 5d       	subi	r20, 0xD9	; 217
    2844:	31 fd       	sbrc	r19, 1
    2846:	40 52       	subi	r20, 0x20	; 32
    2848:	41 93       	st	Z+, r20
    284a:	02 d0       	rcall	.+4      	; 0x2850 <__ultoa_invert+0x84>
    284c:	a9 f7       	brne	.-22     	; 0x2838 <__ultoa_invert+0x6c>
    284e:	ea cf       	rjmp	.-44     	; 0x2824 <__ultoa_invert+0x58>
    2850:	b4 e0       	ldi	r27, 0x04	; 4
    2852:	a6 95       	lsr	r26
    2854:	97 95       	ror	r25
    2856:	87 95       	ror	r24
    2858:	77 95       	ror	r23
    285a:	67 95       	ror	r22
    285c:	ba 95       	dec	r27
    285e:	c9 f7       	brne	.-14     	; 0x2852 <__ultoa_invert+0x86>
    2860:	00 97       	sbiw	r24, 0x00	; 0
    2862:	61 05       	cpc	r22, r1
    2864:	71 05       	cpc	r23, r1
    2866:	08 95       	ret
    2868:	9b 01       	movw	r18, r22
    286a:	ac 01       	movw	r20, r24
    286c:	0a 2e       	mov	r0, r26
    286e:	06 94       	lsr	r0
    2870:	57 95       	ror	r21
    2872:	47 95       	ror	r20
    2874:	37 95       	ror	r19
    2876:	27 95       	ror	r18
    2878:	ba 95       	dec	r27
    287a:	c9 f7       	brne	.-14     	; 0x286e <__ultoa_invert+0xa2>
    287c:	62 0f       	add	r22, r18
    287e:	73 1f       	adc	r23, r19
    2880:	84 1f       	adc	r24, r20
    2882:	95 1f       	adc	r25, r21
    2884:	a0 1d       	adc	r26, r0
    2886:	08 95       	ret

00002888 <eeprom_read_word>:
    2888:	0e 94 53 14 	call	0x28a6	; 0x28a6 <eeprom_mapen>
    288c:	80 81       	ld	r24, Z
    288e:	91 81       	ldd	r25, Z+1	; 0x01
    2890:	08 95       	ret

00002892 <eeprom_update_word>:
    2892:	01 96       	adiw	r24, 0x01	; 1
    2894:	27 2f       	mov	r18, r23
    2896:	0e 94 58 14 	call	0x28b0	; 0x28b0 <eeprom_update_r18>
    289a:	0c 94 57 14 	jmp	0x28ae	; 0x28ae <eeprom_update_byte>

0000289e <eeprom_read_byte>:
    289e:	03 d0       	rcall	.+6      	; 0x28a6 <eeprom_mapen>
    28a0:	80 81       	ld	r24, Z
    28a2:	99 27       	eor	r25, r25
    28a4:	08 95       	ret

000028a6 <eeprom_mapen>:
    28a6:	fc 01       	movw	r30, r24
    28a8:	e0 50       	subi	r30, 0x00	; 0
    28aa:	fc 4e       	sbci	r31, 0xEC	; 236
    28ac:	08 95       	ret

000028ae <eeprom_update_byte>:
    28ae:	26 2f       	mov	r18, r22

000028b0 <eeprom_update_r18>:
    28b0:	0e 94 53 14 	call	0x28a6	; 0x28a6 <eeprom_mapen>
    28b4:	00 80       	ld	r0, Z
    28b6:	02 16       	cp	r0, r18
    28b8:	19 f0       	breq	.+6      	; 0x28c0 <eeprom_update_r18+0x10>
    28ba:	0e 94 63 14 	call	0x28c6	; 0x28c6 <eeprom_write_r18>
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	08 95       	ret

000028c4 <eeprom_write_byte>:
    28c4:	26 2f       	mov	r18, r22

000028c6 <eeprom_write_r18>:
    28c6:	af 93       	push	r26
    28c8:	bf 93       	push	r27
    28ca:	e0 e0       	ldi	r30, 0x00	; 0
    28cc:	f0 e1       	ldi	r31, 0x10	; 16
    28ce:	32 81       	ldd	r19, Z+2	; 0x02
    28d0:	31 fd       	sbrc	r19, 1
    28d2:	fd cf       	rjmp	.-6      	; 0x28ce <eeprom_write_r18+0x8>
    28d4:	dc 01       	movw	r26, r24
    28d6:	a0 50       	subi	r26, 0x00	; 0
    28d8:	bc 4e       	sbci	r27, 0xEC	; 236
    28da:	2c 93       	st	X, r18
    28dc:	2d e9       	ldi	r18, 0x9D	; 157
    28de:	24 bf       	out	0x34, r18	; 52
    28e0:	23 e0       	ldi	r18, 0x03	; 3
    28e2:	20 83       	st	Z, r18
    28e4:	01 96       	adiw	r24, 0x01	; 1
    28e6:	bf 91       	pop	r27
    28e8:	af 91       	pop	r26
    28ea:	08 95       	ret

000028ec <__prologue_saves__>:
    28ec:	2f 92       	push	r2
    28ee:	3f 92       	push	r3
    28f0:	4f 92       	push	r4
    28f2:	5f 92       	push	r5
    28f4:	6f 92       	push	r6
    28f6:	7f 92       	push	r7
    28f8:	8f 92       	push	r8
    28fa:	9f 92       	push	r9
    28fc:	af 92       	push	r10
    28fe:	bf 92       	push	r11
    2900:	cf 92       	push	r12
    2902:	df 92       	push	r13
    2904:	ef 92       	push	r14
    2906:	ff 92       	push	r15
    2908:	0f 93       	push	r16
    290a:	1f 93       	push	r17
    290c:	cf 93       	push	r28
    290e:	df 93       	push	r29
    2910:	cd b7       	in	r28, 0x3d	; 61
    2912:	de b7       	in	r29, 0x3e	; 62
    2914:	ca 1b       	sub	r28, r26
    2916:	db 0b       	sbc	r29, r27
    2918:	cd bf       	out	0x3d, r28	; 61
    291a:	de bf       	out	0x3e, r29	; 62
    291c:	09 94       	ijmp

0000291e <__epilogue_restores__>:
    291e:	2a 88       	ldd	r2, Y+18	; 0x12
    2920:	39 88       	ldd	r3, Y+17	; 0x11
    2922:	48 88       	ldd	r4, Y+16	; 0x10
    2924:	5f 84       	ldd	r5, Y+15	; 0x0f
    2926:	6e 84       	ldd	r6, Y+14	; 0x0e
    2928:	7d 84       	ldd	r7, Y+13	; 0x0d
    292a:	8c 84       	ldd	r8, Y+12	; 0x0c
    292c:	9b 84       	ldd	r9, Y+11	; 0x0b
    292e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2930:	b9 84       	ldd	r11, Y+9	; 0x09
    2932:	c8 84       	ldd	r12, Y+8	; 0x08
    2934:	df 80       	ldd	r13, Y+7	; 0x07
    2936:	ee 80       	ldd	r14, Y+6	; 0x06
    2938:	fd 80       	ldd	r15, Y+5	; 0x05
    293a:	0c 81       	ldd	r16, Y+4	; 0x04
    293c:	1b 81       	ldd	r17, Y+3	; 0x03
    293e:	aa 81       	ldd	r26, Y+2	; 0x02
    2940:	b9 81       	ldd	r27, Y+1	; 0x01
    2942:	ce 0f       	add	r28, r30
    2944:	d1 1d       	adc	r29, r1
    2946:	cd bf       	out	0x3d, r28	; 61
    2948:	de bf       	out	0x3e, r29	; 62
    294a:	ed 01       	movw	r28, r26
    294c:	08 95       	ret

0000294e <_exit>:
    294e:	f8 94       	cli

00002950 <__stop_program>:
    2950:	ff cf       	rjmp	.-2      	; 0x2950 <__stop_program>
